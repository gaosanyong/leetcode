"""This file is a minimal colleciton of solutions to leetcode problems in 
Python3. No algorithm or reasoning is provided for the sake of saving spaces. 
For more details, the readers are suggested to explore on their own effort.
"""

from functools import cache, lru_cache, reduce
from hashlib import sha256
from heapq import heapify, heappop, heappush
from itertools import groupby, zip_longest
from math import ceil, inf, sqrt
from operator import gt, lt, or_, xor
from sortedcontainers import SortedDict, SortedList
from threading import Lock, Semaphore


class Solution:

	"""1. Two Sum (Easy)
	Given an array of integers, return indices of the two numbers such that 
	they add up to a specific target. You may assume that each input would have 
	exactly one solution, and you may not use the same element twice.

	Example:
	Given nums = [2, 7, 11, 15], target = 9,
	Because nums[0] + nums[1] = 2 + 7 = 9,
	return [0, 1]."""

    def twoSum(self, nums: List[int], target: int) -> List[int]:
        seen = {}
        for i, x in enumerate(nums): 
            if target - x in seen: return [seen[target-x], i]
            seen[x] = i


    """2. Add Two Numbers (Medium)
	You are given two non-empty linked lists representing two non-negative 
	integers. The digits are stored in reverse order and each of their nodes 
	contain a single digit. Add the two numbers and return it as a linked list. 
	You may assume the two numbers do not contain any leading zero, except the 
	number 0 itself.

	Example:
	Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
	Output: 7 -> 0 -> 8
	Explanation: 342 + 465 = 807."""

    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = node = ListNode()
        carry = 0
        while l1 or l2 or carry: 
            if l1: 
                carry += l1.val
                l1 = l1.next
            if l2: 
                carry += l2.val 
                l2 = l2.next 
            node.next = node = ListNode(carry%10)
            carry //= 10 
        return dummy.next 


    """3. Longest Substring Without Repeating Characters (Medium)
	Given a string, find the length of the longest substring without repeating 
	characters.

	Example 1:
	Input: "abcabcbb"
	Output: 3 
	Explanation: The answer is "abc", with the length of 3. 

	Example 2:
	Input: "bbbbb"
	Output: 1
	Explanation: The answer is "b", with the length of 1.

	Example 3:
	Input: "pwwkew"
	Output: 3
	Explanation: The answer is "wke", with the length of 3. 
	Note that the answer must be a substring, "pwke" is a subsequence and not a 
	substring."""

    def lengthOfLongestSubstring(self, s: str) -> int:
        ans = ii = 0
        loc = {}
        for i, x in enumerate(s): 
            if x in loc: ii = max(ii, loc[x]+1)
            ans = max(ans, i - ii + 1)
            loc[x] = i
        return ans 


    """4. Median of Two Sorted Arrays (Hard)
	There are two sorted arrays nums1 and nums2 of size m and n respectively. 
	Find the median of the two sorted arrays. The overall run time complexity 
	should be O(log (m+n)). You may assume nums1 and nums2 cannot be both empty.

	Example 1:
	nums1 = [1, 3], nums2 = [2]
	The median is 2.0

	Example 2:
	nums1 = [1, 2], nums2 = [3, 4]
	The median is (2 + 3)/2 = 2.5"""

    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1
        m, n = len(nums1), len(nums2)
        lo, hi = 0, m
        
        while lo <= hi: 
            mid = (lo + hi)//2
            k = (m+n)//2 - mid 
            if mid > 0 and nums1[mid-1] > nums2[k]: hi = mid
            elif mid < m and nums1[mid] < nums2[k-1]: lo = mid+1
            else: 
                if mid == m: right = nums2[k]
                elif k == n: right = nums1[mid]
                else: right = min(nums1[mid], nums2[k])
                
                if (m+n)%2: return right
                
                if mid == 0: left = nums2[k-1]
                elif k == 0: left = nums1[mid-1]
                else: left = max(nums1[mid-1], nums2[k-1])
                
                return (left + right)/2


    """5. Longest Palindromic Substring (Medium)
	Given a string s, find the longest palindromic substring in s. You may 
	assume that the maximum length of s is 1000.

	Example 1:
	Input: "babad"
	Output: "bab"
	Note: "aba" is also a valid answer.

	Example 2:
	Input: "cbbd"
	Output: "bb"""

    def longestPalindrome(self, s: str) -> str:               
        """Manacher's algo"""
        ss = "#" + "#".join(s) + "#" # augmented string (even-length palindromes)
        n = len(ss)
        hlen = [0] * n # half-length
        center = right = 0
        for i in range(n):
            if i < right: hlen[i] = min(right-i, hlen[2*center-i])
            while 0 <= i-1-hlen[i] and i+1+hlen[i] < len(ss) and ss[i-1-hlen[i]] == ss[i+1+hlen[i]]: hlen[i] += 1
            if right < i+hlen[i]: center, right = i, i+hlen[i]
        xx, ii = max((x, i) for i, x in enumerate(hlen))
        return s[(ii-xx)//2 : (ii+xx)//2]


	"""6. ZigZag Conversion (Medium)
	The string "PAYPALISHIRING" is written in a zigzag pattern on a given 
	number of rows like this: (you may want to display this pattern in a fixed 
	font for better legibility)

	P   A   H   N
	A P L S I I G
	Y   I   R
	And then read line by line: "PAHNAPLSIIGYIR"

	Write the code that will take a string and make this conversion given a 
	number of rows:

	string convert(string s, int numRows);

	Example 1:
	Input: s = "PAYPALISHIRING", numRows = 3
	Output: "PAHNAPLSIIGYIR"

	Example 2:
	Input: s = "PAYPALISHIRING", numRows = 4
	Output: "PINALSIGYAHRPI"

	Explanation:

	P     I    N
	A   L S  I G
	Y A   H R
	P     I"""

    def convert(self, s: str, numRows: int) -> str:
        if numRows == 1: return s #edge case 
        ans = [[] for _ in range(numRows)]
        i, di = 0, 1
        for c in s: 
            ans[i].append(c)
            i += di
            if i == 0 or i == numRows-1: di *= -1
        return "".join("".join(x) for x in ans)


	"""7. Reverse Integer (Easy)
	Given a 32-bit signed integer, reverse digits of an integer.

	Example 1:
	Input: 123
	Output: 321

	Example 2:
	Input: -123
	Output: -321

	Example 3:
	Input: 120
	Output: 21

	Note:
	Assume we are dealing with an environment which could only store integers 
	within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose 
	of this problem, assume that your function returns 0 when the reversed 
	integer overflows."""

    def reverse(self, x: int) -> int:
        x = ((x>0) - (x<0)) * int(str(abs(x))[::-1])
        return x if x.bit_length() < 32 else 0


    """8. String to Integer (atoi) (Medium)
	Implement atoi which converts a string to an integer. The function first 
	discards as many whitespace characters as necessary until the first non-
	whitespace character is found. Then, starting from this character, takes 
	an optional initial plus or minus sign followed by as many numerical digits 
	as possible, and interprets them as a numerical value. The string can 
	contain additional characters after those that form the integral number, 
	which are ignored and have no effect on the behavior of this function. If 
	the first sequence of non-whitespace characters in str is not a valid 
	integral number, or if no such sequence exists because either str is empty 
	or it contains only whitespace characters, no conversion is performed. If 
	no valid conversion could be performed, a zero value is returned.

	Note:

	Only the space character ' ' is considered as whitespace character.
	Assume we are dealing with an environment which could only store integers 
	within the 32-bit signed integer range: [−2^31,  2^31 − 1]. If the numerical 
	value is out of the range of representable values, INT_MAX (231 − 1) or 
	INT_MIN (−231) is returned.

	Example 1:
	Input: "42"
	Output: 42

	Example 2:
	Input: "   -42"
	Output: -42
	Explanation: The first non-whitespace character is '-', which is the minus sign.
	             Then take as many numerical digits as possible, which gets 42.

	Example 3:
	Input: "4193 with words"
	Output: 4193
	Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.

	Example 4:
	Input: "words and 987"
	Output: 0
	Explanation: The first non-whitespace character is 'w', which is not a numerical 
	             digit or a +/- sign. Therefore no valid conversion could be performed.

	Example 5:
	Input: "-91283472332"
	Output: -2147483648
	Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer.
	Thefore INT_MIN (−231) is returned."""

    def myAtoi(self, s: str) -> int:
        ii = -1 
        for i in range(len(s)): 
            if ii == -1: 
                if s[i] in "+-" or s[i].isdigit(): ii = i 
                elif not s[i].isspace(): return 0
            elif not s[i].isdigit(): break 
        else: i = len(s)
        
        ans = 0 
        if 0 <= ii and (ii+1 < i or s[ii].isdigit()): ans = int(s[ii:i])
        return max(-(1<<31), min((1<<31)-1, ans))


	"""9. Palindrome Number (Easy)
	Determine whether an integer is a palindrome. An integer is a palindrome 
	when it reads the same backward as forward.

	Example 1:
	Input: 121
	Output: true

	Example 2:
	Input: -121
	Output: false
	Explanation: From left to right, it reads -121. From right to left, it 
	becomes 121-. Therefore it is not a palindrome.

	Example 3:
	Input: 10
	Output: false
	Explanation: Reads 01 from right to left. Therefore it is not a palindrome.

	Follow up: Coud you solve it without converting the integer to a string?"""

    def isPalindrome(self, x: int) -> bool:
        if x < 0 or x % 10 == 0 and x != 0: return False 
        y = 0
        while x > y: 
            y = 10*y + x % 10
            x //= 10
        return x == y or x == y//10 


    """10. Regular Expression Matching (Hard)
	Given an input string (s) and a pattern (p), implement regular expression 
	matching with support for '.' and '*'.

	'.' Matches any single character.
	'*' Matches zero or more of the preceding element.
	The matching should cover the entire input string (not partial).

	Note:
	s could be empty and contains only lowercase letters a-z.
	p could be empty and contains only lowercase letters a-z, and characters like . or *.

	Example 1:
	Input:
	s = "aa"
	p = "a"
	Output: false

	Example 2:
	Input:
	s = "aa"
	p = "a*"
	Output: true

	Example 3:
	Input:
	s = "ab"
	p = ".*"
	Output: true

	Example 4:
	Input:
	s = "aab"
	p = "c*a*b"
	Output: true

	Example 5:
	Input:
	s = "mississippi"
	p = "mis*is*p*."
	Output: false"""

    def isMatch(self, s: str, p: str) -> bool:
        
        @cache
        def fn(i, j): 
            """Return True if s[i:] matches p[j:]"""
            if j == len(p): return i == len(s)
            match = i < len(s) and (s[i] == p[j] or p[j] == ".")
            if j+1 < len(p) and p[j+1] == "*": 
                return fn(i, j+2) or match and fn(i+1, j)
            else: 
                return match and fn(i+1, j+1)
            
        return fn(0, 0)



    """11. Container With Most Water (Medium)
	Given n non-negative integers a1, a2, ..., an , where each represents a 
	point at coordinate (i, ai). n vertical lines are drawn such that the two 
	endpoints of line i is at (i, ai) and (i, 0). Find two lines, which 
	together with x-axis forms a container, such that the container contains 
	the most water.

	Note: You may not slant the container and n is at least 2.

	Example:
	Input: [1,8,6,2,5,4,8,3,7]
	Output: 49"""

    def maxArea(self, height: List[int]) -> int:
        ans = 0
        lo, hi = 0, len(height)-1
        while lo < hi: 
            ans = max(ans, (hi-lo)*min(height[lo], height[hi]))
            if height[lo] < height[hi]: lo += 1
            else: hi -= 1
        return ans 



    """12. Integer to Roman (Medium)
	Roman numerals are represented by seven different symbols: I, V, X, L, C, D 
	and M.

	Symbol       Value
	I             1
	V             5
	X             10
	L             50
	C             100
	D             500
	M             1000
	For example, two is written as II in Roman numeral, just two one's added 
	together. Twelve is written as, XII, which is simply X + II. The number 
	twenty seven is written as XXVII, which is XX + V + II.

	Roman numerals are usually written largest to smallest from left to right. 
	However, the numeral for four is not IIII. Instead, the number four is 
	written as IV. Because the one is before the five we subtract it making 
	four. The same principle applies to the number nine, which is written as 
	IX. There are six instances where subtraction is used:

	I can be placed before V (5) and X (10) to make 4 and 9. 
	X can be placed before L (50) and C (100) to make 40 and 90. 
	C can be placed before D (500) and M (1000) to make 400 and 900.
	Given an integer, convert it to a roman numeral. Input is guaranteed to be 
	within the range from 1 to 3999.

	Example 1:
	Input: 3
	Output: "III"

	Example 2:
	Input: 4
	Output: "IV"

	Example 3:
	Input: 9
	Output: "IX"

	Example 4:
	Input: 58
	Output: "LVIII"
	Explanation: L = 50, V = 5, III = 3.

	Example 5:
	Input: 1994
	Output: "MCMXCIV"
	Explanation: M = 1000, CM = 900, XC = 90 and IV = 4."""

    def intToRoman(self, num: int) -> str:
        mp = {1000:"M", 900:"CM", 500:"D", 400:"CD", 100:"C", 90:"XC", 50:"L", 40:"XL", 10:"X", 9:"IX", 5:"V", 4:"IV", 1:"I"}
        ans = []
        for k, v in mp.items(): 
            ans.append(num//k * v)
            num %= k
        return "".join(ans)

	"""13. Roman to Integer (Easy)
	Roman numerals are represented by seven different symbols: I, V, X, L, C, 
	D and M.

	Symbol       Value
	I             1
	V             5
	X             10
	L             50
	C             100
	D             500
	M             1000
	For example, two is written as II in Roman numeral, just two one's added 
	together. Twelve is written as, XII, which is simply X + II. The number 
	twenty seven is written as XXVII, which is XX + V + II.

	Roman numerals are usually written largest to smallest from left to right. 
	However, the numeral for four is not IIII. Instead, the number four is 
	written as IV. Because the one is before the five we subtract it making 
	four. The same principle applies to the number nine, which is written as 
	IX. There are six instances where subtraction is used:

	I can be placed before V (5) and X (10) to make 4 and 9. 
	X can be placed before L (50) and C (100) to make 40 and 90. 
	C can be placed before D (500) and M (1000) to make 400 and 900.
	Given a roman numeral, convert it to an integer. Input is guaranteed to be 
	within the range from 1 to 3999.

	Example 1:
	Input: "III"
	Output: 3

	Example 2:
	Input: "IV"
	Output: 4

	Example 3:
	Input: "IX"
	Output: 9

	Example 4:
	Input: "LVIII"
	Output: 58
	Explanation: L = 50, V= 5, III = 3.

	Example 5:
	Input: "MCMXCIV"
	Output: 1994
	Explanation: M = 1000, CM = 900, XC = 90 and IV = 4."""

    def romanToInt(self, s: str) -> int:
        mp = {"I": 1, "V": 5, "X": 10, "L": 50, "C": 100, "D": 500, "M": 1000}
        ans = 0
        for i in range(len(s)):
            if i+1 < len(s) and mp[s[i]] < mp[s[i+1]]: ans -= mp[s[i]]
            else: ans += mp[s[i]]
        return ans


    """14. Longest Common Prefix (Easy)
	Write a function to find the longest common prefix string amongst an array 
	of strings. If there is no common prefix, return an empty string "".

	Example 1:
	Input: ["flower","flow","flight"]
	Output: "fl"

	Example 2:
	Input: ["dog","racecar","car"]
	Output: ""
	Explanation: There is no common prefix among the input strings."""

    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs: return ""
        for i, c in enumerate(zip(*strs)): 
            if len(set(c)) > 1: return strs[0][:i]
        return min(strs)


    """15. 3Sum (Medium)
	Given an array nums of n integers, are there elements a, b, c in nums such 
	that a + b + c = 0? Find all unique triplets in the array which gives the 
	sum of zero.

	Note: The solution set must not contain duplicate triplets.

	Example:
	Given array nums = [-1, 0, 1, 2, -1, -4],
	A solution set is:
	[
	  [-1, 0, 1],
	  [-1, -1, 2]
	]"""

    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        ans = []
        for i in range(len(nums)): 
            if i == 0 or nums[i-1] != nums[i]: 
                lo, hi = i+1, len(nums)-1
                while lo < hi: 
                    sm = nums[i] + nums[lo] + nums[hi]
                    if sm < 0: lo += 1
                    elif sm == 0: 
                        ans.append([nums[i], nums[lo], nums[hi]])
                        lo += 1
                        while lo < hi and nums[lo-1] == nums[lo]: lo += 1
                    else: hi -= 1
        return ans


    """16. 3Sum Closest (Medium)
	Given an array nums of n integers and an integer target, find three 
	integers in nums such that the sum is closest to target. Return the sum of 
	the three integers. You may assume that each input would have exactly one 
	solution.

	Example 1:
	Input: nums = [-1,2,1,-4], target = 1
	Output: 2
	Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

	Constraints:
	3 <= nums.length <= 10^3
	-10^3 <= nums[i] <= 10^3
	-10^4 <= target <= 10^4"""

    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        ans = inf
        for i in range(len(nums)): 
            lo, hi = i+1, len(nums)-1
            while lo < hi: 
                sm = nums[i] + nums[lo] + nums[hi] 
                ans = min(ans, sm, key=lambda x: abs(x-target))
                if sm < target: lo += 1
                else: hi -= 1
        return ans 


    """17. Letter Combinations of a Phone Number (Medium)
	Given a string containing digits from 2-9 inclusive, return all possible 
	letter combinations that the number could represent.

	A mapping of digit to letters (just like on the telephone buttons) is given 
	below. Note that 1 does not map to any letters.

	Example:
	Input: "23"
	Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

	Note: Although the above answer is in lexicographical order, your answer 
	could be in any order you want."""

    def letterCombinations(self, digits: str) -> List[str]:
        if not digits: return [] # edge case 
        phone = ["", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
        ans = [""]
        for d in digits: 
            ans = [x+xx for x in ans for xx in phone[int(d)]]
        return ans 


    """18. 4Sum (Medium)
	Given an array nums of n integers and an integer target, are there elements 
	a, b, c, and d in nums such that a + b + c + d = target? Find all unique 
	quadruplets in the array which gives the sum of target.

	Note: The solution set must not contain duplicate quadruplets.

	Example:
	Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

	A solution set is:
	[
	  [-1,  0, 0, 1],
	  [-2, -1, 1, 2],
	  [-2,  0, 0, 2]
	]"""

    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        ans = []
        for i in range(len(nums)):
            if i and nums[i-1] == nums[i]: continue
            for j in range(i+1, len(nums)):
                if j > i+1 and nums[j-1] == nums[j]: continue 
                lo, hi = j+1, len(nums)-1
                while lo < hi: 
                    val = nums[i] + nums[j] + nums[lo] + nums[hi]
                    if val < target: lo += 1
                    elif val > target: hi -= 1
                    else: 
                        ans.append([nums[i], nums[j], nums[lo], nums[hi]])
                        lo += 1
                        while lo < hi and nums[lo-1] == nums[lo]: lo += 1
        return ans


    """19. Remove Nth Node From End of List (Medium)
	Given a linked list, remove the n-th node from the end of list and return 
	its head.

	Example:
	Given linked list: 1->2->3->4->5, and n = 2.
	After removing the second node from the end, the linked list becomes 1->2->3->5.

	Note: Given n will always be valid.
	Follow up: Could you do this in one pass?"""

    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        dummy = slow = fast = ListNode(next=head)
        while fast: 
            fast = fast.next 
            if n < 0: slow = slow.next 
            n -= 1
        slow.next = slow.next.next 
        return dummy.next 


    """20. Valid Parentheses (Easy)
	Given a string containing just the characters '(', ')', '{', '}', '[' and 
	']', determine if the input string is valid.

	An input string is valid if:
	* Open brackets must be closed by the same type of brackets.
	* Open brackets must be closed in the correct order.
	Note: an empty string is also considered valid.

	Example 1:
	Input: "()"
	Output: true
	
	Example 2:
	Input: "()[]{}"
	Output: true

	Example 3:
	Input: "(]"
	Output: false

	Example 4:
	Input: "([)]"
	Output: false

	Example 5:
	Input: "{[]}"
	Output: true"""

    def isValid(self, s: str) -> bool:
        mp = {"(": ")", "[": "]", "{": "}"}
        stack = []
        for ch in s: 
            if ch in mp: stack.append(ch) 
            elif not stack or mp[stack.pop()] != ch: return False 
        return not stack


    """21. Merge Two Sorted Lists (Easy)
	Merge two sorted linked lists and return it as a sorted list. The list 
	should be made by splicing together the nodes of the first two lists.

	Example 1:
	Input: l1 = [1,2,4], l2 = [1,3,4]
	Output: [1,1,2,3,4,4]

	Example 2:
	Input: l1 = [], l2 = []
	Output: []

	Example 3:
	Input: l1 = [], l2 = [0]
	Output: [0]

	Constraints:
	* The number of nodes in both lists is in the range [0, 50].
	* -100 <= Node.val <= 100
	* Both l1 and l2 are sorted in non-decreasing order."""
    
    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = node = ListNode()
        while l1 and l2:
            if l1.val <= l2.val: 
                node.next = node = l1
                l1 = l1.next 
            else: 
                node.next = node = l2
                l2 = l2.next 
        node.next = l1 or l2
        return dummy.next 


    """22. Generate Parentheses (Medium)
	Given n pairs of parentheses, write a function to generate all 
	combinations of well-formed parentheses.

	For example, given n = 3, a solution set is:

	[
	  "((()))",
	  "(()())",
	  "(())()",
	  "()(())",
	  "()()()"
	]"""

    @cache
    def generateParenthesis(self, n: int) -> List[str]:
        if n == 0: return [""]
        ans = []
        for i in range(n):
            for x in self.generateParenthesis(n-1-i): 
                for y in self.generateParenthesis(i): 
                    ans.append(f"({x}){y}")
        return ans 


    """23. Merge k Sorted Lists (Hard)
	Merge k sorted linked lists and return it as one sorted list. Analyze and 
	describe its complexity.

	Example:
	Input:
	[
	  1->4->5,
	  1->3->4,
	  2->6
	]
	Output: 1->1->2->3->4->4->5->6"""
    
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        pq = [(x.val, i, x) for i, x in enumerate(lists) if x]
        heapify(pq)
        dummy = node = ListNode()
        
        while pq: 
            _, i, x = heappop(pq)
            node.next = node = x
            if x.next: heappush(pq, (x.next.val, i, x.next))
        return dummy.next 


    """24. Swap Nodes in Pairs (Medium)
	Given a linked list, swap every two adjacent nodes and return its head.

	You may not modify the values in the list's nodes, only nodes itself may be 
	changed.

	Example:
	Given 1->2->3->4, you should return the list as 2->1->4->3."""

    def swapPairs(self, head: ListNode) -> ListNode:
        node = dummy = ListNode(0, head)
        while node.next and node.next.next: 
            node.next.next.next, node.next.next, node.next = node.next, node.next.next.next, node.next.next
            node = node.next.next 
        return dummy.next


    """25. Reverse Nodes in k-Group (Hard)
	Given a linked list, reverse the nodes of a linked list k at a time and 
	return its modified list. k is a positive integer and is less than or 
	equal to the length of the linked list. If the number of nodes is not a 
	multiple of k then left-out nodes in the end should remain as it is.

	Example:
	Given this linked list: 1->2->3->4->5
	For k = 2, you should return: 2->1->4->3->5
	For k = 3, you should return: 3->2->1->4->5

	Note: Only constant extra memory is allowed.
	You may not alter the values in the list's nodes, only nodes itself may be changed."""
    
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        dummy = tail = ListNode(next=head)
        node = head 
        while node: 
            temp = node
            for _ in range(k): 
                if not temp: return dummy.next 
                temp = temp.next 
            prev = None
            for _ in range(k): node.next, node, prev = prev, node.next, node
            tail.next.next, tail.next, tail = node, prev, tail.next
        return dummy.next


    """26. Remove Duplicates from Sorted Array (Easy)
	Given a sorted array nums, remove the duplicates in-place such that each 
	element appear only once and return the new length. Do not allocate extra 
	space for another array, you must do this by modifying the input array in-
	place with O(1) extra memory.

	Example 1:
	Given nums = [1,1,2], your function should return length = 2, with the 
	first two elements of nums being 1 and 2 respectively. It doesn't matter 
	what you leave beyond the returned length.

	Example 2:
	Given nums = [0,0,1,1,1,2,2,3,3,4], your function should return length = 5, 
	with the first five elements of nums being modified to 0, 1, 2, 3, and 4 
	respectively. It doesn't matter what values are set beyond the returned 
	length.
	
	Clarification: Confused why the returned value is an integer but your 
	answer is an array?

	Note that the input array is passed in by reference, which means 
	modification to the input array will be known to the caller as well.

	Internally you can think of this:
	// nums is passed in by reference. (i.e., without making a copy)
	int len = removeDuplicates(nums);
	// any modification to nums in your function would be known by the caller.
	// using the length returned by your function, it prints the first len 
	elements.
	for (int i = 0; i < len; i++) {
	    print(nums[i]);
	}"""

    def removeDuplicates(self, nums: List[int]) -> int:
        i = 0
        for num in nums:
            if i < 1 or nums[i-1] < num: 
                nums[i] = num
                i += 1
        return i


    """27. Remove Element (Easy)
	Given an array nums and a value val, remove all instances of that value in-
	place and return the new length. Do not allocate extra space for another 
	array, you must do this by modifying the input array in-place with O(1) 
	extra memory. The order of elements can be changed. It doesn't matter what 
	you leave beyond the new length.

	Example 1:
	Given nums = [3,2,2,3], val = 3, your function should return length = 2, 
	with the first two elements of nums being 2. It doesn't matter what you 
	leave beyond the returned length.
	
	Example 2:
	Given nums = [0,1,2,2,3,0,4,2], val = 2, your function should return 
	length = 5, with the first five elements of nums containing 0, 1, 3, 0, 
	and 4. Note that the order of those five elements can be arbitrary. It 
	doesn't matter what values are set beyond the returned length.
	
	Clarification:

	Confused why the returned value is an integer but your answer is an array?

	Note that the input array is passed in by reference, which means 
	modification to the input array will be known to the caller as well.

	Internally you can think of this:
	// nums is passed in by reference. (i.e., without making a copy)
	int len = removeElement(nums, val);
	// any modification to nums in your function would be known by the caller.
	// using the length returned by your function, it prints the first len elements.
	for (int i = 0; i < len; i++) {
	    print(nums[i]);
	}"""

    def removeElement(self, nums: List[int], val: int) -> int:
        i = 0
        for x in nums: 
            if x != val: nums[i], i = x, i+1
        return i


    """28. Implement strStr() (Easy)
	Implement strStr(). Return the index of the first occurrence of needle in 
	haystack, or -1 if needle is not part of haystack.

	Example 1:
	Input: haystack = "hello", needle = "ll"
	Output: 2

	Example 2:
	Input: haystack = "aaaaa", needle = "bba"
	Output: -1

	Clarification: 	What should we return when needle is an empty string? This 
	is a great question to ask during an interview. For the purpose of this 
	problem, we will return 0 when needle is an empty string. This is 
	consistent to C's strstr() and Java's indexOf()."""

    def strStr(self, haystack: str, needle: str) -> int:
        """Knuth-Morris-Pratt algo (1977)"""
        if not needle: return 0 # edge case 
        
        lps = [0]
        k = 0
        for i in range(1, len(needle)): 
            while k and needle[k] != needle[i]: k = lps[k-1]
            if needle[k] == needle[i]: k += 1
            lps.append(k)
        
        k = 0 
        for i, ch in enumerate(haystack): 
            while k and needle[k] != ch: k = lps[k-1]
            if needle[k] == ch: k += 1
            if k == len(needle): return i - k + 1
        return -1 


    """29. Divide Two Integers (Medium)
	Given two integers dividend and divisor, divide two integers without using 
	multiplication, division and mod operator. Return the quotient after 
	dividing dividend by divisor. The integer division should truncate toward 
	zero, which means losing its fractional part. 

	For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.

	Example 1:
	Input: dividend = 10, divisor = 3
	Output: 3
	Explanation: 10/3 = truncate(3.33333..) = 3.

	Example 2:
	Input: dividend = 7, divisor = -3
	Output: -2
	Explanation: 7/-3 = truncate(-2.33333..) = -2.

	Note: Both dividend and divisor will be 32-bit signed integers. The divisor 
	will never be 0. Assume we are dealing with an environment which could only 
	store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. 
	For the purpose of this problem, assume that your function returns 2^31 − 1 
	when the division result overflows."""
    
    def divide(self, dividend: int, divisor: int) -> int:
        if dividend == -2147483648 and divisor == -1: return 2147483647 #edge case 
        
        neg = (dividend > 0) ^ (divisor > 0)
        ans, dividend, divisor = 0, abs(dividend), abs(divisor)
        for i in reversed(range(32)):
            if dividend >= divisor << i: 
                ans |= 1 << i
                dividend -= divisor << i
        return -ans if neg else ans 


    """30. Substring with Concatenation of All Words (Hard)
	You are given a string, s, and a list of words, words, that are all of the 
	same length. Find all starting indices of substring(s) in s that is a 
	concatenation of each word in words exactly once and without any 
	intervening characters.

	Example 1:
	Input:
	  s = "barfoothefoobarman",
	  words = ["foo","bar"]
	Output: [0,9]

	Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
	The output order does not matter, returning [9,0] is fine too.

	Example 2:
	Input:
	  s = "wordgoodgoodgoodbestword",
	  words = ["word","good","best","word"]
	Output: []"""

    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        if not words: return []
        
        target = dict()
        for word in words: target[word] = target.get(word, 0) + 1
            
        ans, n = [], len(words[0])
        for i in range(n): 
            freq, kk = dict(), i
            for j in range(i, len(s), n): 
                word = s[j:j+n]
                freq[word] = freq.get(word, 0) + 1
                while freq[word] > target.get(word, 0): 
                    freq[s[kk:(kk:=kk+n)]] -= 1
                if j + n - kk == n * len(words): ans.append(kk)
        return ans 


    """31. Next Permutation (Medium)
	Implement next permutation, which rearranges numbers into the 
	lexicographically next greater permutation of numbers. If such arrangement 
	is not possible, it must rearrange it as the lowest possible order (ie, 
	sorted in ascending order). The replacement must be in-place and use only 
	constant extra memory. Here are some examples. Inputs are in the left-hand 
	column and its corresponding outputs are in the right-hand column.

	1,2,3 → 1,3,2
	3,2,1 → 1,2,3
	1,1,5 → 1,5,1"""

    def nextPermutation(self, nums: List[int]) -> None:
        k = len(nums)-1
        while k and nums[k-1] >= nums[k]: k -= 1
            
        if k: 
            lo, hi = k, len(nums)
            while lo < hi:
                mid = (lo + hi)//2
                if nums[mid] <= nums[k-1]: hi = mid
                else: lo = mid+1
            nums[k-1], nums[lo-1] = nums[lo-1], nums[k-1]
        
        lo, hi = k, len(nums)-1
        while lo < hi: 
            nums[lo], nums[hi] = nums[hi], nums[lo]
            lo, hi = lo+1, hi-1  


    """32. Longest Valid Parentheses (Hard)
	Given a string containing just the characters '(' and ')', find the length 
	of the longest valid (well-formed) parentheses substring.

	Example 1:
	Input: "(()"
	Output: 2
	Explanation: The longest valid parentheses substring is "()"

	Example 2:
	Input: ")()())"
	Output: 4
	Explanation: The longest valid parentheses substring is "()()"""

    def longestValidParentheses(self, s: str) -> int:
        
        def fn(fwd, ans=0): 
            op = cl = 0
            for c in s if fwd else reversed(s): 
                if c == "(": op += 1
                else: cl += 1
                if (lt if fwd else gt)(op, cl): op = cl = 0
                elif op == cl: ans = max(ans, op + cl)
            return ans 
        
        return fn(False, fn(True))

    """33. Search in Rotated Sorted Array (Medium)
	Suppose an array sorted in ascending order is rotated at some pivot unknown 
	to you beforehand. (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]). 
	You are given a target value to search. If found in the array return its 
	index, otherwise return -1. You may assume no duplicate exists in the array. 
	Your algorithm's runtime complexity must be in the order of O(log n).

	Example 1:
	Input: nums = [4,5,6,7,0,1,2], target = 0
	Output: 4

	Example 2:
	Input: nums = [4,5,6,7,0,1,2], target = 3
	Output: -1"""

    def search(self, nums: List[int], target: int) -> int:
        lo, hi = 0, len(nums)-1
        while lo <= hi: 
            mid = lo + hi >> 1
            if nums[mid] == target: return mid
            if nums[lo] <= nums[mid]: 
                if nums[lo] <= target < nums[mid]: hi = mid - 1
                else: lo = mid + 1
            else: 
                if nums[mid] < target <= nums[hi]: lo = mid + 1
                else: hi = mid - 1
        return -1


    """34. Find First and Last Position of Element in Sorted Array (Medium)
	Given an array of integers nums sorted in ascending order, find the 
	starting and ending position of a given target value. Your algorithm's 
	runtime complexity must be in the order of O(log n). If the target is not 
	found in the array, return [-1, -1].

	Example 1:
	Input: nums = [5,7,7,8,8,10], target = 8
	Output: [3,4]

	Example 2:
	Input: nums = [5,7,7,8,8,10], target = 6
	Output: [-1,-1]"""

    def searchRange(self, nums: List[int], target: int) -> List[int]:
        lo = bisect_left(nums, target)
        hi = bisect_left(nums, target+1)-1
        return [lo, hi] if lo < len(nums) and nums[lo] == target else [-1, -1]


    """35. Search Insert Position (Easy)
	Given a sorted array and a target value, return the index if the target is 
	found. If not, return the index where it would be if it were inserted in 
	order. You may assume no duplicates in the array.

	Example 1:
	Input: [1,3,5,6], 5
	Output: 2

	Example 2:
	Input: [1,3,5,6], 2
	Output: 1

	Example 3:
	Input: [1,3,5,6], 7
	Output: 4

	Example 4:
	Input: [1,3,5,6], 0
	Output: 0"""

    def searchInsert(self, nums: List[int], target: int) -> int:
        lo, hi = 0, len(nums)
        while lo < hi:
            mid = (lo + hi)//2
            if nums[mid] < target: lo = mid + 1
            else: hi = mid
        return lo 


    """36. Valid Sudoku (Medium)
	Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be 
	validated according to the following rules:

	+ Each row must contain the digits 1-9 without repetition.
	+ Each column must contain the digits 1-9 without repetition.
	+ Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 
	without repetition.

	A partially filled sudoku which is valid. The Sudoku board could be 
	partially filled, where empty cells are filled with the character '.'.

	Example 1:
	Input:
	[
	  ["5","3",".",".","7",".",".",".","."],
	  ["6",".",".","1","9","5",".",".","."],
	  [".","9","8",".",".",".",".","6","."],
	  ["8",".",".",".","6",".",".",".","3"],
	  ["4",".",".","8",".","3",".",".","1"],
	  ["7",".",".",".","2",".",".",".","6"],
	  [".","6",".",".",".",".","2","8","."],
	  [".",".",".","4","1","9",".",".","5"],
	  [".",".",".",".","8",".",".","7","9"]
	]
	Output: true

	Example 2:
	Input:
	[
	  ["8","3",".",".","7",".",".",".","."],
	  ["6",".",".","1","9","5",".",".","."],
	  [".","9","8",".",".",".",".","6","."],
	  ["8",".",".",".","6",".",".",".","3"],
	  ["4",".",".","8",".","3",".",".","1"],
	  ["7",".",".",".","2",".",".",".","6"],
	  [".","6",".",".",".",".","2","8","."],
	  [".",".",".","4","1","9",".",".","5"],
	  [".",".",".",".","8",".",".","7","9"]
	]
	Output: false

	Explanation: Same as Example 1, except with the 5 in the top left corner 
	being modified to 8. Since there are two 8's in the top left 3x3 sub-box, 
	it is invalid.
	
	Note:
	A Sudoku board (partially filled) could be valid but is not necessarily 
	solvable. Only the filled cells need to be validated according to the 
	mentioned rules. The given board contain only digits 1-9 and the character 
	'.'. The given board size is always 9x9."""

    def isValidSudoku(self, board: List[List[str]]) -> bool:
        seen = set()
        for i in range(9):
            for j in range(9):
                if board[i][j] != ".": 
                    cand = {(i, board[i][j]), (board[i][j], j), (i//3, j//3, board[i][j])}
                    if seen & cand: return False 
                    seen |= cand 
        return True 


    """37. Sudoku Solver (Hard)
	Write a program to solve a Sudoku puzzle by filling the empty cells. A 
	sudoku solution must satisfy all of the following rules:

	Each of the digits 1-9 must occur exactly once in each row.
	Each of the digits 1-9 must occur exactly once in each column.
	Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 
	sub-boxes of the grid.
	
	Empty cells are indicated by the character '.'.

	Note:
	The given board contain only digits 1-9 and the character '.'.
	You may assume that the given Sudoku puzzle will have a single unique solution.
	The given board size is always 9x9."""

    def solveSudoku(self, board: List[List[str]]) -> None:
        empty = []
        seen = set()
        for i in range(9):
            for j in range(9):
                if board[i][j] == ".": empty.append((i, j))
                else: seen |= {(i, board[i][j]), (board[i][j], j), (i//3, board[i][j], j//3)}
        
        def fn(k, seen): 
            """Return True if Sudoku is filled properly (for early termination)"""
            if k == len(empty): return True
            i, j = empty[k]
            for x in "123456789": 
                if seen & {(i, x), (x, j), (i//3, x, j//3)}: continue
                seen |= {(i, x), (x, j), (i//3, x, j//3)}
                board[i][j] = x
                if fn(k+1, seen): return True 
                seen -= {(i, x), (x, j), (i//3, x, j//3)}
        
        fn(0, seen)


    """38. Count and Say (Easy)
	The count-and-say sequence is the sequence of integers with the first five 
	terms as following:

	1.     1
	2.     11
	3.     21
	4.     1211
	5.     111221
	1 is read off as "one 1" or 11.
	11 is read off as "two 1s" or 21.
	21 is read off as "one 2, then one 1" or 1211.

	Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-
	and-say sequence. You can do so recursively, in other words from the 
	previous member read off the digits, counting the number of digits in 
	groups of the same digit.

	Note: Each term of the sequence of integers will be represented as a string.

	Example 1:
	Input: 1
	Output: "1"
	Explanation: This is the base case.

	Example 2:
	Input: 4
	Output: "1211"
	Explanation: For n = 3 the term was "21" in which we have two groups "2" 
	and "1", "2" can be read as "12" which means frequency = 1 and value = 2, 
	the same way "1" is read as "11", so the answer is the concatenation of 
	"12" and "11" which is "1211"."""

    def countAndSay(self, n: int) -> str:
        if n == 1: return "1"
        return "".join(str(len(list(v))) + g for g, v in groupby(self.countAndSay(n-1)))


    """39. Combination Sum (Medium)
	Given a set of candidate numbers (candidates) (without duplicates) and a 
	target number (target), find all unique combinations in candidates where 
	the candidate numbers sums to target. The same repeated number may be 
	chosen from candidates unlimited number of times.

	Note:
	All numbers (including target) will be positive integers.
	The solution set must not contain duplicate combinations.

	Example 1:
	Input: candidates = [2,3,6,7], target = 7,
	A solution set is:
	[
	  [7],
	  [2,2,3]
	]

	Example 2:
	Input: candidates = [2,3,5], target = 8,
	A solution set is:
	[
	  [2,2,2,2],
	  [2,3,3],
	  [3,5]
	]"""

    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        dp = [[] for _ in range(target + 1)]
        dp[0].append([])
        for x in candidates: 
            for i in range(target): 
                if i+x <= target: 
                    for seq in dp[i]: dp[i+x].append(seq + [x])
        return dp[-1]


    """40. Combination Sum II (Medium)
	Given a collection of candidate numbers (candidates) and a target number 
	(target), find all unique combinations in candidates where the candidate 
	numbers sums to target. Each number in candidates may only be used once in 
	the combination.

	Note:
	All numbers (including target) will be positive integers. The solution set 
	must not contain duplicate combinations.
	
	Example 1:
	Input: candidates = [10,1,2,7,6,1,5], target = 8,
	A solution set is:
	[
	  [1, 7],
	  [1, 2, 5],
	  [2, 6],
	  [1, 1, 6]
	]

	Example 2:
	Input: candidates = [2,5,2,1,2], target = 5,
	A solution set is:
	[
	  [1,2,2],
	  [5]
	]"""

    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        dp = [set() for _ in range(target+1)]
        dp[0].add(())
        for x in candidates: 
            for i in reversed(range(target)): 
                if x + i <= target: 
                    for seq in dp[i]: 
                        dp[i+x].add(seq + (x,))
        return dp[-1]


    """41. First Missing Positive (Hard)
	Given an unsorted integer array, find the smallest missing positive integer.

	Example 1:

	Input: [1,2,0]
	Output: 3
	Example 2:

	Input: [3,4,-1,1]
	Output: 2
	Example 3:

	Input: [7,8,9,11,12]
	Output: 1
	Note:

	Your algorithm should run in O(n) time and uses constant extra space."""

    def firstMissingPositive(self, nums: List[int]) -> int:
        
        for i in range(len(nums)):
            k = nums[i]
            while k and 0 < k <= len(nums): 
                nums[k-1], k = None, nums[k-1]
                
        return next((i+1 for i in range(len(nums)) if nums[i] is not None), len(nums)+1)


    """42. Trapping Rain Water (Hard)
	Given n non-negative integers representing an elevation map where the width 
	of each bar is 1, compute how much water it is able to trap after raining.
	The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
	In this case, 6 units of rain water (blue section) are being trapped. 

	Example:
	Input: [0,1,0,2,1,0,1,3,2,1,2,1]
	Output: 6"""

    def trap(self, height: List[int]) -> int:
        lo, hi = 0, len(height)-1
        ans = val = 0
        while lo < hi: 
            if height[lo] <= height[hi]: 
                val = max(val, height[lo])
                ans += val - height[lo]
                lo += 1
            else: 
                val = max(val, height[hi])
                ans += val - height[hi]
                hi -= 1
        return ans


    """43. Multiply Strings (Medium)
	Given two non-negative integers num1 and num2 represented as strings, 
	return the product of num1 and num2, also represented as a string.

	Example 1:
	Input: num1 = "2", num2 = "3"
	Output: "6"

	Example 2:
	Input: num1 = "123", num2 = "456"
	Output: "56088"

	Note:
	+ The length of both num1 and num2 is < 110.
	+ Both num1 and num2 contain only digits 0-9.
	+ Both num1 and num2 do not contain any leading zero, except the number 0 
	  itself.
	+ You must not use any built-in BigInteger library or convert the inputs to 
	  integer directly."""

    def multiply(self, num1: str, num2: str) -> str:
        ans = [0]*(len(num1) + len(num2))
        for i, x in enumerate(num1): 
            for j, y in enumerate(num2): 
                carry = (ord(x)-48) * (ord(y)-48)
                k = i+j+1
                while carry: 
                    carry, ans[k] = divmod(carry + ans[k], 10)
                    k -= 1
        return "".join(map(str, ans)).lstrip("0") or "0"


    """44. Wildcard Matching (Hard)
	Given an input string (s) and a pattern (p), implement wildcard pattern 
	matching with support for '?' and '*'.

	'?' Matches any single character.
	'*' Matches any sequence of characters (including the empty sequence).
	The matching should cover the entire input string (not partial).

	Note:
	s could be empty and contains only lowercase letters a-z.
	p could be empty and contains only lowercase letters a-z, and characters 
	like ? or *.
	
	Example 1:
	Input:
	s = "aa"
	p = "a"
	Output: false
	Explanation: "a" does not match the entire string "aa".
	
	Example 2:
	Input:
	s = "aa"
	p = "*"
	Output: true
	Explanation: '*' matches any sequence.

	Example 3:
	Input:
	s = "cb"
	p = "?a"
	Output: false
	Explanation: '?' matches 'c', but the second letter is 'a', which does not 
	match 'b'.

	Example 4:
	Input:
	s = "adceb"
	p = "*a*b"
	Output: true
	Explanation: The first '*' matches the empty sequence, while the second '*' 
	matches the substring "dce".
	
	Example 5:
	Input:
	s = "acdcb"
	p = "a*c?b"
	Output: false"""

    def isMatch(self, s: str, p: str) -> bool:
        
        @cache
        def fn(i, j): 
            """Return True if s[i:] matches p[j:]"""
            if j == len(p): return i == len(s)
            if i < len(s) and (s[i] == p[j] or p[j] == "?"): return fn(i+1, j+1)
            if p[j] == "*": return fn(i, j+1) or i < len(s) and fn(i+1, j)
            return False 
        
        return fn(0, 0)


    """45. Jump Game II (Hard)
	Given an array of non-negative integers, you are initially positioned at 
	the first index of the array. Each element in the array represents your 
	maximum jump length at that position. Your goal is to reach the last index 
	in the minimum number of jumps.

	Example:
	Input: [2,3,1,1,4]
	Output: 2
	Explanation: The minimum number of jumps to reach the last index is 2.
    Jump 1 step from index 0 to 1, then 3 steps to the last index.

	Note: You can assume that you can always reach the last index."""

    def jump(self, nums: List[int]) -> int:
        ans = prev = curr = 0
        for i, x in enumerate(nums): 
            if prev < i: 
                ans += 1
                prev = curr 
            curr = max(curr, i + x)
        return ans 


    """46. Permutations (Medium)
	Given a collection of distinct integers, return all possible permutations.

	Example:
	Input: [1,2,3]
	Output:
	[
	  [1,2,3],
	  [1,3,2],
	  [2,1,3],
	  [2,3,1],
	  [3,1,2],
	  [3,2,1]
	]"""

    def permute(self, nums: List[int]) -> List[List[int]]:
        
        def fn(i):
            """Heap's algo (1963)"""
            if i == len(nums): ans.append(nums.copy())
            for k in reversed(range(i, len(nums))): 
                fn(i+1)
                if (len(nums)-i) & 1: nums[i], nums[-1] = nums[-1], nums[i]
                else: nums[i], nums[k] = nums[k], nums[i]
            
        ans = []
        fn(0)
        return ans 


    """47. Permutations II (Medium)
	Given a collection of numbers that might contain duplicates, return all 
	possible unique permutations.

	Example:
	Input: [1,1,2]
	Output:
	[
	  [1,1,2],
	  [1,2,1],
	  [2,1,1]
	]"""

    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        
        def fn(i):
            """Backtracking to get permutations (not Heap's algo)"""
            if i == len(nums): ans.append(nums.copy())
            seen = set()
            for k in range(i, len(nums)):
                if nums[k] not in seen:
                    seen.add(nums[k])
                    nums[i], nums[k] = nums[k], nums[i]
                    fn(i+1)
                    nums[i], nums[k] = nums[k], nums[i]
        
        ans = []
        fn(0)
        return ans 

    """48. Rotate Image (Medium)
	You are given an n x n 2D matrix representing an image. Rotate the image by 
	90 degrees (clockwise).

	Note:
	You have to rotate the image in-place, which means you have to modify the 
	input 2D matrix directly. DO NOT allocate another 2D matrix and do the 
	rotation.

	Example 1:
	Given input matrix = 
	[
	  [1,2,3],
	  [4,5,6],
	  [7,8,9]
	],
	rotate the input matrix in-place such that it becomes:
	[
	  [7,4,1],
	  [8,5,2],
	  [9,6,3]
	]

	Example 2:
	Given input matrix =
	[
	  [ 5, 1, 9,11],
	  [ 2, 4, 8,10],
	  [13, 3, 6, 7],
	  [15,14,12,16]
	], 
	rotate the input matrix in-place such that it becomes:
	[
	  [15,13, 2, 5],
	  [14, 3, 4, 1],
	  [12, 6, 8, 9],
	  [16, 7,10,11]
	]"""

    def rotate(self, matrix: List[List[int]]) -> None:
        matrix[:] = list(zip(*matrix[::-1]))


    """49. Group Anagrams (Medium)
	Given an array of strings, group anagrams together.

	Example:
	Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
	Output:
	[
	  ["ate","eat","tea"],
	  ["nat","tan"],
	  ["bat"]
	]
	
	Note:
	All inputs will be in lowercase.
	The order of your output does not matter."""
    
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        mp = {}
        for word in strs: 
            mp.setdefault("".join(sorted(word)), []).append(word)
        return mp.values()


    """50. Pow(x, n) (Medium)
	Implement pow(x, n), which calculates x raised to the power n (x^n).

	Example 1:
	Input: 2.00000, 10
	Output: 1024.00000

	Example 2:
	Input: 2.10000, 3
	Output: 9.26100

	Example 3:
	Input: 2.00000, -2
	Output: 0.25000
	Explanation: 2-2 = 1/22 = 1/4 = 0.25

	Note:
	-100.0 < x < 100.0
	n is a 32-bit signed integer, within the range [−2^31, 2^31 − 1]"""

    def myPow(self, x: float, n: int) -> float:
        if n < 0: x, n = 1/x, -n
        ans = 1
        while n: 
            if n & 1: ans *= x
            x, n = x*x, n//2
        return ans 


    """51. N-Queens (Hard)
	The n-queens puzzle is the problem of placing n queens on an n×n chessboard 
	such that no two queens attack each other. Given an integer n, return all 
	distinct solutions to the n-queens puzzle. Each solution contains a 
	distinct board configuration of the n-queens' placement, where 'Q' and '.' 
	both indicate a queen and an empty space respectively.

	Example:
	Input: 4
	Output: [
	 [".Q..",  // Solution 1
	  "...Q",
	  "Q...",
	  "..Q."],

	 ["..Q.",  // Solution 2
	  "Q...",
	  "...Q",
	  ".Q.."]
	]
	Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above."""

    def solveNQueens(self, n: int) -> List[List[str]]:
        board = [["."]*n for _ in range(n)]
        
        def fn(i, seen): 
            """Recursively populate the n queens via backtracking."""
            if i == n: return ans.append(["".join(x) for x in board])
            for j in range(n): 
                pos = {("col", j), ("diag", i-j), ("anti", i+j)}
                if not pos & seen: 
                    board[i][j] = "Q"
                    seen |= pos
                    fn(i+1, seen)
                    board[i][j] = "."
                    seen -= pos
        
        ans = []
        fn(0, set())
        return ans


    """52. N-Queens II (Hard)
	The n-queens puzzle is the problem of placing n queens on an n×n chessboard 
	such that no two queens attack each other. Given an integer n, return the 
	number of distinct solutions to the n-queens puzzle.

	Example:
	Input: 4
	Output: 2
	Explanation: There are two distinct solutions to the 4-queens puzzle as shown below.
	[
	 [".Q..",  // Solution 1
	  "...Q",
	  "Q...",
	  "..Q."],

	 ["..Q.",  // Solution 2
	  "Q...",
	  "...Q",
	  ".Q.."]
	]"""

    def totalNQueens(self, n: int) -> int:
        
        def fn(i, seen=set(), ans=0):
            """Return the number of solutions"""
            if i == n: ans += 1
            for j in range(n):
                place = {("col", j), ("diag", i-j), ("anti", i+j)}
                if not (place & seen): 
                    seen |= place
                    ans = fn(i+1, seen, ans)
                    seen -= place 
            return ans 
        
        return fn(0)


    """53. Maximum Subarray (Easy)
	Given an integer array nums, find the contiguous subarray (containing at 
	least one number) which has the largest sum and return its sum.

	Example:

	Input: [-2,1,-3,4,-1,2,1,-5,4],
	Output: 6
	Explanation: [4,-1,2,1] has the largest sum = 6.
	
	Follow up: If you have figured out the O(n) solution, try coding another 
	solution using the divide and conquer approach, which is more subtle."""

    def maxSubArray(self, nums: List[int]) -> int:
        ans, val = float("-inf"), 0
        for x in nums:
            val = max(0, val) + x
            ans = max(ans, val)
        return ans 


    """54. Spiral Matrix (Medium)
	Given a matrix of m x n elements (m rows, n columns), return all elements 
	of the matrix in spiral order.

	Example 1:
	Input:
	[
	 [ 1, 2, 3 ],
	 [ 4, 5, 6 ],
	 [ 7, 8, 9 ]
	]
	Output: [1,2,3,6,9,8,7,4,5]

	Example 2:
	Input:
	[
	  [1, 2, 3, 4],
	  [5, 6, 7, 8],
	  [9,10,11,12]
	]
	Output: [1,2,3,4,8,12,11,10,9,5,6,7]"""

    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        m, n = len(matrix), len(matrix[0]) 
        ans = []
        i = j = 0 # position
        di, dj = 0, 1 # direction
        for _ in range(m*n): 
            ans.append(matrix[i][j])
            matrix[i][j] = None # mark "visited"
            if not (0 <= i+di < m and 0 <= j+dj < n and matrix[i+di][j+dj] is not None): 
                di, dj = dj, -di # rotate clockwise 
            i += di
            j += dj
        return ans 


    """55. Jump Game (Medium)
	Given an array of non-negative integers, you are initially positioned at 
	the first index of the array. Each element in the array represents your 
	maximum jump length at that position. Determine if you are able to reach 
	the last index.

	Example 1:
	Input: nums = [2,3,1,1,4]
	Output: true
	Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

	Example 2:
	Input: nums = [3,2,1,0,4]
	Output: false
	Explanation: You will always arrive at index 3 no matter what. Its maximum 
	jump length is 0, which makes it impossible to reach the last index.

	Constraints:
	1 <= nums.length <= 3 * 10^4
	0 <= nums[i][j] <= 10^5"""

    def canJump(self, nums: List[int]) -> bool:
        hi = 0
        for i, x in enumerate(nums): 
            if hi < i: return False
            hi = max(hi, i + x)
        return True


    """56. Merge Intervals (Medium)
	Given a collection of intervals, merge all overlapping intervals.

	Example 1:
	Input: [[1,3],[2,6],[8,10],[15,18]]
	Output: [[1,6],[8,10],[15,18]]
	Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into 
	[1,6].

	Example 2:
	Input: [[1,4],[4,5]]
	Output: [[1,5]]
	Explanation: Intervals [1,4] and [4,5] are considered overlapping.

	NOTE: input types have been changed on April 15, 2019. Please reset to 
	default code definition to get new method signature."""

    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        ans = []
        for x, y in sorted(intervals, key=lambda x: x[1]): 
            while ans and x <= ans[-1][1]: x = min(x, ans.pop()[0])
            ans.append([x, y])
        return ans 


    """57. Insert Interval (Hard)
	Given a set of non-overlapping intervals, insert a new interval into the 
	intervals (merge if necessary). You may assume that the intervals were 
	initially sorted according to their start times.

	Example 1:
	Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
	Output: [[1,5],[6,9]]

	Example 2:
	Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
	Output: [[1,2],[3,10],[12,16]]
	Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

	NOTE: input types have been changed on April 15, 2019. Please reset to 
	default code definition to get new method signature."""

    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        ans = []
        for i, interval in enumerate(intervals): 
            if interval[1] < newInterval[0]: ans.append(interval)
            elif not (newInterval[1] < interval[0]): 
                newInterval[0] = min(newInterval[0], interval[0])
                newInterval[1] = max(newInterval[1], interval[1])
            else: 
                ans.append(newInterval)
                return ans + intervals[i:]
        return ans + [newInterval]

    """58. Length of Last Word (Easy)
	Given a string s consists of upper/lower-case alphabets and empty space 
	characters ' ', return the length of last word (last word means the last 
	appearing word if we loop from left to right) in the string. If the last 
	word does not exist, return 0.

	Note: A word is defined as a maximal substring consisting of non-space 
	characters only.

	Example:
	Input: "Hello World"
	Output: 5"""

    def lengthOfLastWord(self, s: str) -> int:
        words = s.split()
        return len(words[-1]) if words else 0


    """59. Spiral Matrix II (Medium)
	Given a positive integer n, generate a square matrix filled with elements 
	from 1 to n2 in spiral order.

	Example:
	Input: 3
	Output:
	[
	 [ 1, 2, 3 ],
	 [ 8, 9, 4 ],
	 [ 7, 6, 5 ]
	]"""

    def generateMatrix(self, n: int) -> List[List[int]]:
        ans = [[0]*n for _ in range(n)]
        i = j = 0
        di, dj = 0, 1
        for v in range(n*n):
            ans[i][j] = v+1
            if ans[(i+di)%n][(j+dj)%n]: di, dj = dj, -di
            i, j = i+di, j+dj
        return ans


    """60. Permutation Sequence (Medium)
	The set [1,2,3,...,n] contains a total of n! unique permutations. By 
	listing and labeling all of the permutations in order, we get the following 
	sequence for n = 3:

	"123"
	"132"
	"213"
	"231"
	"312"
	"321"

	Given n and k, return the kth permutation sequence.

	Note:
	Given n will be between 1 and 9 inclusive.
	Given k will be between 1 and n! inclusive.

	Example 1:
	Input: n = 3, k = 3
	Output: "213"

	Example 2:
	Input: n = 4, k = 9
	Output: "2314" """

    def getPermutation(self, n: int, k: int) -> str:
        k -= 1
        ans, digits = [], list(range(1, n+1))
        for i in range(n):
            d, k = divmod(k, factorial(n-i-1))
            ans.append(digits.pop(d))
        return "".join(str(x) for x in ans)


    """61. Rotate List (Medium)
	Given a linked list, rotate the list to the right by k places, where k is 
	non-negative.

	Example 1:
	Input: 1->2->3->4->5->NULL, k = 2
	Output: 4->5->1->2->3->NULL
	Explanation:
	rotate 1 steps to the right: 5->1->2->3->4->NULL
	rotate 2 steps to the right: 4->5->1->2->3->NULL

	Example 2:
	Input: 0->1->2->NULL, k = 4
	Output: 2->0->1->NULL
	Explanation:
	rotate 1 steps to the right: 2->0->1->NULL
	rotate 2 steps to the right: 1->2->0->NULL
	rotate 3 steps to the right: 0->1->2->NULL
	rotate 4 steps to the right: 2->0->1->NULL"""

    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        if not head: return None
        
        n, node = 0, head
        while node: n, node = n+1, node.next
        
        k %= n
        if k: 
            fast = slow = head 
            while fast.next: 
                if k == 0: slow = slow.next
                else: k -= 1
                fast = fast.next 
            head, fast.next, slow.next = slow.next, head, None
        return head


    """62. Unique Paths (Medium)
	A robot is located at the top-left corner of a m x n grid (marked 'Start' 
	in the diagram below). The robot can only move either down or right at any 
	point in time. The robot is trying to reach the bottom-right corner of the 
	grid (marked 'Finish' in the diagram below). How many possible unique paths 
	are there?

	Example 1:
	Input: m = 3, n = 2
	Output: 3
	Explanation:
	From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
	1. Right -> Right -> Down
	2. Right -> Down -> Right
	3. Down -> Right -> Right

	Example 2:
	Input: m = 7, n = 3
	Output: 28

	Constraints:
	1 <= m, n <= 100
	It's guaranteed that the answer will be less than or equal to 2 * 10 ^ 9."""
    
    def uniquePaths(self, m: int, n: int) -> int:
        
        def choose(n, k): 
            """Return n choose k"""
            ans = 1
            for i in range(min(k, n-k)):
                ans *= n-i
                ans //= i+1
            return ans 
        
        return choose(m+n-2, m-1)


    """63. Unique Paths II (Medium)
	A robot is located at the top-left corner of a m x n grid (marked 'Start' 
	in the diagram below). The robot can only move either down or right at any 
	point in time. The robot is trying to reach the bottom-right corner of the 
	grid (marked 'Finish' in the diagram below). Now consider if some obstacles 
	are added to the grids. How many unique paths would there be? An obstacle 
	and empty space is marked as 1 and 0 respectively in the grid.

	Note: m and n will be at most 100.

	Example 1:
	Input:
	[
	  [0,0,0],
	  [0,1,0],
	  [0,0,0]
	]
	Output: 2
	Explanation:
	There is one obstacle in the middle of the 3x3 grid above.
	There are two ways to reach the bottom-right corner:
	1. Right -> Right -> Down -> Down
	2. Down -> Down -> Right -> Right"""

    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        dp = [0]*n
        dp[0] = 1
        for i in range(m): 
            for j in range(n): 
                if obstacleGrid[i][j]: dp[j] = 0
                elif j: dp[j] += dp[j-1]
        return dp[-1]


    """64. Minimum Path Sum (Medium)
	Given a m x n grid filled with non-negative numbers, find a path from top 
	left to bottom right which minimizes the sum of all numbers along its path.
	Note: You can only move either down or right at any point in time.

	Example:

	Input:
	[
	  [1,3,1],
	  [1,5,1],
	  [4,2,1]
	]
	Output: 7
	Explanation: Because the path 1→3→1→1→1 minimizes the sum."""

    def minPathSum(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        ans = [inf]*n
        ans[0] = 0
        for i in range(m):
            for j in range(n): 
                if j: ans[j] = min(ans[j-1], ans[j])
                ans[j] += grid[i][j]
        return ans[-1]


    """65. Valid Number (Hard)
	Validate if a given string can be interpreted as a decimal number.

	Some examples:
	"0"         => true
	" 0.1 "     => true
	"abc"       => false
	"1 a"       => false
	"2e10"      => true
	" -90e3   " => true
	" 1e"       => false
	"e3"        => false
	" 6e-1"     => true
	" 99e2.5 "  => false
	"53.5e93"   => true
	" --6 "     => false
	"-+3"       => false
	"95a54e53"  => false

	Note: It is intended for the problem statement to be ambiguous. You should 
	gather all requirements up front before implementing one. However, here is 
	a list of characters that can be in a valid decimal number:

	Numbers 0-9
	Exponent - "e"
	Positive/negative sign - "+"/"-"
	Decimal point - "."
	Of course, the context of these characters also matters in the input.

	Update (2015-02-10): The signature of the C++ function had been updated. If 
	you still see your function signature accepts a const char * argument, 
	please click the reload button to reset your code definition."""

    def isNumber(self, s: str) -> bool:
        dfa = [{'space': 0, 'sign': 1, 'digit': 2, '.': 3}, #state 0 - leading space
               {'digit': 2, '.': 3},                        #state 1 - sign
               {'digit': 2, '.': 4, 'e': 5, 'space': 8},    #state 2 - digit (terminal)
               {'digit': 4},                                #state 3 - dot
               {'digit': 4, 'e': 5, 'space': 8},            #state 4 - digit post dot (terminal)
               {'sign': 6, 'digit': 7},                     #state 5 - exponential 
               {'digit': 7},                                #state 6 - sign post exponential 
               {'digit': 7, 'space': 8},                    #state 7 - digit post exponential (terminal)
               {'space': 8}                                 #state 8 - trailing space (terminal)
              ]
        
        state = 0
        for c in s: 
            if c in "0123456789": c = "digit"
            elif c == " ":  c = "space"
            elif c in "+-": c = "sign"
            
            if c not in dfa[state]: return False 
            state = dfa[state][c]
            
        return state in [2, 4, 7, 8]


    """66. Plus One (Easy)
	Given a non-empty array of digits representing a non-negative integer, plus 
	one to the integer. The digits are stored such that the most significant 
	digit is at the head of the list, and each element in the array contain a 
	single digit. You may assume the integer does not contain any leading zero, 
	except the number 0 itself.

	Example 1:
	Input: [1,2,3]
	Output: [1,2,4]
	Explanation: The array represents the integer 123.

	Example 2:
	Input: [4,3,2,1]
	Output: [4,3,2,2]
	Explanation: The array represents the integer 4321."""

    def plusOne(self, digits: List[int]) -> List[int]:
        carry = 1
        for i in reversed(range(len(digits))):
            carry, digits[i] = divmod(digits[i] + carry, 10)
            if not carry: return digits
        return [carry] + digits


    """67. Add Binary (Easy)
	Given two binary strings, return their sum (also a binary string). The 
	input strings are both non-empty and contains only characters 1 or 0.

	Example 1:
	Input: a = "11", b = "1"
	Output: "100"

	Example 2:
	Input: a = "1010", b = "1011"
	Output: "10101"

	Constraints:
	Each string consists only of '0' or '1' characters.
	1 <= a.length, b.length <= 10^4
	Each string is either "0" or doesn't contain any leading zero."""

    def addBinary(self, a: str, b: str) -> str:
        ans, carry = [], 0
        for x, y in zip_longest(reversed(a), reversed(b), fillvalue=0):
            carry += (x == "1") + (y == "1")
            carry, d = divmod(carry, 2)
            ans.append(d)
        if carry: ans.append(carry)
        return "".join(map(str, reversed(ans)))


    """68. Text Justification (Hard)
	Given an array of words and a width maxWidth, format the text such that 
	each line has exactly maxWidth characters and is fully (left and right) 
	justified. You should pack your words in a greedy approach; that is, pack 
	as many words as you can in each line. Pad extra spaces ' ' when necessary 
	so that each line has exactly maxWidth characters. Extra spaces between 
	words should be distributed as evenly as possible. If the number of spaces 
	on a line do not divide evenly between words, the empty slots on the left 
	will be assigned more spaces than the slots on the right. For the last line 
	of text, it should be left justified and no extra space is inserted between 
	words.

	Note:
	A word is defined as a character sequence consisting of non-space 
	characters only. Each word's length is guaranteed to be greater than 0 and 
	not exceed maxWidth. The input array words contains at least one word.

	Example 1:
	Input:
	words = ["This", "is", "an", "example", "of", "text", "justification."]
	maxWidth = 16
	Output:
	[
	   "This    is    an",
	   "example  of text",
	   "justification.  "
	]
	
	Example 2:
	Input:
	words = ["What","must","be","acknowledgment","shall","be"]
	maxWidth = 16
	Output:
	[
	  "What   must   be",
	  "acknowledgment  ",
	  "shall be        "
	]
	Explanation: Note that the last line is "shall be    " instead of "shall     be",
	             because the last line must be left-justified instead of fully-justified.
	             Note that the second line is also left-justified becase it contains only one word.

	Example 3:
	Input:
	words = ["Science","is","what","we","understand","well","enough","to","explain",
	         "to","a","computer.","Art","is","everything","else","we","do"]
	maxWidth = 20
	Output:
	[
	  "Science  is  what we",
	  "understand      well",
	  "enough to explain to",
	  "a  computer.  Art is",
	  "everything  else  we",
	  "do                  "
	]"""

    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        ans = []
        line, width = [], 0
        
        for word in words: 
            if width + len(line) + len(word) > maxWidth: 
                n, k = divmod(maxWidth - width, max(1, len(line)-1))
                for i in range(max(1, len(line)-1)): 
                    line[i] += " " * (n + (i < k))
                ans.append("".join(line))
                line, width = [], 0
            line.append(word)
            width += len(word)
            
        ans.append(" ".join(line).ljust(maxWidth))
        return ans 

	"""69 Given a non-negative integer x, compute and return the square root of x.
	Since the return type is an integer, the decimal digits are truncated, and 
	only the integer part of the result is returned.

	Note: You are not allowed to use any built-in exponent function or operator,
	such as pow(x, 0.5) or x ** 0.5.

	Example 1:
	Input: x = 4
	Output: 2

	Example 2:
	Input: x = 8
	Output: 2
	Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.
	"""
	def mySqrt(self, x: int) -> int:
	if x == 0 :return 0
	i,j = 1,2**31        
	while i<=j:
		mid = (i+j)//2
		temp = mid*mid
		if temp == x:return mid
		elif temp < x: i = mid+1
		else:
			if (mid-1)*(mid-1) < x:
				return mid-1
			j = mid-1

    """70. Climbing Stairs (Easy)
	You are climbing a stair case. It takes n steps to reach to the top. Each 
	time you can either climb 1 or 2 steps. In how many distinct ways can you 
	climb to the top?

	Note: Given n will be a positive integer.

	Example 1:
	Input: 2
	Output: 2
	Explanation: There are two ways to climb to the top.
	1. 1 step + 1 step
	2. 2 steps

	Example 2:
	Input: 3
	Output: 3
	Explanation: There are three ways to climb to the top.
	1. 1 step + 1 step + 1 step
	2. 1 step + 2 steps
	3. 2 steps + 1 step"""

    def climbStairs(self, n: int) -> int:
        
        @cache
        def fn(k): 
            """Return kth Fibonacci number"""
            if k <= 1: return 1
            return fn(k-1) + fn(k-2)
        
        return fn(n)


    """71. Simplify Path (Medium)
	Given an absolute path for a file (Unix-style), simplify it. Or in other 
	words, convert it to the canonical path. In a UNIX-style file system, a 
	period . refers to the current directory. Furthermore, a double period .. 
	moves the directory up a level. Note that the returned canonical path must 
	always begin with a slash /, and there must be only a single slash / 
	between two directory names. The last directory name (if it exists) must 
	not end with a trailing /. Also, the canonical path must be the shortest 
	string representing the absolute path.

	Example 1:
	Input: "/home/"
	Output: "/home"
	Explanation: Note that there is no trailing slash after the last directory name.

	Example 2:
	Input: "/../"
	Output: "/"
	Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.

	Example 3:
	Input: "/home//foo/"
	Output: "/home/foo"
	Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.

	Example 4:
	Input: "/a/./b/../../c/"
	Output: "/c"

	Example 5:
	Input: "/a/../../b/../c//.//"
	Output: "/c"

	Example 6:
	Input: "/a//b////c/d//././/.."
	Output: "/a/b/c" """

    def simplifyPath(self, path: str) -> str:
        stack = []
        for x in path.split("/"):
                if x == ".." and stack: stack.pop()
                if x not in (".", "..", ""): stack.append(x)
        return "/" + "/".join(stack)


    """72. Edit Distance (Hard)
	Given two words word1 and word2, find the minimum number of operations 
	required to convert word1 to word2. You have the following 3 operations 
	permitted on a word:
	- Insert a character
	- Delete a character
	- Replace a character
	
	Example 1:
	Input: word1 = "horse", word2 = "ros"
	Output: 3
	Explanation: 
	horse -> rorse (replace 'h' with 'r')
	rorse -> rose (remove 'r')
	rose -> ros (remove 'e')

	Example 2:
	Input: word1 = "intention", word2 = "execution"
	Output: 5
	Explanation: 
	intention -> inention (remove 't')
	inention -> enention (replace 'i' with 'e')
	enention -> exention (replace 'n' with 'x')
	exention -> exection (replace 'n' with 'c')
	exection -> execution (insert 'u')"""

    def minDistance(self, word1: str, word2: str) -> int:
        m, n = len(word1), len(word2)
        dp = [n-j for j in range(n+1)]
        for i in reversed(range(m)):
            prev = dp[n]
            dp[n] += 1
            for j in reversed(range(n)): 
                curr = dp[j]
                if word1[i] == word2[j]: dp[j] = prev
                else: dp[j] = 1 + min(dp[j], dp[j+1], prev)
                prev = curr
        return dp[0]


    """73. Set Matrix Zeroes (Medium)
	Given a m x n matrix, if an element is 0, set its entire row and column to 
	0. Do it in-place.

	Example 1:
	Input: 
	[
	  [1,1,1],
	  [1,0,1],
	  [1,1,1]
	]
	Output: 
	[
	  [1,0,1],
	  [0,0,0],
	  [1,0,1]
	]

	Example 2:
	Input: 
	[
	  [0,1,2,0],
	  [3,4,5,2],
	  [1,3,1,5]
	]
	Output: 
	[
	  [0,0,0,0],
	  [0,4,5,0],
	  [0,3,1,0]
	]

	Follow up:
	A straight forward solution using O(mn) space is probably a bad idea. A 
	simple improvement uses O(m + n) space, but still not the best solution.
	Could you devise a constant space solution?"""

    def setZeroes(self, matrix: List[List[int]]) -> None:
        m, n = len(matrix), len(matrix[0])
        zero = False 
        
        for i in range(m):
            if not matrix[i][0]: zero = True
            for j in range(1, n): 
                if not matrix[i][j]: matrix[i][0] = matrix[0][j] = 0
        
        for i in reversed(range(m)):
            for j in reversed(range(1, n)):
                if not matrix[i][0] or not matrix[0][j]: matrix[i][j] = 0
            if zero: matrix[i][0] = 0


    """74. Search a 2D Matrix (Medium)
	Write an efficient algorithm that searches for a value in an m x n matrix. 
	This matrix has the following properties: 
	- Integers in each row are sorted from left to right.
	- The first integer of each row is greater than the last integer of the 
	previous row.
	
	Example 1:
	Input:
	matrix = [
	  [1,   3,  5,  7],
	  [10, 11, 16, 20],
	  [23, 30, 34, 50]
	]
	target = 3
	Output: true

	Example 2:
	Input:
	matrix = [
	  [1,   3,  5,  7],
	  [10, 11, 16, 20],
	  [23, 30, 34, 50]
	]
	target = 13
	Output: false"""

    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        m, n = len(matrix), len(matrix[0])
        lo, hi = 0, m*n
        while lo < hi: 
            mid = lo + hi >> 1
            i, j = divmod(mid, n)
            if matrix[i][j] < target: lo = mid + 1
            elif matrix[i][j] == target: return True 
            else: hi = mid
        return False 


    """75. Sort Colors (Medium)
	Given an array with n objects colored red, white or blue, sort them in-
	place so that objects of the same color are adjacent, with the colors in 
	the order red, white and blue. Here, we will use the integers 0, 1, and 2 
	to represent the color red, white, and blue respectively.

	Note: You are not suppose to use the library's sort function for this problem.

	Example:
	Input: [2,0,2,1,1,0]
	Output: [0,0,1,1,2,2]
	Follow up:

	A rather straight forward solution is a two-pass algorithm using counting 
	sort. First, iterate the array counting number of 0's, 1's, and 2's, then 
	overwrite array with total number of 0's, then 1's and followed by 2's.
	Could you come up with a one-pass algorithm using only constant space?"""

    def sortColors(self, nums: List[int]) -> None:
        # Dijkstra's 3-way partitioning
        lo, mid, hi = 0, 0, len(nums)-1
        while mid <= hi: 
            if nums[mid] == 0: 
                nums[lo], nums[mid] = nums[mid], nums[lo]
                lo += 1
                mid += 1
            elif nums[mid] == 1: mid += 1
            else: 
                nums[hi], nums[mid] = nums[mid], nums[hi]
                hi -= 1
        

    """76. Minimum Window Substring (Hard)
	Given a string S and a string T, find the minimum window in S which will 
	contain all the characters in T in complexity O(n).

	Example:
	Input: S = "ADOBECODEBANC", T = "ABC"
	Output: "BANC"
	Note:

	If there is no such window in S that covers all characters in T, return the 
	empty string "". If there is such window, you are guaranteed that there 
	will always be only one unique minimum window in S."""

    def minWindow(self, s: str, t: str) -> str:
        freq = dict()
        for c in t: freq[c] = 1 + freq.get(c, 0) #target freq table 
        
        count = ii = jj = 0
        queue, ts = deque(), set(t)
        for j, c in enumerate(s):
            if c in ts: 
                queue.append((j, c))
                freq[c] -= 1
                if freq[c] == 0: count += 1 #enough c in s
                while count == len(ts): 
                    i, c = queue.popleft()
                    if not jj or j - i < jj - ii: ii, jj = i, j+1
                    if freq[c] == 0: count -= 1 #not enough c in s
                    freq[c] += 1
        return s[ii:jj]


    """77. Combinations (Medium)
	Given two integers n and k, return all possible combinations of k numbers 
	out of 1 ... n.

	Example:
	Input: n = 4, k = 2
	Output:
	[
	  [2,4],
	  [3,4],
	  [2,3],
	  [1,2],
	  [1,3],
	  [1,4],
	]"""

    def combine(self, n: int, k: int) -> List[List[int]]:
        ans, stack = [], []
        x = 1
        while True:
            if len(stack) == k: ans.append(stack.copy())
            if len(stack) == k or k - len(stack) > n - x + 1:
                if not stack: break
                x = stack.pop() + 1
            else:
                stack.append(x)
                x += 1
        return ans 


    """78. Subsets (Medium)
	Given a set of distinct integers, nums, return all possible subsets (the 
	power set). Note that the solution set must not contain duplicate subsets.

	Example:
	Input: nums = [1,2,3]
	Output:
	[
	  [3],
	  [1],
	  [2],
	  [1,2,3],
	  [1,3],
	  [2,3],
	  [1,2],
	  []
	]"""

    def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = []
        for m in range(1 << len(nums)): 
            seq = []
            for i in range(len(nums)):
                if m & 1 << i: seq.append(nums[i])
            ans.append(seq)
        return ans 


    """79. Word Search (Medium)
	Given a 2D board and a word, find if the word exists in the grid. The word 
	can be constructed from letters of sequentially adjacent cell, where 
	"adjacent" cells are those horizontally or vertically neighboring. The same 
	letter cell may not be used more than once.

	Example:
	board =
	[
	  ['A','B','C','E'],
	  ['S','F','C','S'],
	  ['A','D','E','E']
	]

	Given word = "ABCCED", return true.
	Given word = "SEE", return true.
	Given word = "ABCB", return false.

	Constraints:
	board and word consists only of lowercase and uppercase English letters.
	1 <= board.length <= 200
	1 <= board[i].length <= 200
	1 <= word.length <= 10^3"""

    def exist(self, board: List[List[str]], word: str) -> bool:
        m, n = len(board), len(board[0])
        
        def fn(i, j, k): 
            """Return True if a match is found."""
            if k == len(word)-1: return True 
            temp = board[i][j]
            board[i][j] = '#'
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < m and 0 <= jj < n and board[ii][jj] == word[k+1] and fn(ii, jj, k+1): return True 
            board[i][j] = temp 
            return False 
        
        for i in range(m):
            for j in range(n):
                if board[i][j] == word[0] and fn(i, j, 0): return True 
        return False 


    """80. Remove Duplicates from Sorted Array II (Medium)
	Given a sorted array nums, remove the duplicates in-place such that 
	duplicates appeared at most twice and return the new length. Do not 
	allocate extra space for another array, you must do this by modifying the 
	input array in-place with O(1) extra memory.

	Example 1:
	Given nums = [1,1,1,2,2,3], your function should return length = 5, with 
	the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It 
	doesn't matter what you leave beyond the returned length.
	
	Example 2:
	Given nums = [0,0,1,1,1,1,2,3,3], your function should return length = 7, 
	with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 
	and 3 respectively. It doesn't matter what values are set beyond the 
	returned length.
	
	Clarification:
	Confused why the returned value is an integer but your answer is an array?
	Note that the input array is passed in by reference, which means 
	modification to the input array will be known to the caller as well.

	Internally you can think of this:
	// nums is passed in by reference. (i.e., without making a copy)
	int len = removeDuplicates(nums);

	// any modification to nums in your function would be known by the caller.
	// using the length returned by your function, it prints the first len 
	elements.
	for (int i = 0; i < len; i++) {
	    print(nums[i]);
	}"""

    def removeDuplicates(self, nums: List[int]) -> int:
        i = 0
        for num in nums:
            if i < 2 or nums[i-2] < num: 
                nums[i] = num
                i += 1
        return i


    """81. Search in Rotated Sorted Array II (Medium)
	Suppose an array sorted in ascending order is rotated at some pivot unknown 
	to you beforehand. (i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]). 
	You are given a target value to search. If found in the array return true, 
	otherwise return false.

	Example 1:
	Input: nums = [2,5,6,0,0,1,2], target = 0
	Output: true

	Example 2:
	Input: nums = [2,5,6,0,0,1,2], target = 3
	Output: false

	Follow up: This is a follow up problem to Search in Rotated Sorted Array, 
	where nums may contain duplicates. Would this affect the run-time 
	complexity? How and why?"""

    def search(self, nums: List[int], target: int) -> bool:
        lo, hi = 0, len(nums)-1
        while lo <= hi: 
            mid = lo + hi >> 1
            if nums[mid] == target: return True 
            if nums[lo] == nums[mid] == nums[hi]: 
                lo += 1
                hi -= 1
            elif nums[lo] <= nums[mid]: 
                if nums[lo] <= target < nums[mid]: hi = mid - 1
                else: lo = mid + 1
            else: 
                if nums[mid] < target <= nums[hi]: lo = mid + 1
                else: hi = mid - 1
        return False 


    """82. Remove Duplicates from Sorted List II (Medium)
	Given a sorted linked list, delete all nodes that have duplicate numbers, 
	leaving only distinct numbers from the original list. Return the linked 
	list sorted as well.

	Example 1:
	Input: 1->2->3->3->4->4->5
	Output: 1->2->5

	Example 2:
	Input: 1->1->1->2->3
	Output: 2->3"""

    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummy = node = ListNode(next=head)
        while node and node.next: 
            temp = node.next
            while temp and node.next.val == temp.val: temp = temp.next 
            if node.next.next == temp: node = node.next
            else: node.next = temp
        return dummy.next 


    """83. Remove Duplicates from Sorted List (Easy)
	Given a sorted linked list, delete all duplicates such that each element 
	appear only once.

	Example 1:
	Input: 1->1->2
	Output: 1->2

	Example 2:
	Input: 1->1->2->3->3
	Output: 1->2->3"""

    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        node = head 
        while node: 
            if node.next and node.val == node.next.val: node.next = node.next.next 
            else: node = node.next
        return head 
        

    """84. Largest Rectangle in Histogram (Hard)
	Given n non-negative integers representing the histogram's bar height where 
	the width of each bar is 1, find the area of largest rectangle in the 
	histogram.

	Example:
	Input: [2,1,5,6,2,3]
	Output: 10"""

    def largestRectangleArea(self, heights: List[int]) -> int:
        ans, stack = 0, [] #mono-stack (non-decreasing)
        for i in range(len(heights)+1): 
            height = heights[i] if i < len(heights) else 0
            
            while stack and heights[stack[-1]] > height: 
                h = heights[stack.pop()]
                w = i - 1 - stack[-1] if stack else i
                ans = max(ans, h*w)
            stack.append(i)
        return ans 


    """85. Maximal Rectangle (Hard)
	Given a 2D binary matrix filled with 0's and 1's, find the largest 
	rectangle containing only 1's and return its area.

	Example:
	Input:
	[
	  ["1","0","1","0","0"],
	  ["1","0","1","1","1"],
	  ["1","1","1","1","1"],
	  ["1","0","0","1","0"]
	]
	Output: 6"""

    def maximalRectangle(self, matrix: List[List[str]]) -> int:
        if not matrix: return 0
        ans, m, n = 0, len(matrix), len(matrix[0])
        height, lo, hi = [0]*n, [0]*n, [n]*n #height, lower & upper bound 
        
        for i in range(m): 
            left, right = 0, n #[left:right]
            for j in range(n): 
                if matrix[i][j] == "0": 
                    height[j] = lo[j] = 0
                    left = j+1
                else: 
                    height[j] += 1
                    lo[j] = max(lo[j], left)
                    
                if matrix[i][~j] == "0": 
                    right = n-j-1
                    hi[~j] = n
                else: 
                    hi[~j] = min(hi[~j], right)
            ans = max(ans, max(x*(z-y) for x, y, z in zip(height, lo, hi)))
        return ans 


    """86. Partition List (Medium)
	Given a linked list and a value x, partition it such that all nodes less 
	than x come before nodes greater than or equal to x. You should preserve 
	the original relative order of the nodes in each of the two partitions.

	Example:
	Input: head = 1->4->3->2->5->2, x = 3
	Output: 1->2->2->4->3->5"""

    def partition(self, head: ListNode, x: int) -> ListNode:
        dummy1 = node1 = ListNode()
        dummy2 = node2 = ListNode()
        node = head
        
        while node: 
            if node.val < x: node1.next = node1 = node
            else: node2.next = node2 = node
            node = node.next 
        node1.next = dummy2.next
        node2.next = None
        return dummy1.next


    """87. Scramble String (Hard)
	Given a string s1, we may represent it as a binary tree by partitioning it 
	to two non-empty substrings recursively. Below is one possible 
	representation of s1 = "great":

	    great
	   /    \
	  gr    eat
	 / \    /  \
	g   r  e   at
	           / \
	          a   t
	
	To scramble the string, we may choose any non-leaf node and swap its two 
	children. For example, if we choose the node "gr" and swap its two 
	children, it produces a scrambled string "rgeat".

	    rgeat
	   /    \
	  rg    eat
	 / \    /  \
	r   g  e   at
	           / \
	          a   t
	
	We say that "rgeat" is a scrambled string of "great". Similarly, if we 
	continue to swap the children of nodes "eat" and "at", it produces a 
	scrambled string "rgtae".

	    rgtae
	   /    \
	  rg    tae
	 / \    /  \
	r   g  ta  e
	       / \
	      t   a
	
	We say that "rgtae" is a scrambled string of "great". Given two strings s1 
	and s2 of the same length, determine if s2 is a scrambled string of s1.

	Example 1:
	Input: s1 = "great", s2 = "rgeat"
	Output: true

	Example 2:
	Input: s1 = "abcde", s2 = "caebd"
	Output: false"""

    def isScramble(self, s1: str, s2: str) -> bool:
        
        def fn(s1, s2):
            """Return True if s1 is a scrambled string of s2"""
            if len(s1) == 1: return s1 == s2
            if sorted(s1) != sorted(s2): return False #160ms -> 50ms
            return any(fn(s1[:i], s2[:i]) and fn(s1[i:], s2[i:]) or fn(s1[:i], s2[-i:]) and fn(s1[i:], s2[:-i]) for i in range(1, len(s1)))
        
        return fn(s1, s2)


    """88. Merge Sorted Array (Easy)
	Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as 
	one sorted array.

	Note:
	The number of elements initialized in nums1 and nums2 are m and n respectively.
	You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.

	Example:
	Input:
	nums1 = [1,2,3,0,0,0], m = 3
	nums2 = [2,5,6],       n = 3
	Output: [1,2,2,3,5,6]"""

    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        while n: 
            if m and nums1[m-1] >= nums2[n-1]: 
                nums1[m+n] = nums1[(m:=m-1)]
            else: 
                nums1[m+n] = nums2[(n:=n-1)]


    """89. Gray Code (Medium)
	The gray code is a binary numeral system where two successive values differ 
	in only one bit. Given a non-negative integer n representing the total 
	number of bits in the code, print the sequence of gray code. A gray code 
	sequence must begin with 0.

	Example 1:
	Input: 2
	Output: [0,1,3,2]
	Explanation:
	00 - 0
	01 - 1
	11 - 3
	10 - 2

	For a given n, a gray code sequence may not be uniquely defined. For 
	example, [0,2,3,1] is also a valid gray code sequence.

	00 - 0
	10 - 2
	11 - 3
	01 - 1
	
	Example 2:
	Input: 0
	Output: [0]
	Explanation: We define the gray code sequence to begin with 0. A gray code 
	sequence of n has size = 2n, which for n = 0 the size is 20 = 1. Therefore, 
	for n = 0 the gray code sequence is [0]."""

    def grayCode(self, n: int) -> List[int]:
        return [i ^ (i>>1) for i in range(1 << n)]


    """90. Subsets II (Medium)
	Given a collection of integers that might contain duplicates, nums, return 
	all possible subsets (the power set). Note that the solution set must not 
	contain duplicate subsets.

	Example:
	Input: [1,2,2]
	Output:
	[
	  [2],
	  [1],
	  [1,2,2],
	  [2,2],
	  [1,2],
	  []
	]"""

    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        ans = [[]]
        sz = 0
        for i in range(len(nums)): 
            if i and nums[i-1] == nums[i]: ii = sz
            else: ii = 0 
            sz = len(ans)
            while ii < sz: 
                ans.append(ans[ii] + [nums[i]])
                ii += 1
        return ans 


    """91. Decode Ways (Medium)
	A message containing letters from A-Z is being encoded to numbers using the 
	following mapping:

	'A' -> 1
	'B' -> 2
	...
	'Z' -> 26
	
	Given a non-empty string containing only digits, determine the total number 
	of ways to decode it.

	Example 1:
	Input: "12"
	Output: 2
	Explanation: It could be decoded as "AB" (1 2) or "L" (12).

	Example 2:
	Input: "226"
	Output: 3
	Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6)."""

    def numDecodings(self, s: str) -> int:
        dp = [0]*(len(s) + 1)
        dp[0] = 1
        for i, x in enumerate(s): 
            if x != '0' and dp[i]: 
                dp[i+1] += dp[i]
                if i+1 < len(s) and s[i:i+2] <= "26": dp[i+2] += dp[i]
        return dp[-1]


    """92. Reverse Linked List II (Medium)
	Reverse a linked list from position m to n. Do it in one-pass. Note: 
	1 ≤ m ≤ n ≤ length of list.

	Example:
	Input: 1->2->3->4->5->NULL, m = 2, n = 4
	Output: 1->4->3->2->5->NULL"""

    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:
        dummy = node = ListNode(next=head)
        prev = None
        for _ in range(left): node, prev = node.next, node 
        pp, nn = prev, node 
        
        for _ in range(left, right+1): node.next, node, prev = prev, node.next, node 
        pp.next, nn.next = prev, node
        
        return dummy.next 


    """93. Restore IP Addresses (Medium)
	Given a string containing only digits, restore it by returning all possible 
	valid IP address combinations. A valid IP address consists of exactly four 
	integers (each integer is between 0 and 255) separated by single points.

	Example:
	Input: "25525511135"
	Output: ["255.255.11.135", "255.255.111.35"]"""

    def restoreIpAddresses(self, s: str) -> List[str]:
        
        def fn(i, n): 
            """Populate ans with a stack through backtracking"""
            if not (n <= len(s)-i <= 3*n): return 
            if i == len(s): return ans.append(".".join(stack))
            k = i+1 if s[i] == "0" else i+3
            for j in range(i+1, min(k, len(s))+1): 
                if j == i+3 and s[i:j] > "255": continue
                stack.append(s[i:j])
                fn(j, n-1)
                stack.pop()
            
        ans, stack = [], []
        fn(0, 4)
        return ans 


    """94. Binary Tree Inorder Traversal (Medium)
	Given a binary tree, return the inorder traversal of its nodes' values.

	Example:
	Input: [1,null,2,3]
	   1
	    \
	     2
	    /
	   3

	Output: [1,3,2]"""

    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        ans, stack = [], []
        node = root
        while node or stack:
            if node: 
                stack.append(node)
                node = node.left
            else: 
                node = stack.pop()
                ans.append(node.val)
                node = node.right
        return ans 


    """95. Unique Binary Search Trees II (Medium)
	Given an integer n, generate all structurally unique BST's (binary search 
	trees) that store values 1 ... n.

	Example:
	Input: 3
	Output:
	[
	  [1,null,3,2],
	  [3,2,null,1],
	  [3,1,null,null,2],
	  [2,1,3],
	  [1,null,2,null,3]
	]
	Explanation:
	The above output corresponds to the 5 unique BST's shown below:

	   1         3     3      2      1
	    \       /     /      / \      \
	     3     2     1      1   3      2
	    /     /       \                 \
	   2     1         2                 3
	 
	Constraints: 0 <= n <= 8"""

    def generateTrees(self, n: int) -> List[TreeNode]:
        
        @cache
        def fn(lo, hi):
            """Return root of tree using numbers from lo (inclusive) to hi (exclusive)"""
            if lo == hi: return [None]
            ans = []
            for mid in range(lo, hi): 
                for left in fn(lo, mid): 
                    for right in fn(mid+1, hi): 
                        ans.append(TreeNode(mid, left, right))
            return ans 
        
        return fn(1, n+1)


    """96. Unique Binary Search Trees (Medium)
	Given n, how many structurally unique BST's (binary search trees) that 
	store values 1 ... n?

	Example:
	Input: 3
	Output: 5
	Explanation:
	Given n = 3, there are a total of 5 unique BST's:

	   1         3     3      2      1
	    \       /     /      / \      \
	     3     2     1      1   3      2
	    /     /       \                 \
	   2     1         2                 3"""

    def numTrees(self, n: int) -> int:
        # Catalan number
        ans = 1
        for i in range(n): 
            ans *= 2*n-i
            ans //= i+1
        return ans//(n+1)


    """97. Interleaving String (Hard)
	Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and 
	s2.

	Example 1:
	Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
	Output: true

	Example 2:
	Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
	Output: false"""

    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        if len(s1) + len(s2) != len(s3): return False 
        
        dp = [False]*len(s2) + [True]
        for i in reversed(range(len(s1)+1)): 
            for j in reversed(range(len(s2)+1)): 
                if i < len(s1): dp[j] = (dp[j] and s1[i] == s3[i+j])
                if j < len(s2): dp[j] = dp[j] or (dp[j+1] and s2[j] == s3[i+j])
        return dp[0]


    """98. Validate Binary Search Tree (Medium)
	Given a binary tree, determine if it is a valid binary search tree (BST). 
	Assume a BST is defined as follows: The left subtree of a node contains 
	only nodes with keys less than the node's key. The right subtree of a node 
	contains only nodes with keys greater than the node's key. Both the left 
	and right subtrees must also be binary search trees.

	Example 1:

	    2
	   / \
	  1   3

	Input: [2,1,3]
	Output: true

	Example 2:

	    5
	   / \
	  1   4
	     / \
	    3   6

	Input: [5,1,4,null,null,3,6]
	Output: false
	Explanation: The root node's value is 5 but its right child's value is 4."""

    def isValidBST(self, root: TreeNode) -> bool:
        stack = [(root, -inf, inf)]
        while stack: 
            node, lo, hi = stack.pop()
            if lo < node.val < hi: 
                if node.left: stack.append((node.left, lo, node.val))
                if node.right: stack.append((node.right, node.val, hi))
            else: return False 
        return True 


    """99. Recover Binary Search Tree (Hard)
	Two elements of a binary search tree (BST) are swapped by mistake. Recover 
	the tree without changing its structure.

	Example 1:
	Input: [1,3,null,null,2]

	   1
	  /
	 3
	  \
	   2

	Output: [3,1,null,null,2]

	   3
	  /
	 1
	  \
	   2

	Example 2:
	Input: [3,1,4,null,null,2]

	  3
	 / \
	1   4
	   /
	  2

	Output: [2,1,4,null,null,3]

	  2
	 / \
	1   4
	   /
	  3

	Follow up:
	A solution using O(n) space is pretty straight forward.
	Could you devise a constant space solution?"""

    def recoverTree(self, root: TreeNode) -> None:
        node, stack = root, []
        prev = lo = hi = None
        while stack or node:
            if node:
                stack.append(node)
                node = node.left
                continue
            node = stack.pop()
            if prev and prev.val > node.val:
                if not lo: lo, hi = prev, node
                else: hi = node
            prev = node
            node = node.right 
        lo.val, hi.val = hi.val, lo.val 


    """100. Same Tree (Easy)
	Given two binary trees, write a function to check if they are the same or 
	not. Two binary trees are considered the same if they are structurally 
	identical and the nodes have the same value.

	Example 1:
	Input:     1         1
	          / \       / \
	         2   3     2   3

	        [1,2,3],   [1,2,3]

	Output: true

	Example 2:
	Input:     1         1
	          /           \
	         2             2

	        [1,2],     [1,null,2]

	Output: false

	Example 3:
	Input:     1         1
	          / \       / \
	         2   1     1   2

	        [1,2,1],   [1,1,2]

	Output: false"""

    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        
        def fn(p, q): 
            """Return True if trees rooted at p and q are structurally identical"""
            if not p or not q: return p is q
            return fn(p.left, q.left) and p.val == q.val and fn(p.right, q.right)
        
        return fn(p, q)


    """101. Symmetric Tree (Easy)
	Given a binary tree, check whether it is a mirror of itself (ie, symmetric 
	around its center). For example, this binary tree [1,2,2,3,4,4,3] is 
	symmetric:

	    1
	   / \
	  2   2
	 / \ / \
	3  4 4  3

	But the following [1,2,2,null,3,null,3] is not:

	    1
	   / \
	  2   2
	   \   \
	   3    3

	Follow up: Solve it both recursively and iteratively."""

    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        stack = [(root, root)]
        while stack: 
            p, q = stack.pop()
            if not p and not q: continue
            if not p or not q or p.val != q.val: return False 
            stack.append((p.left, q.right))
            stack.append((p.right, q.left))
        return True 


    """102. Binary Tree Level Order Traversal (Medium)
	Given a binary tree, return the level order traversal of its nodes' values. 
	(ie, from left to right, level by level).

	For example:
	Given binary tree [3,9,20,null,null,15,7],
	    3
	   / \
	  9  20
	    /  \
	   15   7
	return its level order traversal as:
	[
	  [3],
	  [9,20],
	  [15,7]
	]"""

    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        ans = []
        if root: 
            queue = deque([root])
            while queue: 
                vals = []
                for _ in range(len(queue)): 
                    node = queue.popleft()
                    vals.append(node.val)
                    if node.left: queue.append(node.left)
                    if node.right: queue.append(node.right)
                ans.append(vals)
        return ans 


    """103. Binary Tree Zigzag Level Order Traversal (Medium)
	Given a binary tree, return the zigzag level order traversal of its nodes' 
	values. (ie, from left to right, then right to left for the next level and 
	alternate between).

	For example:
	Given binary tree [3,9,20,null,null,15,7],
	    3
	   / \
	  9  20
	    /  \
	   15   7
	return its zigzag level order traversal as:
	[
	  [3],
	  [20,9],
	  [15,7]
	]"""

    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        ans = []
        flag = 0
        if root: 
            queue = deque([root])
            while queue: 
                vals = []
                for _ in range(len(queue)): 
                    node = queue.popleft()
                    vals.append(node.val)
                    if node.left: queue.append(node.left)
                    if node.right: queue.append(node.right)
                ans.append(vals[::-1] if flag else vals)
                flag ^= 1
        return ans 


    """104. Maximum Depth of Binary Tree (Easy)
	Given a binary tree, find its maximum depth. The maximum depth is the 
	number of nodes along the longest path from the root node down to the 
	farthest leaf node. Note that a leaf is a node with no children.

	Example:
	Given binary tree [3,9,20,null,null,15,7],

	    3
	   / \
	  9  20
	    /  \
	   15   7"""

    def maxDepth(self, root: Optional[TreeNode]) -> int:
        ans = 0
        if root: 
            stack = [(root, 1)]
            while stack: 
                node, d = stack.pop()
                ans = max(ans, d)
                if node.right: stack.append((node.right, d+1))
                if node.left: stack.append((node.left, d+1))
        return ans 


    """105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)
	Given preorder and inorder traversal of a tree, construct the binary tree.

	Note: You may assume that duplicates do not exist in the tree.

	For example, given
	preorder = [3,9,20,15,7]
	inorder = [9,3,15,20,7]
	Return the following binary tree:

	    3
	   / \
	  9  20
	    /  \
	   15   7"""

    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        loc = {x : i for i, x in enumerate(inorder)}
        root = None
        stack = []
        for x in preorder: 
            if not root: root = node = TreeNode(x)
            elif loc[x] < loc[node.val]: 
                stack.append(node)
                node.left = node = TreeNode(x)
            else: 
                while stack and loc[stack[-1].val] < loc[x]: node = stack.pop()
                node.right = node = TreeNode(x)
        return root


    """106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)
	Given inorder and postorder traversal of a tree, construct the binary tree.

	Note that you may assume that duplicates do not exist in the tree.

	For example, given inorder = [9,3,15,20,7] and postorder = [9,15,7,20,3], 
	return the following binary tree:

	    3
	   / \
	  9  20
	    /  \
	   15   7"""

    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        loc = {x : i for i, x in enumerate(inorder)}
        root = None
        stack = []
        for x in reversed(postorder): 
            if not root: root = node = TreeNode(x)
            elif loc[node.val] < loc[x]: 
                stack.append(node)
                node.right = node = TreeNode(x)
            else: 
                while stack and loc[x] < loc[stack[-1].val]: node = stack.pop()
                node.left = node = TreeNode(x)
        return root


    """107. Binary Tree Level Order Traversal II (Easy)
	Given a binary tree, return the bottom-up level order traversal of its 
	nodes' values. (ie, from left to right, level by level from leaf to root).

	For example:
	Given binary tree [3,9,20,null,null,15,7],
	    3
	   / \
	  9  20
	    /  \
	   15   7
	return its bottom-up level order traversal as:
	[
	  [15,7],
	  [9,20],
	  [3]
	]"""

    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        ans, queue = [], [root]
        while queue: 
            tmp, val = [], []
            for node in queue: 
                if node: 
                    val.append(node.val)
                    tmp.extend([node.left, node.right])
            if val: ans.append(val)
            queue = tmp
        return ans[::-1]


    """108. Convert Sorted Array to Binary Search Tree (Easy)
	Given an array where elements are sorted in ascending order, convert it to 
	a height balanced BST. For this problem, a height-balanced binary tree is 
	defined as a binary tree in which the depth of the two subtrees of every 
	node never differ by more than 1.

	Example:
	Given the sorted array: [-10,-3,0,5,9], one possible answer is: 
	[0,-3,9,-10,null,5], which represents the following height balanced BST:

	      0
	     / \
	   -3   9
	   /   /
	 -10  5"""

    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        
        def fn(lo, hi):
            """Return BST for nums[lo:hi]"""
            if lo == hi: return None
            mid = (lo + hi)//2
            return TreeNode(nums[mid], fn(lo, mid), fn(mid+1, hi))
        
        return fn(0, len(nums))


    """109. Convert Sorted List to Binary Search Tree (Medium)
	Given a singly linked list where elements are sorted in ascending order, 
	convert it to a height balanced BST. For this problem, a height-balanced 
	binary tree is defined as a binary tree in which the depth of the two 
	subtrees of every node never differ by more than 1.

	Example:
	Given the sorted linked list: [-10,-3,0,5,9], one possible answer is: 
	[0,-3,9,-10,null,5], which represents the following height balanced BST:

	      0
	     / \
	   -3   9
	   /   /
	 -10  5"""

    def sortedListToBST(self, head: ListNode) -> TreeNode:
        node, n = head, 0
        while node: node, n = node.next, n+1
            
        def fn(lo, hi, node): 
            """Return root of tree using nodes from lo (inclusive) to hi (exclusive)"""
            if lo == hi: return None, node
            mid = (lo + hi)//2
            left, node = fn(lo, mid, node)
            ans = TreeNode(node.val, left=left)
            node = node.next
            ans.right, node = fn(mid+1, hi, node)
            return ans, node
        
        return fn(0, n, head)[0]


    """110. Balanced Binary Tree (Easy)
	Given a binary tree, determine if it is height-balanced. For this problem, 
	a height-balanced binary tree is defined as: a binary tree in which the 
	left and right subtrees of every node differ in height by no more than 1.

	Example 1:
	Given the following tree [3,9,20,null,null,15,7]:

	    3
	   / \
	  9  20
	    /  \
	   15   7
	Return true.

	Example 2:
	Given the following tree [1,2,2,3,3,null,null,4,4]:

	       1
	      / \
	     2   2
	    / \
	   3   3
	  / \
	 4   4
	Return false."""

    def isBalanced(self, root: TreeNode) -> bool:
        
        def fn(node):
            """Return flag of balance and height of given node"""
            if not node: return True, 0
            tf0, h0 = fn(node.left)
            tf1, h1 = fn(node.right)
            return tf0 and tf1 and abs(h0-h1) <= 1, 1 + max(h0, h1)
        
        return fn(root)[0]


    """111. Minimum Depth of Binary Tree (Easy)
	Given a binary tree, find its minimum depth. The minimum depth is the 
	number of nodes along the shortest path from the root node down to the 
	nearest leaf node. Note that a leaf is a node with no children.

	Example:
	Given binary tree [3,9,20,null,null,15,7],

	    3
	   / \
	  9  20
	    /  \
	   15   7
	return its minimum depth = 2."""

    def minDepth(self, root: TreeNode) -> int:
        
        def fn(node):
            """Return minimum depth of given node"""
            if not node: return 0
            if not node.left or not node.right: return 1 + fn(node.left) + fn(node.right)
            return 1 + min(fn(node.left), fn(node.right))
        
        return fn(root)


    """112. Path Sum (Easy)
	Given a binary tree and a sum, determine if the tree has a root-to-leaf 
	path such that adding up all the values along the path equals the given 
	sum. Note that a leaf is a node with no children.

	Example:
	Given the below binary tree and sum = 22,

	      5
	     / \
	    4   8
	   /   / \
	  11  13  4
	 /  \      \
	7    2      1
	return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22."""

    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        stack = [(root, 0)]
        while stack: 
            node, val = stack.pop()
            if node: 
                val += node.val 
                if not node.left and not node.right and val == targetSum: return True 
                stack.append((node.right, val))
                stack.append((node.left, val))
        return False 


    """113. Path Sum II (Medium)
	Given a binary tree and a sum, find all root-to-leaf paths where each 
	path's sum equals the given sum. Note that a leaf is a node with no 
	children.

	Example:
	Given the below binary tree and sum = 22,

	      5
	     / \
	    4   8
	   /   / \
	  11  13  4
	 /  \    / \
	7    2  5   1
	Return:

	[
	   [5,4,11,2],
	   [5,8,4,5]
	]"""

    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        ans = []
        if root: 
            mp = {root: None}
            stack = [(root, 0)]
            while stack: 
                node, val = stack.pop()
                val += node.val 
                if node.left: 
                    mp[node.left] = node
                    stack.append((node.left, val))
                if node.right: 
                    mp[node.right] = node 
                    stack.append((node.right, val))
                if not node.left and not node.right and val == targetSum: 
                    path = []
                    while node: 
                        path.append(node.val)
                        node = mp[node]
                    ans.append(path[::-1])
        return ans 


    """114. Flatten Binary Tree to Linked List (Medium)
	Given a binary tree, flatten it to a linked list in-place.

	For example, given the following tree:

	    1
	   / \
	  2   5
	 / \   \
	3   4   6

	The flattened tree should look like:

	1
	 \
	  2
	   \
	    3
	     \
	      4
	       \
	        5
	         \
	          6"""

    def flatten(self, root: TreeNode) -> None:
        
        def fn(node, tail=None):
            """Return head of flattened binary tree"""
            if not node: return tail
            node.left, node.right = None, fn(node.left, fn(node.right, tail))
            return node
        
        return fn(root)


    """115. Distinct Subsequences (Hard)
	Given a string S and a string T, count the number of distinct subsequences 
	of S which equals T. A subsequence of a string is a new string which is 
	formed from the original string by deleting some (can be none) of the 
	characters without disturbing the relative positions of the remaining 
	characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not). 
	It's guaranteed the answer fits on a 32-bit signed integer.

	Example 1:
	Input: S = "rabbbit", T = "rabbit"
	Output: 3
	Explanation:
	As shown below, there are 3 ways you can generate "rabbit" from S.
	(The caret symbol ^ means the chosen letters)

	rabbbit
	^^^^ ^^
	rabbbit
	^^ ^^^^
	rabbbit
	^^^ ^^^

	Example 2:
	Input: S = "babgbag", T = "bag"
	Output: 5
	Explanation:
	As shown below, there are 5 ways you can generate "bag" from S.
	(The caret symbol ^ means the chosen letters)

	babgbag
	^^ ^
	babgbag
	^^    ^
	babgbag
	^    ^^
	babgbag
	  ^  ^^
	babgbag
	    ^^^"""

    def numDistinct(self, s: str, t: str) -> int:
        loc = {}
        for i, x in enumerate(t): loc.setdefault(x, []).append(i)
            
        ans = [0]*len(t) + [1]
        for c in reversed(s): 
            for i in pos.get(c, []): ans[i] += ans[i+1]
        return ans[0]


    """116. Populating Next Right Pointers in Each Node (Medium)
	You are given a perfect binary tree where all leaves are on the same 
	level, and every parent has two children. The binary tree has the 
	following definition:

	struct Node {
	  int val;
	  Node *left;
	  Node *right;
	  Node *next;
	}

	Populate each next pointer to point to its next right node. If there is no 
	next right node, the next pointer should be set to NULL. Initially, all 
	next pointers are set to NULL.

	Follow up:
	You may only use constant extra space.
	Recursive approach is fine, you may assume implicit stack space does not 
	count as extra space for this problem.

	Example 1:
	Input: root = [1,2,3,4,5,6,7]
	Output: [1,#,2,3,#,4,5,6,7,#]
	Explanation: Given the above perfect binary tree (Figure A), your function 
	should populate each next pointer to point to its next right node, just 
	like in Figure B. The serialized output is in level order as connected by 
	the next pointers, with '#' signifying the end of each level.

	Constraints:
	The number of nodes in the given tree is less than 4096.
	-1000 <= node.val <= 1000"""

    def connect(self, root: 'Node') -> 'Node':
        head = root
        while head and head.left: 
            node = head
            while node: 
                node.left.next = node.right
                if node.next: node.right.next = node.next.left
                node = node.next
            head = head.left
        return root 


    """117. Populating Next Right Pointers in Each Node II (Medium)
	Given a binary tree

	struct Node {
	  int val;
	  Node *left;
	  Node *right;
	  Node *next;
	}

	Populate each next pointer to point to its next right node. If there is no 
	next right node, the next pointer should be set to NULL. Initially, all 
	next pointers are set to NULL.

	Follow up:
	You may only use constant extra space. Recursive approach is fine, you may 
	assume implicit stack space does not count as extra space for this problem.

	Example 1:
	Input: root = [1,2,3,4,5,null,7]
	Output: [1,#,2,3,#,4,5,7,#]
	Explanation: Given the above binary tree (Figure A), your function should 
	populate each next pointer to point to its next right node, just like in 
	Figure B. The serialized output is in level order as connected by the next 
	pointers, with '#' signifying the end of each level.

	Constraints:
	The number of nodes in the given tree is less than 6000.
	-100 <= node.val <= 100"""

    def connect(self, root: 'Node') -> 'Node':
        if root: 
            queue = deque([root])
            while queue: 
                prev = None 
                for _ in range(len(queue)): 
                    node = queue.popleft()
                    node.next = prev 
                    prev = node 
                    if node.right: queue.append(node.right)
                    if node.left: queue.append(node.left)
        return root


    """118. Pascal's Triangle (Easy)
	Given a non-negative integer numRows, generate the first numRows of 
	Pascal's triangle. In Pascal's triangle, each number is the sum of the two 
	numbers directly above it.

	Example:
	Input: 5
	Output:
	[
	     [1],
	    [1,1],
	   [1,2,1],
	  [1,3,3,1],
	 [1,4,6,4,1]
	]"""

    def generate(self, numRows: int) -> List[List[int]]:
        ans, row = [], []
        for i in range(numRows): 
            row.append(1)
            for j in reversed(range(1, i)): row[j] += row[j-1]
            ans.append(row.copy())
        return ans


    """119. Pascal's Triangle II (Easy)
	Given a non-negative index k where k ≤ 33, return the kth index row of the 
	Pascal's triangle. Note that the row index starts from 0. In Pascal's 
	triangle, each number is the sum of the two numbers directly above it.

	Example:
	Input: 3
	Output: [1,3,3,1]

	Follow up: Could you optimize your algorithm to use only O(k) extra space?"""

    def getRow(self, rowIndex: int) -> List[int]:
        ans = []
        for _ in range(rowIndex+1): 
            ans.append(1)
            for i in reversed(range(1, len(ans)-1)): ans[i] += ans[i-1]
        return ans 


    """120. Triangle (Medium)
	Given a triangle, find the minimum path sum from top to bottom. Each step 
	you may move to adjacent numbers on the row below. For example, given the 
	following triangle

	[
	     [2],
	    [3,4],
	   [6,5,7],
	  [4,1,8,3]
	]

	The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

	Note: Bonus point if you are able to do this using only O(n) extra space, 
	where n is the total number of rows in the triangle."""

    def minimumTotal(self, triangle: List[List[int]]) -> int:
        for i in reversed(range(len(triangle)-1)): 
            for j in range(i+1): 
                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])
        return triangle[0][0]


    """121. Best Time to Buy and Sell Stock (Easy)
	Say you have an array for which the ith element is the price of a given 
	stock on day i. If you were only permitted to complete at most one 
	transaction (i.e., buy one and sell one share of the stock), design an 
	algorithm to find the maximum profit. Note that you cannot sell a stock 
	before you buy one.

	Example 1:
	Input: [7,1,5,3,6,4]
	Output: 5
	Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
	             Not 7-1 = 6, as selling price needs to be larger than buying price.

	Example 2:
	Input: [7,6,4,3,1]
	Output: 0
	Explanation: In this case, no transaction is done, i.e. max profit = 0."""

    def maxProfit(self, prices: List[int]) -> int:
        buy, sell = inf, 0
        for x in prices:
            buy = min(buy, x)
            sell = max(sell, x - buy)
        return sell


    """122. Best Time to Buy and Sell Stock II (Easy)
	Say you have an array prices for which the ith element is the price of a 
	given stock on day i. Design an algorithm to find the maximum profit. You 
	may complete as many transactions as you like (i.e., buy one and sell one 
	share of the stock multiple times). Note: You may not engage in multiple 
	transactions at the same time (i.e., you must sell the stock before you buy 
	again).

	Example 1:
	Input: [7,1,5,3,6,4]
	Output: 7
	Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
	             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.

	Example 2:
	Input: [1,2,3,4,5]
	Output: 4
	Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
	             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
	             engaging multiple transactions at the same time. You must sell before buying again.

	Example 3:
	Input: [7,6,4,3,1]
	Output: 0
	Explanation: In this case, no transaction is done, i.e. max profit = 0.

	Constraints:
	1 <= prices.length <= 3 * 10 ^ 4
	0 <= prices[i] <= 10 ^ 4"""

    def maxProfit(self, prices: List[int]) -> int:
        buy, sell = inf, 0
        for x in prices: 
            buy = min(buy, x - sell)
            sell = max(sell, x - buy)
        return sell


    """123. Best Time to Buy and Sell Stock III (Hard)
	Say you have an array for which the ith element is the price of a given 
	stock on day i. Design an algorithm to find the maximum profit. You may 
	complete at most two transactions. Note that you may not engage in multiple 
	transactions at the same time (i.e., you must sell the stock before you buy 
	again).

	Example 1:
	Input: [3,3,5,0,0,3,1,4]
	Output: 6
	Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
	             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

	Example 2:
	Input: [1,2,3,4,5]
	Output: 4
	Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
	             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
	             engaging multiple transactions at the same time. You must sell before buying again.

	Example 3:
	Input: [7,6,4,3,1]
	Output: 0
	Explanation: In this case, no transaction is done, i.e. max profit = 0."""

    def maxProfit(self, prices: List[int]) -> int:
        buy, sell = [inf]*2, [0]*2
        for x in prices:
            for i in range(2): 
                if i: buy[i] = min(buy[i], x - sell[i-1])
                else: buy[i] = min(buy[i], x)
                sell[i] = max(sell[i], x - buy[i])
        return sell[1]


    """124. Binary Tree Maximum Path Sum (Hard)
	Given a non-empty binary tree, find the maximum path sum. For this problem, 
	a path is defined as any sequence of nodes from some starting node to any 
	node in the tree along the parent-child connections. The path must contain 
	at least one node and does not need to go through the root.

	Example 1:
	Input: [1,2,3]

	       1
	      / \
	     2   3

	Output: 6

	Example 2:
	Input: [-10,9,20,null,null,15,7]

	   -10
	   / \
	  9  20
	    /  \
	   15   7

	Output: 42"""

    def maxPathSum(self, root: TreeNode) -> int:
        
        def fn(node): 
            """Return path sum ending at node and maximum path sum seen so far"""
            if not node: return 0, -inf
            lh, lps = fn(node.left)
            rh, rps = fn(node.right)
            return node.val + max(0, lh, rh), max(lps, rps, node.val + max(0, lh) + max(0, rh))
        
        return fn(root)[1]


    """125. Valid Palindrome (Easy)
	Given a string, determine if it is a palindrome, considering only 
	alphanumeric characters and ignoring cases. Note that for the purpose of 
	this problem, we define empty string as valid palindrome.

	Example 1:
	Input: "A man, a plan, a canal: Panama"
	Output: true

	Example 2:
	Input: "race a car"
	Output: false"""

    def isPalindrome(self, s: str) -> bool:
        s = "".join(c for c in s.lower() if c.isalnum())
        return s == s[::-1]


    """126. Word Ladder II (Hard)
	Given two words (beginWord and endWord), and a dictionary's word list, find 
	all shortest transformation sequence(s) from beginWord to endWord, such 
	that:
	1) Only one letter can be changed at a time
	2) Each transformed word must exist in the word list. Note that beginWord 
	is not a transformed word.
	
	Note:
	* Return an empty list if there is no such transformation sequence.
	* All words have the same length.
	* All words contain only lowercase alphabetic characters.
	* You may assume no duplicates in the word list.
	* You may assume beginWord and endWord are non-empty and are not the same.
	
	Example 1:
	Input:
	beginWord = "hit",
	endWord = "cog",
	wordList = ["hot","dot","dog","lot","log","cog"]

	Output:
	[
	  ["hit","hot","dot","dog","cog"],
	  ["hit","hot","lot","log","cog"]
	]
	
	Example 2:
	Input:
	beginWord = "hit"
	endWord = "cog"
	wordList = ["hot","dot","dog","lot","log"]

	Output: []

	Explanation: The endWord "cog" is not in wordList, therefore no possible 
	transformation."""

    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:
        if endWord not in wordList: return [] # edge case 
        
        graph = {}
        for word in wordList: 
            for i in range(len(word)): 
                key = word[:i] + "*" + word[i+1:]
                graph.setdefault(key, []).append(word)
        
        queue = [beginWord]
        prev = {beginWord: set()}
        while queue: 
            qq = []
            pp = {}
            for w in queue: 
                for i in range(len(w)): 
                    key = w[:i] + "*" + w[i+1:]
                    for ww in graph.get(key, []): 
                        if ww not in prev:  
                            qq.append(ww)
                            pp.setdefault(ww, set()).add(w)
            queue = qq
            prev.update(pp)
            if endWord in prev: break 
        
        if endWord not in prev: return []
        
        ans = [[endWord]]
        while prev[ans[0][-1]]: 
            newq = []
            for seq in ans: 
                w = seq[-1]
                for i, ww in enumerate(prev[w]): 
                    newq.append(seq + [ww])
            ans = newq
        return [x[::-1] for x in ans]


    """127. Word Ladder (Medium)
	Given two words (beginWord and endWord), and a dictionary's word list, 
	find the length of shortest transformation sequence from beginWord to 
	endWord, such that:
	1) Only one letter can be changed at a time.
	2) Each transformed word must exist in the word list.
	
	Note:
	* Return 0 if there is no such transformation sequence.
	* All words have the same length.
	* All words contain only lowercase alphabetic characters.
	* You may assume no duplicates in the word list.
	* You may assume beginWord and endWord are non-empty and are not the same.
	
	Example 1:
	Input:
	beginWord = "hit",
	endWord = "cog",
	wordList = ["hot","dot","dog","lot","log","cog"]

	Output: 5
	Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> 
	"dog" -> "cog", return its length 5.

	Example 2:
	Input:
	beginWord = "hit"
	endWord = "cog"
	wordList = ["hot","dot","dog","lot","log"]

	Output: 0
	Explanation: The endWord "cog" is not in wordList, therefore no possible 
	transformation."""

    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList: return 0 #shortcut 
        
        graph = dict()
        for word in wordList: 
            for i in range(len(word)):
                graph.setdefault(word[:i] + "*" + word[i+1:], []).append(word)
        
        #two-end bfs
        front0, front1 = {beginWord}, {endWord}
        seen = {beginWord, endWord}
        
        ans = 1
        while front0 and front1: 
            ans += 1
            if len(front0) > len(front1): front0, front1 = front1, front0
            #move forward frontier
            temp = set()
            for word in front0: 
                for i in range(len(word)):
                    for node in graph.get(word[:i] + "*" + word[i+1:], []):
                        if node in front1: return ans 
                        if node in seen: continue
                        temp.add(node)
                        seen.add(node)
            front0 = temp
        return 0


    """128. Longest Consecutive Sequence (Hard)
	Given an unsorted array of integers, find the length of the longest 
	consecutive elements sequence. Your algorithm should run in O(n) complexity.

	Example:
	Input: [100, 4, 200, 1, 3, 2]
	Output: 4
	Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. 
	Therefore its length is 4."""

    def longestConsecutive(self, nums: List[int]) -> int:
        nums = set(nums)
        ans = 0
        for x in nums: 
            if x-1 not in nums: 
                xx = x + 1
                while xx in nums: xx += 1
                ans = max(ans, xx-x)
        return ans 


    """129. Sum Root to Leaf Numbers (Medium)
	Given a binary tree containing digits from 0-9 only, each root-to-leaf path 
	could represent a number. An example is the root-to-leaf path 1->2->3 which 
	represents the number 123. Find the total sum of all root-to-leaf numbers.
	Note that a leaf is a node with no children.

	Example:
	Input: [1,2,3]
	    1
	   / \
	  2   3
	Output: 25
	Explanation:
	The root-to-leaf path 1->2 represents the number 12.
	The root-to-leaf path 1->3 represents the number 13.
	Therefore, sum = 12 + 13 = 25.

	Example 2:
	Input: [4,9,0,5,1]
	    4
	   / \
	  9   0
	 / \
	5   1
	Output: 1026
	Explanation:
	The root-to-leaf path 4->9->5 represents the number 495.
	The root-to-leaf path 4->9->1 represents the number 491.
	The root-to-leaf path 4->0 represents the number 40.
	Therefore, sum = 495 + 491 + 40 = 1026."""

    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        ans = 0 
        stack = [(root, 0)]
        while stack: 
            node, val = stack.pop()
            val = 10*val + node.val 
            if not node.left and not node.right: ans += val 
            if node.left: stack.append((node.left, val))
            if node.right: stack.append((node.right, val))
        return ans 


    """130. Surrounded Regions (Medium)
	Given a 2D board containing 'X' and 'O' (the letter O), capture all regions 
	surrounded by 'X'. A region is captured by flipping all 'O's into 'X's in 
	that surrounded region.

	Example:
	X X X X
	X O O X
	X X O X
	X O X X
	After running your function, the board should be:

	X X X X
	X X X X
	X X X X
	X O X X

	Explanation:
	Surrounded regions shouldn’t be on the border, which means that any 'O' on 
	the border of the board are not flipped to 'X'. Any 'O' that is not on the 
	border and it is not connected to an 'O' on the border will be flipped to 
	'X'. Two cells are connected if they are adjacent cells connected 
	horizontally or vertically."""

    def solve(self, board: List[List[str]]) -> None:
        m, n = len(board), len(board[0])
        
        def fn(i, j):
            """Flood fill "O" with sentinel"""
            if 0 <= i < m and 0 <= j < n and board[i][j] == "O": 
                board[i][j] = "#" #sentinel 
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    fn(ii, jj)
        
        for i in range(m): fn(i, 0) or fn(i, n-1)
        for j in range(n): fn(0, j) or fn(m-1, j)
        
        for i in range(m):
            for j in range(n):
                if board[i][j] == "O": board[i][j] = "X"
                if board[i][j] == "#": board[i][j] = "O"


    """131. Palindrome Partitioning (Medium)
	Given a string s, partition s such that every substring of the partition 
	is a palindrome. Return all possible palindrome partitioning of s.

	Example:
	Input: "aab"
	Output:
	[
	  ["aa","b"],
	  ["a","a","b"]
	]"""

    def partition(self, s: str) -> List[List[str]]:
        #pre-processing 
        palin = dict()
        for k in range(len(s)):
            for i, j in (k, k), (k, k+1):
                while 0 <= i and j < len(s) and s[i] == s[j]: 
                    palin.setdefault(i, []).append(j)
                    i, j = i-1, j+1
        
        @cache
        def fn(i): 
            """Return palindrome partitioning of s[i:]"""
            if i == len(s): return [[]] 
            return [[s[i:ii+1]] + y for ii in palin[i] for y in fn(ii+1)]
        
        return fn(0)


    """132. Palindrome Partitioning II (Hard)
	Given a string s, partition s such that every substring of the partition is 
	a palindrome. Return the minimum cuts needed for a palindrome partitioning of s.

	Example:
	Input: "aab"
	Output: 1
	Explanation: The palindrome partitioning ["aa","b"] could be produced using 
	1 cut."""

    def minCut(self, s: str) -> int:
        #pre-processing
        palin = dict()
        for k in range(len(s)):
            for i, j in (k, k), (k, k+1):
                while 0 <= i and j < len(s) and s[i] == s[j]: 
                    palin.setdefault(i, []).append(j)
                    i, j = i-1, j+1
                
        @cache
        def fn(i):
            """Return minimum palindrome partitioning of s[i:]"""
            if i == len(s): return 0
            return min(1 + fn(ii+1) for ii in palin[i])
        
        return fn(0)-1


    """133. Clone Graph (Medium)
	Given a reference of a node in a connected undirected graph. Return a deep 
	copy (clone) of the graph. Each node in the graph contains a val (int) and 
	a list (List[Node]) of its neighbors.

	class Node {
	    public int val;
	    public List<Node> neighbors;
	}
	 
	Test case format:
	For simplicity sake, each node's value is the same as the node's index 
	(1-indexed). For example, the first node with val = 1, the second node with 
	val = 2, and so on. The graph is represented in the test case using an 
	adjacency list. Adjacency list is a collection of unordered lists used to 
	represent a finite graph. Each list describes the set of neighbors of a 
	node in the graph. The given node will always be the first node with val = 1. 
	You must return the copy of the given node as a reference to the cloned graph.

	Example 1:
	Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
	Output: [[2,4],[1,3],[2,4],[1,3]]
	Explanation: There are 4 nodes in the graph.
	1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
	2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
	3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
	4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).

	Example 2:
	Input: adjList = [[]]
	Output: [[]]
	Explanation: Note that the input contains one empty list. The graph consists 
	of only one node with val = 1 and it does not have any neighbors.

	Example 3:
	Input: adjList = []
	Output: []
	Explanation: This an empty graph, it does not have any nodes.
	
	Example 4:
	Input: adjList = [[2],[1]]
	Output: [[2],[1]]

	Constraints:
	+ 1 <= Node.val <= 100
	+ Node.val is unique for each node.
	+ Number of Nodes will not exceed 100.
	+ There is no repeated edges and no self-loops in the graph.
	+ The Graph is connected and all nodes can be visited starting from the given node."""

    def cloneGraph(self, node: 'Node') -> 'Node':
        memo = dict()
        
        def fn(n): 
            """Return (deep) clonded node"""
            if n not in memo: 
                cln = memo[n] = Node(n.val)
                cln.neighbors = [fn(nn) for nn in n.neighbors]
            return memo[n]
            
        return node and fn(node)


    """134. Gas Station (Medium)
	There are N gas stations along a circular route, where the amount of gas at 
	station i is gas[i]. You have a car with an unlimited gas tank and it costs 
	cost[i] of gas to travel from station i to its next station (i+1). You 
	begin the journey with an empty tank at one of the gas stations. Return the 
	starting gas station's index if you can travel around the circuit once in 
	the clockwise direction, otherwise return -1.

	Note:
	If there exists a solution, it is guaranteed to be unique.
	Both input arrays are non-empty and have the same length.
	Each element in the input arrays is a non-negative integer.

	Example 1:
	Input: 
	gas  = [1,2,3,4,5]
	cost = [3,4,5,1,2]

	Output: 3

	Explanation:
	Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
	Travel to station 4. Your tank = 4 - 1 + 5 = 8
	Travel to station 0. Your tank = 8 - 2 + 1 = 7
	Travel to station 1. Your tank = 7 - 3 + 2 = 6
	Travel to station 2. Your tank = 6 - 4 + 3 = 5
	Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
	Therefore, return 3 as the starting index.

	Example 2:
	Input: 
	gas  = [2,3,4]
	cost = [3,4,3]

	Output: -1

	Explanation:
	You can't start at station 0 or 1, as there is not enough gas to travel to the next station. 
	Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
	Travel to station 0. Your tank = 4 - 3 + 2 = 3
	Travel to station 1. Your tank = 3 - 3 + 3 = 3
	You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
	Therefore, you can't travel around the circuit once no matter where you start."""

    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        ans = prefix = lowest = 0
        for n, (g, c) in enumerate(zip(gas, cost), 1): 
            prefix += g - c
            if prefix < lowest: 
                lowest = prefix
                ans = n
        return -1 if prefix < 0 else ans%n


    """135. Candy (Hard)
	There are N children standing in a line. Each child is assigned a rating 
	value. You are giving candies to these children subjected to the following 
	requirements:
	+ Each child must have at least one candy.
	+ Children with a higher rating get more candies than their neighbors.
	
	What is the minimum candies you must give?

	Example 1:
	Input: [1,0,2]
	Output: 5
	Explanation: You can allocate to the first, second and third child with 2, 
	1, 2 candies respectively.

	Example 2:
	Input: [1,2,2]
	Output: 4
	Explanation: You can allocate to the first, second and third child with 1, 
	2, 1 candies respectively. The third child gets 1 candy because it 
	satisfies the above two conditions."""

    def candy(self, ratings: List[int]) -> int:
        if not ratings: return 0 # edge case 
        
        ans = 1
        down, up = 0, 1
        for i in range(1, len(ratings)):
            if ratings[i-1] < ratings[i]: 
                if down: down, up = 0, 1 #reset
                up += 1
                ans += up
            elif ratings[i-1] == ratings[i]: 
                down, up = 0, 1 #reset 
                ans += 1
            else: 
                down += 1
                ans += down if down < up else down + 1
        return ans 


    """136. Single Number (Easy)
	Given a non-empty array of integers, every element appears twice except for 
	one. Find that single one. Note that your algorithm should have a linear 
	runtime complexity. Could you implement it without using extra memory?

	Example 1:
	Input: [2,2,1]
	Output: 1

	Example 2:
	Input: [4,1,2,1,2]
	Output: 4"""

    def singleNumber(self, nums: List[int]) -> int:
        return reduce(xor, nums)


    """137. Single Number II (Medium)
	Given a non-empty array of integers, every element appears three times 
	except for one, which appears exactly once. Find that single one. Note that 
	your algorithm should have a linear runtime complexity. Could you implement 
	it without using extra memory?

	Example 1:
	Input: [2,2,3,2]
	Output: 3

	Example 2:
	Input: [0,1,0,1,0,1,99]
	Output: 99"""

    def singleNumber(self, nums: List[int]) -> int:
        one = two = 0
        for x in nums: 
            two |= one & x
            one ^= x
            common = two & one
            two &= ~common
            one &= ~common 
        return one 


    """138. Copy List with Random Pointer (Medium)
	A linked list is given such that each node contains an additional random 
	pointer which could point to any node in the list or null. Return a deep 
	copy of the list. The Linked List is represented in the input/output as a 
	list of n nodes. Each node is represented as a pair of [val, random_index] 
	where:

	val: an integer representing Node.val
	random_index: the index of the node (range from 0 to n-1) where random 
	pointer points to, or null if it does not point to any node.

	Example 1:
	Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
	Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

	Example 2:
	Input: head = [[1,1],[2,1]]
	Output: [[1,1],[2,1]]

	Example 3:
	Input: head = [[3,null],[3,0],[3,null]]
	Output: [[3,null],[3,0],[3,null]]

	Example 4:
	Input: head = []
	Output: []
	Explanation: Given linked list is empty (null pointer), so return null.

	Constraints:
	+ -10000 <= Node.val <= 10000
	+ Node.random is null or pointing to a node in the linked list.
	+ Number of Nodes will not exceed 1000."""

    def copyRandomList(self, head: 'Node') -> 'Node':
        mp = {}
        
        def fn(node): 
            """Return a deep copy of node."""
            if node and node not in mp:
                temp = mp[node] = Node(node.val)
                temp.next, temp.random = fn(node.next), fn(node.random)
            return mp.get(node)
        
        return fn(head)


    """139. Word Break (Medium)
	Given a non-empty string s and a dictionary wordDict containing a list of 
	non-empty words, determine if s can be segmented into a space-separated 
	sequence of one or more dictionary words. Note that the same word in the 
	dictionary may be reused multiple times in the segmentation. You may assume 
	the dictionary does not contain duplicate words.
	
	Example 1:
	Input: s = "leetcode", wordDict = ["leet", "code"]
	Output: true
	Explanation: Return true because "leetcode" can be segmented as "leet code".

	Example 2:
	Input: s = "applepenapple", wordDict = ["apple", "pen"]
	Output: true
	Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
	             Note that you are allowed to reuse a dictionary word.

	Example 3:
	Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
	Output: false"""

    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        dp = [False]*(1 + len(s))
        dp[0] = True
        for i in range(len(s)): 
            if dp[i]: 
                for word in wordDict: 
                    if s[i:i+len(word)] == word: dp[i+len(word)] = True
        return dp[-1]


    """140. Word Break II (Hard)
	Given a non-empty string s and a dictionary wordDict containing a list of 
	non-empty words, add spaces in s to construct a sentence where each word is 
	a valid dictionary word. Return all such possible sentences. Note that the 
	same word in the dictionary may be reused multiple times in the segmentation.
	You may assume the dictionary does not contain duplicate words.
	
	Example 1:
	Input:
	s = "catsanddog"
	wordDict = ["cat", "cats", "and", "sand", "dog"]
	Output:
	[
	  "cats and dog",
	  "cat sand dog"
	]

	Example 2:
	Input:
	s = "pineapplepenapple"
	wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
	Output:
	[
	  "pine apple pen apple",
	  "pineapple pen apple",
	  "pine applepen apple"
	]
	Explanation: Note that you are allowed to reuse a dictionary word.

	Example 3:
	Input:
	s = "catsandog"
	wordDict = ["cats", "dog", "sand", "and", "cat"]
	Output:
	[]"""

    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        
        @cache
        def fn(i):
            """Return segmentation of s[i:]"""
            if i == len(s): return [[]]
            ans = []
            for word in wordDict: 
                if s[i:i+len(word)] == word: 
                    ans.extend([word] + x for x in fn(i+len(word)))
            return ans 
            
        return [" ".join(x) for x in fn(0)]


    
    """141. Linked List Cycle (Easy)
	Given a linked list, determine if it has a cycle in it. To represent a 
	cycle in the given linked list, we use an integer pos which represents the 
	position (0-indexed) in the linked list where tail connects to. If pos is 
	-1, then there is no cycle in the linked list.

	Example 1:
	Input: head = [3,2,0,-4], pos = 1
	Output: true
	Explanation: There is a cycle in the linked list, where tail connects to 
	the second node.

	Example 2:
	Input: head = [1,2], pos = 0
	Output: true
	Explanation: There is a cycle in the linked list, where tail connects to 
	the first node.

	Example 3:
	Input: head = [1], pos = -1
	Output: false
	Explanation: There is no cycle in the linked list.

	Follow up:
	Can you solve it using O(1) (i.e. constant) memory?"""

    def hasCycle(self, head: ListNode) -> bool:
        """Floyd's tortoise and hare (phase 1)"""
        fast = slow = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow: return True
        return False 


    """142. Linked List Cycle II (Medium)
	Given a linked list, return the node where the cycle begins. If there is no 
	cycle, return null. To represent a cycle in the given linked list, we use 
	an integer pos which represents the position (0-indexed) in the linked list 
	where tail connects to. If pos is -1, then there is no cycle in the linked 
	list. Note that do not modify the linked list.

	Example 1:
	Input: head = [3,2,0,-4], pos = 1
	Output: tail connects to node index 1
	Explanation: There is a cycle in the linked list, where tail connects to 
	the second node.

	Example 2:
	Input: head = [1,2], pos = 0
	Output: tail connects to node index 0
	Explanation: There is a cycle in the linked list, where tail connects to 
	the first node.

	Example 3:
	Input: head = [1], pos = -1
	Output: no cycle
	Explanation: There is no cycle in the linked list.

	Follow-up:
	Can you solve it without using extra space?"""

    def detectCycle(self, head: ListNode) -> ListNode:
        """Floyd's tortoise & hare (phase 2)"""
        fast = slow = head 
        while fast and fast.next: 
            fast = fast.next.next
            slow = slow.next
            if fast == slow: break 
        else: return None
        node = head 
        while node != slow: 
            node = node.next 
            slow = slow.next 
        return node 


    """143. Reorder List (Medium)
	Given a singly linked list L: L0→L1→…→Ln-1→Ln, reorder it to: 
	L0→Ln→L1→Ln-1→L2→Ln-2→… You may not modify the values in the list's nodes, 
	only nodes itself may be changed.

	Example 1:
	Given 1->2->3->4, reorder it to 1->4->2->3.

	Example 2:
	Given 1->2->3->4->5, reorder it to 1->5->2->4->3."""

    def reorderList(self, head: ListNode) -> None:
        fast = slow = head 
        while fast and fast.next: 
            fast = fast.next.next
            slow = slow.next 
        if slow: slow.next, slow = None, slow.next
        
        hi = None
        while slow: 
            slow.next, slow, hi = hi, slow.next, slow
            
        lo = head 
        while hi: 
            hi.next, hi, lo.next, lo = lo.next, hi.next, hi, lo.next
            
        return head 

    
    """144. Binary Tree Preorder Traversal (Medium)
	Given a binary tree, return the preorder traversal of its nodes' values.

	Example:
	Input: [1,null,2,3]
	   1
	    \
	     2
	    /
	   3

	Output: [1,2,3]
	Follow up: Recursive solution is trivial, could you do it iteratively?"""

    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        ans, stack = [], [root]
        while stack: 
            node = stack.pop()
            if node: 
                ans.append(node.val)
                stack.append(node.right)
                stack.append(node.left)
        return ans 


    """145. Binary Tree Postorder Traversal (Hard)
	Given a binary tree, return the postorder traversal of its nodes' values.

	Example:
	Input: [1,null,2,3]
	   1
	    \
	     2
	    /
	   3

	Output: [3,2,1]
	Follow up: Recursive solution is trivial, could you do it iteratively?"""

    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        ans, stack = [], []
        prev, node = None, root
        while node or stack: 
            if node: 
                stack.append(node)
                node = node.left
            else: 
                node = stack[-1]
                if node.right and prev != node.right: node = node.right
                else: 
                    ans.append(node.val)
                    stack.pop()
                    prev = node
                    node = None
        return ans 


    """147. Insertion Sort List (Medium)
	Sort a linked list using insertion sort. A graphical example of insertion 
	sort. The partial sorted list (black) initially contains only the first 
	element in the list. With each iteration one element (red) is removed from 
	the input data and inserted in-place into the sorted list

	Algorithm of Insertion Sort:
	Insertion sort iterates, consuming one input element each repetition, and 
	growing a sorted output list. At each iteration, insertion sort removes one 
	element from the input data, finds the location it belongs within the 
	sorted list, and inserts it there. It repeats until no input elements remain.

	Example 1:
	Input: 4->2->1->3
	Output: 1->2->3->4

	Example 2:
	Input: -1->5->3->4->0
	Output: -1->0->3->4->5"""

    def insertionSortList(self, head: ListNode) -> ListNode:
        node, prev = head, None
        while node: 
            if not prev or prev.val <= node.val: #append node 
                node.next, node, prev = prev, node.next, node
            else: 
                temp = prev
                while temp.next and temp.next.val > node.val: 
                    temp = temp.next
                node.next, node, temp.next = temp.next, node.next, node
                
        node, prev = prev, None
        while node:
            node.next, node, prev = prev, node.next, node
        return prev 


    """148. Sort List (Medium)
	Sort a linked list in O(NlogN) time using constant space complexity.

	Example 1:
	Input: 4->2->1->3
	Output: 1->2->3->4

	Example 2:
	Input: -1->5->3->4->0
	Output: -1->0->3->4->5"""

    def sortList(self, head: ListNode) -> ListNode:
        if not head or not head.next: return head # boundary condition (null or single node)
        
        fast = prev = slow = head 
        while fast and fast.next: fast, prev, slow = fast.next.next, slow, slow.next
            
        prev.next = None # break list into two pieces 
        list1, list2 = self.sortList(head), self.sortList(slow) # sort two pieces repectively 
        dummy = node = ListNode() # merge 
        while list1 and list2:
            if list1.val > list2.val: list1, list2 = list2, list1
            node.next = node = list1
            list1 = list1.next 
        node.next = list1 or list2 
        return dummy.next


    """149. Max Points on a Line (Hard)
	Given n points on a 2D plane, find the maximum number of points that lie on 
	the same straight line.

	Example 1:
	Input: [[1,1],[2,2],[3,3]]
	Output: 3
	Explanation:
	^
	|
	|        o
	|     o
	|  o  
	+------------->
	0  1  2  3  4

	Example 2:
	Input: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
	Output: 4
	Explanation:
	^
	|
	|  o
	|     o        o
	|        o
	|  o        o
	+------------------->
	0  1  2  3  4  5  6

	NOTE: input types have been changed on April 15, 2019. Please reset to 
	default code definition to get new method signature."""

    def maxPoints(self, points: List[List[int]]) -> int:
        ans = 0
        for i, (x0, y0) in enumerate(points): #reference 
            dupe = 1 #count of duplicates
            freq = dict() #frequency table 
            for x, y in points[i+1:]:
                if x0 == x and y0 == y: dupe += 1
                elif x0 == x: freq[0, inf] = 1 + freq.get((0, inf), 0)
                elif y0 == y: freq[inf, 0] = 1 + freq.get((inf, 0), 0)
                else: 
                    g = gcd(x-x0, y-y0)
                    x, y = (x-x0)//g, (y-y0)//g
                    if x < 0: x, y = -x, -y
                    freq[x, y] = 1 + freq.get((x, y), 0)
            ans = max(ans, dupe + max(freq.values(), default=0))
        return ans 


    """150. Evaluate Reverse Polish Notation (Medium)
	Evaluate the value of an arithmetic expression in Reverse Polish Notation. 
	Valid operators are +, -, *, /. Each operand may be an integer or another 
	expression.

	Note:
	Division between two integers should truncate toward zero. The given RPN 
	expression is always valid. That means the expression would always evaluate 
	to a result and there won't be any divide by zero operation.
	
	Example 1:
	Input: ["2", "1", "+", "3", "*"]
	Output: 9
	Explanation: ((2 + 1) * 3) = 9

	Example 2:
	Input: ["4", "13", "5", "/", "+"]
	Output: 6
	Explanation: (4 + (13 / 5)) = 6

	Example 3:
	Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
	Output: 22
	Explanation: 
	  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
	= ((10 * (6 / (12 * -11))) + 17) + 5
	= ((10 * (6 / -132)) + 17) + 5
	= ((10 * 0) + 17) + 5
	= (0 + 17) + 5
	= 17 + 5
	= 22"""

    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for token in tokens: 
            if token in "+-*/": 
                rr, ll = stack.pop(), stack.pop()
                if token == "+": stack.append(ll + rr)
                elif token == "-": stack.append(ll - rr)
                elif token == "*": stack.append(ll * rr)
                else: stack.append(int(ll/rr))
            else: 
                stack.append(int(token))
        return stack.pop()


    """151. Reverse Words in a String (Medium)
	Given an input string, reverse the string word by word.

	Example 1:
	Input: "the sky is blue"
	Output: "blue is sky the"

	Example 2:
	Input: "  hello world!  "
	Output: "world! hello"
	Explanation: Your reversed string should not contain leading or trailing 
	spaces.

	Example 3:
	Input: "a good   example"
	Output: "example good a"
	Explanation: You need to reduce multiple spaces between two words to a 
	single space in the reversed string.

	Note:
	+ A word is defined as a sequence of non-space characters.
	+ Input string may contain leading or trailing spaces. However, your 
	reversed string should not contain leading or trailing spaces.
	+ You need to reduce multiple spaces between two words to a single space in 
	the reversed string.

	Follow up:
	For C programmers, try to solve it in-place in O(1) extra space."""

    def reverseWords(self, s: str) -> str:
        return " ".join(reversed(s.split()))


    """152. Maximum Product Subarray (Medium)
	Given an integer array nums, find the contiguous subarray within an array 
	(containing at least one number) which has the largest product.

	Example 1:
	Input: [2,3,-2,4]
	Output: 6
	Explanation: [2,3] has the largest product 6.

	Example 2:
	Input: [-2,0,-1]
	Output: 0
	Explanation: The result cannot be 2, because [-2,-1] is not a subarray."""

    def maxProduct(self, nums: List[int]) -> int:
        ans = -inf 
        large = small = 1
        for x in nums: 
            if x < 0: large, small = small, large
            large = max(x, large*x)
            small = min(x, small*x)
            ans = max(ans, large)
        return ans 


    """153. Find Minimum in Rotated Sorted Array (Medium)
	Suppose an array sorted in ascending order is rotated at some pivot unknown 
	to you beforehand. (i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]). 
	Find the minimum element. You may assume no duplicate exists in the array.

	Example 1:
	Input: [3,4,5,1,2] 
	Output: 1

	Example 2:
	Input: [4,5,6,7,0,1,2]
	Output: 0"""

    def findMin(self, nums: List[int]) -> int:
        lo, hi = 0, len(nums)-1
        while lo < hi: 
            mid = lo + hi >> 1
            if nums[mid] < nums[hi]: hi = mid
            else: lo = mid + 1
        return nums[lo]
            

    """154. Find Minimum in Rotated Sorted Array II (Hard)
	Suppose an array sorted in ascending order is rotated at some pivot unknown 
	to you beforehand. (i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]). 
	Find the minimum element. The array may contain duplicates.

	Example 1:
	Input: [1,3,5]
	Output: 1

	Example 2:
	Input: [2,2,2,0,1]
	Output: 0

	Note:
	This is a follow up problem to Find Minimum in Rotated Sorted Array.
	Would allow duplicates affect the run-time complexity? How and why?"""

    def findMin(self, nums: List[int]) -> int:
        lo, hi = 0, len(nums)-1
        while lo < hi: 
            mid = lo + hi >> 1
            if nums[mid] < nums[hi]: hi = mid
            elif nums[mid] == nums[hi]: hi -= 1 # duplicates
            else: lo = mid + 1
        return nums[lo]


    """156. Binary Tree Upside Down (Medium)
	Given the root of a binary tree, turn the tree upside down and return the 
	new root. You can turn a binary tree upside down with the following steps:
	* The original left child becomes the new root.
	* The original root becomes the new right child.
	* The original right child becomes the new left child.
	The mentioned steps are done level by level, it is guaranteed that every 
	node in the given tree has either 0 or 2 children.

	Example 1:
	Input: root = [1,2,3,4,5]
	Output: [4,5,2,null,null,3,1]

	Example 2:
	Input: root = []
	Output: []

	Example 3:
	Input: root = [1]
	Output: [1]

	Constraints:
	* The number of nodes in the tree will be in the range [0, 10].
	* 1 <= Node.val <= 10
	* Every node has either 0 or 2 children."""

    def upsideDownBinaryTree(self, root: TreeNode) -> TreeNode:
        if not root or not root.left: return root 
        ans = self.upsideDownBinaryTree(root.left)
        root.left.left = root.right
        root.left.right = root
        root.left = root.right = None
        return ans 


    """157. Read N Characters Given Read4 (Easy)
	Given a file and assume that you can only read the file using a given 
	method read4, implement a method to read n characters. 
	 
	Method read4:
	The API read4 reads 4 consecutive characters from the file, then writes 
	those characters into the buffer array buf4. The return value is the number 
	of actual characters read. Note that read4() has its own file pointer, much 
	like FILE *fp in C.

	Definition of read4:
	    Parameter:  char[] buf4
	    Returns:    int
	Note: buf4[] is destination not source, the results from read4 will be 
	      copied to buf4[]

	Below is a high level example of how read4 works:
	File file("abcde"); // File is "abcde", initially file pointer (fp) points to 'a'
	char[] buf4 = new char[4]; // Create buffer with enough space to store characters
	read4(buf4); // read4 returns 4. Now buf4 = "abcd", fp points to 'e'
	read4(buf4); // read4 returns 1. Now buf4 = "e", fp points to end of file
	read4(buf4); // read4 returns 0. Now buf4 = "", fp points to end of file

	Method read:
	By using the read4 method, implement the method read that reads n 
	characters from the file and store it in the buffer array buf. Consider 
	that you cannot manipulate the file directly. The return value is the 
	number of actual characters read.

	Definition of read:
	    Parameters:	char[] buf, int n
	    Returns:	int
	Note: buf[] is destination not source, you will need to write the results to buf[]

	Example 1:

	Input: file = "abc", n = 4
	Output: 3
	Explanation: After calling your read method, buf should contain "abc". We 
	             read a total of 3 characters from the file, so return 3. Note 
	             that "abc" is the file's content, not buf. buf is the 
	             destination buffer that you will have to write the results to.

	Example 2:
	Input: file = "abcde", n = 5
	Output: 5
	Explanation: After calling your read method, buf should contain "abcde". We 
	             read a total of 5 characters from the file, so return 5.

	Example 3:
	Input: file = "abcdABCD1234", n = 12
	Output: 12
	Explanation: After calling your read method, buf should contain "abcdABCD1234". 
	             We read a total of 12 characters from the file, so return 12.
	
	Example 4:
	Input: file = "leetcode", n = 5
	Output: 5
	Explanation: After calling your read method, buf should contain "leetc". We 
	             read a total of 5 characters from the file, so return 5.

	Note:
	* Consider that you cannot manipulate the file directly, the file is only 
	  accesible for read4 but not for read.
	* The read function will only be called once for each test case.
	* You may assume the destination buffer array, buf, is guaranteed to have 
	  enough space for storing n characters."""

    def read(self, buf, n):
        """
        :type buf: Destination buffer (List[str])
        :type n: Number of characters to read (int)
        :rtype: The number of actual characters read (int)
        """
        ans, k = 0, 4
        buf4 = [" "]*4
        while ans < n and k == 4: 
            k = read4(buf4)
            buf[ans: ans+4] = buf4
            ans += k
        return min(n, ans)


    """159. Longest Substring with At Most Two Distinct Characters (Medium)
	Given a string s , find the length of the longest substring t  that 
	contains at most 2 distinct characters.

	Example 1:
	Input: "eceba"
	Output: 3
	Explanation: t is "ece" which its length is 3.

	Example 2:
	Input: "ccaabbb"
	Output: 5
	Explanation: t is "aabbb" which its length is 5."""

    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:
        ans, ii = 0, -1 # starting anchor
        queue = deque()
        seen = {} # last seen 
        for i, x in enumerate(s): 
            if not queue or queue[-1] != x: queue.append(x)
            if len(queue) > 2: 
                xx = queue.popleft()
                if xx != x: ii = seen[xx] # update anchor 
            ans = max(ans, i - ii)
            seen[x] = i
        return ans 


    """160. Intersection of Two Linked Lists (Easy)
	Write a program to find the node at which the intersection of two singly 
	linked lists begins. 

	Example 1:
	Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], 
	skipA = 2, skipB = 3
	Output: Reference of the node with value = 8
	Input Explanation: The intersected node's value is 8 (note that this must 
	not be 0 if the two lists intersect). From the head of A, it reads as 
	[4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 
	nodes before the intersected node in A; There are 3 nodes before the 
	intersected node in B.
	 
	Example 2:
	Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, 
	skipB = 1
	Output: Reference of the node with value = 2
	Input Explanation: The intersected node's value is 2 (note that this must 
	not be 0 if the two lists intersect). From the head of A, it reads as 
	[1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes 
	before the intersected node in A; There are 1 node before the intersected 
	node in B.

	Example 3:
	Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, 
	skipB = 2
	Output: null
	Input Explanation: From the head of A, it reads as [2,6,4]. From the head 
	of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal 
	must be 0, while skipA and skipB can be arbitrary values.
	Explanation: The two lists do not intersect, so return null.

	Notes:
	If the two linked lists have no intersection at all, return null.
	The linked lists must retain their original structure after the function returns.
	You may assume there are no cycles anywhere in the entire linked structure.
	Each value on each linked list is in the range [1, 10^9].
	Your code should preferably run in O(n) time and use only O(1) memory."""

    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        nodeA, nodeB = headA, headB
        while nodeA != nodeB: 
            nodeA = nodeA.next if nodeA else headB
            nodeB = nodeB.next if nodeB else headA
        return nodeA


    """161. One Edit Distance (Medium)
	Given two strings s and t, return true if they are both one edit distance 
	apart, otherwise return false. A string s is said to be one distance apart 
	from a string t if you can:
	* Insert exactly one character into s to get t.
	* Delete exactly one character from s to get t.
	* Replace exactly one character of s with a different character to get t.

	Example 1:
	Input: s = "ab", t = "acb"
	Output: true
	Explanation: We can insert 'c' into s to get t.

	Example 2:
	Input: s = "", t = ""
	Output: false
	Explanation: We cannot get t from s by only one step.

	Example 3:
	Input: s = "a", t = ""
	Output: true

	Example 4:
	Input: s = "", t = "A"
	Output: true

	Constraints:
	* 0 <= s.length <= 104
	* 0 <= t.length <= 104
	* s and t consist of lower-case letters, upper-case letters and/or digits."""

    def isOneEditDistance(self, s: str, t: str) -> bool:
        if s == t: return False 
        i = 0
        while i < min(len(t), len(s)): 
            if s[i] != t[i]: break 
            i += 1
        return s[i:] == t[i+1:] or s[i+1:] == t[i+1:] or s[i+1:] == t[i:]

   
    """162. Find Peak Element (Medium)
	A peak element is an element that is greater than its neighbors. Given an 
	input array nums, where nums[i] ≠ nums[i+1], find a peak element and return 
	its index. The array may contain multiple peaks, in that case return the 
	index to any one of the peaks is fine. You may imagine that 
	nums[-1] = nums[n] = -∞.

	Example 1:
	Input: nums = [1,2,3,1]
	Output: 2
	Explanation: 3 is a peak element and your function should return the index 
	number 2.

	Example 2:
	Input: nums = [1,2,1,3,5,6,4]
	Output: 1 or 5 
	Explanation: Your function can return either index number 1 where the peak 
	element is 2, or index number 5 where the peak element is 6.

	Follow up: Your solution should be in logarithmic complexity."""

    def findPeakElement(self, nums: List[int]) -> int:
        lo, hi = 0, len(nums)-1
        while lo < hi:
            mid = lo + hi >> 1
            if nums[mid] < nums[mid+1]: lo = mid + 1
            else: hi = mid
        return lo


    """163. Missing Ranges (Easy)
	You are given an inclusive range [lower, upper] and a sorted unique integer 
	array nums, where all elements are in the inclusive range. A number x is 
	considered missing if x is in the range [lower, upper] and x is not in nums. 
	Return the smallest sorted list of ranges that cover every missing number 
	exactly. That is, no element of nums is in any of the ranges, and each 
	missing number is in one of the ranges. Each range [a,b] in the list should 
	be output as:
	* "a->b" if a != b
	* "a" if a == b

	Example 1:
	Input: nums = [0,1,3,50,75], lower = 0, upper = 99
	Output: ["2","4->49","51->74","76->99"]
	Explanation: The ranges are:
	[2,2] --> "2"
	[4,49] --> "4->49"
	[51,74] --> "51->74"
	[76,99] --> "76->99"

	Example 2:
	Input: nums = [], lower = 1, upper = 1
	Output: ["1"]
	Explanation: The only missing range is [1,1], which becomes "1".

	Example 3:
	Input: nums = [], lower = -3, upper = -1
	Output: ["-3->-1"]
	Explanation: The only missing range is [-3,-1], which becomes "-3->-1".

	Example 4:
	Input: nums = [-1], lower = -1, upper = -1
	Output: []
	Explanation: There are no missing ranges since there are no missing numbers.

	Example 5:
	Input: nums = [-1], lower = -2, upper = -1
	Output: ["-2"]
	 
	Constraints:
	* -109 <= lower <= upper <= 109
	* 0 <= nums.length <= 100
	* lower <= nums[i] <= upper
	* All the values of nums are unique."""

    def findMissingRanges(self, nums: List[int], lower: int, upper: int) -> List[str]:
        nums = [lower-1] + nums + [upper+1] # augmented nums
        ans = []
        for i in range(len(nums)-1): 
            if nums[i] + 2 == nums[i+1]: 
                ans.append(str(nums[i]+1))
            elif nums[i] + 2 < nums[i+1]: 
                ans.append(str(nums[i]+1) + "->" + str(nums[i+1]-1))
        return ans 


    """164. Maximum Gap (Hard)
	Given an unsorted array, find the maximum difference between the successive 
	elements in its sorted form. Return 0 if the array contains less than 2 
	elements.

	Example 1:
	Input: [3,6,9,1]
	Output: 3
	Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or 
	             (6,9) has the maximum difference 3.

	Example 2:
	Input: [10]
	Output: 0
	Explanation: The array contains less than 2 elements, therefore return 0.
	
	Note:
	You may assume all elements in the array are non-negative integers and fit 
	in the 32-bit signed integer range. Try to solve it in linear time/space."""

    def maximumGap(self, nums: List[int]) -> int:
        if len(nums) < 2: return 0 #edge case 
        
        mn, mx = min(nums), max(nums)
        step = max(1, (mx - mn)//(len(nums) - 1))
        size = (mx - mn)//step + 1
        buckets = [[inf, -inf] for _ in range(size)]
        
        for num in nums: 
            i = (num - mn)//step
            x, xx = buckets[i]
            buckets[i] = [min(x, num), max(xx, num)]
        
        ans = 0
        prev = mn
        for i in range(len(buckets)): 
            x, xx = buckets[i]
            if x < inf: 
                ans = max(ans, x - prev)
                prev = xx
        return ans 


    """165. Compare Version Numbers (Medium)
	Compare two version numbers version1 and version2. If version1 > version2 
	return 1; if version1 < version2 return -1;otherwise return 0. You may 
	assume that the version strings are non-empty and contain only digits and 
	the . character. The . character does not represent a decimal point and is 
	used to separate number sequences. For instance, 2.5 is not "two and a half" 
	or "half way to version three", it is the fifth second-level revision of 
	the second first-level revision. You may assume the default revision number 
	for each level of a version number to be 0. For example, version number 3.4 
	has a revision number of 3 and 4 for its first and second level revision 
	number. Its third and fourth level revision number are both 0.

	Example 1:
	Input: version1 = "0.1", version2 = "1.1"
	Output: -1

	Example 2:
	Input: version1 = "1.0.1", version2 = "1"
	Output: 1

	Example 3:
	Input: version1 = "7.5.2.4", version2 = "7.5.3"
	Output: -1

	Example 4:
	Input: version1 = "1.01", version2 = "1.001"
	Output: 0
	Explanation: Ignoring leading zeroes, both “01” and “001" represent the 
	same number “1”

	Example 5:
	Input: version1 = "1.0", version2 = "1.0.0"
	Output: 0
	Explanation: The first version number does not have a third level revision 
	number, which means its third level revision number is default to "0"
	 
	Note:
	* Version strings are composed of numeric strings separated by dots . and 
	  this numeric strings may have leading zeroes.
	* Version strings do not start or end with dots, and they will not be two 
	  consecutive dots."""

    def compareVersion(self, version1: str, version2: str) -> int:
        for x, y in zip_longest(version1.split("."), version2.split("."), fillvalue="0"):
            if int(x) > int(y): return 1
            elif int(x) < int(y): return -1
        return 0


    """166. Fraction to Recurring Decimal (Medium)
	Given two integers representing the numerator and denominator of a 
	fraction, return the fraction in string format. If the fractional part 
	is repeating, enclose the repeating part in parentheses.

	Example 1:
	Input: numerator = 1, denominator = 2
	Output: "0.5"

	Example 2:
	Input: numerator = 2, denominator = 1
	Output: "2"

	Example 3:
	Input: numerator = 2, denominator = 3
	Output: "0.(6)" """

    def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        sign = "-" if numerator * denominator < 0 else ""
        q, r = divmod(abs(numerator), abs(denominator))
        if not r: return sign + str(q)
        
        seen = {r : (i := 0)}
        dcml = ""
        while r: 
            d, r = divmod(10*r, abs(denominator))
            dcml += str(d)
            if r in seen: 
                k = seen[r]
                return sign + f"{q}.{dcml[:k]}({dcml[k:]})"
            seen[r] = (i := i+1)
        return sign + f"{q}.{dcml}"


    """167. Two Sum II - Input array is sorted (Easy)
	Given an array of integers that is already sorted in ascending order, find 
	two numbers such that they add up to a specific target number. The function 
	twoSum should return indices of the two numbers such that they add up to 
	the target, where index1 must be less than index2.

	Note:
	Your returned answers (both index1 and index2) are not zero-based.
	You may assume that each input would have exactly one solution and you may 
	not use the same element twice.

	Example:
	Input: numbers = [2,7,11,15], target = 9
	Output: [1,2]
	Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2."""

    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        lo, hi = 0, len(numbers)-1
        while lo < hi: 
            sm = numbers[lo] + numbers[hi]
            if sm < target: lo += 1
            elif sm == target: return [lo+1, hi+1]
            else: hi -= 1


    """168. Excel Sheet Column Title (Easy)
	Given a positive integer, return its corresponding column title as appear 
	in an Excel sheet. 	For example:
	    1 -> A
	    2 -> B
	    3 -> C
	    ...
	    26 -> Z
	    27 -> AA
	    28 -> AB 
	    ...

	Example 1:
	Input: 1
	Output: "A"

	Example 2:
	Input: 28
	Output: "AB"

	Example 3:
	Input: 701
	Output: "ZY" """

    def convertToTitle(self, n: int) -> str:
        ans = []
        while n: 
            n, r = divmod(n-1, 26)
            ans.append(r)
        return "".join(chr(r+65) for r in reversed(ans))


    """169. Majority Element (Easy)
	Given an array of size n, find the majority element. The majority element 
	is the element that appears more than ⌊ n/2 ⌋ times. You may assume that 
	the array is non-empty and the majority element always exist in the array.

	Example 1:
	Input: [3,2,3]
	Output: 3

	Example 2:
	Input: [2,2,1,1,1,2,2]
	Output: 2"""

    def majorityElement(self, nums: List[int]) -> int:
        """Boyer-Moore majority vote algo"""
        ans = vote = 0
        for x in nums: 
            if vote == 0: ans = x
            if x == ans: vote += 1
            else: vote -= 1
        return ans 


    """171. Excel Sheet Column Number (Easy)
	Given a column title as appear in an Excel sheet, return its corresponding 
	column number. For example:
	    A -> 1
	    B -> 2
	    C -> 3
	    ...
	    Z -> 26
	    AA -> 27
	    AB -> 28 
	    ...

	Example 1:
	Input: "A"
	Output: 1

	Example 2:
	Input: "AB"
	Output: 28

	Example 3:
	Input: "ZY"
	Output: 701

	Constraints:
	* 1 <= s.length <= 7
	* s consists only of uppercase English letters.
	* s is between "A" and "FXSHRXW"."""

    def titleToNumber(self, s: str) -> int:
        ans = 0
        for c in s:
            ans = 26*ans + ord(c) - 64
        return ans 


    """172. Factorial Trailing Zeroes (Easy)
	Given an integer n, return the number of trailing zeroes in n!.

	Example 1:
	Input: 3
	Output: 0
	Explanation: 3! = 6, no trailing zero.

	Example 2:
	Input: 5
	Output: 1
	Explanation: 5! = 120, one trailing zero.

	Note: Your solution should be in logarithmic time complexity."""

    def trailingZeroes(self, n: int) -> int:
        ans = 0
        while n:
            n //= 5
            ans += n
        return ans 


    """174. Dungeon Game (Hard)
	The demons had captured the princess (P) and imprisoned her in the bottom-
	right corner of a dungeon. The dungeon consists of M x N rooms laid out in 
	a 2D grid. Our valiant knight (K) was initially positioned in the top-left 
	room and must fight his way through the dungeon to rescue the princess. The 
	knight has an initial health point represented by a positive integer. If at 
	any point his health point drops to 0 or below, he dies immediately. Some 
	of the rooms are guarded by demons, so the knight loses health (negative 
	integers) upon entering these rooms; other rooms are either empty (0's) or 
	contain magic orbs that increase the knight's health (positive integers). 
	In order to reach the princess as quickly as possible, the knight decides 
	to move only rightward or downward in each step.

	Write a function to determine the knight's minimum initial health so that 
	he is able to rescue the princess. For example, given the dungeon below, 
	the initial health of the knight must be at least 7 if he follows the 
	optimal path RIGHT-> RIGHT -> DOWN -> DOWN.

	-2 (K)	-3	3
	-5	-10	1
	10	30	-5 (P)

	Note:
	* The knight's health has no upper bound.
	* Any room can contain threats or power-ups, even the first room the knight 
	  enters and the bottom-right room where the princess is imprisoned."""

    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:
        m, n = len(dungeon), len(dungeon[0])
        
        @cache
        def fn(i, j):
            """Return min health at (i,j)."""
            if i == m or j == n: return inf
            if i == m-1 and j == n-1: return max(1, 1 - dungeon[i][j])
            return max(1, min(fn(i+1, j), fn(i, j+1)) - dungeon[i][j])
        
        return fn(0, 0)


    """179. Largest Number (Medium)
	Given a list of non negative integers, arrange them such that they form the 
	largest number.

	Example 1:
	Input: [10,2]
	Output: "210"

	Example 2:
	Input: [3,30,34,5,9]
	Output: "9534330"

	Note: The result may be very large, so you need to return a string instead 
	of an integer."""

    def largestNumber(self, nums: List[int]) -> str:
        
        def cmp(x, y):
            """Compure two strings and return an integer based on outcome"""
            if x + y > y + x: return 1
            elif x + y == y + x: return 0
            else: return -1
                
        nums = [str(x) for x in nums]
        return "".join(sorted(nums, key=cmp_to_key(cmp), reverse=True)).lstrip("0") or "0"


    """186. Reverse Words in a String II (Medium)
	Given an input string , reverse the string word by word. 

	Example:
	Input:  ["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]
	Output: ["b","l","u","e"," ","i","s"," ","s","k","y"," ","t","h","e"]

	Note: 
	* A word is defined as a sequence of non-space characters.
	* The input string does not contain leading or trailing spaces.
	* The words are always separated by a single space.
	Follow up: Could you do it in-place without allocating extra space?"""

    def reverseWords(self, s: List[str]) -> None:

        def fn(lo, hi): 
            """Reverse s[lo:hi+1] in-place."""
            while lo < hi: 
                s[lo], s[hi] = s[hi], s[lo]
                lo, hi = lo+1, hi-1
                
        fn(0, len(s)-1)
        lo = 0
        for i in range(len(s)+1): 
            if i == len(s) or s[i] == " ": 
                hi = i - 1
                fn(lo, hi)
                lo = i + 1


    """187. Repeated DNA Sequences (Medium)
	All DNA is composed of a series of nucleotides abbreviated as A, C, G, and 
	T, for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to 
	identify repeated sequences within the DNA. Write a function to find all 
	the 10-letter-long sequences (substrings) that occur more than once in a 
	DNA molecule.

	Example:
	Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
	Output: ["AAAAACCCCC", "CCCCCAAAAA"]"""

    def findRepeatedDnaSequences(self, s: str) -> List[str]:
        mp = dict(zip("ACGT", range(4)))
        
        ans, seen = set(), set()
        hs = 0 # rolling hash 
        for i, x in enumerate(s): 
            hs = 4*hs + mp[x]
            if i >= 10: hs -= mp[s[i-10]]*4**10 
            if i >= 9: 
                if hs in seen: ans.add(s[i-9:i+1])
                seen.add(hs)
        return ans


    """188. Best Time to Buy and Sell Stock IV (Hard)
	Say you have an array for which the i-th element is the price of a given 
	stock on day i. Design an algorithm to find the maximum profit. You may 
	complete at most k transactions.

	Note: You may not engage in multiple transactions at the same time (ie, 
	you must sell the stock before you buy again).

	Example 1:
	Input: [2,4,1], k = 2
	Output: 2
	Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), 
	             profit = 4-2 = 2.

	Example 2:
	Input: [3,2,6,5,0,3], k = 2
	Output: 7
	Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), 
	             profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on 
	             day 6 (price = 3), profit = 3-0 = 3."""

    def maxProfit(self, k: int, prices: List[int]) -> int:
        if k >= len(prices)//2: return sum(max(0, prices[i] - prices[i-1]) for i in range(1, len(prices)))
        buy, sell = [inf]*k, [0]*k
        for x in prices:
            for i in range(k):
                if i: buy[i] = min(buy[i], x - sell[i-1])
                else: buy[i] = min(buy[i], x)
                sell[i] = max(sell[i], x - buy[i])
        return sell[-1] if k and prices else 0


    """189. Rotate Array (Easy)
	Given an array, rotate the array to the right by k steps, where k is non-
	negative. 

	Follow up:
	Try to come up as many solutions as you can, there are at least 3 different 
	ways to solve this problem. Could you do it in-place with O(1) extra space?

	Example 1:
	Input: nums = [1,2,3,4,5,6,7], k = 3
	Output: [5,6,7,1,2,3,4]
	Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6]
	             rotate 2 steps to the right: [6,7,1,2,3,4,5]
	             rotate 3 steps to the right: [5,6,7,1,2,3,4]

	Example 2:
	Input: nums = [-1,-100,3,99], k = 2
	Output: [3,99,-1,-100]
	Explanation: rotate 1 steps to the right: [99,-1,-100,3]
	             rotate 2 steps to the right: [3,99,-1,-100]

	Constraints:
	* 1 <= nums.length <= 2 * 10^4
	* It's guaranteed that nums[i] fits in a 32 bit-signed integer.
	* k >= 0"""

    def rotate(self, nums: List[int], k: int) -> None:
        n = len(nums)
        g = gcd(n, k)
        for i in range(g): 
            ii = i 
            for _ in range(n//g): 
                ii = (ii + k) % n
                nums[i], nums[ii] = nums[ii], nums[i]


    """190. Reverse Bits (Easy)
	Reverse bits of a given 32 bits unsigned integer.

	Example 1:
	Input: 00000010100101000001111010011100
	Output: 00111001011110000010100101000000
	Explanation: The input binary string 00000010100101000001111010011100 
	represents the unsigned integer 43261596, so return 964176192 which its 
	binary representation is 00111001011110000010100101000000.
	
	Example 2:

	Input: 11111111111111111111111111111101
	Output: 10111111111111111111111111111111
	Explanation: The input binary string 11111111111111111111111111111101 
	represents the unsigned integer 4294967293, so return 3221225471 which its 
	binary representation is 10111111111111111111111111111111.

	Note:
	Note that in some languages such as Java, there is no unsigned integer type. 
	In this case, both input and output will be given as signed integer type and 
	should not affect your implementation, as the internal binary representation 
	of the integer is the same whether it is signed or unsigned. In Java, the 
	compiler represents the signed integers using 2's complement notation. 
	Therefore, in Example 2 above the input represents the signed integer -3 and 
	the output represents the signed integer -1073741825.

	Follow up: If this function is called many times, how would you optimize it?"""

    def reverseBits(self, n: int) -> int:
        return int(bin(n)[2:].zfill(32)[::-1], 2)


    """191. Number of 1 Bits (Easy)
	Write a function that takes an unsigned integer and return the number of 
	'1' bits it has (also known as the Hamming weight).

	Example 1:
	Input: 00000000000000000000000000001011
	Output: 3
	Explanation: The input binary string 00000000000000000000000000001011 has a 
	total of three '1' bits.

	Example 2:
	Input: 00000000000000000000000010000000
	Output: 1
	Explanation: The input binary string 00000000000000000000000010000000 has a 
	total of one '1' bit.

	Example 3:
	Input: 11111111111111111111111111111101
	Output: 31
	Explanation: The input binary string 11111111111111111111111111111101 has a 
	total of thirty one '1' bits.

	Note:
	Note that in some languages such as Java, there is no unsigned integer type. 
	In this case, the input will be given as signed integer type and should not 
	affect your implementation, as the internal binary representation of the 
	integer is the same whether it is signed or unsigned. In Java, the compiler 
	represents the signed integers using 2's complement notation. Therefore, in 
	Example 3 above the input represents the signed integer -3.
	 
	Follow up: If this function is called many times, how would you optimize it?"""

    def hammingWeight(self, n: int) -> int:
    	# Brian Kernighan’s Algo
        ans = 0
        while n: 
            ans += 1
            n &= n-1
        return ans 


    """198. House Robber (Easy)
	You are a professional robber planning to rob houses along a street. Each 
	house has a certain amount of money stashed, the only constraint stopping 
	you from robbing each of them is that adjacent houses have security system 
	connected and it will automatically contact the police if two adjacent 
	houses were broken into on the same night. Given a list of non-negative 
	integers representing the amount of money of each house, determine the 
	maximum amount of money you can rob tonight without alerting the police.

	Example 1:
	Input: nums = [1,2,3,1]
	Output: 4
	Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
	             Total amount you can rob = 1 + 3 = 4.

	Example 2:
	Input: nums = [2,7,9,3,1]
	Output: 12
	Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 
	             5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.

	Constraints:
	0 <= nums.length <= 100
	0 <= nums[i] <= 400"""

    def rob(self, nums: List[int]) -> int:
        
        @cache
        def fn(i):
            """Return the maximum amount of money after robbing ith house"""
            if i < 0: return 0
            return max(fn(i-1), fn(i-2) + nums[i])
        
        return fn(len(nums)-1)


    """199. Binary Tree Right Side View (Medium)
	Given a binary tree, imagine yourself standing on the right side of it, 
	return the values of the nodes you can see ordered from top to bottom.

	Example:
	Input: [1,2,3,null,5,null,4]
	Output: [1, 3, 4]
	Explanation:

	   1            <---
	 /   \
	2     3         <---
	 \     \
	  5     4       <---"""

    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        ans = []
        if root: 
            queue = [root]
            while queue: 
                val = 0
                newq = []
                for x in queue: 
                    val = x.val
                    if x.left: newq.append(x.left)
                    if x.right: newq.append(x.right)
                ans.append(val)
                queue = newq
        return ans 


    """200. Number of Islands (Medium)
	Given a 2d grid map of '1's (land) and '0's (water), count the number of 
	islands. An island is surrounded by water and is formed by connecting 
	adjacent lands horizontally or vertically. You may assume all four edges 
	of the grid are all surrounded by water.

	Example 1:
	Input: grid = [
	  ["1","1","1","1","0"],
	  ["1","1","0","1","0"],
	  ["1","1","0","0","0"],
	  ["0","0","0","0","0"]
	]
	Output: 1

	Example 2:
	Input: grid = [
	  ["1","1","0","0","0"],
	  ["1","1","0","0","0"],
	  ["0","0","1","0","0"],
	  ["0","0","0","1","1"]
	]
	Output: 3"""

    def numIslands(self, grid: List[List[str]]) -> int:
        m, n = len(grid), len(grid[0])
        ans = 0
        for r in range(m):
            for c in range(n):
                if grid[r][c] == '1': 
                    ans += 1
                    grid[r][c] = '0'
                    stack = [(r, c)]
                    while stack: 
                        i, j = stack.pop()
                        for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j):
                            if 0 <= ii < m and 0 <= jj < n and grid[ii][jj] == '1': 
                                grid[ii][jj] = '0'
                                stack.append((ii, jj))
        return ans 


   """201. Bitwise AND of Numbers Range (Medium)
	Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise 
	AND of all numbers in this range, inclusive.

	Example 1:
	Input: [5,7]
	Output: 4

	Example 2:
	Input: [0,1]
	Output: 0"""

    def rangeBitwiseAnd(self, m: int, n: int) -> int:
        while n > m: n &= n-1 # unset last set bit
        return n 


    """202. Happy Number (Easy)
	Write an algorithm to determine if a number n is "happy". A happy number is 
	a number defined by the following process: Starting with any positive 
	integer, replace the number by the sum of the squares of its digits, and 
	repeat the process until the number equals 1 (where it will stay), or it 
	loops endlessly in a cycle which does not include 1. Those numbers for 
	which this process ends in 1 are happy numbers. Return True if n is a happy 
	number, and False if not.

	Example: 
	Input: 19
	Output: true
	Explanation: 
	12 + 92 = 82
	82 + 22 = 68
	62 + 82 = 100
	12 + 02 + 02 = 1"""

    def isHappy(self, n: int) -> bool:
        fn = lambda n: sum(int(x)**2 for x in str(n))
        fast, slow = fn(n), n
        while fast != slow:
            fast = fn(fn(fast))
            slow = fn(slow)
        return fast == 1


    """203. Remove Linked List Elements (Easy)
	Remove all elements from a linked list of integers that have value val.

	Example:
	Input:  1->2->6->3->4->5->6, val = 6
	Output: 1->2->3->4->5"""

    def removeElements(self, head: ListNode, val: int) -> ListNode:
        dummy = node = ListNode(next=head)
        while node.next: 
            if node.next.val == val: node.next = node.next.next 
            else: node = node.next 
        return dummy.next 


    """204. Count Primes (Easy)
	Count the number of prime numbers less than a non-negative number, n.

	Example:
	Input: 10
	Output: 4
	Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7."""

    def countPrimes(self, n: int) -> int:
        """Sieve of Eratosthenes"""
        sieve = [True]*n
        sieve[0] = sieve[1] = False # 0 and 1 are not prime
        for i in range(int(sqrt(n))+1):
            if sieve[i]:
                for ii in range(i*i, n, i): 
                    sieve[ii] = False 
        return sum(sieve)


    """205. Isomorphic Strings (Easy)
	Given two strings s and t, determine if they are isomorphic. Two strings 
	are isomorphic if the characters in s can be replaced to get t. All 
	occurrences of a character must be replaced with another character while 
	preserving the order of characters. No two characters may map to the same 
	character but a character may map to itself.

	Example 1:
	Input: s = "egg", t = "add"
	Output: true

	Example 2:
	Input: s = "foo", t = "bar"
	Output: false

	Example 3:
	Input: s = "paper", t = "title"
	Output: true
	Note:
	You may assume both s and t have the same length."""

    def isIsomorphic(self, s: str, t: str) -> bool:
        return len(set(zip(s, t))) == len(set(s)) == len(set(t))


    """206. Reverse Linked List (Easy)
	Reverse a singly linked list.

	Example:
	Input: 1->2->3->4->5->NULL
	Output: 5->4->3->2->1->NULL

	Follow up: A linked list can be reversed either iteratively or recursively. 
	Could you implement both?"""

    def reverseList(self, head: ListNode) -> ListNode:
        prev, node = None, head
        while node:
            node.next, node, prev = prev, node.next, node
        return prev


    """207. Course Schedule (Medium)
	There are a total of numCourses courses you have to take, labeled from 0 to 
	numCourses-1. Some courses may have prerequisites, for example to take 
	course 0 you have to first take course 1, which is expressed as a pair: 
	[0,1]. Given the total number of courses and a list of prerequisite pairs, 
	is it possible for you to finish all courses?

	Example 1:
	Input: numCourses = 2, prerequisites = [[1,0]]
	Output: true
	Explanation: There are a total of 2 courses to take. To take course 1 you 
	             should have finished course 0. So it is possible.

	Example 2:
	Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
	Output: false
	Explanation: There are a total of 2 courses to take. To take course 1 you 
	             should have finished course 0, and to take course 0 you should 
	             also have finished course 1. So it is impossible.
	 

	Constraints:
	* The input prerequisites is a graph represented by a list of edges, not 
	  adjacency matrices. Read more about how a graph is represented.
	* You may assume that there are no duplicate edges in the input 
	  prerequisites.
	* 1 <= numCourses <= 10^5"""

    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        indeg = [0]*numCourses
        graph = {}
        for u, v in prerequisites: 
            indeg[u] += 1
            graph.setdefault(v, []).append(u)
        
        stack = [i for i, x in enumerate(indeg) if not x]
        seen = []
        while stack: 
            x = stack.pop()
            seen.append(x)
            for xx in graph.get(x, []): 
                indeg[xx] -= 1
                if indeg[xx] == 0: stack.append(xx)
        return len(seen) == numCourses


    """209. Minimum Size Subarray Sum (Medium)
	Given an array of n positive integers and a positive integer s, find the 
	minimal length of a contiguous subarray of which the sum ≥ s. If there 
	isn't one, return 0 instead.

	Example: 
	Input: s = 7, nums = [2,3,1,2,4,3]
	Output: 2
	Explanation: the subarray [4,3] has the minimal length under the problem 
	             constraint.

	Follow up: If you have figured out the O(n) solution, try coding another 
	           solution of which the time complexity is O(n log n). """

    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        ans, lo = inf, 0
        for hi in range(len(nums)):
            s -= nums[hi]
            while s <= 0:
                ans = min(ans, hi - lo + 1)
                s += nums[lo]
                lo += 1
        return ans if ans < inf else 0


    """210. Course Schedule II (Medium)
	There are a total of n courses you have to take, labeled from 0 to n-1. 
	Some courses may have prerequisites, for example to take course 0 you have 
	to first take course 1, which is expressed as a pair: [0,1]. Given the 
	total number of courses and a list of prerequisite pairs, return the 
	ordering of courses you should take to finish all courses. There may be 
	multiple correct orders, you just need to return one of them. If it is 
	impossible to finish all courses, return an empty array.

	Example 1:
	Input: 2, [[1,0]] 
	Output: [0,1]
	Explanation: There are a total of 2 courses to take. To take course 1 you 
	             should have finished course 0. So the correct course order is 
	             [0,1].

	Example 2:
	Input: 4, [[1,0],[2,0],[3,1],[3,2]]
	Output: [0,1,2,3] or [0,2,1,3]
	Explanation: There are a total of 4 courses to take. To take course 3 you 
	             should have finished both courses 1 and 2. Both courses 1 and 
	             2 should be taken after you finished course 0. So one correct 
	             course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .

	Note:
	* The input prerequisites is a graph represented by a list of edges, not 
	  adjacency matrices. Read more about how a graph is represented.
	* You may assume that there are no duplicate edges in the input prerequisites."""

    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        #graph as adjacency list
        digraph = dict()
        for u, v in prerequisites: digraph.setdefault(u, []).append(v)
            
        def cyclic(n):
            """Return True if cycle is detected involving given node"""
            if seen[n]: return seen[n] == -1
            seen[n] = -1 #GRAY
            if any(cyclic(nn) for nn in digraph.get(n, []) if seen[nn] != 1): return True
            seen[n] = 1 #BLACK
            ans.append(n)
            return False 
        
        ans = []
        seen = [0]*numCourses #WHITE
        return [] if any(cyclic(i) for i in range(numCourses)) else ans 


    """212. Word Search II (Hard)
	Given a 2D board and a list of words from the dictionary, find all words in 
	the board. Each word must be constructed from letters of sequentially 
	adjacent cell, where "adjacent" cells are those horizontally or vertically 
	neighboring. The same letter cell may not be used more than once in a word.

	Example:
	Input: 
	board = [
	  ['o','a','a','n'],
	  ['e','t','a','e'],
	  ['i','h','k','r'],
	  ['i','f','l','v']
	]
	words = ["oath","pea","eat","rain"]

	Output: ["eat","oath"]

	Note:
	All inputs are consist of lowercase letters a-z.
	The values of words are distinct."""

    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        m, n = len(board), len(board[0])
        
        trie = Trie()
        for word in words: trie.insert(word)
            
        def fn(i, j, node): 
            """Populate ans through backtracking"""
            if node.word: 
                ans.append("".join(stack))
                node.word = False 
            if not (0 <= i < m and 0 <= j < n) or board[i][j] not in node.children: return 
            stack.append(board[i][j])
            board[i][j] = "#" #mark as visited
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j):
                fn(ii, jj, node.children[stack[-1]])
            board[i][j] = stack.pop()
        
        ans, stack = [], []
        for i in range(m):
            for j in range(n): 
                fn(i, j, trie.root)
        return ans


    """213. House Robber II (Medium)
	You are a professional robber planning to rob houses along a street. Each 
	house has a certain amount of money stashed. All houses at this place are 
	arranged in a circle. That means the first house is the neighbor of the 
	last one. Meanwhile, adjacent houses have security system connected and it 
	will automatically contact the police if two adjacent houses were broken 
	into on the same night. Given a list of non-negative integers representing 
	the amount of money of each house, determine the maximum amount of money 
	you can rob tonight without alerting the police.

	Example 1:
	Input: [2,3,2]
	Output: 3
	Explanation: You cannot rob house 1 (money = 2) and then rob house 3 
	             (money = 2), because they are adjacent houses.

	Example 2:
	Input: [1,2,3,1]
	Output: 4
	Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
	             Total amount you can rob = 1 + 3 = 4."""

    def rob(self, nums: List[int]) -> int:
        
        def fn(lo, hi): 
            """Return max money by robbing houses from lo to hi (exclusive)."""
            f0 = f1 = 0
            for x in nums[lo:hi]: f0, f1 = f1, max(f0+x, f1)
            return f1
        
        n = len(nums)
        return max(fn(0, n-1), fn(1, n)) if n > 1 else nums[0]


    """214. Shortest Palindrome (Hard)
	Given a string s, you are allowed to convert it to a palindrome by adding 
	characters in front of it. Find and return the shortest palindrome you can 
	find by performing this transformation.

	Example 1:
	Input: "aacecaaa"
	Output: "aaacecaaa"

	Example 2:
	Input: "abcd"
	Output: "dcbabcd" """

    def shortestPalindrome(self, s: str) -> str:
        ss = s + "#" + s[::-1]
        lps = [0]*len(ss) #longest prefix suffix array
        k = 0
        for i in range(1, len(ss)):
            while k and ss[k] != ss[i]: 
                k = lps[k-1]
            if ss[k] == ss[i]: k += 1
            lps[i] = k
        return s[k:][::-1] + s


    """215. Kth Largest Element in an Array (Medium)
	Find the kth largest element in an unsorted array. Note that it is the kth 
	largest element in the sorted order, not the kth distinct element.

	Example 1:
	Input: [3,2,1,5,6,4] and k = 2
	Output: 5

	Example 2:
	Input: [3,2,3,1,2,4,5,5,6] and k = 4
	Output: 4

	Note: You may assume k is always valid, 1 ≤ k ≤ array's length."""

    def findKthLargest(self, nums: List[int], k: int) -> int:
        """Hoare's selection algo"""
        
        def partition(lo, hi): 
            """Return partition of nums[lo:hi]."""
            i, j = lo+1, hi-1
            while i <= j: 
                if nums[i] < nums[lo]: i += 1
                elif nums[j] > nums[lo]: j -= 1
                else: 
                    nums[i], nums[j] = nums[j], nums[i]
                    i += 1
                    j -= 1
            nums[lo], nums[j] = nums[j], nums[lo]
            return j
        
        shuffle(nums)
        lo, hi = 0, len(nums)
        while True: 
            mid = partition(lo, hi)
            if mid+k < len(nums): lo = mid + 1
            elif mid+k == len(nums): return nums[mid]
            else: hi = mid


    """216. Combination Sum III (Medium)
	Find all possible combinations of k numbers that add up to a number n, 
	given that only numbers from 1 to 9 can be used and each combination should 
	be a unique set of numbers.

	Note: All numbers will be positive integers. The solution set must not 
	contain duplicate combinations.

	Example 1:
	Input: k = 3, n = 7
	Output: [[1,2,4]]

	Example 2:
	Input: k = 3, n = 9
	Output: [[1,2,6], [1,3,5], [2,3,4]]"""

    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        ans, stack = [], []
        x = 1
        while True: 
            if len(stack) == k and sum(stack) == n: ans.append(stack.copy())
            if len(stack) == k or k - len(stack) > 10 - x: 
                if not stack: break
                x = stack.pop() + 1
            else: 
                stack.append(x)
                x += 1
        return ans 


    """217. Contains Duplicate (Easy)
	Given an array of integers, find if the array contains any duplicates. Your 
	function should return true if any value appears at least twice in the 
	array, and it should return false if every element is distinct.

	Example 1:
	Input: [1,2,3,1]
	Output: true

	Example 2:
	Input: [1,2,3,4]
	Output: false

	Example 3:
	Input: [1,1,1,3,3,4,3,2,4,2]
	Output: true"""

    def containsDuplicate(self, nums: List[int]) -> bool:
        return len(nums) != len(set(nums))


    """218. The Skyline Problem (Hard)
	A city's skyline is the outer contour of the silhouette formed by all the 
	buildings in that city when viewed from a distance. Now suppose you are 
	given the locations and height of all the buildings as shown on a cityscape 
	photo (Figure A), write a program to output the skyline formed by these 
	buildings collectively (Figure B).

	Buildings Skyline Contour
	The geometric information of each building is represented by a triplet of 
	integers [Li, Ri, Hi], where Li and Ri are the x coordinates of the left 
	and right edge of the ith building, respectively, and Hi is its height. It 
	is guaranteed that 0 ≤ Li, Ri ≤ INT_MAX, 0 < Hi ≤ INT_MAX, and Ri - Li > 0. 
	You may assume all buildings are perfect rectangles grounded on an 
	absolutely flat surface at height 0. For instance, the dimensions of all 
	buildings in Figure A are recorded as: [ [2 9 10], [3 7 15], [5 12 12], 
	[15 20 10], [19 24 8] ]. The output is a list of "key points" (red dots in 
	Figure B) in the format of [ [x1,y1], [x2, y2], [x3, y3], ... ] that 
	uniquely defines a skyline. A key point is the left endpoint of a 
	horizontal line segment. Note that the last key point, where the rightmost 
	building ends, is merely used to mark the termination of the skyline, and 
	always has zero height. Also, the ground in between any two adjacent 
	buildings should be considered part of the skyline contour. For instance, 
	the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], 
	[12 0], [15 10], [20 8], [24, 0] ].

	Notes:
	The number of buildings in any input list is guaranteed to be in the range 
	[0, 10000]. The input list is already sorted in ascending order by the left 
	x position Li. The output list must be sorted by the x position. There must 
	be no consecutive horizontal lines of equal height in the output skyline. 
	For instance, [...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; 
	the three lines of height 5 should be merged into one in the final output as 
	such: [...[2 3], [4 5], [12 7], ...]"""

    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        ans, hp = [], [] #front of heap => current height 
        buildings.append([inf, inf, 0]) #trick
        for li, ri, hi in buildings:
            #down-slope
            while hp and -hp[0][1] < li:                  #current height cannot reach li
                _, rj = heappop(hp)                       #current height ends at rj
                while hp and -hp[0][1] <= -rj: heappop(hp) #useless height ends earlier than rj
                hj = hp[0][0] if hp else 0                #next height
                ans.append((-rj, -hj))
            #up-slope 
            if hi > 0 and (not hp or -hp[0][0] < hi):     #new height higher than current height
                if ans and ans[-1][0] == li: ans.pop()    #same left => update in-place 
                ans.append([li, hi])
            heappush(hp, (-hi, -ri))
        return ans 


    """219. Contains Duplicate II (Easy)
	Given an array of integers and an integer k, find out whether there are two 
	distinct indices i and j in the array such that nums[i] = nums[j] and the 
	absolute difference between i and j is at most k.

	Example 1:
	Input: nums = [1,2,3,1], k = 3
	Output: true

	Example 2:
	Input: nums = [1,0,1,1], k = 1
	Output: true

	Example 3:
	Input: nums = [1,2,3,1,2,3], k = 2
	Output: false"""

    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        seen = dict()
        for i, x in enumerate(nums):
            if x in seen and i - seen[x] <= k: return True 
            seen[x] = i
        return False 


    """220. Contains Duplicate III (Medium)
	Given an array of integers, find out whether there are two distinct indices 
	i and j in the array such that the absolute difference between nums[i] and 
	nums[j] is at most t and the absolute difference between i and j is at most 
	k.

	Example 1:
	Input: nums = [1,2,3,1], k = 3, t = 0
	Output: true

	Example 2:
	Input: nums = [1,0,1,1], k = 1, t = 2
	Output: true

	Example 3:
	Input: nums = [1,5,9,1,5,9], k = 2, t = 3
	Output: false"""

    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:
        if t < 0: return False #edge case 
        seen = dict()
        for i in range(len(nums)):
            bkt = nums[i]//(t + 1) #bucket 
            if any(bkt+ii in seen and abs(nums[i]-seen[bkt+ii]) <= t for ii in (-1, 0, 1)): return True 
            seen[bkt] = nums[i]
            if i >= k: seen.pop(nums[i-k]//(t+1)) #memory of length k
        return False 


    """221. Maximal Square (Medium)
	Given a 2D binary matrix filled with 0's and 1's, find the largest square 
	containing only 1's and return its area.

	Example:
	Input: 
	1 0 1 0 0
	1 0 1 1 1
	1 1 1 1 1
	1 0 0 1 0
	Output: 4"""

    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0]*n for _ in range(m)]
        for i in range(m): 
            for j in range(n): 
                if matrix[i][j] == "1": 
                    if i == 0 or j == 0: dp[i][j] = 1
                    else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
        return max(map(max, dp))**2


    """222. Count Complete Tree Nodes (Medium)
	Given a complete binary tree, count the number of nodes. Note the 
	definition of a complete binary tree from Wikipedia: in a complete binary
	tree every level, except possibly the last, is completely filled, and all 
	nodes in the last level are as far left as possible. It can have between 1 
	and 2h nodes inclusive at the last level h.

	Example:
	Input: 
	    1
	   / \
	  2   3
	 / \  /
	4  5 6
	Output: 6"""

    def countNodes(self, root: TreeNode) -> int:
        
        def ht(node):
            """Return height of given node."""
            n = 0
            while node: n, node = n+1, node.left
            return n
        
        def fn(node):
            """Return number of nodes in the tree rooted at given node."""
            if not node: return 0
            h = ht(node.left)
            if h == ht(node.right): return 2**h + fn(node.right)
            else: return 2**(h-1) + fn(node.left)
            
        return fn(root)


    """223. Rectangle Area (Medium)
	Find the total area covered by two rectilinear rectangles in a 2D plane. 
	Each rectangle is defined by its bottom left corner and top right corner as 
	shown in the figure.

	Example:
	Input: A = -3, B = 0, C = 3, D = 4, E = 0, F = -1, G = 9, H = 2
	Output: 45

	Note: Assume that the total area is never beyond the maximum possible value 
	of int."""

    def computeArea(self, A: int, B: int, C: int, D: int, E: int, F: int, G: int, H: int) -> int:
        area1 = (C-A) * (D-B)
        area2 = (G-E) * (H-F)
        overlap = max(0, min(C, G) - max(A, E)) * max(0, min(D, H) - max(B, F))
        return area1 + area2 - overlap


    """224. Basic Calculator (Hard)
	Implement a basic calculator to evaluate a simple expression string. The 
	expression string may contain open ( and closing parentheses ), the plus + 
	or minus sign -, non-negative integers and empty spaces .

	Example 1:
	Input: "1 + 1"
	Output: 2

	Example 2:
	Input: " 2-1 + 2 "
	Output: 3

	Example 3:
	Input: "(1+(4+5+2)-3)+(6+8)"
	Output: 23

	Note:
	You may assume that the given expression is always valid.
	Do not use the eval built-in library function."""

    def calculate(self, s: str) -> int:
        ans, sign, val = 0, 1, 0
        stack = []
        for c in s:
            if c.isdigit():
                val = 10*val + int(c)
            elif c in "+-":
                ans += sign * val
                sign = 1 if c == "+" else -1
                val = 0
            elif c == "(":
                stack.append(ans)
                stack.append(sign)
                ans, sign = 0, 1
            elif c == ")":
                ans += sign * val
                ans *= stack.pop()
                ans += stack.pop()
                sign, val = 1, 0
        return ans + sign * val 


    """226. Invert Binary Tree (Easy)
	Invert a binary tree.

	Example:
	Input:
	     4
	   /   \
	  2     7
	 / \   / \
	1   3 6   9

	Output:

	     4
	   /   \
	  7     2
	 / \   / \
	9   6 3   1
	
	Trivia: This problem was inspired by this original tweet by Max Howell:
	Google: 90% of our engineers use the software you wrote (Homebrew), but you 
	can’t invert a binary tree on a whiteboard so f*** off."""

    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        stack = [root]
        while stack: 
            node = stack.pop()
            if node: 
                node.left, node.right = node.right, node.left 
                stack.append(node.right)
                stack.append(node.left)
        return root


    """227. Basic Calculator II (Medium)
	Implement a basic calculator to evaluate a simple expression string. The 
	expression string contains only non-negative integers, +, -, *, / operators 
	and empty spaces . The integer division should truncate toward zero.

	Example 1:
	Input: "3+2*2"
	Output: 7

	Example 2:
	Input: " 3/2 "
	Output: 1

	Example 3:
	Input: " 3+5 / 2 "
	Output: 5

	Note:
	You may assume that the given expression is always valid. Do not use the 
	eval built-in library function."""

    def calculate(self, s: str) -> int:
        op, val = "+", 0
        stack = []
        for i, c in enumerate(s): 
            if c.isdigit(): val = 10*val + int(c)
            if i == len(s) - 1 or c in "+-*/": 
                if   op == "+": stack.append(val)
                elif op == "-": stack.append(-val)
                elif op == "*": stack.append(stack.pop()*val)
                elif op == "/": stack.append(int(stack.pop()/val))
                op, val = c, 0
        return sum(stack)


    """228. Summary Ranges (Medium)
	Given a sorted integer array without duplicates, return the summary of its 
	ranges.

	Example 1:
	Input:  [0,1,2,4,5,7]
	Output: ["0->2","4->5","7"]
	Explanation: 0,1,2 form a continuous range; 4,5 form a continuous range.

	Example 2:
	Input:  [0,2,3,4,6,8,9]
	Output: ["0","2->4","6","8->9"]
	Explanation: 2,3,4 form a continuous range; 8,9 form a continuous range."""

    def summaryRanges(self, nums: List[int]) -> List[str]:
        ans = []
        for i, x in enumerate(nums):
            if not i or nums[i-1]+1 != x: val = [x] #start of a range
            if i == len(nums)-1 or x+1 != nums[i+1]: 
                if val[-1] != x: val.append(x) #end of a range
                ans.append(val)
        return ["->".join(map(str, x)) for x in ans]


    """229. Majority Element II (Medium)
	Given an integer array of size n, find all elements that appear more than 
	⌊ n/3 ⌋ times. Note: The algorithm should run in linear time and in O(1) 
	space.

	Example 1:
	Input: [3,2,3]
	Output: [3]

	Example 2:
	Input: [1,1,1,3,3,2,2,2]
	Output: [1,2]"""

    def majorityElement(self, nums: List[int]) -> List[int]:
        ans, vote = [None]*2, [0]*2
        for x in nums: 
            if vote[0] == 0 and x not in ans: ans[0] = x
            elif vote[1] == 0 and x not in ans: ans[1] = x
            
            if ans[0] == x: vote[0] += 1
            elif ans[1] == x: vote[1] += 1
            else: vote = [x-1 for x in vote]
        return [x for x in ans if nums.count(x) > len(nums)//3]


    """230. Kth Smallest Element in a BST (Medium)
	Given a binary search tree, write a function kthSmallest to find the kth 
	smallest element in it.

	Example 1:
	Input: root = [3,1,4,null,2], k = 1
	   3
	  / \
	 1   4
	  \
	   2
	Output: 1

	Example 2:
	Input: root = [5,3,6,2,4,null,null,1], k = 3
	       5
	      / \
	     3   6
	    / \
	   2   4
	  /
	 1
	Output: 3

	Follow up: What if the BST is modified (insert/delete operations) often and 
	you need to find the kth smallest frequently? How would you optimize the 
	kth Smallest routine?

	Constraints:
	The number of elements of the BST is between 1 to 10^4.
	You may assume k is always valid, 1 ≤ k ≤ BST's total elements."""

    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        node = root
        stack = []
        while node or stack: 
            if node: 
                stack.append(node)
                node = node.left
            else: 
                node = stack.pop()
                k -= 1
                if k == 0: return node.val
                node = node.right 


    """231. Power of Two (Easy)
	Given an integer, write a function to determine if it is a power of two.

	Example 1:
	Input: 1
	Output: true 
	Explanation: 20 = 1

	Example 2:
	Input: 16
	Output: true
	Explanation: 24 = 16

	Example 3:
	Input: 218
	Output: false"""

    def isPowerOfTwo(self, n: int) -> bool:
        return n > 0 and n & (n-1) == 0


    """233. Number of Digit One (Hard)
	Given an integer n, count the total number of digit 1 appearing in all non-
	negative integers less than or equal to n.

	Example:
	Input: 13
	Output: 6 

	Explanation: Digit 1 occurred in the following numbers: 1, 10, 11, 12, 13."""

    def countDigitOne(self, n: int) -> int:
        if n < 0: return 0 #edge case 
        
        ans = digit = tail = 0
        magn = 1 #magnitude 
        while n: 
            tail = digit * magn//10 + tail #move digit to tail 
            n, digit = divmod(n, 10) #seprate digit from head 
            
            ans += n * magn
            if digit > 1: ans += magn
            elif digit == 1: ans += tail + 1 #tail + 1 considering 000...
                
            magn *= 10
        return ans 


    """234. Palindrome Linked List (Easy)
	Given a singly linked list, determine if it is a palindrome.

	Example 1:
	Input: 1->2
	Output: false

	Example 2:
	Input: 1->2->2->1
	Output: true

	Follow up: Could you do it in O(n) time and O(1) space?"""

    def isPalindrome(self, head: ListNode) -> bool:
        fast = slow = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next 
            
        prev = None
        while slow: slow.next, slow, prev = prev, slow.next, slow
        
        while prev and head.val == prev.val: 
            head = head.next
            prev = prev.next 
        
        return not prev 


    """235. Lowest Common Ancestor of a Binary Search Tree (Easy)
	Given a binary search tree (BST), find the lowest common ancestor (LCA) of 
	two given nodes in the BST. According to the definition of LCA on 
	Wikipedia: "The lowest common ancestor is defined between two nodes p and q 
	as the lowest node in T that has both p and q as descendants (where we 
	allow a node to be a descendant of itself)."

	Given binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]

	Example 1:
	Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
	Output: 6
	Explanation: The LCA of nodes 2 and 8 is 6.

	Example 2:
	Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
	Output: 2
	Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a 
	descendant of itself according to the LCA definition.

	Constraints:
	All of the nodes' values will be unique.
	p and q are different and both values will exist in the BST."""

    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if p.val > q.val: p, q = q, p
        node = root
        while node: 
            if node.val < p.val: node = node.right
            elif p.val <= node.val <= q.val: return node
            else: node = node.left


    """236. Lowest Common Ancestor of a Binary Tree (Medium)
	Given a binary tree, find the lowest common ancestor (LCA) of two given 
	nodes in the tree. According to the definition of LCA on Wikipedia: “The 
	lowest common ancestor is defined between two nodes p and q as the lowest 
	node in T that has both p and q as descendants (where we allow a node to be 
	a descendant of itself).” Given the following binary tree:  

	root = [3,5,1,6,2,0,8,null,null,7,4]

	Example 1:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
	Output: 3
	Explanation: The LCA of nodes 5 and 1 is 3.

	Example 2:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
	Output: 5
	Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a 
	             descendant of itself according to the LCA definition.

	Note:
	All of the nodes' values will be unique.
	p and q are different and both values will exist in the binary tree."""

    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        
        def fn(node):
            """Return LCA of p and q in subtree rooted at node (if found)."""
            if not node or node in (p, q): return node
            left, right = fn(node.left), fn(node.right)
            return node if left and right else left or right 
        
        return fn(root)


    """237. Delete Node in a Linked List (Easy)
	Write a function to delete a node (except the tail) in a singly linked 
	list, given only access to that node. Given linked list -- 
	head = [4,5,1,9], which looks like following:

    4 -> 5 -> 1 -> 9

	Example 1:
	Input: head = [4,5,1,9], node = 5
	Output: [4,1,9]
	Explanation: You are given the second node with value 5, the linked list 
	should become 4 -> 1 -> 9 after calling your function.

	Example 2:
	Input: head = [4,5,1,9], node = 1
	Output: [4,5,9]
	Explanation: You are given the third node with value 1, the linked list 
	should become 4 -> 5 -> 9 after calling your function.

	Note:
	* The linked list will have at least two elements.
	* All of the nodes' values will be unique.
	* The given node will not be the tail and it will always be a valid node of
	  the linked list.
	* Do not return anything from your function."""

    def deleteNode(self, node):
        node.val = node.next.val 
        node.next = node.next.next 


    """238. Product of Array Except Self (Medium)
	Given an array nums of n integers where n > 1,  return an array output 
	such that output[i] is equal to the product of all the elements of nums 
	except nums[i].

	Example:
	Input:  [1,2,3,4]
	Output: [24,12,8,6]

	Constraint: 
	It's guaranteed that the product of the elements of any prefix or suffix of 
	the array (including the whole array) fits in a 32 bit integer.

	Note: Please solve it without division and in O(n).

	Follow up:
	Could you solve it with constant space complexity? (The output array does 
	not count as extra space for the purpose of space complexity analysis.)"""

    def productExceptSelf(self, nums: List[int]) -> List[int]:
        ans = [1] * len(nums)
        prefix = suffix = 1
        for i in range(len(nums)):
            ans[i] *= prefix 
            ans[~i] *= suffix 
            prefix *= nums[i]
            suffix *= nums[~i]
        return ans 


    """239. Sliding Window Maximum (Hard)
	Given an array nums, there is a sliding window of size k which is moving 
	from the very left of the array to the very right. You can only see the k 
	numbers in the window. Each time the sliding window moves right by one 
	position. Return the max sliding window.

	Follow up: Could you solve it in linear time?

	Example:
	Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
	Output: [3,3,5,5,6,7] 
	Explanation: 

	Window position                Max
	---------------               -----
	[1  3  -1] -3  5  3  6  7       3
	 1 [3  -1  -3] 5  3  6  7       3
	 1  3 [-1  -3  5] 3  6  7       5
	 1  3  -1 [-3  5  3] 6  7       5
	 1  3  -1  -3 [5  3  6] 7       6
	 1  3  -1  -3  5 [3  6  7]      7

	Constraints:
	* 1 <= nums.length <= 10^5
	* -10^4 <= nums[i] <= 10^4
	* 1 <= k <= nums.length"""

    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        ans = []
        queue = deque() #decreasing queue 
        for i, x in enumerate(nums): 
            while queue and queue[-1][1] <= x: queue.pop() #remove redundant 
            queue.append((i, x))
            if queue and queue[0][0] <= i-k: queue.popleft() #remove expired 
            if i+1 >= k: ans.append(queue[0][1])
        return ans 


    """240. Search a 2D Matrix II (Medium)
	Write an efficient algorithm that searches for a target value in an m x n 
	integer matrix. The matrix has the following properties:
	* Integers in each row are sorted in ascending from left to right.
	* Integers in each column are sorted in ascending from top to bottom.

	Example 1:
	Input: matrix = [[ 1, 4, 7,11,15],
	                 [ 2, 5, 8,12,19],
	                 [ 3, 6, 9,16,22],
	                 [10,13,14,17,24],
	                 [18,21,23,26,30]], target = 5
	Output: true

	Example 2:
	Input: matrix = [[ 1, 4, 7,11,15],
	                 [ 2, 5, 8,12,19],
	                 [ 3, 6, 9,16,22],
	                 [10,13,14,17,24],
	                 [18,21,23,26,30]], target = 20
	Output: false

	Constraints:
	* m == matrix.length
	* n == matrix[i].length
	* 1 <= n, m <= 300
	* -10^9 <= matix[i][j] <= 10^9
	* All the integers in each row are sorted in ascending order.
	* All the integers in each column are sorted in ascending order.
	* -10^9 <= target <= 10^9"""

    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        m, n = len(matrix), len(matrix[0])
        i, j = 0, n-1
        while i < m and 0 <= j: 
            if matrix[i][j] < target: i += 1
            elif matrix[i][j] == target: return True 
            else: j -= 1
        return False 


    """241. Different Ways to Add Parentheses (Medium)
	Given a string of numbers and operators, return all possible results from 
	computing all the different possible ways to group numbers and operators. 
	The valid operators are +, - and *.

	Example 1:
	Input: "2-1-1"
	Output: [0, 2]
	Explanation: ((2-1)-1) = 0 
	             (2-(1-1)) = 2

	Example 2:
	Input: "2*3-4*5"
	Output: [-34, -14, -10, -10, 10]
	Explanation: (2*(3-(4*5))) = -34 
 	             ((2*3)-(4*5)) = -14 
 	             ((2*(3-4))*5) = -10 
 	             (2*((3-4)*5)) = -10 
 	             (((2*3)-4)*5) = 10"""

    def diffWaysToCompute(self, input: str) -> List[int]:
        #pre-processing to tokenize input 
        tokens = re.split(r'(\D)', input)
        mp = {"+": add, "-": sub, "*": mul}
        for i, token in enumerate(tokens):
            if token.isdigit(): tokens[i] = int(token)
            else: tokens[i] = mp[token]
        
        def fn(lo, hi): 
            """Return possible outcomes of tokens[lo:hi]"""
            if lo+1 == hi: return [tokens[lo]]
            ans = []
            for mid in range(lo+1, hi, 2): 
                ans.extend(tokens[mid](x, y) for x in fn(lo, mid) for y in fn(mid+1, hi))
            return ans
        
        return fn(0, len(tokens))



    """242. Valid Anagram (Easy)
	Given two strings s and t , write a function to determine if t is an 
	anagram of s.

	Example 1:
	Input: s = "anagram", t = "nagaram"
	Output: true

	Example 2:
	Input: s = "rat", t = "car"
	Output: false

	Note: You may assume the string contains only lowercase alphabets.

	Follow up: What if the inputs contain unicode characters? How would you 
	           adapt your solution to such case?"""
    
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)


    """243. Shortest Word Distance (Easy)
	Given a list of words and two words word1 and word2, return the shortest 
	distance between these two words in the list.

	Example:
	Assume that words = ["practice", "makes", "perfect", "coding", "makes"].
	Input: word1 = “coding”, word2 = “practice”
	Output: 3
	Input: word1 = "makes", word2 = "coding"
	Output: 1
	Note: You may assume that word1 does not equal to word2, and word1 and 
	      word2 are both in the list."""

    def shortestDistance(self, words: List[str], word1: str, word2: str) -> int:
        ans = i1 = i2 = inf
        for i, word in enumerate(words):
            if word == word1: i1 = i
            elif word == word2: i2 = i 
            ans = min(ans, abs(i1 - i2))
        return ans 


    """245. Shortest Word Distance III (Medium)
	Given a list of words and two words word1 and word2, return the shortest 
	distance between these two words in the list. word1 and word2 may be the 
	same and they represent two individual words in the list.

	Example:
	Assume that words = ["practice", "makes", "perfect", "coding", "makes"].
	Input: word1 = “makes”, word2 = “coding”
	Output: 1
	Input: word1 = "makes", word2 = "makes"
	Output: 3
	
	Note: You may assume word1 and word2 are both in the list."""

    def shortestWordDistance(self, words: List[str], word1: str, word2: str) -> int:
        ans = i1 = i2 = inf
        for i, word in enumerate(words):
            if word == word1: i1 = i2 if word1 == word2 else i
            if word == word2: i2 = i
            ans = min(ans, abs(i1-i2))
        return ans 


    """246. Strobogrammatic Number (Easy)
	A strobogrammatic number is a number that looks the same when rotated 180 
	degrees (looked at upside down). Write a function to determine if a number 
	is strobogrammatic. The number is represented as a string.

	Example 1:
	Input: num = "69"
	Output: true

	Example 2:
	Input: num = "88"
	Output: true

	Example 3:
	Input: num = "962"
	Output: false

	Example 4:
	Input: num = "1"
	Output: true"""

    def isStrobogrammatic(self, num: str) -> bool:
        mp = {"0":"0", "1":"1", "6":"9", "8":"8", "9":"6"}
        return all(mp.get(num[i]) == num[~i] for i in range(len(num)//2+1))


    """247. Strobogrammatic Number II (Medium)
	A strobogrammatic number is a number that looks the same when rotated 180 
	degrees (looked at upside down). Find all strobogrammatic numbers that are 
	of length = n.

	Example:
	Input:  n = 2
	Output: ["11","69","88","96"]"""

    def findStrobogrammatic(self, n: int) -> List[str]:
        mp = ["00", "11", "69", "88", "96"]
        
        def fn(n):
            """Return strobogrammatic number of length n."""
            if n == 0: return [""]
            if n == 1: return ["0", "1", "8"]
            return [x+y+xx for x, xx in mp for y in fn(n-2)]
        
        ans = fn(n)
        return [x for x in ans if not x.startswith("0")] if n > 1 else ans 


    """249. Group Shifted Strings (Medium)
	Given a string, we can "shift" each of its letter to its successive letter, 
	for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:
	"abc" -> "bcd" -> ... -> "xyz"
	Given a list of non-empty strings which contains only lowercase alphabets, 
	group all strings that belong to the same shifting sequence.

	Example:
	Input: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"],
	Output: 
	[
	  ["abc","bcd","xyz"],
	  ["az","ba"],
	  ["acef"],
	  ["a","z"]
	]"""

    def groupStrings(self, strings: List[str]) -> List[List[str]]:
        ans = {}
        for string in strings: 
            key = []
            for i in range(1, len(string)):
                key.append((ord(string[i]) - ord(string[0])) % 26)
            ans.setdefault("#".join(map(str, key)), []).append(string)
        return ans.values()


    """250. Count Univalue Subtrees (Medium)
	Given the root of a binary tree, return the number of uni-value subtrees. A 
	uni-value subtree means all nodes of the subtree have the same value.

	Example 1:
	Input: root = [5,1,5,5,5,null,5]
	Output: 4

	Example 2:
	Input: root = []
	Output: 0

	Example 3:
	Input: root = [5,5,5,5,5,null,5]
	Output: 6

	Constraints:
	* The numbrt of the node in the tree will be in the range [0, 1000].
	* -1000 <= Node.val <= 1000"""

    def countUnivalSubtrees(self, root: TreeNode) -> int:
        if not root: return 0 
        
        def fn(node): 
            """Return count of univalue subtrees of sub-tree rooted at node."""
            lc = rc = 0
            lv = rv = node.val 
            if node.left: lc, lv = fn(node.left)
            if node.right: rc, rv = fn(node.right)
            if lv == rv == node.val: return lc + rc + 1, node.val 
            return lc + rc, None
            
        return fn(root)[0]           


    """252. Meeting Rooms (Easy)
	Given an array of meeting time intervals where intervals[i] = [starti, endi], 
	determine if a person could attend all meetings.

	Example 1:
	Input: intervals = [[0,30],[5,10],[15,20]]
	Output: false

	Example 2:
	Input: intervals = [[7,10],[2,4]]
	Output: true

	Constraints:
	* 0 <= intervals.length <= 10^4
	* intervals[i].length == 2
	* 0 <= starti < endi <= 10^6"""

    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:
        intervals.sort()
        return all(intervals[i-1][1] <= intervals[i][0] for i in range(1, len(intervals)))


    """253. Meeting Rooms II (Medium)
	Given an array of meeting time intervals intervals where 
	intervals[i] = [starti, endi], return the minimum number of conference 
	rooms required.

	Example 1:
	Input: intervals = [[0,30],[5,10],[15,20]]
	Output: 2

	Example 2:
	Input: intervals = [[7,10],[2,4]]
	Output: 1

	Constraints:
	*1 <= intervals.length <= 104
	*0 <= starti < endi <= 106"""

    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        pq = []
        for x, y in intervals: 
            heappush(pq, (x, +1))
            heappush(pq, (y, -1))
            
        ans = prefix = 0
        while pq: 
            _, x = heappop(pq)
            prefix += x
            ans = max(ans, prefix)
        return ans 


    """254. Factor Combinations (Medium)
	Numbers can be regarded as product of its factors. For example,
	8 = 2 x 2 x 2 = = 2 x 4.
	Write a function that takes an integer n and return all possible 
	combinations of its factors.

	Note:
	* You may assume that n is always positive.
	* Factors should be greater than 1 and less than n.
	
	Example 1:
	Input: 1
	Output: []

	Example 2:
	Input: 37
	Output:[]

	Example 3:
	Input: 12
	Output: [[2, 6],
			 [2, 2, 3],
			 [3, 4]]

	Example 4:
	Input: 32
	Output: [[2, 16],
	         [2, 2, 8],
	         [2, 2, 2, 4],
	         [2, 2, 2, 2, 2],
	         [2, 4, 4],
	         [4, 8]]"""

    def getFactors(self, n: int) -> List[List[int]]:
        factors = [k for k in range(2, int(sqrt(n))+1) if n % k == 0]
        
        def fn(i, n): 
            """Populate ans via a stack."""
            if len(stack) > 0 and stack[-1] <= n: ans.append(stack + [n])
            for ii in range(i, len(factors)):
                if n % factors[ii] == 0: 
                    stack.append(factors[ii])
                    fn(ii, n//factors[ii])
                    stack.pop()
            
        ans, stack = [], []
        fn(0, n)
        return ans 


    """255. Verify Preorder Sequence in Binary Search Tree (Medium)
	Given an array of numbers, verify whether it is the correct preorder 
	traversal sequence of a binary search tree. You may assume each number in 
	the sequence is unique. Consider the following binary search tree: 

	     5
	    / \
	   2   6
	  / \
	 1   3
	
	Example 1:
	Input: [5,2,6,1,3]
	Output: false

	Example 2:
	Input: [5,2,1,3,6]
	Output: true

	Follow up: Could you do it using only constant space complexity?"""

    def verifyPreorder(self, preorder: List[int]) -> bool:
        lo = -inf 
        stack = []
        for x in preorder: 
            if x < lo: return False 
            while stack and stack[-1] < x: lo = stack.pop()
            stack.append(x)
        return True 


    """256. Paint House (Medium)
	There is a row of n houses, where each house can be painted one of three 
	colors: red, blue, or green. The cost of painting each house with a certain 
	color is different. You have to paint all the houses such that no two 
	adjacent houses have the same color. The cost of painting each house with a 
	certain color is represented by a n x 3 cost matrix. For example, 
	costs[0][0] is the cost of painting house 0 with the color red; costs[1][2] 
	is the cost of painting house 1 with color green, and so on... Find the 
	minimum cost to paint all houses.

	Example 1:
	Input: costs = [[17,2,17],[16,16,5],[14,3,19]]
	Output: 10
	Explanation: Paint house 0 into blue, paint house 1 into green, paint house 
	             2 into blue. Minimum cost: 2 + 5 + 3 = 10.

	Example 2:
	Input: costs = []
	Output: 0
	
	Example 3:
	Input: costs = [[7,6,2]]
	Output: 2

	Constraints:
	* costs.length == n
	* costs[i].length == 3
	* 0 <= n <= 100
	* 1 <= costs[i][j] <= 20"""

    def minCost(self, costs: List[List[int]]) -> int:
        
        @cache
        def fn(i, j): 
            """Return min cost of painting ith house w/ jth color."""
            if i == len(costs): return 0 # no more houses to paint 
            return costs[i][j] + min(fn(i+1, jj) for jj in range(3) if j != jj)
            
        return min(fn(0, j) for j in range(3))


    """257. Binary Tree Paths (Easy)
	Given a binary tree, return all root-to-leaf paths.

	Note: A leaf is a node with no children.

	Example:
	Input:

	   1
	 /   \
	2     3
	 \
	  5
	Output: ["1->2->5", "1->3"]

	Explanation: All root-to-leaf paths are: 1->2->5, 1->3"""

    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        
        def fn(node):
            """Populate ans with a stack via backtracking."""
            if not node: return #null node
            stack.append(node.val)
            if node.left is node.right: ans.append("->".join(map(str, stack))) #leaf node
            fn(node.left) or fn(node.right)
            stack.pop()
            
        ans, stack = [], []
        fn(root)
        return ans 


    """258. Add Digits (Easy)
	Given a non-negative integer num, repeatedly add all its digits until the 
	result has only one digit.

	Example:
	Input: 38
	Output: 2 
	Explanation: The process is like: 3 + 8 = 11, 1 + 1 = 2. 
	             Since 2 has only one digit, return it.

	Follow up: Could you do it without any loop/recursion in O(1) runtime?"""

    def addDigits(self, num: int) -> int:
        return num and 1 + (num - 1) % 9


    """259. 3Sum Smaller (Medium)
	Given an array of n integers nums and an integer target, find the number of 
	index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition 
	nums[i] + nums[j] + nums[k] < target. 

	Follow up: Could you solve it in O(n2) runtime?

	Example 1:
	Input: nums = [-2,0,1,3], target = 2
	Output: 2
	Explanation: Because there are two triplets which sums are less than 2:
	[-2,0,1]
	[-2,0,3]

	Example 2:
	Input: nums = [], target = 0
	Output: 0

	Example 3:
	Input: nums = [0], target = 0
	Output: 0

	Constraints:
	* n == nums.length
	* 0 <= n <= 300
	* -100 <= nums[i] <= 100
	* -100 <= target <= 100"""

    def threeSumSmaller(self, nums: List[int], target: int) -> int:
        nums.sort()
        ans = 0
        for i in range(len(nums)): 
            lo, hi = i+1, len(nums)-1
            while lo < hi: 
                if nums[i] + nums[lo] + nums[hi] >= target: hi -= 1
                else: 
                    ans += hi - lo
                    lo += 1
        return ans 


    """260. Single Number III (Medium)
	Given an array of numbers nums, in which exactly two elements appear only 
	once and all the other elements appear exactly twice. Find the two elements 
	that appear only once.

	Example:
	Input:  [1,2,1,3,2,5]
	Output: [3,5]

	Note:
	The order of the result is not important. So in the above example, [5, 3] 
	is also correct. Your algorithm should run in linear runtime complexity. 
	Could you implement it using only constant space complexity?"""

    def singleNumber(self, nums: List[int]) -> List[int]:
        diff = reduce(xor, nums)
        diff &= -diff 
        ans = [0]*2
        for x in nums:
            ans[bool(diff & x)] ^= x
        return ans 


    """261. Graph Valid Tree (Medium)
	You have a graph of n nodes labeled from 0 to n - 1. You are given an 
	integer n and a list of edges where edges[i] = [ai, bi] indicates that 
	there is an undirected edge between nodes ai and bi in the graph. Return 
	true if the edges of the given graph make up a valid tree, and false 
	otherwise.

	Example 1:
	Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]
	Output: true

	Example 2:
	Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
	Output: false

	Constraints:
	* 1 <= 2000 <= n
	* 0 <= edges.length <= 5000
	* edges[i].length == 2
	* 0 <= ai, bi < n
	* ai != bi
	* There are no self-loops or repeated edges.

class UnionFind: 
    
    def __init__(self, n): 
        self.parent = list(range(n))
        self.rank = [1] * n 
        
    def find(self, p): 
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q): 
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt 
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True """
    
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        uf = UnionFind(n)
        for u, v in edges: 
            if not uf.union(u, v): return False 
            n -= 1
        return n == 1


    """263. Ugly Number (Easy)
	Write a program to check whether a given number is an ugly number. Ugly 
	numbers are positive numbers whose prime factors only include 2, 3, 5.

	Example 1:
	Input: 6
	Output: true
	Explanation: 6 = 2 × 3

	Example 2:
	Input: 8
	Output: true
	Explanation: 8 = 2 × 2 × 2

	Example 3:
	Input: 14
	Output: false 
	Explanation: 14 is not ugly since it includes another prime factor 7.

	Note:
	* 1 is typically treated as an ugly number.
	* Input is within the 32-bit signed integer range: [−2^31,  2^31 − 1]."""

    def isUgly(self, n: int) -> bool:
        if n <= 0: return False 
        for f in 2,3,5:
            while n%f == 0: n //= f
        return n == 1


    """264. Ugly Number II (Medium)
	Write a program to find the n-th ugly number. Ugly numbers are positive 
	numbers whose prime factors only include 2, 3, 5. 

	Example:
	Input: n = 10
	Output: 12
	Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 
	             10 ugly numbers.

	Note:  
	* 1 is typically treated as an ugly number.
	* n does not exceed 1690."""

    def nthUglyNumber(self, n: int) -> int:
        ans = [1]*n
        p2 = p3 = p5 = 0
        for i in range(1, n): 
            ans[i] = min(2*ans[p2], 3*ans[p3], 5*ans[p5])
            if 2*ans[p2] == ans[i]: p2 += 1
            if 3*ans[p3] == ans[i]: p3 += 1
            if 5*ans[p5] == ans[i]: p5 += 1
        return ans[-1]


    """265. Paint House II (Hard)
	There are a row of n houses, each house can be painted with one of the k 
	colors. The cost of painting each house with a certain color is different. 
	You have to paint all the houses such that no two adjacent houses have the 
	same color. The cost of painting each house with a certain color is 
	represented by an n x k cost matrix costs. For example, costs[0][0] is the 
	cost of painting house 0 with color 0; costs[1][2] is the cost of painting 
	house 1 with color 2, and so on... Return the minimum cost to paint all 
	houses.

	Example 1:
	Input: costs = [[1,5,3],[2,9,4]]
	Output: 5
	Explanation: Paint house 0 into color 0, paint house 1 into color 2. 
	             Minimum cost: 1 + 4 = 5; Or paint house 0 into color 2, paint 
	             house 1 into color 0. Minimum cost: 3 + 2 = 5.
	
	Example 2:
	Input: costs = [[1,3],[2,4]]
	Output: 5

	Constraints:
	* costs.length == n
	* costs[i].length == k
	* 1 <= n <= 100
	* 2 <= k <= 20
	* 1 <= costs[i][j] <= 20

	Follow up: Could you solve it in O(nk) runtime?"""

    def minCostII(self, costs: List[List[int]]) -> int:
        n, k = len(costs), len(costs[0])
        for i in range(1, n): 
            m0 = m1 = -1
            for j in range(k): 
                if m0 == -1 or costs[i-1][j] <= costs[i-1][m0]: m0, m1 = j, m0
                elif m1 == -1 or costs[i-1][j] < costs[i-1][m1]: m1 = j
            for j in range(k): 
                if j == m0: costs[i][j] += costs[i-1][m1]
                else: costs[i][j] += costs[i-1][m0]
        return min(costs[-1])


    """266. Palindrome Permutation (Easy)
	Given a string, determine if a permutation of the string could form a 
	palindrome.

	Example 1:
	Input: "code"
	Output: false

	Example 2:
	Input: "aab"
	Output: true

	Example 3:
	Input: "carerac"
	Output: true"""

    def canPermutePalindrome(self, s: str) -> bool:
        freq = {}
        for c in s: freq[c] = 1 + freq.get(c, 0)
        return sum(v&1 for v in freq.values()) <= 1


    """267. Palindrome Permutation II (Medium)
	Given a string s, return all the palindromic permutations (without 
	duplicates) of it. Return an empty list if no palindromic permutation could 
	be form.

	Example 1:
	Input: "aabb"
	Output: ["abba", "baab"]

	Example 2:
	Input: "abc"
	Output: []"""

    def generatePalindromes(self, s: str) -> List[str]:
        freq = {}
        for c in s: freq[c] = 1 + freq.get(c, 0)
        
        mid = []
        for k, v in freq.items(): 
            if v&1: mid.append(k)
        
        ans = []
        if len(mid) <= 1: 
            
            def fn(x):
                """Populate ans via backtracking."""
                if len(x) == len(s): ans.append(x)
                for k, v in freq.items(): 
                    if v >= 2: 
                        freq[k] -= 2
                        fn(k + x + k)
                        freq[k] += 2
            
            fn(mid.pop() if mid else "")
        return ans 


    """268. Missing Number (Easy)
	Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, 
	find the one that is missing from the array.

	Example 1:
	Input: [3,0,1]
	Output: 2

	Example 2:
	Input: [9,6,4,2,3,5,7,0,1]
	Output: 8

	Note: Your algorithm should run in linear runtime complexity. Could you 
	implement it using only constant extra space complexity?"""

    def missingNumber(self, nums: List[int]) -> int:
        ans = 0
        for i, x in enumerate(nums):
            ans ^= i+1 ^ x
        return ans 


    """270. Closest Binary Search Tree Value (Easy)
	Given a non-empty binary search tree and a target value, find the value in 
	the BST that is closest to the target.

	Note:
	* Given target value is a floating point.
	* You are guaranteed to have only one unique value in the BST that is closest to the target.
	
	Example:
	Input: root = [4,2,5,1,3], target = 3.714286
	    4
	   / \
	  2   5
	 / \
	1   3
	Output: 4"""

    def closestValue(self, root: TreeNode, target: float) -> int:
        ans = inf
        node = root
        while node: 
            if node.val == target: return node.val
            ans = min(ans, node.val, key=lambda x: abs(x-target))
            if node.val < target: node = node.right
            else: node = node.left
        return ans 


    """273. Integer to English Words (Hard)
	Convert a non-negative integer to its english words representation. Given 
	input is guaranteed to be less than 231 - 1.

	Example 1:
	Input: 123
	Output: "One Hundred Twenty Three"

	Example 2:
	Input: 12345
	Output: "Twelve Thousand Three Hundred Forty Five"

	Example 3:
	Input: 1234567
	Output: "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty 
	        Seven"

	Example 4:
	Input: 1234567891
	Output: "One Billion Two Hundred Thirty Four Million Five Hundred Sixty 
	        Seven Thousand Eight Hundred Ninety One" """

    def numberToWords(self, num: int) -> str:
        mp = {1: "One",   11: "Eleven",    10: "Ten", 
              2: "Two",   12: "Twelve",    20: "Twenty", 
              3: "Three", 13: "Thirteen",  30: "Thirty", 
              4: "Four",  14: "Fourteen",  40: "Forty",
              5: "Five",  15: "Fifteen",   50: "Fifty", 
              6: "Six",   16: "Sixteen",   60: "Sixty", 
              7: "Seven", 17: "Seventeen", 70: "Seventy", 
              8: "Eight", 18: "Eighteen",  80: "Eighty",
              9: "Nine",  19: "Nineteen",  90: "Ninety"}
        
        def fn(n):
            """Return English words of n (0-999) in array."""
            if not n: return []
            elif n < 20: return [mp[n]]
            elif n < 100: return [mp[n//10*10]] + fn(n%10)
            else: return [mp[n//100], "Hundred"] + fn(n%100)
        
        ans = []
        for i, unit in zip((9, 6, 3, 0), ("Billion", "Million", "Thousand", "")): 
            n, num = divmod(num, 10**i)
            ans.extend(fn(n))
            if n and unit: ans.append(unit)
        return " ".join(ans) or "Zero"


    """274. H-Index (Medium)
	Given an array of citations (each citation is a non-negative integer) of a 
	researcher, write a function to compute the researcher's h-index. According 
	to the definition of h-index on Wikipedia: "A scientist has index h if h of 
	his/her N papers have at least h citations each, and the other N − h papers 
	have no more than h citations each."

	Example:
	Input: citations = [3,0,6,1,5]
	Output: 3 
	Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and 
	             each of them had received 3, 0, 6, 1, 5 citations respectively. 
	             Since the researcher has 3 papers with at least 3 citations 
	             each and the remaining two with no more than 3 citations each, 
	             her h-index is 3.

	Note: If there are several possible values for h, the maximum one is taken 
	      as the h-index."""

    def hIndex(self, citations: List[int]) -> int:
        citations.sort(reverse=True)
        arr = [i-c for i, c in enumerate(citations, 1)]
        return bisect_right(arr, 0) #right-most occurrence of i <= c


    """275. H-Index II (Medium)
	Given an array of citations sorted in ascending order (each citation is a 
	non-negative integer) of a researcher, write a function to compute the 
	researcher's h-index. According to the definition of h-index on Wikipedia: 
	"A scientist has index h if h of his/her N papers have at least h citations 
	each, and the other N − h papers have no more than h citations each."

	Example:
	Input: citations = [0,1,3,5,6]
	Output: 3 
	Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and 
	             each of them had received 0, 1, 3, 5, 6 citations respectively. 
	             Since the researcher has 3 papers with at least 3 citations 
	             each and the remaining two with no more than 3 citations each, 
	             her h-index is 3.

	Note: If there are several possible values for h, the maximum one is taken 
	      as the h-index.

	Follow up:
	This is a follow up problem to H-Index, where citations is now guaranteed 
	to be sorted in ascending order. Could you solve it in logarithmic time 
	complexity?"""

    def hIndex(self, citations: List[int]) -> int:
        lo = 0
        hi = n = len(citations)
        while lo < hi: 
            mid = (lo + hi)//2
            if citations[mid] >= n - mid: hi = mid #less paper than citation 
            else: lo = mid + 1
        return n - lo


    """276. Paint Fence (Easy)
	There is a fence with n posts, each post can be painted with one of the k 
	colors. You have to paint all the posts such that no more than two adjacent 
	fence posts have the same color. Return the total number of ways you can 
	paint the fence.

	Note: n and k are non-negative integers.

	Example:
	Input: n = 3, k = 2
	Output: 6
	Explanation: Take c1 as color 1, c2 as color 2. All possible ways are:

	            post1  post2  post3      
	 -----      -----  -----  -----       
	   1         c1     c1     c2 
	   2         c1     c2     c1 
	   3         c1     c2     c2 
	   4         c2     c1     c1  
	   5         c2     c1     c2
	   6         c2     c2     c1"""

    def numWays(self, n: int, k: int) -> int:
        if not n: return 0
        f0, f1 = k, k*k
        for _ in range(1, n):
            f0, f1 = f1, (k-1)*(f0+f1)
        return f0


    """277. Find the Celebrity (Medium)
	Suppose you are at a party with n people (labeled from 0 to n - 1), and 
	among them, there may exist one celebrity. The definition of a celebrity is 
	that all the other n - 1 people know him/her, but he/she does not know any 
	of them. Now you want to find out who the celebrity is or verify that there 
	is not one. The only thing you are allowed to do is to ask questions like: 
	"Hi, A. Do you know B?" to get information about whether A knows B. You 
	need to find out the celebrity (or verify there is not one) by asking as 
	few questions as possible (in the asymptotic sense). You are given a helper 
	function bool knows(a, b) which tells you whether A knows B. Implement a 
	function int findCelebrity(n). There will be exactly one celebrity if 
	he/she is in the party. Return the celebrity's label if there is a 
	celebrity in the party. If there is no celebrity, return -1.

	Example 1:
	Input: graph = [[1,1,0],[0,1,0],[1,1,1]]
	Output: 1
	Explanation: There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 
	             means person i knows person j, otherwise graph[i][j] = 0 means 
	             person i does not know person j. The celebrity is the person 
	             labeled as 1 because both 0 and 2 know him but 1 does not know 
	             anybody.

	Example 2:
	Input: graph = [[1,0,1],[1,1,0],[0,1,1]]
	Output: -1
	Explanation: There is no celebrity.

	Constraints:
	* n == graph.length
	* n == graph[i].length
	* 2 <= n <= 100
	* graph[i][j] is 0 or 1.
	* graph[i][i] == 1
	 
	Follow up: If the maximum number of allowed calls to the API knows is 3 * n, 
	           could you find a solution without exceeding the maximum number 
	           of calls?"""

    def findCelebrity(self, n: int) -> int:
        k = 0
        for i in range(1, n): 
            if knows(k, i): k = i 
        return k if all(knows(i, k) for i in range(n)) and not any(knows(k, i) for i in range(n) if i != k) else -1

        
    """278. First Bad Version (Easy)
	You are a product manager and currently leading a team to develop a new 
	product. Unfortunately, the latest version of your product fails the 
	quality check. Since each version is developed based on the previous 
	version, all the versions after a bad version are also bad. Suppose you 
	have n versions [1, 2, ..., n] and you want to find out the first bad one, 
	which causes all the following ones to be bad. You are given an API bool 
	isBadVersion(version) which will return whether version is bad. Implement 
	a function to find the first bad version. You should minimize the number of
	calls to the API.

	Example:
	Given n = 5, and version = 4 is the first bad version.
	call isBadVersion(3) -> false
	call isBadVersion(5) -> true
	call isBadVersion(4) -> true

	Then 4 is the first bad version. """

    def firstBadVersion(self, n):
        lo, hi = 1, n 
        while lo < hi: 
            mid = (lo + hi)//2
            if isBadVersion(mid): hi = mid 
            else: lo = mid + 1
        return lo 


    """279. Perfect Squares (Medium)
	Given a positive integer n, find the least number of perfect square numbers 
	(for example, 1, 4, 9, 16, ...) which sum to n.

	Example 1:
	Input: n = 12
	Output: 3 
	Explanation: 12 = 4 + 4 + 4.

	Example 2:
	Input: n = 13
	Output: 2
	Explanation: 13 = 4 + 9."""

    def numSquares(self, n: int) -> int:
    	"""Lagrange's four-square theorem which states that every natural 
    	   number can be represented as the sum of four integer (including zero) 
    	   squares; Legendre's three-square theorem which says a positive 
    	   integer can be expressed as the sum of three squares iff it is not 
    	   of the form 4^k(8m+7) for integers k and m."""

        if int(sqrt(n))**2 == n: return 1
        for i in range(1, int(sqrt(n))+1): 
            if int(sqrt(n - i*i))**2 == n - i*i: return 2
        while n % 4 == 0: n //= 4
        return 4 if n%8 == 7 else 3 #Lagrange four-square theorem & Lagendre three-square theorem


    """280. Wiggle Sort (Medium)
	Given an unsorted array nums, reorder it in-place such that 
	nums[0] <= nums[1] >= nums[2] <= nums[3]....

	Example:
	Input: nums = [3,5,2,1,6,4]
	Output: One possible answer is [3,5,1,6,2,4]"""

    def wiggleSort(self, nums: List[int]) -> None:
        for i in range(len(nums)-1):
            if i & 1 and nums[i] < nums[i+1] or not i&1 and nums[i] > nums[i+1]: 
                nums[i], nums[i+1] = nums[i+1], nums[i]


    """282. Expression Add Operators (Hard)
	Given a string that contains only digits 0-9 and a target value, return 
	all possibilities to add binary operators (not unary) +, -, or * between 
	the digits so they evaluate to the target value.

	Example 1:
	Input: num = "123", target = 6
	Output: ["1+2+3", "1*2*3"] 

	Example 2:
	Input: num = "232", target = 8
	Output: ["2*3+2", "2+3*2"]

	Example 3:
	Input: num = "10^5", target = 5
	Output: ["1*0+5","10-5"]

	Example 4:
	Input: num = "00", target = 0
	Output: ["0+0", "0-0", "0*0"]

	Example 5:
	Input: num = "3456237490", target = 9191
	Output: []

	Constraints:
	0 <= num.length <= 10
	num only contain digits."""

    def addOperators(self, num: str, target: int) -> List[str]:
        
        def fn(i, expr, total, last):
            """Populate ans with expression evaluated to target."""
            if i == len(num): 
                if total == target: ans.append(expr)
            else: 
                for ii in range(i, len(num) if num[i] != "0" else i+1): 
                    val = int(num[i:ii+1])
                    if i == 0: fn(ii+1, num[i:ii+1], val, val)
                    else: 
                        fn(ii+1, expr + "*" + num[i:ii+1], total - last + last * val, last * val)
                        fn(ii+1, expr + "+" + num[i:ii+1], total + val, val)
                        fn(ii+1, expr + "-" + num[i:ii+1], total - val, -val)
                    
        ans = []
        fn(0, "", 0, 0)
        return ans 


    """283. Move Zeroes (Easy)
	Given an array nums, write a function to move all 0's to the end of it 
	while maintaining the relative order of the non-zero elements.

	Example:
	Input: [0,1,0,3,12]
	Output: [1,3,12,0,0]

	Note:
	You must do this in-place without making a copy of the array.
	Minimize the total number of operations."""

    def moveZeroes(self, nums: List[int]) -> None:
        ii = 0
        for i in range(len(nums)): 
            if nums[i]: 
                nums[i], nums[ii] = nums[ii], nums[i]
                ii += 1


    """286. Walls and Gates (Medium)
	You are given an m x n grid rooms initialized with these three possible 
	values.
	* -1 A wall or an obstacle.
	* 0 A gate.
	* INF Infinity means an empty room. We use the value 231 - 1 = 2147483647 
	  to represent INF as you may assume that the distance to a gate is less 
	  than 2147483647.
	Fill each empty room with the distance to its nearest gate. If it is 
	impossible to reach a gate, it should be filled with INF.

	Example 1:
	Input: rooms = [[2147483647,        -1,         0,2147483647],
	                [2147483647,2147483647,2147483647,        -1],
	                [2147483647,        -1,2147483647,        -1],
	                [         0,        -1,2147483647,2147483647]]
	Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]
	
	Example 2:
	Input: rooms = [[-1]]
	Output: [[-1]]

	Example 3:
	Input: rooms = [[2147483647]]
	Output: [[2147483647]]

	Example 4:
	Input: rooms = [[0]]
	Output: [[0]]

	Constraints:
	* m == rooms.length
	* n == rooms[i].length
	* 1 <= m, n <= 250
	* rooms[i][j] is -1, 0, or 231 - 1."""

    def wallsAndGates(self, rooms: List[List[int]]) -> None:
        m, n = len(rooms), len(rooms[0]) # dimensions 
        dist = 0
        queue = [(i, j) for i in range(m) for j in range(n) if rooms[i][j] == 0] 
        while queue: 
            dist += 1
            newq = []
            for i, j in queue: 
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    if 0 <= ii < m and 0 <= jj < n and rooms[ii][jj] == 2147483647: 
                        rooms[ii][jj] = dist
                        newq.append((ii, jj))
            queue = newq


    """287. Find the Duplicate Number (Medium)
	Given an array nums containing n + 1 integers where each integer is between 
	1 and n (inclusive), prove that at least one duplicate number must exist. 
	Assume that there is only one duplicate number, find the duplicate one.

	Example 1:
	Input: [1,3,4,2,2]
	Output: 2

	Example 2:
	Input: [3,1,3,4,2]
	Output: 3

	Note:
	* You must not modify the array (assume the array is read only).
	* You must use only constant, O(1) extra space.
	* Your runtime complexity should be less than O(n2).
	* There is only one duplicate number in the array, but it could be repeated 
	  more than once."""

    def findDuplicate(self, nums: List[int]) -> int:
        fast = slow = 0
        while True:
            fast = nums[nums[fast]]
            slow = nums[slow]
            if fast == slow: break 
        fast = 0
        while fast != slow:
            fast = nums[fast]
            slow = nums[slow]
        return slow 


    """289. Game of Life (Medium)
	According to the Wikipedia's article: "The Game of Life, also known simply 
	as Life, is a cellular automaton devised by the British mathematician John 
	Horton Conway in 1970."

	Given a board with m by n cells, each cell has an initial state live (1) or
	dead (0). Each cell interacts with its eight neighbors (horizontal, 
	vertical, diagonal) using the following four rules (taken from the above 
	Wikipedia article):

	* Any live cell with fewer than two live neighbors dies, as if caused by under-population.
	* Any live cell with two or three live neighbors lives on to the next generation.
	* Any live cell with more than three live neighbors dies, as if by over-population..
	* Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
	
	Write a function to compute the next state (after one update) of the board 
	given its current state. The next state is created by applying the above 
	rules simultaneously to every cell in the current state, where births and 
	deaths occur simultaneously.

	Example:
	Input: 
	[
	  [0,1,0],
	  [0,0,1],
	  [1,1,1],
	  [0,0,0]
	]
	Output: 
	[
	  [0,0,0],
	  [1,0,1],
	  [0,1,1],
	  [0,1,0]
	]

	Follow up:
	* Could you solve it in-place? Remember that the board needs to be updated 
	  at the same time: You cannot update some cells first and then use their 
	  updated values to update other cells.
	* In this question, we represent the board using a 2D array. In principle, 
	  the board is infinite, which would cause problems when the active area 
	  encroaches the border of the array. How would you address these problems?"""

    def gameOfLife(self, board: List[List[int]]) -> None:
        m, n = len(board), len(board[0])
        
        for i in range(m):
            for j in range(n):
                nbr = 0 #neighbor of live cells
                for ii in range(i-1, i+2):
                    for jj in range(j-1, j+2):
                        if 0 <= ii < m and 0 <= jj < n and (ii != i or jj != j) and board[ii][jj] in (-1, 1): nbr += 1
                            
                if board[i][j] and (nbr < 2 or nbr > 3): board[i][j] = -1 #overshoot
                elif not board[i][j] and nbr == 3: board[i][j] = 2 #overshoot
                    
        for i in range(m):
            for j in range(n):
                board[i][j] = int(board[i][j] > 0)


    """290. Word Pattern (Easy)
	Given a pattern and a string str, find if str follows the same pattern. 
	Here follow means a full match, such that there is a bijection between 
	a letter in pattern and a non-empty word in str.

	Example 1:
	Input: pattern = "abba", str = "dog cat cat dog"
	Output: true

	Example 2:
	Input:pattern = "abba", str = "dog cat cat fish"
	Output: false

	Example 3:
	Input: pattern = "aaaa", str = "dog cat cat dog"
	Output: false

	Example 4:
	Input: pattern = "abba", str = "dog dog dog dog"
	Output: false

	Notes: You may assume pattern contains only lowercase letters, and str 
	       contains lowercase letters that may be separated by a single space."""

    def wordPattern(self, pattern: str, s: str) -> bool:
        words = s.split()
        return len(set(pattern)) == len(set(words)) == len(set(zip_longest(pattern, words)))


    """291. Word Pattern II (Medium)
	Given a pattern and a string s, return true if s matches the pattern. A 
	string s matches a pattern if there is some bijective mapping of single 
	characters to strings such that if each character in pattern is replaced by 
	the string it maps to, then the resulting string is s. A bijective mapping 
	means that no two characters map to the same string, and no character maps 
	to two different strings.

	Example 1:
	Input: pattern = "abab", s = "redblueredblue"
	Output: true
	Explanation: One possible mapping is as follows:
	'a' -> "red"
	'b' -> "blue"

	Example 2:
	Input: pattern = "aaaa", s = "asdasdasdasd"
	Output: true
	Explanation: One possible mapping is as follows:
	'a' -> "asd"

	Example 3:
	Input: pattern = "abab", s = "asdasdasdasd"
	Output: true
	Explanation: One possible mapping is as follows:
	'a' -> "a"
	'b' -> "sdasd"
	Note that 'a' and 'b' cannot both map to "asd" since the mapping is a bijection.

	Example 4:
	Input: pattern = "aabb", s = "xyzabcxzyabc"
	Output: false

	Constraints:
	* 1 <= pattern.length, s.length <= 20
	* pattern and s consist of only lower-case English letters."""

    def wordPatternMatch(self, pattern: str, s: str) -> bool:
        
        def fn(i, k):
            """Return True if pattern[i:] can be mapping to s[k:]"""
            if i == len(pattern): return k == len(s) # boundary condition
            if k == len(s): return i == len(pattern) # boundary condition 
            
            if pattern[i] in mp: 
                if mp[pattern[i]] == s[k:k+len(mp[pattern[i]])] and fn(i+1, k+len(mp[pattern[i]])): return True
                return False
            for kk in range(k+1, len(s)+1): 
                if s[k:kk] not in mp: 
                    mp[pattern[i]] = s[k:kk]
                    mp[s[k:kk]] = pattern[i]
                    if fn(i+1, kk): return True 
                    mp.pop(pattern[i])
                    if pattern[i] != s[k:kk]: mp.pop(s[k:kk])
            return False
        
        mp = {}
        return fn(0, 0)


    """292. Nim Game (Easy)
	You are playing the following Nim Game with your friend: There is a heap of
    stones on the table, each time one of you take turns to remove 1 to 3 
    stones. The one who removes the last stone will be the winner. You will 
    take the first turn to remove the stones. Both of you are very clever and 
    have optimal strategies for the game. Write a function to determine whether 
    you can win the game given the number of stones in the heap.

	Example:
	Input: 4
	Output: false 
	Explanation: If there are 4 stones in the heap, then you will never win the game;
	             No matter 1, 2, or 3 stones you remove, the last stone will always be 
	             removed by your friend."""

    def canWinNim(self, n: int) -> bool:
        return n % 4


    """293. Flip Game (Easy)
	You are playing the following Flip Game with your friend: Given a string 
	that contains only these two characters: + and -, you and your friend take 
	turns to flip two consecutive "++" into "--". The game ends when a person 
	can no longer make a move and therefore the other person will be the winner. 
	Write a function to compute all possible states of the string after one 
	valid move.

	Example:
	Input: s = "++++"
	Output: ["--++",
	         "+--+",
	         "++--"]
	Note: If there is no valid move, return an empty list []."""

    def generatePossibleNextMoves(self, s: str) -> List[str]:
        ans = []
        for i in range(len(s)-1):
            if s[i:i+2] == "++": ans.append(s[:i] + "--" + s[i+2:])
        return ans 


    """294. Flip Game II (Medium)
	You are playing the following Flip Game with your friend: Given a string 
	that contains only these two characters: + and -, you and your friend take 
	turns to flip two consecutive "++" into "--". The game ends when a person 
	can no longer make a move and therefore the other person will be the winner. 
	Write a function to determine if the starting player can guarantee a win.

	Example:
	Input: s = "++++"
	Output: true 
	Explanation: The starting player can guarantee a win by flipping the middle 
	             "++" to become "+--+".

	Follow up: Derive your algorithm's runtime complexity."""

    def canWin(self, s: str) -> bool:
        
        @cache
        def fn(s): 
            """Return True if player can win by playing optimally."""
            if "++" not in s: return False # already lost 
            for i in range(len(s)-1): 
                if s[i:i+2] == "++" and not fn(s[:i] + "--" + s[i+2:]): return True 
            return False 
        
        return fn(s)


    """296. Best Meeting Point (Hard)
	Given an m x n binary grid grid where each 1 marks the home of one friend, 
	return the minimal total travel distance. The total travel distance is the 
	sum of the distances between the houses of the friends and the meeting 
	point. The distance is calculated using Manhattan Distance, where 
	distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

	Example 1:
	Input: grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]
	Output: 6
	Explanation: Given three friends living at (0,0), (0,4), and (2,2). The 
	             point (0,2) is an ideal meeting point, as the total travel 
	             distance of 2 + 2 + 2 = 6 is minimal. So return 6.
	
	Example 2:
	Input: grid = [[1,1]]
	Output: 1

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 200
	* grid[i][j] is either 0 or 1.
	* There will be at least two friends in the grid."""

    def minTotalDistance(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        rows = []
        cols = []
        for i in range(m):
            for j in range(n):
                if grid[i][j]: 
                    rows.append(i)
                    cols.append(j)
        cols.sort()
        
        ans = 0
        lo, hi = 0, len(rows)-1
        while lo < hi: 
            ans += rows[hi] - rows[lo] + cols[hi] - cols[lo]
            lo += 1
            hi -= 1
        return ans 


    """298. Binary Tree Longest Consecutive Sequence (Medium)
	Given a binary tree, find the length of the longest consecutive sequence 
	path. The path refers to any sequence of nodes from some starting node to 
	any node in the tree along the parent-child connections. The longest 
	consecutive path need to be from parent to child (cannot be the reverse).

	Example 1:
	Input:
	   1
	    \
	     3
	    / \
	   2   4
	        \
	         5
	Output: 3
	Explanation: Longest consecutive sequence path is 3-4-5, so return 3.

	Example 2:
	Input:

	   2
	    \
	     3
	    / 
	   2    
	  / 
	 1
	Output: 2 
	Explanation: Longest consecutive sequence path is 2-3, not 3-2-1, so return 2."""

    def longestConsecutive(self, root: TreeNode) -> int:
        if not root: return 0 # edge case 
        
        ans = 0
        stack = [(root, 1)]
        while stack: 
            node, val = stack.pop()
            ans = max(ans, val)
            if node.left: stack.append((node.left, val+1 if node.left.val == node.val+1 else 1))
            if node.right: stack.append((node.right, val+1 if node.right.val == node.val+1 else 1))
        return ans 


    """299. Bulls and Cows (Easy)
	You are playing the following Bulls and Cows game with your friend: You 
	write down a number and ask your friend to guess what the number is. Each 
	time your friend makes a guess, you provide a hint that indicates how many 
	digits in said guess match your secret number exactly in both digit and 
	position (called "bulls") and how many digits match the secret number but 
	locate in the wrong position (called "cows"). Your friend will use 
	successive guesses and hints to eventually derive the secret number. Write 
	a function to return a hint according to the secret number and friend's 
	guess, use A to indicate the bulls and B to indicate the cows. Please note 
	that both secret number and friend's guess may contain duplicate digits.

	Example 1:
	Input: secret = "1807", guess = "7810"
	Output: "1A3B"
	Explanation: 1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.

	Example 2:
	Input: secret = "1123", guess = "0111"
	Output: "1A1B"
	Explanation: The 1st 1 in friend's guess is a bull, the 2nd or 3rd 1 is a cow.

	Note: You may assume that the secret number and your friend's guess only 
	      contain digits, and their lengths are always equal."""

    def getHint(self, secret: str, guess: str) -> str:
        bulls = sum(s == g for s, g in zip(secret, guess))
        cows = sum((Counter(secret) & Counter(guess)).values()) - bulls
        return f"{bulls}A{cows}B"


    """300. Longest Increasing Subsequence (Medium)
	Given an unsorted array of integers, find the length of longest increasing 
	subsequence.

	Example:
	Input: [10,9,2,5,3,7,101,18]
	Output: 4 
	Explanation: The longest increasing subsequence is [2,3,7,101], therefore 
	             the length is 4. 

	Note:
	* There may be more than one LIS combination, it is only necessary for you 
	  to return the length.
	* Your algorithm should run in O(n2) complexity.
	
	Follow up: Could you improve it to O(n log n) time complexity?"""

    def lengthOfLIS(self, nums: List[int]) -> int:
        vals = []
        for x in nums: 
            k = bisect_left(vals, x)
            if k == len(vals): vals.append(x)
            else: vals[k] = x
        return len(vals)


    """306. Additive Number (Medium)
	Additive number is a string whose digits can form additive sequence. A 
	valid additive sequence should contain at least three numbers. Except for 
	the first two numbers, each subsequent number in the sequence must be the 
	sum of the preceding two. Given a string containing only digits '0'-'9', 
	write a function to determine if it's an additive number. Note: Numbers in 
	the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 
	02, 3 is invalid.

	Example 1:
	Input: "112358"
	Output: true
	Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
	             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8

	Example 2:
	Input: "199100199"
	Output: true
	Explanation: The additive sequence is: 1, 99, 100, 199. 
	             1 + 99 = 100, 99 + 100 = 199
	 
	Constraints:
	num consists only of digits '0'-'9'.
	1 <= num.length <= 35

	Follow up: gHow would you handle overflow for very large input integers?"""

    def isAdditiveNumber(self, num: str) -> bool:
        n = len(num)
        for i in range(1, n//2+1):
            x = num[:i]
            if x.startswith("0") and len(x) > 1: break #no leading zero 
            for j in range(i+1, min(n-i, (n+i)//2)+1): #i <= n-j and j-i <= n-j
                yy = num[i:j]
                if yy.startswith("0") and len(yy) > 1: break #no leading zero
                
                ii, xx = i, x
                while num.startswith(yy, ii):
                    ii += len(yy)
                    xx, yy = yy, str(int(xx) + int(yy))
                if ii == len(num): return True 
                
        return False 


    """309. Best Time to Buy and Sell Stock with Cooldown (Medium)
	You are given an array prices where prices[i] is the price of a given stock 
	on the ith day. Find the maximum profit you can achieve. You may complete 
	as many transactions as you like (i.e., buy one and sell one share of the 
	stock multiple times) with the following restrictions:
	* After you sell your stock, you cannot buy stock on the next day (i.e., 
	  cooldown one day).
	Note: You may not engage in multiple transactions simultaneously (i.e., you 
	must sell the stock before you buy again).

	Example 1:
	Input: prices = [1,2,3,0,2]
	Output: 3
	Explanation: transactions = [buy, sell, cooldown, buy, sell]

	Example 2:
	Input: prices = [1]
	Output: 0

	Constraints:
	* 1 <= prices.length <= 5000
	* 0 <= prices[i] <= 1000"""

    def maxProfit(self, prices: List[int]) -> int:
        buy, cooldown, sell = inf, 0, 0
        for x in prices: 
            buy = min(buy, x - cooldown)
            cooldown = sell 
            sell = max(sell, x - buy)
        return sell


    """311. Sparse Matrix Multiplication (Medium)
	Given two sparse matrices A and B, return the result of AB. You may assume 
	that A's column number is equal to B's row number.

	Example:
	Input:
	A = [
	  [ 1, 0, 0],
	  [-1, 0, 3]
	]

	B = [
	  [ 7, 0, 0 ],
	  [ 0, 0, 0 ],
	  [ 0, 0, 1 ]
	]

	Output:
	     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |
	AB = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |
	                  | 0 0 1 |

	Constraints:
	* 1 <= A.length, B.length <= 100
	* 1 <= A[i].length, B[i].length <= 100
	* -100 <= A[i][j], B[i][j] <= 100"""

    def multiply(self, A: List[List[int]], B: List[List[int]]) -> List[List[int]]:
        m, l, n = len(A), len(B), len(B[0]) # dimensions 
        ans = [[0] * n for _ in range(m)]
        for i in range(m):
            for k in range(l): 
                if A[i][k]: 
                    for j in range(n):
                        ans[i][j] += A[i][k] * B[k][j]
        return ans 


    """313. Super Ugly Number (Medium)
	Write a program to find the nth super ugly number. Super ugly numbers are 
	positive numbers whose all prime factors are in the given prime list 
	primes of size k.

	Example:
	Input: n = 12, primes = [2,7,13,19]
	Output: 32 
	Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 
	             super ugly numbers given primes = [2,7,13,19] of size 4.

	Note:
	* 1 is a super ugly number for any given primes.
	* The given numbers in primes are in ascending order.
	* 0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000.
	* The nth super ugly number is guaranteed to fit in a 32-bit signed integer."""

    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        ans = [1]
        hp = [(p, 0) for p in primes]
        heapify(hp)
        
        for _ in range(n-1): 
            ans.append(hp[0][0])
            while hp[0][0] == ans[-1]: 
                p, i = heappop(hp)
                heappush(hp, (p*ans[i+1]//ans[i], i+1))
                
        return ans[-1]


    """314. Binary Tree Vertical Order Traversal (Medium)
	Given the root of a binary tree, return the vertical order traversal of its 
	nodes' values. (i.e., from top to bottom, column by column). If two nodes 
	are in the same row and column, the order should be from left to right.

	Example 1:
	Input: root = [3,9,20,null,null,15,7]
	Output: [[9],[3,15],[20],[7]]

	Example 2:
	Input: root = [3,9,8,4,0,1,7]
	Output: [[4],[9],[3,0,1],[8],[7]]

	Example 3:
	Input: root = [3,9,8,4,0,1,7,null,null,null,2,5]
	Output: [[4],[9,5],[3,0,1],[8,2],[7]]

	Example 4:
	Input: root = []
	Output: []

	Constraints:
	* The number of nodes in the tree is in the range [0, 100].
	* -100 <= Node.val <= 100"""

    def verticalOrder(self, root: TreeNode) -> List[List[int]]:
        ans = {}
        queue = [(root, 0)]
        for node, k in queue: 
            if node: 
                ans.setdefault(k, []).append(node.val)
                queue.append((node.left, k-1))
                queue.append((node.right, k+1))
        return [ans[k] for k in sorted(ans)]


    """316. Remove Duplicate Letters (Medium)
	Given a string s, remove duplicate letters so that every letter appears 
	once and only once. You must make sure your result is the smallest in 
	lexicographical order among all possible results. Note: This question is 
	the same as 1081: 
	https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/

	Example 1:
	Input: s = "bcabc"
	Output: "abc"

	Example 2:
	Input: s = "cbacdcbc"
	Output: "acdb"

	Constraints:
	* 1 <= s.length <= 104
	* s consists of lowercase English letters."""

    def removeDuplicateLetters(self, s: str) -> str:
        mp = {c: i for i, c in enumerate(s)}
        stack = []
        for i, c in enumerate(s): 
            if c not in stack: 
                while stack and c < stack[-1] and i < mp[stack[-1]]: stack.pop()
                stack.append(c)
        return "".join(map(str, stack))


    """318. Maximum Product of Word Lengths (Medium)
	Given a string array words, find the maximum value of 
	length(word[i]) * length(word[j]) where the two words do not share common 
	letters. You may assume that each word will contain only lower case letters. 
	If no such two words exist, return 0.

	Example 1:
	Input: ["abcw","baz","foo","bar","xtfn","abcdef"]
	Output: 16 
	Explanation: The two words can be "abcw", "xtfn".

	Example 2:
	Input: ["a","ab","abc","d","cd","bcd","abcd"]
	Output: 4 
	Explanation: The two words can be "ab", "cd".

	Example 3:
	Input: ["a","aa","aaa","aaaa"]
	Output: 0 
	Explanation: No such pair of words.

	Constraints:
	* 0 <= words.length <= 10^3
	* 0 <= words[i].length <= 10^3
	* words[i] consists only of lowercase English letters."""

    def maxProduct(self, words: List[str]) -> int:
        mp = defaultdict(int)
        for word in words: 
            mask = 0 
            for ch in word: mask |= 1 << ord(ch)-97
            mp[mask] = max(mp[mask], len(word))
        return max((mp[x]*mp[y] for x in mp for y in mp if not x & y), default=0)


    """319. Bulb Switcher (Medium)
	There are n bulbs that are initially off. You first turn on all the bulbs. 
	Then, you turn off every second bulb. On the third round, you toggle every 
	third bulb (turning on if it's off or turning off if it's on). For the i-th 
	round, you toggle every i bulb. For the n-th round, you only toggle the 
	last bulb. Find how many bulbs are on after n rounds.

	Example:
	Input: 3
	Output: 1 

	Explanation: 
	At first, the three bulbs are [off, off, off].
	After first round, the three bulbs are [on, on, on].
	After second round, the three bulbs are [on, off, on].
	After third round, the three bulbs are [on, off, off]. 
	So you should return 1, because there is only one bulb is on."""

    def bulbSwitch(self, n: int) -> int:
        return int(sqrt(n))


    """320. Generalized Abbreviation (Medium)
	A word's generalized abbreviation can be constructed by taking any number 
	of non-overlapping substrings and replacing them with their respective 
	lengths. For example, "abcde" can be abbreviated into "a3e" ("bcd" turned 
	into "3"), "1bcd1" ("a" and "e" both turned into "1"), and "23" ("ab" 
	turned into "2" and "cde" turned into "3"). Given a string word, return a 
	list of all the possible generalized abbreviations of word. Return the 
	answer in any order.

	Example 1:
	Input: word = "word"
	Output: ["4","3d","2r1","2rd","1o2","1o1d","1or1","1ord","w3","w2d","w1r1",
	         "w1rd","wo2","wo1d","wor1","word"]

	Example 2:
	Input: word = "a"
	Output: ["1","a"]

	Constraints:
	* 1 <= word.length <= 15
	* word consists of only lowercase English letters."""

    def generateAbbreviations(self, word: str) -> List[str]:
        
        def fn(i, s="", n=0):
            """Populate ans via backtracking."""
            if i == len(word): return ans.append(s + (str(n) if n else ""))
            fn(i+1, s, n+1)
            fn(i+1, s + (str(n) if n else "") + word[i], 0)
        
        ans = []
        fn(0)
        return ans


    """321. Create Maximum Number (Hard)
	You are given two integer arrays nums1 and nums2 of lengths m and n 
	respectively. nums1 and nums2 represent the digits of two numbers. You are 
	also given an integer k. Create the maximum number of length k <= m + n 
	from digits of the two numbers. The relative order of the digits from the 
	same array must be preserved. Return an array of the k digits representing 
	the answer.

	Example 1:
	Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5
	Output: [9,8,6,5,3]

	Example 2:
	Input: nums1 = [6,7], nums2 = [6,0,4], k = 5
	Output: [6,7,6,0,4]

	Example 3:
	Input: nums1 = [3,9], nums2 = [8,9], k = 3
	Output: [9,8,9]

	Constraints:
	* m == nums1.length
	* n == nums2.length
	* 1 <= m, n <= 500
	* 0 <= nums1[i], nums2[i] <= 9
	* 1 <= k <= m + n"""

    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        
        def fn(arr, k):
            """Return largest sub-sequence of arr of size k."""
            ans = []
            for i, x in enumerate(arr): 
                while ans and ans[-1] < x and len(ans) + len(arr) - i > k: ans.pop()
                if len(ans) < k: ans.append(x)
            return ans
            
        ans = [0] * k
        for i in range(k+1): 
            if k - len(nums2) <= i <= len(nums1): 
                val1 = fn(nums1, i)
                val2 = fn(nums2, k-i)
                cand = []
                i1 = i2 = 0
                while i1 < len(val1) or i2 < len(val2): 
                    if val1[i1:] >= val2[i2:]: 
                        cand.append(val1[i1])
                        i1 += 1
                    else: 
                        cand.append(val2[i2])
                        i2 += 1
                ans = max(ans, cand)
        return ans 


    """322. Coin Change (Medium)
	You are given coins of different denominations and a total amount of money 
	amount. Write a function to compute the fewest number of coins that you 
	need to make up that amount. If that amount of money cannot be made up by 
	any combination of the coins, return -1.

	Example 1:
	Input: coins = [1, 2, 5], amount = 11
	Output: 3 
	Explanation: 11 = 5 + 5 + 1

	Example 2:
	Input: coins = [2], amount = 3
	Output: -1

	Note: You may assume that you have an infinite number of each kind of coin."""

    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [0] + [inf]*amount
        for x in range(amount): 
            if dp[x] < inf: 
                for coin in coins: 
                    if x + coin <= amount: 
                        dp[x+coin] = min(dp[x+coin], 1 + dp[x])
        return dp[-1] if dp[-1] < inf else -1


	"""323. Number of Connected Components in an Undirected Graph (Medium)
	Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each 
	edge is a pair of nodes), write a function to find the number of connected 
	components in an undirected graph.

	Example 1:
	Input: n = 5 and edges = [[0, 1], [1, 2], [3, 4]]
	     0          3
	     |          |
	     1 --- 2    4 
	Output: 2

	Example 2:
	Input: n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]]

	     0           4
	     |           |
	     1 --- 2 --- 3
	Output:  1

	Note: You can assume that no duplicate edges will appear in edges. Since 
	      all edges are undirected, [0, 1] is the same as [1, 0] and thus will 
	      not appear together in edges.

	class UnionFind: 
	    def __init__(self, n):
	        self.parent = list(range(n))
	        self.rank = [1]*n
	        self.components = n
	        
	    def find(self, p):
	        if p != self.parent[p]:
	            self.parent[p] = self.find(self.parent[p])
	        return self.parent[p]
	    
	    def union(self, p, q):
	        prt, qrt = self.find(p), self.find(q)
	        if prt == qrt: return False 
	        self.components -= 1
	        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
	        self.parent[prt] = qrt
	        self.rank[qrt] += self.rank[prt]
	        return True 
	"""

    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        uf = UnionFind(n)
        for u, v in edges: 
            uf.union(u, v)
        return uf.components


    """325. Maximum Size Subarray Sum Equals k (Medium)
	Given an array nums and a target value k, find the maximum length of a 
	subarray that sums to k. If there isn't one, return 0 instead.

	Note: The sum of the entire nums array is guaranteed to fit within the 
          32-bit signed integer range.

	Example 1:
	Input: nums = [1, -1, 5, -2, 3], k = 3
	Output: 4 
	Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.
	
	Example 2:
	Input: nums = [-2, -1, 2, 1], k = 1
	Output: 2 
	Explanation: The subarray [-1, 2] sums to 1 and is the longest.
	
	Follow Up: Can you do it in O(n) time?"""

    def maxSubArrayLen(self, nums: List[int], k: int) -> int:
        ans = prefix = 0
        seen = {0: -1}
        for i, x in enumerate(nums): 
            prefix += x
            if prefix-k in seen: ans = max(ans, i - seen[prefix-k])
            seen.setdefault(prefix, i)
        return ans 


    """327. Count of Range Sum (Hard)
	Given an integer array nums and two integers lower and upper, return the 
	number of range sums that lie in [lower, upper] inclusive. Range sum 
	S(i, j) is defined as the sum of the elements in nums between indices i and 
	j inclusive, where i <= j.

	Example 1:
	Input: nums = [-2,5,-1], lower = -2, upper = 2
	Output: 3
	Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their 
	             respective sums are: -2, -1, 2.

	Example 2:
	Input: nums = [0], lower = 0, upper = 0
	Output: 1

	Constraints:
	* 1 <= nums.length <= 10^4
	* -2^31 <= nums[i] <= 2^31 - 1
	* -10^5 <= lower <= upper <= 10^5
	* The answer is guaranteed to fit in a 32-bit integer."""

    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        prefix = [0]
        for x in nums: prefix.append(prefix[-1] + x)
        
        def fn(lo, hi): 
            """Return count of range sum between prefix[lo:hi]."""
            if lo+1 >= hi: return 0 
            mid = lo + hi >> 1
            ans = fn(lo, mid) + fn(mid, hi)
            k = kk = mid 
            for i in range(lo, mid): 
                while k < hi and prefix[k] - prefix[i] < lower: k += 1
                while kk < hi and prefix[kk] - prefix[i] <= upper: kk += 1
                ans += kk - k 
            prefix[lo:hi] = sorted(prefix[lo:hi])
            return ans 
        
        return fn(0, len(prefix))


	"""328. Odd Even Linked List (Medium)
	Given a singly linked list, group all odd nodes together followed by the 
	even nodes. Please note here we are talking about the node number and not 
	the value in the nodes. You should try to do it in place. The program 
	should run in O(1) space complexity and O(nodes) time complexity.

	Example 1:
	Input: 1->2->3->4->5->NULL
	Output: 1->3->5->2->4->NULL

	Example 2:
	Input: 2->1->3->5->6->4->7->NULL
	Output: 2->3->6->7->1->5->4->NULL

	Constraints:
	* The relative order inside both the even and odd groups should remain as 
	  it was in the input.
	* The first node is considered odd, the second node even and so on ...
	* The length of the linked list is between [0, 10^4]."""

    def oddEvenList(self, head: ListNode) -> ListNode:
        if not head: return 
        odd = head
        even = ehead = head.next 
        while even and even.next:
            odd.next = odd.next.next
            even.next = even.next.next 
            odd, even = odd.next, even.next
        odd.next = ehead
        return head 


    """329. Longest Increasing Path in a Matrix (Hard)
	Given an m x n integers matrix, return the length of the longest increasing 
	path in matrix. From each cell, you can either move in four directions: 
	left, right, up, or down. You may not move diagonally or move outside the 
	boundary (i.e., wrap-around is not allowed).

	Example 1:
	Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
	Output: 4
	Explanation: The longest increasing path is [1, 2, 6, 9].

	Example 2:
	Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
	Output: 4
	Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally 
	             is not allowed.

	Example 3:
	Input: matrix = [[1]]
	Output: 1

	Constraints:
	* m == matrix.length
	* n == matrix[i].length
	* 1 <= m, n <= 200
	* 0 <= matrix[i][j] <= 2^31 - 1"""

    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        m, n = len(matrix), len(matrix[0]) # dimensions 
        
        @cache
        def fn(i, j): 
            """Return max increasing path starting from (i, j)."""
            ans = 1
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < m and 0 <= jj < n and matrix[i][j] < matrix[ii][jj]: 
                    ans = max(ans, 1 + fn(ii, jj))
            return ans 
        
        return max(fn(i, j) for i in range(m) for j in range(n))


    """330. Patching Array (Hard)
	Given a sorted integer array nums and an integer n, add/patch elements to 
	the array such that any number in the range [1, n] inclusive can be formed 
	by the sum of some elements in the array. Return the minimum number of 
	patches required.

	Example 1:
	Input: nums = [1,3], n = 6
	Output: 1
	Explanation: Combinations of nums are [1], [3], [1,3], which form possible 
	             sums of: 1, 3, 4. Now if we add/patch 2 to nums, the 
	             combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3]. 
	             Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range 
	             [1, 6]. So we only need 1 patch.

	Example 2:
	Input: nums = [1,5,10], n = 20
	Output: 2
	Explanation: The two patches can be [2, 4].
	
	Example 3:
	Input: nums = [1,2,2], n = 5
	Output: 0

	Constraints:
	* 1 <= nums.length <= 1000
	* 1 <= nums[i] <= 10^4
	* nums is sorted in ascending order.
	* 1 <= n <= 2^31 - 1"""

    def minPatches(self, nums: List[int], n: int) -> int:
        ans = prefix = k = 0 
        while prefix < n: 
            if k < len(nums) and nums[k] <= prefix + 1: 
                prefix += nums[k]
                k += 1
            else: 
                ans += 1
                prefix += prefix + 1
        return ans 


    """331. Verify Preorder Serialization of a Binary Tree (Medium)
	One way to serialize a binary tree is to use pre-order traversal. When we 
	encounter a non-null node, we record the node's value. If it is a null 
	node, we record using a sentinel value such as #.

	     _9_
	    /   \
	   3     2
	  / \   / \
	 4   1  #  6
	/ \ / \   / \
	# # # #   # #

	For example, the above binary tree can be serialized to the string 
	"9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node. Given a string 
	of comma separated values, verify whether it is a correct preorder traversal 
	serialization of a binary tree. Find an algorithm without reconstructing the 
	tree. Each comma separated value in the string must be either an integer or 
	a character '#' representing null pointer. You may assume that the input 
	format is always valid, for example it could never contain two consecutive 
	commas such as "1,,3".

	Example 1:
	Input: "9,3,4,#,#,1,#,#,2,#,6,#,#"
	Output: true

	Example 2:
	Input: "1,#"
	Output: false

	Example 3:
	Input: "9,#,#,1"
	Output: false"""

    def isValidSerialization(self, preorder: str) -> bool:
        cnt = 1
        for x in preorder.split(","): 
            if cnt == 0: return False #intermediate 
            cnt += 1 if x != "#" else -1
        return cnt == 0  #end result 


    """332. Reconstruct Itinerary (Medium)
	Given a list of airline tickets represented by pairs of departure and 
	arrival airports [from, to], reconstruct the itinerary in order. All of the 
	tickets belong to a man who departs from JFK. Thus, the itinerary must 
	begin with JFK.

	Note:
	If there are multiple valid itineraries, you should return the itinerary 
	that has the smallest lexical order when read as a single string. For 
	example, the itinerary ["JFK", "LGA"] has a smaller lexical order than 
	["JFK", "LGB"]. All airports are represented by three capital letters (IATA 
	code). You may assume all tickets form at least one valid itinerary. One 
	must use all the tickets once and only once.
	
	Example 1:
	Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
	Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]

	Example 2:
	Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
	Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]

	Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"].
	             But it is larger in lexical order."""

    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        digraph = defaultdict(list)
        for u, v in tickets: heappush(digraph[u], v)
            
        def fn(n): 
            """Return Eulerian path via Hierholzer's algo."""
            while digraph.get(n, []): fn(heappop(digraph[n]))
            ans.appendleft(n)
            
        ans = deque()
        fn("JFK")
        return ans 


    """333. Largest BST Subtree (Medium)
	Given the root of a binary tree, find the largest subtree, which is also a 
	Binary Search Tree (BST), where the largest means subtree has the largest 
	number of nodes. A Binary Search Tree (BST) is a tree in which all the 
	nodes follow the below-mentioned properties:
	* The left subtree values are less than the value of their parent (root) 
	  node's value.
	* The right subtree values are greater than the value of their parent 
	  (root) node's value.
	Note: A subtree must include all of its descendants.
	Follow up: Can you figure out ways to solve it with O(n) time complexity?

	Example 1:
	Input: root = [10,5,15,1,8,null,7]
	Output: 3
	Explanation: The Largest BST Subtree in this case is the highlighted one. 
	             The return value is the subtree's size, which is 3.

	Example 2:
	Input: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]
	Output: 2

	Constraints:
	* The number of nodes in the tree is in the range [0, 104].
	* -104 <= Node.val <= 104"""

    def largestBSTSubtree(self, root: TreeNode) -> int:
        
        def fn(node):
            """Update largest BST subtree."""
            nonlocal ans 
            if not node: return True, 0, inf, -inf # BST? | size | low | high
            ltf, lsz, llo, lhi = fn(node.left)
            rtf, rsz, rlo, rhi = fn(node.right)
            tf = ltf and rtf and lhi < node.val < rlo
            sz = 1 + lsz + rsz
            if tf: ans = max(ans, sz)
            return tf, sz, min(llo, node.val), max(rhi, node.val)
        
        ans = 0
        fn(root)
        return ans 


    """334. Increasing Triplet Subsequence (Medium)
	Given an unsorted array return whether an increasing subsequence of length 
	3 exists or not in the array. Formally the function should return true if 
	there exists i, j, k such that arr[i] < arr[j] < arr[k] given 
	0 ≤ i < j < k ≤ n-1 else return false.
	
	Note: Your algorithm should run in O(n) time complexity and O(1) space 
	      complexity.

	Example 1:
	Input: [1,2,3,4,5]
	Output: true

	Example 2:
	Input: [5,4,3,2,1]
	Output: false"""

    def increasingTriplet(self, nums: List[int]) -> bool:
        x0 = x1 = inf
        for x in nums: 
            if x <= x0: x0 = x
            elif x <= x1: x1 = x
            else: return True 
        return False 


    """337. House Robber III (Medium)
	The thief has found himself a new place for his thievery again. There is 
	only one entrance to this area, called the "root." Besides the root, each 
	house has one and only one parent house. After a tour, the smart thief 
	realized that "all houses in this place forms a binary tree". It will 
	automatically contact the police if two directly-linked houses were broken 
	into on the same night. Determine the maximum amount of money the thief can 
	rob tonight without alerting the police.

	Example 1:
	Input: [3,2,3,null,3,null,1]

	     3
	    / \
	   2   3
	    \   \ 
	     3   1
	Output: 7 
	Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.

	Example 2:
	Input: [3,4,5,1,3,null,1]

	     3
	    / \
	   4   5
	  / \   \ 
	 1   3   1
	Output: 9
	Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9."""

    def rob(self, root: TreeNode) -> int:
        
        def fn(node): 
            """Return max money possible of robbing & skipping this house."""
            if not node: return 0, 0 # null node 
            if node.left is node.right: return node.val, 0 # leaf node 
            left, right = fn(node.left), fn(node.right) # post-order traversal 
            return node.val+left[1]+right[1], max(left)+max(right)
        
        return max(fn(root))


    """338. Counting Bits (Medium)
	Given a non negative integer number num. For every numbers i in the range 
	0 ≤ i ≤ num calculate the number of 1's in their binary representation and 
	return them as an array.

	Example 1:
	Input: 2
	Output: [0,1,1]

	Example 2:
	Input: 5
	Output: [0,1,1,2,1,2]

	Follow up:
	* It is very easy to come up with a solution with run time 
	  O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in 
	  a single pass?
	* Space complexity should be O(n).
	* Can you do it like a boss? Do it without using any builtin function like 
	  __builtin_popcount in c++ or in any other language."""

    def countBits(self, num: int) -> List[int]:
        ans = [0]*(1 + num)
        for i in range(1, num+1): 
            ans[i] = 1 + ans[i&(i-1)]
        return ans 


    """339. Nested List Weight Sum (Easy)
	You are given a nested list of integers nestedList. Each element is either 
	an integer or a list whose elements may also be integers or other lists. 
	The depth of an integer is the number of lists that it is inside of. For 
	example, the nested list [1,[2,2],[[3],2],1] has each integer's value set 
	to its depth. Return the sum of each integer in nestedList multiplied by 
	its depth.

	Example 1:
	Input: nestedList = [[1,1],2,[1,1]]
	Output: 10
	Explanation: Four 1's at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10.

	Example 2:
	Input: nestedList = [1,[4,[6]]]
	Output: 27
	Explanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27.

	Example 3:
	Input: nestedList = [0]
	Output: 0

	Constraints:
	* 1 <= nestedList.length <= 50
	* The values of the integers in the nested list is in the range [-100, 100].
	* The maximum depth of any integer is less than or equal to 50."""

    def depthSum(self, nestedList: List[NestedInteger]) -> int:
        ans = wt = 0
        queue = nestedList
        while queue: 
            wt += 1
            newq = []
            for x in queue: 
                if x.isInteger(): ans += wt * x.getInteger()
                else: newq.extend(x.getList())
            queue = newq
        return ans 


    """340. Longest Substring with At Most K Distinct Characters (Medium)
	Given a string s and an integer k, return the length of the longest 
	substring of s that contains at most k distinct characters.

	Example 1:
	Input: s = "eceba", k = 2
	Output: 3
	Explanation: The substring is "ece" with length 3.

	Example 2:
	Input: s = "aa", k = 1
	Output: 2
	Explanation: The substring is "aa" with length 2.

	Constraints:
	* 1 <= s.length <= 5 * 104
	* 0 <= k <= 50"""

    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
        ans = ii = 0
        freq = {}
        for i, c in enumerate(s): 
            freq[c] = 1 + freq.get(c, 0)
            while len(freq) > k: 
                freq[s[ii]] -= 1
                if freq[s[ii]] == 0: freq.pop(s[ii])
                ii += 1
            ans = max(ans, i - ii + 1)
        return ans 


    """343. Integer Break (Medium)
	Given a positive integer n, break it into the sum of at least two positive 
	integers and maximize the product of those integers. Return the maximum 
	product you can get.

	Example 1:
	Input: 2
	Output: 1
	Explanation: 2 = 1 + 1, 1 × 1 = 1.

	Example 2:
	Input: 10
	Output: 36
	Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.

	Note: You may assume that n is not less than 2 and not larger than 58."""

    def integerBreak(self, n: int) -> int:
        
        @cache
        def fn(n): 
            """Return the max product by splitting n."""
            if n == 1: return 1
            return max(max(i, fn(i))*max(n-i, fn(n-i)) for i in range(1, n//2+1))
        
        return fn(n)


    """344. Reverse String (Easy)
	Write a function that reverses a string. The input string is given as an 
	array of characters s.

	Example 1:
	Input: s = ["h","e","l","l","o"]
	Output: ["o","l","l","e","h"]

	Example 2:
	Input: s = ["H","a","n","n","a","h"]
	Output: ["h","a","n","n","a","H"]

	Constraints:
	* 1 <= s.length <= 10^5
	* s[i] is a printable ascii character.

	Follow up: Do not allocate extra space for another array. You must do this 
	           by modifying the input array in-place with O(1) extra memory."""

    def reverseString(self, s: List[str]) -> None:
        lo, hi = 0, len(s)-1
        while lo < hi: 
            s[lo], s[hi] = s[hi], s[lo]
            lo += 1
            hi -= 1


    """347. Top K Frequent Elements (Medium)
	Given a non-empty array of integers, return the k most frequent elements.

	Example 1:
	Input: nums = [1,1,1,2,2,3], k = 2
	Output: [1,2]

	Example 2:
	Input: nums = [1], k = 1
	Output: [1]

	Note:
	* You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
	* Your algorithm's time complexity must be better than O(n log n), where n 
	  is the array's size.
	* It's guaranteed that the answer is unique, in other words the set of the 
	  top k frequent elements is unique.
	* You can return the answer in any order."""

    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        freq = Counter(nums)
        bucket = [[] for _ in nums]
        for x, v in freq.items(): bucket[-v].append(x)
        
        ans = []
        for x in bucket: 
            ans.extend(x)
            if len(ans) >= k: break
        return ans 


    """350. Intersection of Two Arrays II (Easy)
	Given two integer arrays nums1 and nums2, return an array of their 
	intersection. Each element in the result must appear as many times as it 
	shows in both arrays and you may return the result in any order.

	Example 1:
	Input: nums1 = [1,2,2,1], nums2 = [2,2]
	Output: [2,2]

	Example 2:
	Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
	Output: [4,9]
	Explanation: [9,4] is also accepted.

	Constraints:
	* 1 <= nums1.length, nums2.length <= 1000
	* 0 <= nums1[i], nums2[i] <= 1000

	Follow up:
	* What if the given array is already sorted? How would you optimize your 
	  algorithm?
	* What if nums1's size is small compared to nums2's size? Which algorithm 
	  is better?
	* What if elements of nums2 are stored on disk, and the memory is limited 
	  such that you cannot load all elements into the memory at once?"""

    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        return (Counter(nums1) & Counter(nums2)).elements()


    """351. Android Unlock Patterns (Medium)
	Android devices have a special lock screen with a 3 x 3 grid of dots. Users 
	can set an "unlock pattern" by connecting the dots in a specific sequence, 
	forming a series of joined line segments where each segment's endpoints are 
	two consecutive dots in the sequence. A sequence of k dots is a valid 
	unlock pattern if both of the following are true:
	* All the dots in the sequence are distinct.
	* If the line segment connecting two consecutive dots in the sequence 
	  passes through the center of any other dot, the other dot must have 
	  previously appeared in the sequence. No jumps through the center non-
	  selected dots are allowed.
	  + For example, connecting dots 2 and 9 without dots 5 or 6 appearing 
	    beforehand is valid because the line from dot 2 to dot 9 does not pass 
	    through the center of either dot 5 or 6.
	  + However, connecting dots 1 and 3 without dot 2 appearing beforehand is 
	    invalid because the line from dot 1 to dot 3 passes through the center 
	    of dot 2.

	Two unlock patterns are considered unique if there is a dot in one sequence 
	that is not in the other, or the order of the dots is different.

	Example 1:
	Input: m = 1, n = 1
	Output: 9

	Example 2:
	Input: m = 1, n = 2
	Output: 65

	Constraints: 1 <= m, n <= 9"""

    def numberOfPatterns(self, m: int, n: int) -> int:        
        mp = {(1, 3): 2, (1, 7): 4, (1, 9): 5, (2, 8): 5, (3, 7): 5, (3, 9): 6, (4, 6): 5, (7, 9): 8, \
              (3, 1): 2, (7, 1): 4, (9, 1): 5, (8, 2): 5, (7, 3): 5, (9, 3): 6, (6, 4): 5, (9, 7): 8}
        
        @cache
        def fn(x, mask):
            """Return number of unlock patterns."""
            ans = size = 0 
            for xx in range(1, 10): 
                if not mask & (1 << xx): 
                    if (x, xx) not in mp or mask & 1 << mp[x, xx]: 
                        ans += fn(xx, mask^(1<<xx))
                    size += 1
            size = 9 - size
            if m <= size <= n: ans += 1
            return ans 
        
        return fn(0, 0)


    """356. Line Reflection (Medium)
	Given n points on a 2D plane, find if there is such a line parallel to 
	y-axis that reflect the given points symmetrically, in other words, answer 
	whether or not if there exists a line that after reflecting all points over 
	the given line the set of the original points is the same that the 
	reflected ones. Note that there can be repeated points.

	Follow up: Could you do better than O(n2) ?

	Example 1:
	Input: points = [[1,1],[-1,1]]
	Output: true
	Explanation: We can choose the line x = 0.

	Example 2:
	Input: points = [[1,1],[-1,-1]]
	Output: false
	Explanation: We can't choose a line.

	Constraints:
	* n == points.length
	* 1 <= n <= 10^4
	* -10^8 <= points[i][j] <= 10^8"""

    def isReflected(self, points: List[List[int]]) -> bool:
        points = {(x, y) for x, y in points}
        avg = sum(x for x, _ in points)/len(points)
        for x, y in points: 
            if (2*avg - x, y) not in points: return False 
        return True 


    """357. Count Numbers with Unique Digits (Medium)
	Given a non-negative integer n, count all numbers with unique digits, x, 
	where 0 ≤ x < 10^n.

	Example:
	Input: 2
	Output: 91 
	Explanation: The answer should be the total numbers in the range of 0 ≤ x < 100, 
	             excluding 11,22,33,44,55,66,77,88,99
	 
	Constraints: 0 <= n <= 8"""

    def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0: return 1
        ans, val = 10, 9
        for i in range(1, min(n, 10)): 
            val *= 10 - i 
            ans += val 
        return ans 


    """360. Sort Transformed Array (Medium)
	Given a sorted array of integers nums and integer values a, b and c. Apply 
	a quadratic function of the form f(x) = ax2 + bx + c to each element x in 
	the array. The returned array must be in sorted order. Expected time 
	complexity: O(n)

	Example 1:
	Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
	Output: [3,9,15,33]

	Example 2:
	Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
	Output: [-23,-5,1,7]"""

    def sortTransformedArray(self, nums: List[int], a: int, b: int, c: int) -> List[int]:
        nums = [a*x*x + b*x + c for x in nums]
        ans = [None]*len(nums)
        
        lo, hi = 0, len(nums)-1 # 2-pointer 
        i, ii = (-1, -1) if a >= 0 else (0, 1)
        while lo <= hi: 
            if nums[lo] * ii > nums[hi] * ii: 
                ans[i] = nums[hi]
                hi -= 1
            else:
                ans[i] = nums[lo]
                lo += 1
            i += ii 
        return ans 


    """361. Bomb Enemy (Medium)
	Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' 
	(the number zero), return the maximum enemies you can kill using one bomb. 
	The bomb kills all the enemies in the same row and column from the planted 
	point until it hits the wall since the wall is too strong to be destroyed.
	Note: You can only put the bomb at an empty cell.

	Example:
	Input: [["0","E","0","0"],["E","0","W","E"],["0","E","0","0"]]
	Output: 3 
	Explanation: For the given grid,
	0 E 0 0 
	E 0 W E 
	0 E 0 0
	Placing a bomb at (1,1) kills 3 enemies."""

    def maxKilledEnemies(self, grid: List[List[str]]) -> int:
        if not grid: return 0 # edge case 
        m, n = len(grid), len(grid[0]) # dimensions 
        
        ans = 0
        cnt = [[0]*n for _ in range(m)]
        up, dn = [0]*n, [0]*n
        
        for i in range(m): 
            lt = rt = 0
            for j in range(n): 
                cnt[i][j] += dn[j] + lt
                cnt[i][~j] += rt 
                cnt[~i][j] += up[j]
                
                if grid[i][j] == "E": lt, dn[j] = lt+1, dn[j]+1
                elif grid[i][j] == "W": lt = dn[j] = 0
                else: ans = max(ans, cnt[i][j])
                    
                if grid[i][~j] == "E": rt += 1
                elif grid[i][~j] == "W": rt = 0
                else: ans = max(ans, cnt[i][~j])
                
                if grid[~i][j] == "E": up[j] += 1
                elif grid[~i][j] == "W": up[j] = 0 
                else: ans = max(ans, cnt[~i][j])
        
        return ans


    """363. Max Sum of Rectangle No Larger Than K (Hard)
	Given an m x n matrix matrix and an integer k, return the max sum of a 
	rectangle in the matrix such that its sum is no larger than k. It is 
	guaranteed that there will be a rectangle with a sum no larger than k.

	Example 1:
	Input: matrix = [[1,0,1],[0,-2,3]], k = 2
	Output: 2
	Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, 
	             and 2 is the max number no larger than k (k = 2).
	
	Example 2:
	Input: matrix = [[2,2,-1]], k = 3
	Output: 3

	Constraints:
	* m == matrix.length
	* n == matrix[i].length
	* 1 <= m, n <= 100
	* -100 <= matrix[i][j] <= 100
	* -10^5 <= k <= 10^5
 
	Follow up: What if the number of rows is much larger than the number of 
	           columns?"""

    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:
        m, n = len(matrix), len(matrix[0]) # dimensions 
        
        ans = -inf 
        rsum = [[0]*(n+1) for _ in range(m)] # row prefix sum 
        for j in range(n): 
            for i in range(m): rsum[i][j+1] = matrix[i][j] + rsum[i][j]
            for jj in range(j+1):
                prefix = 0 
                vals = [0]
                for i in range(m): 
                    prefix += rsum[i][j+1] - rsum[i][jj]
                    x = bisect_left(vals, prefix - k)
                    if x < len(vals): ans = max(ans, prefix - vals[x])
                    insort(vals, prefix)
        return ans


    """364. Nested List Weight Sum II (Medium)
	Given a nested list of integers, return the sum of all integers in the list 
	weighted by their depth. Each element is either an integer, or a list -- 
	whose elements may also be integers or other lists. Different from the 
	previous question where weight is increasing from root to leaf, now the 
	weight is defined from bottom up. i.e., the leaf level integers have weight 
	1, and the root level integers have the largest weight.

	Example 1:
	Input: [[1,1],2,[1,1]]
	Output: 8 
	Explanation: Four 1's at depth 1, one 2 at depth 2.

	Example 2:
	Input: [1,[4,[6]]]
	Output: 17 
	Explanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 
	             1*3 + 4*2 + 6*1 = 17."""    

    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:
        ans = val = 0 
        queue = nestedList
        while queue: 
            newq = []
            for x in queue: 
                if x.isInteger(): val += x.getInteger()
                else: newq.extend(x.getList())
            queue = newq
            ans += val
        return ans 


    """365. Water and Jug Problem (Medium)
	You are given two jugs with capacities x and y litres. There is an infinite 
	amount of water supply available. You need to determine whether it is 
	possible to measure exactly z litres using these two jugs. If z liters of 
	water is measurable, you must have z liters of water contained within one 
	or both buckets by the end.

	Operations allowed:
	* Fill any of the jugs completely with water.
	* Empty any of the jugs.
	* Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.
	
	Example 1: (From the famous "Die Hard" example)
	Input: x = 3, y = 5, z = 4
	Output: True

	Example 2:
	Input: x = 2, y = 6, z = 5
	Output: False

	Constraints:
	0 <= x <= 10^6
	0 <= y <= 10^6
	0 <= z <= 10^6"""

    def canMeasureWater(self, x: int, y: int, z: int) -> bool:
        if not z: return True #edge case 
        
        def gcd(x, y): 
            """Return greatest common divisor via Euclidean algo"""
            if x < y: x, y = y, x
            while y: x, y = y, x%y
            return x
        
        return z <= x + y and z % gcd(x, y) == 0


    """366. Find Leaves of Binary Tree (Medium)
	Given a binary tree, collect a tree's nodes as if you were doing this: 
	Collect and remove all leaves, repeat until the tree is empty.

	Example:
	Input: [1,2,3,4,5]
	          1
	         / \
	        2   3
	       / \     
	      4   5    
	Output: [[4,5,3],[2],[1]]

	Explanation:
	1. Removing the leaves [4,5,3] would result in this tree:
	          1
	         / 
	        2          
	2. Now removing the leaf [2] would result in this tree:
	          1          

	3. Now removing the leaf [1] would result in the empty tree:
	          []         
	[[3,5,4],[2],[1]], [[3,4,5],[2],[1]], etc, are also consider correct 
	answers since per each level it doesn't matter the order on which elements 
	are returned."""

    def findLeaves(self, root: TreeNode) -> List[List[int]]:
        
        def fn(node):
            """Return height of give node."""
            if not node: return 0 
            h = 1 + max(fn(node.left), fn(node.right))
            seen.setdefault(h, []).append(node.val)
            return h 
        
        seen = {}
        fn(root)
        return seen.values()


    """368. Largest Divisible Subset (Medium)
	Given a set of distinct positive integers, find the largest subset such 
	that every pair (Si, Sj) of elements in this subset satisfies:

	Si % Sj = 0 or Sj % Si = 0.

	If there are multiple solutions, return any subset is fine.

	Example 1:
	Input: [1,2,3]
	Output: [1,2] (of course, [1,3] will also be ok)

	Example 2:
	Input: [1,2,4,8]
	Output: [1,2,4,8]"""

    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        nums.sort()
        ans = []
        seen = {}
        for i, x in enumerate(nums): 
            seen[x] = [x]
            for ii in range(i): 
                if x % nums[ii] == 0: seen[x] = max(seen[x], seen[nums[ii]] + [x], key=len)
            ans = max(ans, seen[x], key=len)
        return ans 


    """369. Plus One Linked List (Medium)
	Given a non-negative integer represented as a linked list of digits, plus 
	one to the integer. The digits are stored such that the most significant 
	digit is at the head of the list.

	Example 1:
	Input: head = [1,2,3]
	Output: [1,2,4]

	Example 2:
	Input: head = [0]
	Output: [1]

	Constraints:
	* The number of nodes in the linked list is in the range [1, 100].
	* 0 <= Node.val <= 9
	* The number represented by the linked list does not contain leading zeros 
	  except for the zero itself. """

    def plusOne(self, head: ListNode) -> ListNode:
        prev, node = None, head
        while node: 
            if node.val < 9: prev = node
            node = node.next 
        
        if not prev: 
            head = ListNode(1, head)
            node = head.next 
        else: 
            prev.val += 1
            node = prev.next 
            
        while node: 
            node.val = 0
            node = node.next 
        return head 


    """370. Range Addition (Medium)
	Assume you have an array of length n initialized with all 0's and are given 
	k update operations. Each operation is represented as a triplet: 
	[startIndex, endIndex, inc] which increments each element of subarray 
	A[startIndex ... endIndex] (startIndex and endIndex inclusive) with inc. 
	Return the modified array after all k operations were executed.

	Example:
	Input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]
	Output: [-2,0,3,5,3]
	Explanation:
	Initial state: [0,0,0,0,0]
	After applying operation [1,3,2]: [0,2,2,2,0]
	After applying operation [2,4,3]: [0,2,5,5,3]
	After applying operation [0,2,-2]: [-2,0,3,5,3]"""

    def getModifiedArray(self, length: int, updates: List[List[int]]) -> List[int]:
        ans = [0]*length
        for si, ei, inc in updates: 
            ans[si] += inc
            if ei+1 < length: ans[ei+1] -= inc
        for i in range(1, length): ans[i] += ans[i-1]
        return ans 


    """371. Sum of Two Integers (Medium)
	Calculate the sum of two integers a and b, but you are not allowed to use 
	the operator + and -.

	Example 1:
	Input: a = 1, b = 2
	Output: 3

	Example 2:
	Input: a = -2, b = 3
	Output: 1"""

    def getSum(self, a: int, b: int) -> int:
        mask = 0xffffffff
        while b&mask: 
            a, b = a^b, (a&b) << 1
        return a&mask if b > mask else a 


    """372. Super Pow (Medium)
	Your task is to calculate ab mod 1337 where a is a positive integer and b 
	is an extremely large positive integer given in the form of an array.

	Example 1:
	Input: a = 2, b = [3]
	Output: 8

	Example 2:
	Input: a = 2, b = [1,0]
	Output: 1024"""

    def superPow(self, a: int, b: List[int]) -> int:
        ans = 1
        for bb in b: 
            ans = pow(ans, 10, 1337) * pow(a, bb, 1337)
        return ans % 1337


    """373. Find K Pairs with Smallest Sums (Medium)
	You are given two integer arrays nums1 and nums2 sorted in ascending order 
	and an integer k. Define a pair (u,v) which consists of one element from 
	the first array and one element from the second array. Find the k pairs 
	(u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.

	Example 1:
	Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
	Output: [[1,2],[1,4],[1,6]] 
	Explanation: The first 3 pairs are returned from the sequence: 
	             [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]

	Example 2:
	Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
	Output: [1,1],[1,1]
	Explanation: The first 2 pairs are returned from the sequence: 
	             [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]

	Example 3:
	Input: nums1 = [1,2], nums2 = [3], k = 3
	Output: [1,3],[2,3]
	Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]"""

    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:
        if not nums1 or not nums2: return [] # edge case
        
        hp = [(nums1[0] + nums2[j], 0, j) for j in range(len(nums2))]
        heapify(hp)
        
        ans = []
        while k and hp: 
            k -= 1
            _, i, j = heappop(hp)
            ans.append([nums1[i], nums2[j]])
            if i+1 < len(nums1): heappush(hp, (nums1[i+1] + nums2[j], i+1, j))
        return ans 


    """374. Guess Number Higher or Lower (Easy)
	We are playing the Guess Game. The game is as follows:
	* I pick a number from 1 to n. You have to guess which number I picked.
	* Every time you guess wrong, I will tell you whether the number I picked 
	  is higher or lower than your guess.
	You call a pre-defined API int guess(int num), which returns 3 possible 
	results:
	* -1: The number I picked is lower than your guess (i.e. pick < num).
	* 1: The number I picked is higher than your guess (i.e. pick > num).
	* 0: The number I picked is equal to your guess (i.e. pick == num).
	Return the number that I picked.

	Example 1:
	Input: n = 10, pick = 6
	Output: 6

	Example 2:
	Input: n = 1, pick = 1
	Output: 1

	Example 3:
	Input: n = 2, pick = 1
	Output: 1

	Example 4:
	Input: n = 2, pick = 2
	Output: 2

	Constraints:
	* 1 <= n <= 2^31 - 1
	* 1 <= pick <= n"""

    def guessNumber(self, n: int) -> int:
        lo, hi = 1, n
        while lo <= hi: 
            mid = lo + hi >> 1
            val = guess(mid)
            if val == -1: hi = mid - 1
            elif val == 0: return mid 
            else: lo = mid + 1


    """375. Guess Number Higher or Lower II (Medium)
	We are playing the Guess Game. The game is as follows:
	I pick a number from 1 to n. You have to guess which number I picked. Every 
	time you guess wrong, I'll tell you whether the number I picked is higher 
	or lower. However, when you guess a particular number x, and you guess 
	wrong, you pay $x. You win the game when you guess the number I picked.

	Example:
	n = 10, I pick 8.
	First round:  You guess 5, I tell you that it's higher. You pay $5.
	Second round: You guess 7, I tell you that it's higher. You pay $7.
	Third round:  You guess 9, I tell you that it's lower. You pay $9.
	Game over. 8 is the number I picked. You end up paying $5 + $7 + $9 = $21.

	Given a particular n ≥ 1, find out how much money you need to have to 
	guarantee a win."""

    def getMoneyAmount(self, n: int) -> int:
        
        @cache
        def fn(lo, hi): 
            """The cost of guessing a number where lo <= x <= hi."""
            if lo >= hi: return 0 # no need to guess 
            ans = inf
            for mid in range(lo, hi+1): 
                ans = min(ans, mid + max(fn(lo, mid-1), fn(mid+1, hi)))
            return ans 
        
        return fn(1, n)


    """376. Wiggle Subsequence (Medium)
	A sequence of numbers is called a wiggle sequence if the differences 
	between successive numbers strictly alternate between positive and 
	negative. The first difference (if one exists) may be either positive or 
	negative. A sequence with fewer than two elements is trivially a wiggle 
	sequence. For example, [1,7,4,9,2,5] is a wiggle sequence because the 
	differences (6,-3,5,-7,3) are alternately positive and negative. In 
	contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first 
	because its first two differences are positive and the second because its 
	last difference is zero. Given a sequence of integers, return the length of 
	the longest subsequence that is a wiggle sequence. A subsequence is 
	obtained by deleting some number of elements (eventually, also zero) from 
	the original sequence, leaving the remaining elements in their original 
	order.

	Example 1:
	Input: [1,7,4,9,2,5]
	Output: 6
	Explanation: The entire sequence is a wiggle sequence.

	Example 2:
	Input: [1,17,5,10,13,15,10,5,16,8]
	Output: 7
	Explanation: There are several subsequences that achieve this length. One 
	             is [1,17,10,13,10,16,8].

	Example 3:
	Input: [1,2,3,4,5,6,7,8,9]
	Output: 2

	Follow up: Can you do it in O(n) time?"""

    def wiggleMaxLength(self, nums: List[int]) -> int:
        ans = 1
        prev = 0
        for i in range(1, len(nums)): 
            diff = nums[i] - nums[i-1]
            if diff: 
                if prev*diff <= 0: ans += 1
                prev = diff 
        return ans


    """377. Combination Sum IV (Medium)
	Given an integer array with all positive numbers and no duplicates, find 
	the number of possible combinations that add up to a positive integer 
	target.

	Example:
	nums = [1, 2, 3]
	target = 4
	The possible combination ways are:
	(1, 1, 1, 1)
	(1, 1, 2)
	(1, 2, 1)
	(1, 3)
	(2, 1, 1)
	(2, 2)
	(3, 1)
	Note that different sequences are counted as different combinations. 
	Therefore the output is 7.

	Follow up:
	* What if negative numbers are allowed in the given array?
	* How does it change the problem?
	* What limitation we need to add to the question to allow negative numbers?

	Credits: Special thanks to @pbrother for adding this problem and creating 
	         all test cases."""

    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0]*(target + 1)
        dp[0] = 1
        for i in range(target): 
            if dp[i]: 
                for x in nums: 
                    if i+x <= target: dp[i+x] += dp[i]
        return dp[-1]


    """378. Kth Smallest Element in a Sorted Matrix (Medium)
	Given a n x n matrix where each of the rows and columns are sorted in 
	ascending order, find the kth smallest element in the matrix. Note that 
	it is the kth smallest element in the sorted order, not the kth distinct 
	element.

	Example:
	matrix = [
	   [ 1,  5,  9],
	   [10, 11, 13],
	   [12, 13, 15]
	],
	k = 8,
	return 13.

	Note: You may assume k is always valid, 1 ≤ k ≤ n2."""

    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        n = len(matrix)
        pq = [(matrix[i][0], i, 0) for i in range(n)] # min-heap 
        for _ in range(k): 
            ans, i, j = heappop(pq)
            if j+1 < n: heappush(pq, (matrix[i][j+1], i, j+1))
        return ans 


    """383. Ransom Note (Easy)
	Given two stings ransomNote and magazine, return true if ransomNote can be 
	constructed from magazine and false otherwise. Each letter in magazine can 
	only be used once in ransomNote.

	Example 1:
	Input: ransomNote = "a", magazine = "b"
	Output: false

	Example 2:
	Input: ransomNote = "aa", magazine = "ab"
	Output: false

	Example 3:
	Input: ransomNote = "aa", magazine = "aab"
	Output: true

	Constraints:
	* 1 <= ransomNote.length, magazine.length <= 10^5
	* ransomNote and magazine consist of lowercase English letters."""

    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        return not Counter(ransomNote) - Counter(magazine)


    """386. Lexicographical Numbers (Medium)
	Given an integer n, return 1 - n in lexicographical order. For example, 
	given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9]. Please optimize your 
	algorithm to use less time and space. The input size may be as large as 
	5,000,000."""

    def lexicalOrder(self, n: int) -> List[int]:
        
        def dfs(x):
            """Pre-order traverse the tree."""
            if x <= n:
                ans.append(x)
                for xx in range(10): dfs(10*x + xx)
        
        ans = []
        for x in range(1, 10): dfs(x)
        return ans 


    """387. First Unique Character in a String (Easy)
	Given a string s, find the first non-repeating character in it and return 
	its index. If it does not exist, return -1.

	Example 1:
	Input: s = "leetcode"
	Output: 0

	Example 2:
	Input: s = "loveleetcode"
	Output: 2

	Example 3:
	Input: s = "aabb"
	Output: -1

	Constraints:
	* 1 <= s.length <= 10^5
	* s consists of only lowercase English letters."""

    def firstUniqChar(self, s: str) -> int:
        freq = Counter(s)
        return next((i for i, ch in enumerate(s) if freq[ch] == 1), -1)


    """388. Longest Absolute File Path (Medium)
	We will represent the file system as a string where "\n\t" mean a 
	subdirectory of the main directory, "\n\t\t" means a subdirectory of the 
	subdirectory of the main directory and so on. Each folder will be 
	represented as a string of letters and/or digits. Each file will be in the 
	form "s1.s2" where s1 and s2 are strings of letters and/or digits. For 
	example, the file system above is represented as 
	"dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext".

	Given a string input representing the file system in the explained format, 
	return the length of the longest absolute path to a file in the abstracted 
	file system. If there is no file in the system, return 0.

	Example 1:
	Input: input = "dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext"
	Output: 20
	Explanation: We have only one file and its path is "dir/subdir2/file.ext" of length 20.
	The path "dir/subdir1" doesn't contain any files.

	Example 2:
	Input: input = "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"
	Output: 32
	Explanation: We have two files:
	"dir/subdir1/file1.ext" of length 21
	"dir/subdir2/subsubdir2/file2.ext" of length 32.
	We return 32 since it is the longest path.

	Example 3:
	Input: input = "a"
	Output: 0
	Explanation: We don't have any files.

	Constraints:
	1 <= input.length <= 104
	input may contain lower-case or upper-case English letters, a new line 
	character '\n', a tab character '\t', a dot '.', a space ' ' or digits."""

    def lengthLongestPath(self, input: str) -> int:
        ans = 0
        prefix = {-1: 0}
        for subd in input.split("\n"): # sub-directory
            depth = subd.count("\t")
            prefix[depth] = prefix[depth-1] + len(subd) - depth # not including delimiter
            if "." in subd: ans = max(ans, prefix[depth] + depth) # including delimiter
        return ans


    """389. Find the Difference (Easy)
	Given two strings s and t which consist of only lowercase letters. String t 
	is generated by random shuffling string s and then add one more letter at a 
	random position. Find the letter that was added in t.

	Example:
	Input: s = "abcd" t = "abcde"
	Output: e
	Explanation: 'e' is the letter that was added."""

    def findTheDifference(self, s: str, t: str) -> str:
        return chr(reduce(xor, map(ord, s+t)))


    """390. Elimination Game (Medium)
	There is a list of sorted integers from 1 to n. Starting from left to right, 
	remove the first number and every other number afterward until you reach 
	the end of the list. Repeat the previous step again, but this time from 
	right to left, remove the right most number and every other number from the 
	remaining numbers. We keep repeating the steps again, alternating left to 
	right and right to left, until a single number remains. Find the last 
	number that remains starting with a list of length n.

	Example:
	Input:
	n = 9,
	1 2 3 4 5 6 7 8 9
	2 4 6 8
	2 6
	6

	Output:
	6"""

    def lastRemaining(self, n: int) -> int:
        if n == 1: return 1
        if n&1: n -= 1
        return n + 2 - 2*self.lastRemaining(n//2)


    """391. Perfect Rectangle (Hard)
	Given N axis-aligned rectangles where N > 0, determine if they all together 
	form an exact cover of a rectangular region. Each rectangle is represented 
	as a bottom-left point and a top-right point. For example, a unit square is 
	represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and 
	top-right point is (2, 2)).

	Example 1:
	rectangles = [[1,1,3,3],
	              [3,1,4,2],
	              [3,2,4,4],
	              [1,3,2,4],
	              [2,3,3,4]]
	Return true. All 5 rectangles together form an exact cover of a rectangular 
	region.

	Example 2:
	rectangles = [[1,1,2,3],
	              [1,3,2,4],
	              [3,1,4,2],
	              [3,2,4,4]]
	Return false. Because there is a gap between the two rectangular regions.

	Example 3:
	rectangles = [[1,1,3,3],
	              [3,1,4,2],
	              [1,3,2,4],
	              [3,2,4,4]]
	Return false. Because there is a gap in the top center.

	Example 4:
	rectangles = [[1,1,3,3],
	              [3,1,4,2],
	              [1,3,2,4],
	              [2,2,4,4]]
	Return false. Because two of the rectangles overlap with each other."""

    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:
        area = 0
        corner = set()
        X0 = Y0 = inf
        X1 = Y1 = -inf
        for x0, y0, x1, y1 in rectangles: 
            area += (x1-x0)*(y1-y0)
            X0 = min(x0, X0)
            Y0 = min(y0, Y0)
            X1 = max(x1, X1)
            Y1 = max(y1, Y1)
            corner ^= {(x0, y0), (x0, y1), (x1, y0), (x1, y1)}
        return area == (X1-X0)*(Y1-Y0) and corner == {(X0, Y0), (X0, Y1), (X1, Y0), (X1, Y1)}


    """392. Is Subsequence (Easy)
	Given two strings s and t, return true if s is a subsequence of t, or false 
	otherwise. A subsequence of a string is a new string that is formed from 
	the original string by deleting some (can be none) of the characters 
	without disturbing the relative positions of the remaining characters. (i.e., 
	"ace" is a subsequence of "abcde" while "aec" is not).

	Example 1:
	Input: s = "abc", t = "ahbgdc"
	Output: true

	Example 2:
	Input: s = "axc", t = "ahbgdc"
	Output: false

	Constraints:
	* 0 <= s.length <= 100
	* 0 <= t.length <= 10^4
	* s and t consist only of lowercase English letters.

	Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where 
	           k >= 10^9, and you want to check one by one to see if t has its 
	           subsequence. In this scenario, how would you change your code?"""

    def isSubsequence(self, s: str, t: str) -> bool:
        it = iter(t)
        return all(ch in it for ch in s)


    """393. UTF-8 Validation (Medium)
	A character in UTF8 can be from 1 to 4 bytes long, subjected to the 
	following rules:
	+ For 1-byte character, the first bit is a 0, followed by its unicode code.
	+ For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, 
	  followed by n-1 bytes with most significant 2 bits being 10.
	
	This is how the UTF-8 encoding would work:

	   Char. number range  |        UTF-8 octet sequence
	      (hexadecimal)    |              (binary)
	   --------------------+---------------------------------------------
	   0000 0000-0000 007F | 0xxxxxxx
	   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
	   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
	   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
	
	Given an array of integers representing the data, return whether it is a 
	valid utf-8 encoding. Note that input is an array of integers. Only the 
	least significant 8 bits of each integer is used to store the data. This 
	means each integer represents only 1 byte of data.

	Example 1:
	data = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.
	Return true.
	It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.

	Example 2:
	data = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.
	Return false.
	The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
	The next byte is a continuation byte which starts with 10 and that's correct.
	But the second continuation byte does not start with 10, so it is invalid."""

    def validUtf8(self, data: List[int]) -> bool:
        cnt = 0 
        for x in data:
            x = bin(x)[2:].zfill(8)
            if cnt: # in the middle of multi-byte 
                if x.startswith("10"): cnt -= 1
                else: return False 
            else: # beginning 
                cnt = x.find("0")
                if cnt == -1 or cnt == 1 or cnt > 4: return False 
                if cnt: cnt -= 1
        return cnt == 0


    """394. Decode String (Medium)
	Given an encoded string, return its decoded string. The encoding rule is: 
	k[encoded_string], where the encoded_string inside the square brackets is 
	being repeated exactly k times. Note that k is guaranteed to be a positive 
	integer. You may assume that the input string is always valid; No extra 
	white spaces, square brackets are well-formed, etc. Furthermore, you may 
	assume that the original data does not contain any digits and that digits 
	are only for those repeat numbers, k. For example, there won't be input 
	like 3a or 2[4].

	Example 1:
	Input: s = "3[a]2[bc]"
	Output: "aaabcbc"

	Example 2:
	Input: s = "3[a2[c]]"
	Output: "accaccacc"

	Example 3:
	Input: s = "2[abc]3[cd]ef"
	Output: "abcabccdcdcdef"

	Example 4:
	Input: s = "abc3[cd]xyz"
	Output: "abccdcdcdxyz" """

    def decodeString(self, s: str) -> str:
        stack = []
        nn = ss = ""
        for c in s: 
            if c == "[": 
                stack.append(ss)
                stack.append(nn)
                nn = ss = ""
            elif c == "]": 
                ss *= int(stack.pop())
                ss = stack.pop() + ss
            elif c.isdigit(): nn += c
            else: ss += c
        return ss


    """395. Longest Substring with At Least K Repeating Characters (Medium)
	Find the length of the longest substring T of a given string (consists of 
	lowercase letters only) such that every character in T appears no less than 
	k times.

	Example 1:
	Input: s = "aaabb", k = 3
	Output: 3
	The longest substring is "aaa", as 'a' is repeated 3 times.

	Example 2:
	Input: s = "ababbc", k = 2
	Output:	5
	The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times."""

    def longestSubstring(self, s: str, k: int) -> int:
        if not s: return 0 # edge case 
        
        freq = {} # frequency table 
        for c in s: freq[c] = 1 + freq.get(c, 0)
            
        if min(freq.values()) < k: 
            m = min(freq, key=freq.get)
            return max(self.longestSubstring(ss, k) for ss in s.split(m))
        return len(s)


    """396. Rotate Function (Medium)
	Given an array of integers A and let n to be its length. Assume Bk to be 
	an array obtained by rotating the array A k positions clock-wise, we define 
	a "rotation function" F on A as follow:

	F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1].

	Calculate the maximum value of F(0), F(1), ..., F(n-1).

	Note: n is guaranteed to be less than 10^5.

	Example:
	A = [4, 3, 2, 6]
	F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
	F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
	F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
	F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
	So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26."""

    def maxRotateFunction(self, A: List[int]) -> int:
        ans = val = sum(i*x for i, x in enumerate(A))
        ss = sum(A)
        for x in reversed(A):
            val += ss - len(A)*x
            ans = max(ans, val)
        return ans 


    """397. Integer Replacement (Medium)
	Given a positive integer n and you can do operations as follow: 
	+ If n is even, replace n with n/2.
	+ If n is odd, you can replace n with either n + 1 or n - 1.
	What is the minimum number of replacements needed for n to become 1?

	Example 1:
	Input: 8
	Output: 3
	Explanation: 8 -> 4 -> 2 -> 1
	
	Example 2:
	Input: 7
	Output: 4
	Explanation: 7 -> 8 -> 4 -> 2 -> 1 or 7 -> 6 -> 3 -> 2 -> 1"""

    def integerReplacement(self, n: int) -> int:
        
        @cache
        def fn(n):
            """Return """
            if n == 1: return 0
            if not n&1: return 1 + fn(n//2)
            return 1 + min(fn(n+1), fn(n-1))
        
        return fn(n)


    """399. Evaluate Division (Medium)
	Equations are given in the format A / B = k, where A and B are variables 
	represented as strings, and k is a real number (floating point number). 
	Given some queries, return the answers. If the answer does not exist, 
	return -1.0.

	Example:
	Given a / b = 2.0, b / c = 3.0.
	queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? .
	return [6.0, 0.5, -1.0, 1.0, -1.0 ].

	The input is: vector<pair<string, string>> equations, vector<double>& values, 
	              vector<pair<string, string>> queries , where equations.size() == values.size(), 
	              and the values are positive. This represents the equations. Return vector<double>.

	According to the example above:
	equations = [ ["a", "b"], ["b", "c"] ],
	values = [2.0, 3.0],
	queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
	The input is always valid. You may assume that evaluating the queries will 
	result in no division by zero and there is no contradiction."""

    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        graph = {}
        for (u, v), w in zip(equations, values): 
            graph.setdefault(u, []).append((v, 1/w))
            graph.setdefault(v, []).append((u, w))

        def dfs(n, g, val=1):
            """Depth-first traverse the graph."""
            if n in vals: return 
            vals[n] = val, g
            for nn, w in graph.get(n, []): dfs(nn, g, w*val)
    
        vals = dict()
        for i, n in enumerate(graph): dfs(n, i)
        
        ans = []
        for u, v in queries: 
            if u in vals and v in vals and vals[u][1] == vals[v][1]: ans.append(vals[u][0]/vals[v][0])
            else: ans.append(-1)
        return ans 


    """400. Nth Digit (Medium)
	Find the nth digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, ... Note that n is positive and will fit within the range of a 
	32-bit signed integer (n < 231).

	Example 1:
	Input: 3
	Output: 3
	
	Example 2:
	Input: 11
	Output: 0
	Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
	             11, ... is a 0, which is part of the number 10."""

    def findNthDigit(self, n: int) -> int:
        digit = base = 1 # starting from 1 digit
        while n > 9*base*digit: # upper limit of d digits 
            n -= 9*base*digit
            digit += 1
            base *= 10 
        q, r = divmod(n-1, digit)
        return int(str(base + q)[r])


    """402. Remove K Digits (Medium)
	Given a non-negative integer num represented as a string, remove k digits 
	from the number so that the new number is the smallest possible.

	Note:
	+ The length of num is less than 10002 and will be ≥ k.
	+ The given num does not contain any leading zero.
	
	Example 1:
	Input: num = "1432219", k = 3
	Output: "1219"
	Explanation: Remove the three digits 4, 3, and 2 to form the new number 
	             1219 which is the smallest.

	Example 2:
	Input: num = "10200", k = 1
	Output: "200"
	Explanation: Remove the leading 1 and the number is 200. Note that the 
	             output must not contain leading zeroes.
	
	Example 3:
	Input: num = "10", k = 2
	Output: "0"
	Explanation: Remove all the digits from the number and it is left with 
	             nothing which is 0."""

    def removeKdigits(self, num: str, k: int) -> str:
        stack = []
        for x in num: 
            while k and stack and stack[-1] > x: 
                k -= 1
                stack.pop()
            stack.append(x) 
        return "".join(stack[:-k or None]).lstrip("0") or "0"


    """403. Frog Jump (Hard)
	A frog is crossing a river. The river is divided into some number of units, 
	and at each unit, there may or may not exist a stone. The frog can jump on 
	a stone, but it must not jump into the water. Given a list of stones' 
	positions (in units) in sorted ascending order, determine if the frog can 
	cross the river by landing on the last stone. Initially, the frog is on the 
	first stone and assumes the first jump must be 1 unit. If the frog's last 
	jump was k units, its next jump must be either k - 1, k, or k + 1 units. 
	The frog can only jump in the forward direction.

	Example 1:
	Input: stones = [0,1,3,5,6,8,12,17]
	Output: true
	Explanation: The frog can jump to the last stone by jumping 1 unit to the 
	             2nd stone, then 2 units to the 3rd stone, then 2 units to the 
	             4th stone, then 3 units to the 6th stone, 4 units to the 7th 
	             stone, and 5 units to the 8th stone.
	
	Example 2:
	Input: stones = [0,1,2,3,4,8,9,11]
	Output: false
	Explanation: There is no way to jump to the last stone as the gap between 
	             the 5th and 6th stone is too large.

	Constraints:
	* 2 <= stones.length <= 2000
	* 0 <= stones[i] <= 2^31 - 1
	* stones[0] == 0"""

    def canCross(self, stones: List[int]) -> bool:
        if stones[1] != 1: return False
        loc = set(stones)
        
        @cache
        def fn(x, step): 
            """Return True if it is possible to cross river at stones[i]."""
            if x == stones[-1]: return True 
            ans = False 
            for ss in (step-1, step, step+1): 
                if 0 < ss and x + ss in loc: ans = ans or fn(x + ss, ss)
            return ans 
        
        return fn(1, 1)


    """404. Sum of Left Leaves (Easy)
	Given the root of a binary tree, return the sum of all left leaves.

	Example 1:
	Input: root = [3,9,20,null,null,15,7]
	Output: 24
	Explanation: There are two left leaves in the binary tree, with values 9 
	             and 15 respectively.
	
	Example 2:
	Input: root = [1]
	Output: 0

	Constraints:
	* The number of nodes in the tree is in the range [1, 1000].
	* -1000 <= Node.val <= 1000"""

    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:
        ans = 0 
        stack = [(root, False)]
        while stack: 
            node, tf = stack.pop()
            if not node.left and not node.right and tf: ans += node.val 
            if node.left: stack.append((node.left, True))
            if node.right: stack.append((node.right, False))
        return ans 


    """406. Queue Reconstruction by Height (Medium)
	Suppose you have a random list of people standing in a queue. Each person 
	is described by a pair of integers (h, k), where h is the height of the 
	person and k is the number of people in front of this person who have a 
	height greater than or equal to h. Write an algorithm to reconstruct the 
	queue. 
	Note: The number of people is less than 1,100.
	 
	Example
	Input: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
	Output: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]"""

    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        ans = []
        for h, k in sorted(people, key=lambda x: (-x[0], x[1])): # tallest to shortest 
            ans.insert(k, [h, k])
        return ans 


    """407. Trapping Rain Water II (Hard)
	Given an m x n integer matrix heightMap representing the height of each 
	unit cell in a 2D elevation map, return the volume of water it can trap 
	after raining.

	Example 1:
	Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
	Output: 4
	Explanation: After the rain, water is trapped between the blocks. We have 
	             two small pounds 1 and 3 units trapped. The total volume of 
	             water trapped is 4.
	
	Example 2:
	Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]
	Output: 10

	Constraints:
	* m == heightMap.length
	* n == heightMap[i].length
	* 1 <= m, n <= 200
	* 0 <= heightMap[i][j] <= 2 * 10^4"""

    def trapRainWater(self, heightMap: List[List[int]]) -> int:
        m, n = len(heightMap), len(heightMap[0])
        
        pq = []
        for i in range(m): 
            heappush(pq, (heightMap[i][0], i, 0))
            heappush(pq, (heightMap[i][n-1], i, n-1))
        for j in range(1, n-1): 
            heappush(pq, (heightMap[0][j], 0, j))
            heappush(pq, (heightMap[m-1][j], m-1, j))
        
        ans = most = 0 
        while pq: 
            ht, i, j = heappop(pq)
            most = max(most, ht)
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 < ii < m-1 and 0 < jj < n-1 and heightMap[ii][jj] != -1: 
                    ans += max(0, most - heightMap[ii][jj])
                    heappush(pq, (heightMap[ii][jj], ii, jj))
                    heightMap[ii][jj] = -1 # mark "visited"
        return ans 


    """408. Valid Word Abbreviation (Easy)
	Given a non-empty string s and an abbreviation abbr, return whether the 
	string matches with the given abbreviation. A string such as "word" 
	contains only the following valid abbreviations:
	["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", 
	 "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
	Notice that only the above abbreviations are valid abbreviations of the 
	string "word". Any other string is not a valid abbreviation of "word".

	Note: Assume s contains only lowercase letters and abbr contains only 
	      lowercase letters and digits.

	Example 1:
	Given s = "internationalization", abbr = "i12iz4n":
	Return true.

	Example 2:
	Given s = "apple", abbr = "a2e":
	Return false."""

    def validWordAbbreviation(self, word: str, abbr: str) -> bool:
        i = j = 0
        while i < len(word) and j < len(abbr): 
            if abbr[j].isalpha(): 
                if word[i] == abbr[j]: i, j = i+1, j+1
                else: return False 
            else: 
                if abbr[j] == "0": return False # edge case 
                jj = j 
                while j < len(abbr) and abbr[j].isdigit(): j += 1
                i += int(abbr[jj:j])
        return i == len(word) and j == len(abbr)


    """409. Longest Palindrome (Easy)
	Given a string s which consists of lowercase or uppercase letters, return 
	the length of the longest palindrome that can be built with those letters.
	Letters are case sensitive, for example, "Aa" is not considered a 
	palindrome here.

	Example 1:
	Input: s = "abccccdd"
	Output: 7
	Explanation: One longest palindrome that can be built is "dccaccd", whose 
	             length is 7.
	
	Example 2:
	Input: s = "a"
	Output: 1

	Example 3:
	Input: s = "bb"
	Output: 2

	Constraints:
	* 1 <= s.length <= 2000
	* s consists of lowercase and/or uppercase English letters only."""

    def longestPalindrome(self, s: str) -> int:
        freq = Counter(s)
        ans = odd = 0 
        for v in freq.values(): 
            if v&1: odd = 1
            ans += v//2*2
        return ans + odd


    """410. Split Array Largest Sum (Hard)
	Given an array nums which consists of non-negative integers and an integer 
	m, you can split the array into m non-empty continuous subarrays. Write an 
	algorithm to minimize the largest sum among these m subarrays.

	Example 1:
	Input: nums = [7,2,5,10,8], m = 2
	Output: 18
	Explanation: There are four ways to split nums into two subarrays. The best 
	             way is to split it into [7,2,5] and [10,8], where the largest 
	             sum among the two subarrays is only 18.
	
	Example 2:
	Input: nums = [1,2,3,4,5], m = 2
	Output: 9

	Example 3:
	Input: nums = [1,4,4], m = 3
	Output: 4

	Constraints:
	* 1 <= nums.length <= 1000
	* 0 <= nums[i] <= 10^6
	* 1 <= m <= min(50, nums.length)"""

    def splitArray(self, nums: List[int], m: int) -> int:
        
        def fn(val): 
            """Return True if it is possible to split."""
            cnt = sm = 0 
            for x in nums: 
                if sm + x > val: 
                    cnt += 1
                    sm = 0
                sm += x
            return cnt+1 <= m
        
        lo, hi = max(nums), sum(nums)
        while lo < hi: 
            mid = lo + hi >> 1
            if fn(mid): hi = mid
            else: lo = mid + 1
        return lo


    """413. Arithmetic Slices (Medium)
	A sequence of numbers is called arithmetic if it consists of at least three 
	elements and if the difference between any two consecutive elements is the 
	same. For example, these are arithmetic sequences:
	1, 3, 5, 7, 9
	7, 7, 7, 7
	3, -1, -5, -9

	The following sequence is not arithmetic: 1, 1, 2, 5, 7. A zero-indexed 
	array A consisting of N numbers is given. A slice of that array is any pair 
	of integers (P, Q) such that 0 <= P < Q < N. A slice (P, Q) of the array A 
	is called arithmetic if the sequence: A[P], A[P + 1], ..., A[Q - 1], A[Q] 
	is arithmetic. In particular, this means that P + 1 < Q. The function 
	should return the number of arithmetic slices in the array A.
	 
	Example:
	A = [1, 2, 3, 4]
	return: 3, for 3 arithmetic slices in A: 
	[1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself."""

    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        ans = cnt = 0
        for i in range(2, len(nums)): 
            if nums[i-2] - nums[i-1] == nums[i-1] - nums[i]: cnt += 1
            else: cnt = 0
            ans += cnt
        return ans 


    """415. Add Strings (Easy)
	Given two non-negative integers, num1 and num2 represented as string, 
	return the sum of num1 and num2 as a string. You must solve the problem 
	without using any built-in library for handling large integers (such as 
	BigInteger). You must also not convert the inputs to integers directly.

	Example 1:
	Input: num1 = "11", num2 = "123"
	Output: "134"

	Example 2:
	Input: num1 = "456", num2 = "77"
	Output: "533"

	Example 3:
	Input: num1 = "0", num2 = "0"
	Output: "0"

	Constraints:
	* 1 <= num1.length, num2.length <= 10^4
	* num1 and num2 consist of only digits.
	* num1 and num2 don't have any leading zeros except for the zero itself."""

    def addStrings(self, num1: str, num2: str) -> str:
        ans = []
        carry = 0
        for x, y in zip_longest(reversed(num1), reversed(num2), fillvalue="0"): 
            carry, x = divmod(carry + int(x) + int(y), 10)
            ans.append(x)
        if carry: ans.append(carry)
        return "".join(map(str, reversed(ans)))


    """418. Sentence Screen Fitting (Medium)
	Given a rows x cols screen and a sentence represented by a list of non-
	empty words, find how many times the given sentence can be fitted on the 
	screen.

	Note:
	* A word cannot be split into two lines.
	* The order of words in the sentence must remain unchanged.
	* Two consecutive words in a line must be separated by a single space.
	* Total words in the sentence won't exceed 100.
	* Length of each word is greater than 0 and won't exceed 10.
	* 1 ≤ rows, cols ≤ 20,000.
	
	Example 1:
	Input: rows = 2, cols = 8, sentence = ["hello", "world"]
	Output: 1
	Explanation:
		hello---
		world---
	The character '-' signifies an empty space on the screen.

	Example 2:
	Input: rows = 3, cols = 6, sentence = ["a", "bcd", "e"]
	Output: 2
	Explanation:
		a-bcd- 
		e-a---
		bcd-e-
	The character '-' signifies an empty space on the screen.

	Example 3:
	Input: rows = 4, cols = 5, sentence = ["I", "had", "apple", "pie"]
	Output: 1
	Explanation:
		I-had
		apple
		pie-I
		had--
	The character '-' signifies an empty space on the screen."""

    def wordsTyping(self, sentence: List[str], rows: int, cols: int) -> int:
        ss = " ".join(sentence) + " "
        ans = 0
        for _ in range(rows): 
            ans += cols
            while ss[ans % len(ss)] != " ": ans -= 1
            ans += 1
        return ans // len(ss)


    """422. Valid Word Square (Easy)
	Given a sequence of words, check whether it forms a valid word square. A 
	sequence of words forms a valid word square if the kth row and column read 
	the exact same string, where 0 ≤ k < max(numRows, numColumns).

	Note:
	* The number of words given is at least 1 and does not exceed 500.
	* Word length will be at least 1 and does not exceed 500.
	* Each word contains only lowercase English alphabet a-z.

	Example 1:
	Input: ["abcd",
	        "bnrt",
	        "crmy",
	        "dtye"]
	Output: true
	Explanation:
	The first row and first column both read "abcd".
	The second row and second column both read "bnrt".
	The third row and third column both read "crmy".
	The fourth row and fourth column both read "dtye".
	Therefore, it is a valid word square.

	Example 2:
	Input: ["abcd",
	        "bnrt",
	        "crm",
	        "dt"]
	Output:	true
	Explanation:
	The first row and first column both read "abcd".
	The second row and second column both read "bnrt".
	The third row and third column both read "crm".
	The fourth row and fourth column both read "dt".
	Therefore, it is a valid word square.

	Example 3:
	Input: ["ball",
	        "area",
	        "read",
	        "lady"]
	Output: false
	Explanation:
	The third row reads "read" while the third column reads "lead".
	Therefore, it is NOT a valid word square."""

    def validWordSquare(self, words: List[str]) -> bool:
        return words == ["".join(x) for x in zip_longest(*words, fillvalue="")]


    """426. Convert Binary Search Tree to Sorted Doubly Linked List (Medium)
	Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in 
	place. You can think of the left and right pointers as synonymous to the 
	predecessor and successor pointers in a doubly-linked list. For a circular 
	doubly linked list, the predecessor of the first element is the last 
	element, and the successor of the last element is the first element. We 
	want to do the transformation in place. After the transformation, the left 
	pointer of the tree node should point to its predecessor, and the right 
	pointer should point to its successor. You should return the pointer to the 
	smallest element of the linked list.

	Example 1:
	Input: root = [4,2,5,1,3]
	Output: [1,2,3,4,5]
	Explanation: The figure below shows the transformed BST. The solid line 
	             indicates the successor relationship, while the dashed line 
	             means the predecessor relationship.

	Example 2:
	Input: root = [2,1,3]
	Output: [1,2,3]

	Example 3:
	Input: root = []
	Output: []
	Explanation: Input is an empty tree. Output is also an empty Linked List.

	Example 4:
	Input: root = [1]
	Output: [1]

	Constraints:
	* -1000 <= Node.val <= 1000
	* Node.left.val < Node.val < Node.right.val
	* All values of Node.val are unique.
	* 0 <= Number of Nodes <= 2000"""

    def treeToDoublyList(self, root: 'Node') -> 'Node':
        if not root: return # edge case 
        
        def fn(node): 
            """Return head & tail of flattened tree."""
            head = tail = node 
            if node.left: 
                head, tail0 = fn(node.left)
                tail0.right = node 
                node.left = tail0
            if node.right:
                head1, tail = fn(node.right)
                node.right = head1
                head1.left = node 
            return head, tail 
        
        head, tail = fn(root)
        head.left = tail
        tail.right = head 
        return head 


    """429. N-ary Tree Level Order Traversal (Medium)
	Given an n-ary tree, return the level order traversal of its nodes' values. 
	Nary-Tree input serialization is represented in their level order traversal, 
	each group of children is separated by the null value (See examples).

	Example 1:
	Input: root = [1,null,3,2,4,null,5,6]
	Output: [[1],[3,2,4],[5,6]]

	Example 2:
	Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
	Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]

	Constraints:
	* The height of the n-ary tree is less than or equal to 1000
	* The total number of nodes is between [0, 10^4]"""

    def levelOrder(self, root: 'Node') -> List[List[int]]:
        ans = []
        if root: 
            queue = [root]
            while queue: 
                newq, vals = [], []
                for x in queue: 
                    vals.append(x.val)
                    newq.extend(x.children)
                ans.append(vals)
                queue = newq
        return ans 


    """430. Flatten a Multilevel Doubly Linked List (Medium)
	You are given a doubly linked list which in addition to the next and 
	previous pointers, it could have a child pointer, which may or may not 
	point to a separate doubly linked list. These child lists may have one or 
	more children of their own, and so on, to produce a multilevel data 
	structure, as shown in the example below. Flatten the list so that all the 
	nodes appear in a single-level, doubly linked list. You are given the head 
	of the first level of the list.

	Example 1:
	Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
	Output: [1,2,3,7,8,11,12,9,10,4,5,6]

	Example 2:
	Input: head = [1,2,null,3]
	Output: [1,3,2]
	Explanation: The input multilevel linked list is as follows:
	             1---2---NULL
	             |
	             3---NULL
	
	Example 3:
	Input: head = []
	Output: []

	How multilevel linked list is represented in test case:
	We use the multilevel linked list from Example 1 above:
	 1---2---3---4---5---6--NULL
	         |
	         7---8---9---10--NULL
	             |
	             11--12--NULL
	The serialization of each level is as follows:
	[1,2,3,4,5,6,null]
	[7,8,9,10,null]
	[11,12,null]
	To serialize all levels together we will add nulls in each level to signify 
	no node connects to the upper node of the previous level. The serialization 
	becomes:
	[1,2,3,4,5,6,null]
	[null,null,7,8,9,10,null]
	[null,11,12,null]
	Merging the serialization of each level and removing trailing nulls we obtain:
	[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]

	Constraints:
	* The number of Nodes will not exceed 1000.
	* 1 <= Node.val <= 10^5"""

    def flatten(self, head: 'Node') -> 'Node':
        node = head
        stack = []
        while node: 
            if node.child: 
                if node.next: stack.append(node.next)
                node.next = node.child
                node.next.prev = node
                node.child = None
            elif not node.next and stack: 
                node.next = stack.pop()
                node.next.prev = node 
            node = node.next 
        return head 


    """435. Non-overlapping Intervals (Medium)
	Given an array of intervals intervals where intervals[i] = [starti, endi], 
	return the minimum number of intervals you need to remove to make the rest 
	of the intervals non-overlapping.

	Example 1:
	Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
	Output: 1
	Explanation: [1,3] can be removed and the rest of the intervals are non-
	             overlapping.
	
	Example 2:
	Input: intervals = [[1,2],[1,2],[1,2]]
	Output: 2
	Explanation: You need to remove two [1,2] to make the rest of the intervals 
	             non-overlapping.
	
	Example 3:
	Input: intervals = [[1,2],[2,3]]
	Output: 0
	Explanation: You don't need to remove any of the intervals since they're 
	             already non-overlapping.

	Constraints:
	* 1 <= intervals.length <= 10^5
	* intervals[i].length == 2
	* -5 * 10^4 <= starti < endi <= 5 * 10^4"""

    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        ans, prev = 0, -inf
        for x, y in sorted(intervals, key=lambda x: x[1]): 
            if x < prev: ans += 1
            else: prev = y
        return ans 


    """438. Find All Anagrams in a String (Medium)
	Given two strings s and p, return an array of all the start indices of p's 
	anagrams in s. You may return the answer in any order. An Anagram is a word 
	or phrase formed by rearranging the letters of a different word or phrase, 
	typically using all the original letters exactly once.

	Example 1:
	Input: s = "cbaebabacd", p = "abc"
	Output: [0,6]
	Explanation: The substring with start index = 0 is "cba", which is an 
	             anagram of "abc". The substring with start index = 6 is "bac", 
	             which is an anagram of "abc".
	
	Example 2:
	Input: s = "abab", p = "ab"
	Output: [0,1,2]
	Explanation: The substring with start index = 0 is "ab", which is an 
	             anagram of "ab". The substring with start index = 1 is "ba", 
	             which is an anagram of "ab". The substring with start 
	             index = 2 is "ab", which is an anagram of "ab".

	Constraints:
	* 1 <= s.length, p.length <= 3 * 10^4
	* s and p consist of lowercase English letters."""

    def findAnagrams(self, s: str, p: str) -> List[int]:
        freq = Counter(p)
        ans = []
        for i, x in enumerate(s): 
            freq[x] -= 1; 
            if len(p) <= i: freq[s[i-len(p)]] += 1
            if all(x == 0 for x in freq.values()): ans.append(i-len(p)+1)
        return ans 


    """439. Ternary Expression Parser (Medium)
	Given a string expression representing arbitrarily nested ternary 
	expressions, evaluate the expression, and return the result of it. You can 
	always assume that the given expression is valid and only contains digits, 
	'?', ':', 'T', and 'F' where 'T' is true and 'F' is false. All the numbers 
	in the expression are one-digit numbers (i.e., in the range [0, 9]). The 
	conditional expressions group right-to-left (as usual in most languages), 
	and the result of the expression will always evaluate to either a digit, 
	'T' or 'F'.

	Example 1:
	Input: expression = "T?2:3"
	Output: "2"
	Explanation: If true, then result is 2; otherwise result is 3.

	Example 2:
	Input: expression = "F?1:T?4:5"
	Output: "4"
	Explanation: The conditional expressions group right-to-left. Using 
	             parenthesis, it is read/evaluated as: 
	             "(F ? 1 : (T ? 4 : 5))" --> "(F ? 1 : 4)" --> "4" 
	             or "(F ? 1 : (T ? 4 : 5))" --> "(T ? 4 : 5)" --> "4"
	
	Example 3:
	Input: expression = "T?T?F:5:3"
	Output: "F"
	Explanation: The conditional expressions group right-to-left. Using 
	             parenthesis, it is read/evaluated as:
	             "(T ? (T ? F : 5) : 3)" --> "(T ? F : 3)" --> "F"
	             "(T ? (T ? F : 5) : 3)" --> "(T ? F : 5)" --> "F"

	Constraints:
	* 5 <= expression.length <= 10^4
	* expression consists of digits, 'T', 'F', '?', and ':'.
	* It is guaranteed that expression is a valid ternary expression and that 
	  each number is a one-digit number."""

    def parseTernary(self, expression: str) -> str:
        stack = []
        for ch in reversed(expression): 
            if stack and stack[-1] == "?":  
                stack.pop() # pop out "?"
                t = stack.pop()
                f = stack.pop()
                if ch == "T": stack.append(t)
                else: stack.append(f)
            elif ch != ":": stack.append(ch)
        return stack[-1]


    """441. Arranging Coins (Easy)
	You have n coins and you want to build a staircase with these coins. The 
	staircase consists of k rows where the ith row has exactly i coins. The 
	last row of the staircase may be incomplete. Given the integer n, return 
	the number of complete rows of the staircase you will build.

	Example 1:
	Input: n = 5
	Output: 2
	Explanation: Because the 3rd row is incomplete, we return 2.

	Example 2:
	Input: n = 8
	Output: 3
	Explanation: Because the 4th row is incomplete, we return 3.

	Constraints: 1 <= n <= 2^31 - 1"""

    def arrangeCoins(self, n: int) -> int:
        return int((sqrt(8*n + 1) - 1)//2)


    """442. Find All Duplicates in an Array (Medium)
	Given an integer array nums of length n where all the integers of nums are 
	in the range [1, n] and each integer appears once or twice, return an array 
	of all the integers that appears twice. You must write an algorithm that 
	runs in O(n) time and uses only constant extra space.

	Example 1:
	Input: nums = [4,3,2,7,8,2,3,1]
	Output: [2,3]

	Example 2:
	Input: nums = [1,1,2]
	Output: [1]

	Example 3:
	Input: nums = [1]
	Output: []

	Constraints:
	* n == nums.length
	* 1 <= n <= 10^5
	* 1 <= nums[i] <= n
	* Each element in nums appears once or twice."""

    def findDuplicates(self, nums: List[int]) -> List[int]:
        ans = []
        for x in nums: 
            x = abs(x)
            if nums[x-1] < 0: ans.append(x)
            nums[x-1] *= -1 
        return ans 


    """446. Arithmetic Slices II - Subsequence (Hard)
	Given an integer array nums, return the number of all the arithmetic 
	subsequences of nums. A sequence of numbers is called arithmetic if it 
	consists of at least three elements and if the difference between any two 
	consecutive elements is the same.
	* For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are 
	  arithmetic sequences.
	* For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.
	A subsequence of an array is a sequence that can be formed by removing some 
	elements (possibly none) of the array.
	* For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
	The answer is guaranteed to fit in 32-bit integer.

	Example 1:
	Input: nums = [2,4,6,8,10]
	Output: 7
	Explanation: All arithmetic subsequence slices are:
	             [2,4,6]
	             [4,6,8]
	             [6,8,10]
	             [2,4,6,8]
	             [4,6,8,10]
	             [2,4,6,8,10]
	             [2,6,10]
	
	Example 2:
	Input: nums = [7,7,7,7,7]
	Output: 16
	Explanation: Any subsequence of this array is arithmetic.

	Constraints:
	* 1  <= nums.length <= 1000
	* -2^31 <= nums[i] <= 2^31 - 1"""

    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        ans = 0 
        freq = [defaultdict(int) for _ in range(len(nums))] # arithmetic sub-seqs
        for i, x in enumerate(nums): 
            for ii in range(i): 
                diff = x - nums[ii]
                ans += freq[ii].get(diff, 0)
                freq[i][diff] += 1 + freq[ii][diff]
        return ans 


    """450. Delete Node in a BST (Medium)
	Given a root node reference of a BST and a key, delete the node with the 
	given key in the BST. Return the root node reference (possibly updated) of 
	the BST. Basically, the deletion can be divided into two stages:
	* Search for a node to remove.
	* If the node is found, delete the node.

	Example 1:
	Input: root = [5,3,6,2,4,null,7], key = 3
	Output: [5,4,6,2,null,null,7]
	Explanation: Given key to delete is 3. So we find the node with value 3 and 
	             delete it. One valid answer is [5,4,6,2,null,null,7], shown in 
	             the above BST. Please notice that another valid answer is 
	             [5,2,6,null,4,null,7] and it's also accepted.

	Example 2:
	Input: root = [5,3,6,2,4,null,7], key = 0
	Output: [5,3,6,2,4,null,7]
	Explanation: The tree does not contain a node with value = 0.

	Example 3:
	Input: root = [], key = 0
	Output: []

	Constraints:
	* The number of nodes in the tree is in the range [0, 10^4].
	* -10^5 <= Node.val <= 10^5
	* Each node has a unique value.
	* root is a valid binary search tree.
	* -10^5 <= key <= 10^5

	Follow up: Could you solve it with time complexity O(height of tree)?"""

    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:
        if not root: return 
        if root.val < key: root.right = self.deleteNode(root.right, key)
        elif root.val > key: root.left = self.deleteNode(root.left, key)
        else: # found 
            if not root.left or not root.right: return root.left or root.right 
            node = root.left 
            while node.right: node = node.right 
            root.val = node.val 
            root.left = self.deleteNode(root.left, node.val)
        return root 


    """451. Sort Characters By Frequency (Medium)
	Given a string s, sort it in decreasing order based on the frequency of the 
	characters. The frequency of a character is the number of times it appears 
	in the string. Return the sorted string. If there are multiple answers, 
	return any of them.

	Example 1:
	Input: s = "tree"
	Output: "eert"
	Explanation: 'e' appears twice while 'r' and 't' both appear once. So 'e' 
	             must appear before both 'r' and 't'. Therefore "eetr" is also 
	             a valid answer.
	
	Example 2:
	Input: s = "cccaaa"
	Output: "aaaccc"
	Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and 
	             "aaaccc" are valid answers. Note that "cacaca" is incorrect, 
	             as the same characters must be together.
	
	Example 3:
	Input: s = "Aabb"
	Output: "bbAa"
	Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect. Note 
	             that 'A' and 'a' are treated as two different characters.

	Constraints:
	* 1 <= s.length <= 5 * 10^5
	* s consists of uppercase and lowercase English letters and digits."""

    def frequencySort(self, s: str) -> str:
        return "".join(ch*x for ch, x in Counter(s).most_common())


    """462. Minimum Moves to Equal Array Elements II (Medium)
	Given an integer array nums of size n, return the minimum number of moves 
	required to make all array elements equal. In one move, you can increment 
	or decrement an element of the array by 1.

	Example 1:
	Input: nums = [1,2,3]
	Output: 2
	Explanation: Only two moves are needed (remember each move increments or 
	             decrements one element): [1,2,3]  =>  [2,2,3]  =>  [2,2,2]
	
	Example 2:
	Input: nums = [1,10,2,9]
	Output: 16

	Constraints:
	* n == nums.length
	* 1 <= nums.length <= 10^5
	* -10^9 <= nums[i] <= 10^9"""

    def minMoves2(self, nums: List[int]) -> int:
        
        def part(lo, hi):
            """Partition array via a random pivot."""
            i, j = lo+1, hi-1
            while i <= j: 
                if nums[i] < nums[lo]: i += 1
                elif nums[lo] < nums[j]: j -= 1
                else: 
                    nums[i], nums[j] = nums[j], nums[i]
                    i += 1
                    j -= 1
            nums[lo], nums[j] = nums[j], nums[lo]
            return j
        
        shuffle(nums) # statistical guarantee of O(NlogN)
        lo, hi = 0, len(nums)
        while lo < hi: 
            mid = part(lo, hi)
            if mid == len(nums)//2: break 
            if mid < len(nums)//2: lo = mid+1
            else: hi = mid
        return sum(abs(x-nums[mid]) for x in nums)


    """463. Island Perimeter (Easy)
	You are given row x col grid representing a map where grid[i][j] = 1 
	represents land and grid[i][j] = 0 represents water. Grid cells are 
	connected horizontally/vertically (not diagonally). The grid is completely 
	surrounded by water, and there is exactly one island (i.e., one or more 
	connected land cells). The island doesn't have "lakes", meaning the water 
	inside isn't connected to the water around the island. One cell is a square 
	with side length 1. The grid is rectangular, width and height don't exceed 
	100. Determine the perimeter of the island.

	Example 1:
	Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
	Output: 16
	Explanation: The perimeter is the 16 yellow stripes in the image above.

	Example 2:
	Input: grid = [[1]]
	Output: 4

	Example 3:
	Input: grid = [[1,0]]
	Output: 4

	Constraints:
	* row == grid.length
	* col == grid[i].length
	* 1 <= row, col <= 100
	* grid[i][j] is 0 or 1.
	* There is exactly one island in grid."""

    def islandPerimeter(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        ans = 0 
        for i in range(m):
            for j in range(n): 
                if grid[i][j]: 
                    ans += 4
                    if i and grid[i-1][j]: ans -= 2
                    if j and grid[i][j-1]: ans -= 2
        return ans 


    """469. Convex Polygon (Medium)
	You are given an array of points on the X-Y plane points where 
	points[i] = [xi, yi]. The points form a polygon when joined sequentially.
	Return true if this polygon is convex and false otherwise. You may assume 
	the polygon formed by given points is always a simple polygon. In other 
	words, we ensure that exactly two edges intersect at each vertex and that 
	edges otherwise don't intersect each other.

	Example 1:
	Input: points = [[0,0],[0,5],[5,5],[5,0]]
	Output: true

	Example 2:
	Input: points = [[0,0],[0,10],[10,10],[10,0],[5,5]]
	Output: false

	Constraints:
	* 3 <= points.length <= 10^4
	* points[i].length == 2
	* -10^4 <= xi, yi <= 10^4
	* All the given points are unique."""

    def isConvex(self, points: List[List[int]]) -> bool:
        sign = 0
        for i in range(len(points)): 
            val = (points[i][0] - points[i-1][0]) * (points[i-1][1] - points[i-2][1]) - (points[i-1][0] - points[i-2][0]) * (points[i][1] - points[i-1][1])
            if sign * val < 0: return False 
            if val: sign = val 
        return True 


    """472. Concatenated Words (Hard)
	Given an array of strings words (without duplicates), return all the 
	concatenated words in the given list of words. A concatenated word is 
	defined as a string that is comprised entirely of at least two shorter 
	words in the given array.

	Example 1:
	Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
	Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
	Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
	             "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
	             "ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
	
	Example 2:
	Input: words = ["cat","dog","catdog"]
	Output: ["catdog"]

	Constraints:
	* 1 <= words.length <= 10^4
	* 0 <= words[i].length <= 1000
	* words[i] consists of only lowercase English letters.
	* 0 <= sum(words[i].length) <= 10^5

class Trie: 
    
    def __init__(self): 
        self.root = {}
        
    def insert(self, word): 
        node = self.root
        for ch in reversed(word): 
            node = node.setdefault(ch, {})
        node["#"] = True
        
    def search(self, word): 
        dp = [True] + [False] * len(word)
        for i in range(len(word)): 
            node = self.root
            for j in reversed(range(i+1)): 
                if word[j] not in node: break 
                node = node[word[j]]
                if dp[j] and node.get("#"):
                    dp[i+1] = True 
                    break 
        return dp[-1]"""

    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        ans = []
        trie = Trie()
        for word in sorted(words, key=len): 
            if word: 
                if trie.search(word): ans.append(word)
                trie.insert(word)
        return ans


    """481. Magical String (Medium)
	A magical string S consists of only '1' and '2' and obeys the following 
	rules:
	The string S is magical because concatenating the number of contiguous 
	occurrences of characters '1' and '2' generates the string S itself. The 
	first few elements of string S is the following: S = "1221121221221121122……"
	If we group the consecutive '1's and '2's in S, it will be:
	1 22 11 2 1 22 1 22 11 2 11 22 ......
	and the occurrences of '1's or '2's in each group are:
	1 2 2 1 1 2 1 2 2 1 2 2 ......
	You can see that the occurrence sequence above is the S itself. Given an 
	integer N as input, return the number of '1's in the first N number in the 
	magical string S.

	Example 1:
	Input: 6
	Output: 3
	Explanation: The first 6 elements of magical string S is "12211" and it 
	             contains three 1's, so return 3.

	Note: N will not exceed 100,000."""

    def magicalString(self, n: int) -> int:
        if n == 0: return 0 # edge case 
        
        S = [1,2,2]
        i = 2
        while len(S) < n: 
            S.extend(S[i] * [3 ^ S[-1]])
            i += 1
        return S[:n].count(1)


    """484. Find Permutation (Medium)
	A permutation perm of n integers of all the integers in the range [1, n] 
	can be represented as a string s of length n - 1 where:
	* s[i] == 'I' if perm[i] < perm[i + 1], and
	* s[i] == 'D' if perm[i] > perm[i + 1].
	Given a string s, reconstruct the lexicographically smallest permutation 
	perm and return it.

	Example 1:
	Input: s = "I"
	Output: [1,2]
	Explanation: [1,2] is the only legal permutation that can represented by s, 
	             where the number 1 and 2 construct an increasing relationship.
	
	Example 2:
	Input: s = "DI"
	Output: [2,1,3]
	Explanation: Both [2,1,3] and [3,1,2] can be represented as "DI", but since 
	             we want to find the smallest lexicographical permutation, you 
	             should return [2,1,3]

	Constraints:
	* 1 <= s.length <= 10^5
	* s[i] is either 'I' or 'D'."""

    def findPermutation(self, s: str) -> List[int]:
        ans, stack = [], []
        for i, ch in enumerate(s + "I"): 
            if ch == "D": stack.append(i+1)
            else: 
                ans.append(i+1)
                while stack: ans.append(stack.pop())
        return ans 


    """485. Max Consecutive Ones (Easy)
	Given a binary array nums, return the maximum number of consecutive 1's in 
	the array.

	Example 1:
	Input: nums = [1,1,0,1,1,1]
	Output: 3
	Explanation: The first two digits or the last three digits are consecutive 
	             1s. The maximum number of consecutive 1s is 3.
	
	Example 2:
	Input: nums = [1,0,1,1,0,1]
	Output: 2

	Constraints:
	* 1 <= nums.length <= 10^5
	* nums[i] is either 0 or 1."""

    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        ans = cnt = 0 
        for x in nums:  
            if x: cnt += 1
            else: cnt = 0 
            ans = max(ans, cnt)
        return ans 


    """487. Max Consecutive Ones II (Medium)
	Given a binary array, find the maximum number of consecutive 1s in this 
	array if you can flip at most one 0.

	Example 1:
	Input: [1,0,1,1,0]
	Output: 4
	Explanation: Flip the first zero will get the the maximum number of 
	             consecutive 1s. After flipping, the maximum number of 
	             consecutive 1s is 4.
	
	Note:
	* The input array will only contain 0 and 1.
	* The length of input array is a positive integer and will not exceed 10,000
	
	Follow up: What if the input numbers come in one by one as an infinite 
	           stream? In other words, you can't store all numbers coming from 
	           the stream as it's too large to hold in memory. Could you solve 
	           it efficiently?"""

    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        ans = curr = 0
        prev = -1
        for x in nums: 
            if x == 0: prev, curr = curr, 0
            else: curr += 1
            ans = max(ans, prev + 1 + curr)
        return ans 


    """490. The Maze (Medium)
	There is a ball in a maze with empty spaces (represented as 0) and walls 
	(represented as 1). The ball can go through the empty spaces by rolling up, 
	down, left or right, but it won't stop rolling until hitting a wall. When 
	the ball stops, it could choose the next direction. Given the m x n maze, 
	the ball's start position and the destination, where 
	start = [startrow, startcol] and 
	destination = [destinationrow, destinationcol], return true if the ball can 
	stop at the destination, otherwise return false. You may assume that the 
	borders of the maze are all walls (see examples).

	Example 1:
	Input: maze = [[0,0,1,0,0],
	               [0,0,0,0,0],
	               [0,0,0,1,0],
	               [1,1,0,1,1],
	               [0,0,0,0,0]], start = [0,4], destination = [4,4]
	Output: true
	Explanation: One possible way is : left -> down -> left -> down -> right -> 
	             down -> right.

	Example 2:
	Input: maze = [[0,0,1,0,0],
	               [0,0,0,0,0],
	               [0,0,0,1,0],
	               [1,1,0,1,1],
	               [0,0,0,0,0]], start = [0,4], destination = [3,2]
	Output: false
	Explanation: There is no way for the ball to stop at the destination. 
	             Notice that you can pass through the destination but you 
	             cannot stop there.
	
	Example 3:
	Input: maze = [[0,0,0,0,0],
	               [1,1,0,0,1],
	               [0,0,0,0,0],
	               [0,1,0,0,1],
	               [0,1,0,0,0]], start = [4,3], destination = [0,1]
	Output: false

	Constraints:
	* m == maze.length
	* n == maze[i].length
	* 1 <= m, n <= 100
	* maze[i][j] is 0 or 1.
	* start.length == 2
	* destination.length == 2
	* 0 <= startrow, destinationrow <= m
	* 0 <= startcol, destinationcol <= n
	* Both the ball and the destination exist in an empty space, and they will 
	  not be in the same position initially.
	* The maze contains at least 2 empty spaces."""

    def hasPath(self, maze: List[List[int]], start: List[int], destination: List[int]) -> bool:
        m, n = len(maze), len(maze[0])
        
        stack = [start]
        seen = {tuple(start)}
        while stack: 
            i, j = stack.pop()
            if [i, j] == destination: return True 
            for di, dj in (-1, 0), (0, -1), (0, 1), (1, 0): 
                ii, jj = i, j
                while 0 <= ii+di < m and 0 <= jj+dj < n and maze[ii+di][jj+dj] == 0: 
                    ii += di
                    jj += dj 
                if (ii, jj) not in seen: 
                    stack.append((ii, jj))
                    seen.add((ii, jj))
        return False 


    """496. Next Greater Element I (Easy)
	The next greater element of some element x in an array is the first greater 
	element that is to the right of x in the same array. You are given two 
	distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset 
	of nums2. For each 0 <= i < nums1.length, find the index j such that 
	nums1[i] == nums2[j] and determine the next greater element of nums2[j] in 
	nums2. If there is no next greater element, then the answer for this query 
	is -1. Return an array ans of length nums1.length such that ans[i] is the 
	next greater element as described above.

	Example 1:
	Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
	Output: [-1,3,-1]
	Explanation: The next greater element for each value of nums1 is as follows:
	             - 4 is underlined in nums2 = [1,3,4,2]. There is no next 
	               greater element, so the answer is -1.
	             - 1 is underlined in nums2 = [1,3,4,2]. The next greater 
	               element is 3.
	             - 2 is underlined in nums2 = [1,3,4,2]. There is no next 
	               greater element, so the answer is -1.
	
	Example 2:
	Input: nums1 = [2,4], nums2 = [1,2,3,4]
	Output: [3,-1]
	Explanation: The next greater element for each value of nums1 is as follows:
 	             - 2 is underlined in nums2 = [1,2,3,4]. The next greater 
 	               element is 3.
 	             - 4 is underlined in nums2 = [1,2,3,4]. There is no next 
 	               greater element, so the answer is -1.

	Constraints:
	* 1 <= nums1.length <= nums2.length <= 1000
	* 0 <= nums1[i], nums2[i] <= 104
	* All integers in nums1 and nums2 are unique.
	* All the integers of nums1 also appear in nums2.

	Follow up: Could you find an O(nums1.length + nums2.length) solution?"""

    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        mp = {}
        stack = []
        for x in nums2: 
            while stack and stack[-1] < x: mp[stack.pop()] = x
            stack.append(x)
        return [mp.get(x, -1) for x in nums1]


    """502. IPO (Hard)
	Suppose LeetCode will start its IPO soon. In order to sell a good price of 
	its shares to Venture Capital, LeetCode would like to work on some projects 
	to increase its capital before the IPO. Since it has limited resources, it 
	can only finish at most k distinct projects before the IPO. Help LeetCode 
	design the best way to maximize its total capital after finishing at most k 
	distinct projects. You are given n projects where the ith project has a 
	pure profit profits[i] and a minimum capital of capital[i] is needed to 
	start it. Initially, you have w capital. When you finish a project, you 
	will obtain its pure profit and the profit will be added to your total 
	capital. Pick a list of at most k distinct projects from given projects to 
	maximize your final capital, and return the final maximized capital. The 
	answer is guaranteed to fit in a 32-bit signed integer.

	Example 1:
	Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]
	Output: 4
	Explanation: Since your initial capital is 0, you can only start the 
	             project indexed 0. After finishing it you will obtain profit 1 
	             and your capital becomes 1. With capital 1, you can either 
	             start the project indexed 1 or the project indexed 2. Since 
	             you can choose at most 2 projects, you need to finish the 
	             project indexed 2 to get the maximum capital. Therefore, 
	             output the final maximized capital, which is 0 + 1 + 3 = 4.
	
	Example 2:
	Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]
	Output: 6

	Constraints:
	* 1 <= k <= 10^5
	* 0 <= w <= 10^9
	* n == profits.length
	* n == capital.length
	* 1 <= n <= 10^5
	* 0 <= profits[i] <= 10^4
	* 0 <= capital[i] <= 10^9"""

    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:
        capital, profits = zip(*sorted(zip(capital, profits)))
        i = 0 
        pq = []
        for _ in range(k): 
            while i < len(capital) and capital[i] <= w: 
                heappush(pq, -profits[i])
                i += 1
            if pq: w -= heappop(pq)
        return w


    """505. The Maze II (Medium)
	There is a ball in a maze with empty spaces (represented as 0) and walls 
	(represented as 1). The ball can go through the empty spaces by rolling up, 
	down, left or right, but it won't stop rolling until hitting a wall. When 
	the ball stops, it could choose the next direction. Given the m x n maze, 
	the ball's start position and the destination, where 
	start = [startrow, startcol] and 
	destination = [destinationrow, destinationcol], return the shortest 
	distance for the ball to stop at the destination. If the ball cannot stop 
	at destination, return -1. The distance is the number of empty spaces 
	traveled by the ball from the start position (excluded) to the destination 
	(included). You may assume that the borders of the maze are all walls (see 
	examples).

	Example 1:
	Input: maze = [[0,0,1,0,0],
	               [0,0,0,0,0],
	               [0,0,0,1,0],
	               [1,1,0,1,1],
	               [0,0,0,0,0]], start = [0,4], destination = [4,4]
	Output: 12
	Explanation: One possible way is : left -> down -> left -> down -> right -> 
	             down -> right. The length of the path is 
	             1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.
	
	Example 2:
	Input: maze = [[0,0,1,0,0],
	               [0,0,0,0,0],
	               [0,0,0,1,0],
	               [1,1,0,1,1],
	               [0,0,0,0,0]], start = [0,4], destination = [3,2]
	Output: -1
	Explanation: There is no way for the ball to stop at the destination. 
	             Notice that you can pass through the destination but you 
	             cannot stop there.
	
	Example 3:
	Input: maze = [[0,0,0,0,0],
	               [1,1,0,0,1],
	               [0,0,0,0,0],
	               [0,1,0,0,1],
	               [0,1,0,0,0]], start = [4,3], destination = [0,1]
	Output: -1

	Constraints:
	* m == maze.length
	* n == maze[i].length
	* 1 <= m, n <= 100
	* maze[i][j] is 0 or 1.
	* start.length == 2
	* destination.length == 2
	* 0 <= startrow, destinationrow <= m
	* 0 <= startcol, destinationcol <= n
	* Both the ball and the destination exist in an empty space, and they will 
	  not be in the same position initially.
	* The maze contains at least 2 empty spaces."""

    def shortestDistance(self, maze: List[List[int]], start: List[int], destination: List[int]) -> int:
        m, n = len(maze), len(maze[0])
        pq = [(0, start[0], start[1])] # min-heap 
        dist = defaultdict(lambda: inf, {tuple(start): 0})
        while pq: 
            x, i, j = heappop(pq)
            if [i, j] == destination: return x
            for di, dj in (-1, 0), (0, -1), (0, 1), (1, 0): 
                ii, jj = i, j
                while 0 <= ii+di < m and 0 <= jj+dj < n and maze[ii+di][jj+dj] == 0: 
                    ii += di
                    jj += dj 
                xx = x + abs(ii - i) + abs(jj - j)
                if xx < dist[ii, jj]: 
                    heappush(pq, (xx, ii, jj))
                    dist[ii, jj] = xx
        return -1

    
    """509. Fibonacci Number (Easy)
	The Fibonacci numbers, commonly denoted F(n) form a sequence, called the 
	Fibonacci sequence, such that each number is the sum of the two preceding 
	ones, starting from 0 and 1. That is,
	* F(0) = 0, F(1) = 1
	* F(n) = F(n - 1) + F(n - 2), for n > 1.
	Given n, calculate F(n).

	Example 1:
	Input: n = 2
	Output: 1
	Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

	Example 2:
	Input: n = 3
	Output: 2
	Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.

	Example 3:
	Input: n = 4
	Output: 3
	Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.

	Constraints: 0 <= n <= 30"""

    def fib(self, n: int) -> int:
        phi = (1 + sqrt(5))/2 
        return round((phi**n - (1-phi)**n)/sqrt(5)) # Fibonacci formula


    """510. Inorder Successor in BST II (Medium)
	Given a node in a binary search tree, find the in-order successor of that 
	node in the BST. If that node has no in-order successor, return null. The 
	successor of a node is the node with the smallest key greater than node.val.
	You will have direct access to the node but not to the root of the tree. 
	Each node will have a reference to its parent node. Below is the definition 
	for Node:

	class Node {
	    public int val;
	    public Node left;
	    public Node right;
	    public Node parent;
	}
	Follow up: Could you solve it without looking up any of the node's values?

	Example 1:
	Input: tree = [2,1,3], node = 1
	Output: 2
	Explanation: 1's in-order successor node is 2. Note that both the node and 
	             the return value is of Node type.

	Example 2:
	Input: tree = [5,3,6,2,4,null,null,1], node = 6
	Output: null
	Explanation: There is no in-order successor of the current node, so the 
	             answer is null.
	
	Example 3:
	Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
	Output: 17

	Example 4:
	Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
	Output: 15

	Example 5:
	Input: tree = [0], node = 0
	Output: null

	Constraints:
	* -10^5 <= Node.val <= 10^5
	* 1 <= Number of Nodes <= 10^4
	* All Nodes will have unique values."""

    def inorderSuccessor(self, node: 'Node') -> 'Node':
        if node.right: 
            node = node.right
            while node.left: node = node.left
            return node 
        
        while node.parent: 
            if node == node.parent.left: return node.parent
            node = node.parent 


    """513. Find Bottom Left Tree Value (Medium)
	Given a binary tree, find the leftmost value in the last row of the tree.

	Example 1:
	Input:

	    2
	   / \
	  1   3

	Output: 1
	
	Example 2:
	Input:

	        1
	       / \
	      2   3
	     /   / \
	    4   5   6
	       /
	      7

	Output: 7
	Note: You may assume the tree (i.e., the given root node) is not NULL."""

    def findBottomLeftValue(self, root: TreeNode) -> int:
        stack = [(root, 0)]
        ii = -1 
        while stack:
            node, i = stack.pop()
            if i > ii: 
                ii = i
                ans = node.val 
            if node.right: stack.append((node.right, i+1))
            if node.left: stack.append((node.left, i+1))
        return ans 


    """514. Freedom Trail (Hard)
	In the video game Fallout 4, the quest "Road to Freedom" requires players 
	to reach a metal dial called the "Freedom Trail Ring" and use the dial to 
	spell a specific keyword to open the door. Given a string ring that 
	represents the code engraved on the outer ring and another string key that 
	represents the keyword that needs to be spelled, return the minimum number 
	of steps to spell all the characters in the keyword. Initially, the first 
	character of the ring is aligned at the "12:00" direction. You should spell 
	all the characters in key one by one by rotating ring clockwise or 
	anticlockwise to make each character of the string key aligned at the 
	"12:00" direction and then by pressing the center button. At the stage of 
	rotating the ring to spell the key character key[i]:
	* You can rotate the ring clockwise or anticlockwise by one place, which 
	  counts as one step. The final purpose of the rotation is to align one of 
	  ring's characters at the "12:00" direction, where this character must 
	  equal key[i].
	* If the character key[i] has been aligned at the "12:00" direction, press 
	  the center button to spell, which also counts as one step. After the 
	  pressing, you could begin to spell the next character in the key (next 
	  stage). Otherwise, you have finished all the spelling.

	Example 1:
	Input: ring = "godding", key = "gd"
	Output: 4
	Explanation: For the first key character 'g', since it is already in place, 
	             we just need 1 step to spell this character. For the second 
	             key character 'd', we need to rotate the ring "godding" 
	             anticlockwise by two steps to make it become "ddinggo". Also, 
	             we need 1 more step for spelling. So the final output is 4.
	
	Example 2:
	Input: ring = "godding", key = "godding"
	Output: 13
	 
	Constraints:
	* 1 <= ring.length, key.length <= 100
	* ring and key consist of only lower case English letters.
	* It is guaranteed that key could always be spelled by rotating ring."""

    def findRotateSteps(self, ring: str, key: str) -> int:
        locs = {}
        for i, ch in enumerate(ring): locs.setdefault(ch, []).append(i)
            
        @cache 
        def fn(i, j): 
            """Return turns to finish key[j:] startin from ith position on ring."""
            if j == len(key): return 0 
            loc = locs[key[j]]
            k = bisect_left(loc, i) % len(loc)
            ans = min(abs(i-loc[k]), len(ring) - abs(i-loc[k])) + fn(loc[k], j+1)
            k = (k-1) % len(loc)
            ans = min(ans, min(abs(i-loc[k]), len(ring) - abs(i-loc[k])) + fn(loc[k], j+1))
            return ans 
        
        return fn(0, 0) + len(key)


    """515. Find Largest Value in Each Tree Row (Medium)
	Given the root of a binary tree, return an array of the largest value in 
	each row of the tree (0-indexed).

	Example 1:
	Input: root = [1,3,2,5,3,null,9]
	Output: [1,3,9]

	Example 2:
	Input: root = [1,2,3]
	Output: [1,3]

	Example 3:
	Input: root = [1]
	Output: [1]

	Example 4:
	Input: root = [1,null,2]
	Output: [1,2]

	Example 5:
	Input: root = []
	Output: []

	Constraints:
	* The number of nodes in the tree will be in the range [0, 104].
	* -231 <= Node.val <= 231 - 1"""

    def largestValues(self, root: TreeNode) -> List[int]:
        if not root: return [] # edge case 
        
        ans = []
        stack = [(root, 0)]
        while stack: 
            node, i = stack.pop()
            if i == len(ans): ans.append(node.val)
            else: ans[i] = max(ans[i], node.val)
            if node.left: stack.append((node.left, i+1))
            if node.right: stack.append((node.right, i+1))
        return ans 


    """516. Longest Palindromic Subsequence (Medium)
	Given a string s, find the longest palindromic subsequence's length in s. 
	You may assume that the maximum length of s is 1000.

	Example 1:
	Input: "bbbab"
	Output: 4
	One possible longest palindromic subsequence is "bbbb".
	 
	Example 2:
	Input: "cbbd"
	Output: 2
	One possible longest palindromic subsequence is "bb".

	Constraints:
	* 1 <= s.length <= 1000
	* s consists only of lowercase English letters."""

    def longestPalindromeSubseq(self, s: str) -> int:
        n = len(s)
        dp = [[0]*n for _ in range(n)]
        for i in reversed(range(n)): 
            dp[i][i] = 1
            for j in range(i+1, n): 
                if s[i] == s[j]: dp[i][j] = 2 + dp[i+1][j-1]
                else: dp[i][j] = max(dp[i+1][j], dp[i][j-1])
        return dp[0][-1]


    """517. Super Washing Machines (Hard)
	You have n super washing machines on a line. Initially, each washing 
	machine has some dresses or is empty. For each move, you could choose any m 
	(1 <= m <= n) washing machines, and pass one dress of each washing machine 
	to one of its adjacent washing machines at the same time. Given an integer 
	array machines representing the number of dresses in each washing machine 
	from left to right on the line, return the minimum number of moves to make 
	all the washing machines have the same number of dresses. If it is not 
	possible to do it, return -1.

	Example 1:
	Input: machines = [1,0,5]
	Output: 3
	Explanation: 1st move:    1     0 <-- 5    =>    1     1     4
	             2nd move:    1 <-- 1 <-- 4    =>    2     1     3
	             3rd move:    2     1 <-- 3    =>    2     2     2
	
	Example 2:
	Input: machines = [0,3,0]
	Output: 2
	Explanation: 1st move:    0 <-- 3     0    =>    1     2     0
	             2nd move:    1     2 --> 0    =>    1     1     1
	
	Example 3:
	Input: machines = [0,2,0]
	Output: -1
	Explanation: It's impossible to make all three washing machines have the 
	             same number of dresses.

	Constraints:
	* n == machines.length
	* 1 <= n <= 10^4
	* 0 <= machines[i] <= 10^5"""

    def findMinMoves(self, machines: List[int]) -> int:
        total = sum(machines)
        if total % len(machines): return -1 # impossible 
        avg = total // len(machines)
        
        ans = prefix = 0
        for i, x in enumerate(machines): 
            ans = max(ans, abs(prefix), x - avg)
            prefix += x - avg
        return ans 


    """518. Coin Change 2 (Medium)
	You are given coins of different denominations and a total amount of money. 
	Write a function to compute the number of combinations that make up that 
	amount. You may assume that you have infinite number of each kind of coin.

	Example 1:
	Input: amount = 5, coins = [1, 2, 5]
	Output: 4
	Explanation: there are four ways to make up the amount:
	5=5
	5=2+2+1
	5=2+1+1+1
	5=1+1+1+1+1

	Example 2:
	Input: amount = 3, coins = [2]
	Output: 0
	Explanation: the amount of 3 cannot be made up just with coins of 2.

	Example 3:
	Input: amount = 10, coins = [10] 
	Output: 1

	Note that you can assume that:
	* 0 <= amount <= 5000
	* 1 <= coin <= 5000
	* the number of coins is less than 500
	* the answer is guaranteed to fit into signed 32-bit integer"""

    def change(self, amount: int, coins: List[int]) -> int:
        dp = [1] + [0]*amount
        for coin in coins: 
            for x in range(amount-coin+1): 
                dp[x+coin] += dp[x]
        return dp[-1]


    """522. Longest Uncommon Subsequence II (Medium)
	Given a list of strings, you need to find the longest uncommon subsequence 
	among them. The longest uncommon subsequence is defined as the longest 
	subsequence of one of these strings and this subsequence should not be any 
	subsequence of the other strings. A subsequence is a sequence that can be 
	derived from one sequence by deleting some characters without changing the 
	order of the remaining elements. Trivially, any string is a subsequence of 
	itself and an empty string is a subsequence of any string. The input will 
	be a list of strings, and the output needs to be the length of the longest 
	uncommon subsequence. If the longest uncommon subsequence doesn't exist, 
	return -1.

	Example 1:
	Input: "aba", "cdc", "eae"
	Output: 3
	
	Note:
	* All the given strings' lengths will not exceed 10.
	* The length of the given list will be in the range of [2, 50]."""

    def findLUSlength(self, strs: List[str]) -> int:
        
        def fn(p, s):
            """Return True if p is a subsequence of s."""
            ss = iter(s)
            return all(ch in ss for ch in p)
        
        ans = -1 
        for i, s in enumerate(strs): 
            for ii in range(len(strs)): 
                if i != ii and len(s) <= len(strs[ii]) and fn(s, strs[ii]): break 
            else: ans = max(ans, len(s))
        return ans


    """523. Continuous Subarray Sum (Medium)
	Given a list of non-negative numbers and a target integer k, write a 
	function to check if the array has a continuous subarray of size at least 2 
	that sums up to a multiple of k, that is, sums up to n*k where n is also an 
	integer.

	Example 1:
	Input: [23, 2, 4, 6, 7],  k=6
	Output: True
	Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.

	Example 2:
	Input: [23, 2, 6, 4, 7],  k=6
	Output: True
	Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.

	Constraints:
	* The length of the array won't exceed 10,000.
	* You may assume the sum of all the numbers is in the range of a signed 32-bit integer."""

    def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        prefix = 0 # prefix modulo 
        seen = {0: -1}
        for i, x in enumerate(nums): 
            prefix += x
            if k: prefix %= k
            if prefix in seen and i - seen[prefix] >= 2: return True 
            seen.setdefault(prefix, i)
        return False 


    """524. Longest Word in Dictionary through Deleting (Medium)
	Given a string and a string dictionary, find the longest string in the 
	dictionary that can be formed by deleting some characters of the given 
	string. If there are more than one possible results, return the longest 
	word with the smallest lexicographical order. If there is no possible 
	result, return the empty string.

	Example 1:
	Input:
	s = "abpcplea", d = ["ale","apple","monkey","plea"]
	Output: "apple"

	Example 2:
	Input:
	s = "abpcplea", d = ["a","b","c"]
	Output: "a"
	
	Note:
	* All the strings in the input will only contain lower-case letters.
	* The size of the dictionary won't exceed 1,000.
	* The length of all the strings in the input won't exceed 1,000."""

    def findLongestWord(self, s: str, d: List[str]) -> str:
        for word in sorted(d, key=lambda x: (-len(x), x)): 
            it = iter(s)
            if all(c in it for c in word): return word
        return ""


    """525. Contiguous Array (Medium)
	Given a binary array, find the maximum length of a contiguous subarray 
	with equal number of 0 and 1.

	Example 1:
	Input: [0,1]
	Output: 2
	Explanation: [0, 1] is the longest contiguous subarray with equal number of 
	             0 and 1.
	
	Example 2:
	Input: [0,1,0]
	Output: 2
	Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal 
	             number of 0 and 1.

	Note: The length of the given binary array will not exceed 50,000."""

    def findMaxLength(self, nums: List[int]) -> int:
        seen = {0:-1}
        ans = prefix = 0
        for i, x in enumerate(nums):
            prefix += x-0.5
            ans = max(ans, i - seen.setdefault(prefix, i))
        return ans 


    """526. Beautiful Arrangement (Medium)
	Suppose you have N integers from 1 to N. We define a beautiful arrangement 
	as an array that is constructed by these N numbers successfully if one of 
	the following is true for the ith position (1 <= i <= N) in this array:
	* The number at the ith position is divisible by i.
	* i is divisible by the number at the ith position.
	Now given N, how many beautiful arrangements can you construct?

	Example 1:
	Input: 2
	Output: 2

	Explanation: 
	The first beautiful arrangement is [1, 2]:
	Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).
	Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).
	The second beautiful arrangement is [2, 1]:
	Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).
	Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.

	Note: N is a positive integer and will not exceed 15."""

    def countArrangement(self, N: int) -> int:
        
        def fn(i): 
            """Return the number of beautiful arrangements of N numbers."""
            if i == 0: return 1 # boundary condition 
            ans = 0
            for k in range(1, N+1): 
                if k not in seen and (k%i == 0 or i%k == 0): 
                    seen.add(k)
                    ans += fn(i-1)
                    seen.remove(k)
            return ans 
        
        seen = set()
        return fn(N)


    """529. Minesweeper (Medium)
	Let's play the minesweeper game (Wikipedia, online game)! You are given a 
	2D char matrix representing the game board. 'M' represents an unrevealed 
	mine, 'E' represents an unrevealed empty square, 'B' represents a revealed 
	blank square that has no adjacent (above, below, left, right, and all 4 
	diagonals) mines, digit ('1' to '8') represents how many mines are adjacent 
	to this revealed square, and finally 'X' represents a revealed mine. Now 
	given the next click position (row and column indices) among all the 
	unrevealed squares ('M' or 'E'), return the board after revealing this 
	position according to the following rules:

	* If a mine ('M') is revealed, then the game is over - change it to 'X'.
	* If an empty square ('E') with no adjacent mines is revealed, then change 
	  it to revealed blank ('B') and all of its adjacent unrevealed squares 
	  should be revealed recursively.
	* If an empty square ('E') with at least one adjacent mine is revealed, 
	  then change it to a digit ('1' to '8') representing the number of 
	  adjacent mines.
	* Return the board when no more squares will be revealed.

	Example 1:
	Input: [['E', 'E', 'E', 'E', 'E'],
  	        ['E', 'E', 'M', 'E', 'E'],
  	        ['E', 'E', 'E', 'E', 'E'],
  	        ['E', 'E', 'E', 'E', 'E']]
	Click : [3,0]
	Output:[['B', '1', 'E', '1', 'B'],
	        ['B', '1', 'M', '1', 'B'],
	        ['B', '1', '1', '1', 'B'],
	        ['B', 'B', 'B', 'B', 'B']]

	Example 2:
	Input: [['B', '1', 'E', '1', 'B'],
	        ['B', '1', 'M', '1', 'B'],
	        ['B', '1', '1', '1', 'B'],
	        ['B', 'B', 'B', 'B', 'B']]
	Click : [1,2]
	Output:[['B', '1', 'E', '1', 'B'],
	        ['B', '1', 'X', '1', 'B'],
	        ['B', '1', '1', '1', 'B'],
	        ['B', 'B', 'B', 'B', 'B']]

	Note:
	* The range of the input matrix's height and width is [1,50].
	* The click position will only be an unrevealed square ('M' or 'E'), which 
	  also means the input board contains at least one clickable square.
	* The input board won't be a stage when game is over (some mines have been 
	  revealed).
	* For simplicity, not mentioned rules should be ignored in this problem. 
	  For example, you don't need to reveal all the unrevealed mines when the 
	  game is over, consider any cases that you will win the game or flag any squares."""

    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:
        m, n = len(board), len(board[0]) # dimensions 
        i, j = click 
        if board[i][j] == "M": board[i][j] = "X"
        elif board[i][j] == "E": 
            stack = [(i, j)]
            while stack: 
                i, j = stack.pop()
                cnt = 0
                for ii, jj in product(range(i-1, i+2), range(j-1, j+2)): 
                    if 0 <= ii < m and 0 <= jj < n and (ii, jj) != (i, j) and board[ii][jj] == "M": cnt += 1
                if cnt: board[i][j] = str(cnt)
                else: 
                    board[i][j] = "B"
                    for ii, jj in product(range(i-1, i+2), range(j-1, j+2)): 
                        if 0 <= ii < m and 0 <= jj < n and (ii, jj) != (i, j) and board[ii][jj] == "E": stack.append((ii, jj))
        return board


    """531. Lonely Pixel I (Medium)
	Given an m x n picture consisting of black 'B' and white 'W' pixels, return 
	the number of black lonely pixels. A black lonely pixel is a character 'B' 
	that located at a specific position where the same row and same column 
	don't have any other black pixels.

	Example 1:
	Input: picture = [["W","W","B"],["W","B","W"],["B","W","W"]]
	Output: 3
	Explanation: All the three 'B's are black lonely pixels.

	Example 2:
	Input: picture = [["B","B","B"],["B","B","W"],["B","B","B"]]
	Output: 0

	Constraints:
	* m == picture.length
	* n == picture[i].length
	* 1 <= m, n <= 500
	* picture[i][j] is 'W' or 'B'."""

    def findLonelyPixel(self, picture: List[List[str]]) -> int:
        m, n = len(picture), len(picture[0])
        rows = [0] * m
        cols = [0] * n
        for i in range(m): 
            for j in range(n): 
                if picture[i][j] == "B": 
                    rows[i] += 1
                    cols[j] += 1
        
        ans = 0 
        for i in range(m): 
            if rows[i] == 1: 
                for j in range(n): 
                    if picture[i][j] == "B" and cols[j] == 1: ans += 1
        return ans  


    """532. K-diff Pairs in an Array (Medium)
	Given an array of integers nums and an integer k, return the number of 
	unique k-diff pairs in the array. A k-diff pair is an integer pair 
	(nums[i], nums[j]), where the following are true:
	* 0 <= i, j < nums.length
	* i != j
	* a <= b
	* b - a == k

	Example 1:
	Input: nums = [3,1,4,1,5], k = 2
	Output: 2
	Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
	Although we have two 1s in the input, we should only return the number of unique pairs.

	Example 2:
	Input: nums = [1,2,3,4,5], k = 1
	Output: 4
	Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).

	Example 3:
	Input: nums = [1,3,1,5,4], k = 0
	Output: 1
	Explanation: There is one 0-diff pair in the array, (1, 1).

	Example 4:
	Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3
	Output: 2

	Example 5:
	Input: nums = [-1,-2,-3], k = 1
	Output: 2

	Constraints:
	* 1 <= nums.length <= 104
	* -107 <= nums[i] <= 107
	* 0 <= k <= 107"""

    def findPairs(self, nums: List[int], k: int) -> int:
        ans, seen = set(), set()
        for x in nums: 
            if x - k in seen: ans.add(x)
            if x + k in seen: ans.add(x+k)
            seen.add(x)
        return len(ans)


    """533. Lonely Pixel II (Medium)
	Given an m x n picture consisting of black 'B' and white 'W' pixels and an 
	integer target, return the number of black lonely pixels. A black lonely 
	pixel is a character 'B' that located at a specific position (r, c) where:
	* Row r and column c both contain exactly target black pixels.
	* For all rows that have a black pixel at column c, they should be exactly 
	  the same as row r.

	Example 1:
	Input: picture = [["W","B","W","B","B","W"],
	                  ["W","B","W","B","B","W"],
	                  ["W","B","W","B","B","W"],
	                  ["W","W","B","W","B","W"]], target = 3
	Output: 6
	Explanation: All the green 'B' are the black pixels we need (all 'B's at 
	             column 1 and 3). Take 'B' at row r = 0 and column c = 1 as an 
	             example:
	             - Rule 1, row r = 0 and column c = 1 both have exactly 
	               target = 3 black pixels. 
	             - Rule 2, the rows have black pixel at column c = 1 are row 0, 
	               row 1 and row 2. They are exactly the same as row r = 0.
	
	Example 2:
	Input: picture = [["W","W","B"],["W","W","B"],["W","W","B"]], target = 1
	Output: 0

	Constraints:
	* m == picture.length
	* n == picture[i].length
	* 1 <= m, n <= 200
	* picture[i][j] is 'W' or 'B'.
	* 1 <= target <= min(m, n)"""

    def findBlackPixel(self, picture: List[List[str]], target: int) -> int:
        m, n = len(picture), len(picture[0])
        freq = defaultdict(int)
        rows = [0] * m
        cols = [0] * n
        for i in range(m): 
            for j in range(n): 
                if picture[i][j] == "B": 
                    rows[i] += 1
                    cols[j] += 1
            freq["".join(picture[i])] += 1
        
        ans = 0
        for i in range(m):
            key = "".join(picture[i])
            if freq[key] == target: 
                for j in range(n): 
                    if picture[i][j] == "B" and rows[i] == cols[j] == target: ans += 1
        return ans 


    """536. Construct Binary Tree from String (Medium)
	You need to construct a binary tree from a string consisting of parenthesis 
	and integers. The whole input represents a binary tree. It contains an 
	integer followed by zero, one or two pairs of parenthesis. The integer 
	represents the root's value and a pair of parenthesis contains a child 
	binary tree with the same structure. You always start to construct the left 
	child node of the parent first if it exists.

	Example 1:
	Input: s = "4(2(3)(1))(6(5))"
	Output: [4,2,6,3,1,5]

	Example 2:
	Input: s = "4(2(3)(1))(6(5)(7))"
	Output: [4,2,6,3,1,5,7]

	Example 3:
	Input: s = "-4(2(3)(1))(6(5)(7))"
	Output: [-4,2,6,3,1,5,7]

	Constraints:
	* 0 <= s.length <= 3 * 10^4
	* s consists of digits, '(', ')', and '-' only."""

    def str2tree(self, s: str) -> Optional[TreeNode]:
        if not s: return None # edge case 
        stack = []
        val = ""
        for ch in s: 
            if ch == "(": 
                if val: 
                    node = TreeNode(int(val))
                    stack.append(node)
                    val = ""
            elif ch == ")": 
                if val: 
                    node = TreeNode(int(val))
                    val = ""
                else: node = stack.pop()
                if stack[-1].left is None: stack[-1].left = node 
                else: stack[-1].right = node
            else: val += ch
        return stack[-1] if stack else TreeNode(int(val))


    """537. Complex Number Multiplication (Medium)
	Given two strings representing two complex numbers. You need to return a 
	string representing their multiplication. Note i2 = -1 according to the 
	definition.

	Example 1:
	Input: "1+1i", "1+1i"
	Output: "0+2i"
	Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert 
	             it to the form of 0+2i.
	
	Example 2:
	Input: "1+-1i", "1+-1i"
	Output: "0+-2i"
	Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert 
	             it to the form of 0+-2i.
	
	Note: The input strings will not have extra blank. The input strings will 
	be given in the form of a+bi, where the integer a and b will both belong to 
	the range of [-100, 100]. And the output should be also in this form."""

    def complexNumberMultiply(self, a: str, b: str) -> str:
        ra, ia = map(int, a[:-1].split("+"))
        rb, ib = map(int, b[:-1].split("+"))
        return f"{ra*rb-ia*ib}+{ra*ib+ia*rb}i"


    """538. Convert BST to Greater Tree (Medium)
	Given the root of a Binary Search Tree (BST), convert it to a Greater Tree 
	such that every key of the original BST is changed to the original key plus 
	sum of all keys greater than the original key in BST. As a reminder, a 
	binary search tree is a tree that satisfies these constraints:
	* The left subtree of a node contains only nodes with keys less than the node's key.
	* The right subtree of a node contains only nodes with keys greater than the node's key.
	* Both the left and right subtrees must also be binary search trees.
	
	Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/

	Example 1:
	Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
	Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

	Example 2:
	Input: root = [0,null,1]
	Output: [1,null,1]

	Example 3:
	Input: root = [1,0,2]
	Output: [3,3,2]

	Example 4:
	Input: root = [3,2,4,1]
	Output: [7,9,4,10]

	Constraints:
	* The number of nodes in the tree is in the range [0, 104].
	* -104 <= Node.val <= 104
	* All the values in the tree are unique.
	* root is guaranteed to be a valid binary search tree."""

    def convertBST(self, root: TreeNode) -> TreeNode:
        
        def fn(node, x): 
            """Inorder traverse the tree and update node's value."""
            if not node: return x
            x = fn(node.right, x) # sum of right subtree
            x += node.val 
            node.val = x
            return fn(node.left, x)
        
        fn(root, 0)
        return root 


    """542. 01 Matrix (Medium)
	Given an m x n binary matrix mat, return the distance of the nearest 0 for 
	each cell. The distance between two adjacent cells is 1.

	Example 1:
	Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
	Output: [[0,0,0],[0,1,0],[0,0,0]]

	Example 2:
	Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
	Output: [[0,0,0],[0,1,0],[1,2,1]]

	Constraints:
	* m == mat.length
	* n == mat[i].length
	* 1 <= m, n <= 10^4
	* 1 <= m * n <= 10^4
	* mat[i][j] is either 0 or 1.
	* There is at least one 0 in mat."""

    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        m, n = len(mat), len(mat[0]) 
        ans = [[inf]*n for _ in range(m)]
        
        for i in range(m): 
            for j in range(n): 
                if not mat[i][j]: ans[i][j] = 0
                else:
                    if i: ans[i][j] = min(ans[i][j], 1 + ans[i-1][j])
                    if j: ans[i][j] = min(ans[i][j], 1 + ans[i][j-1])
        
        for i in reversed(range(m)):
            for j in reversed(range(n)): 
                if mat[i][j]: 
                    if i+1 < m: ans[i][j] = min(ans[i][j], 1 + ans[i+1][j])
                    if j+1 < n: ans[i][j] = min(ans[i][j], 1 + ans[i][j+1])
        return ans


    """543. Diameter of Binary Tree (Easy)
	Given the root of a binary tree, return the length of the diameter of the 
	tree. The diameter of a binary tree is the length of the longest path 
	between any two nodes in a tree. This path may or may not pass through the 
	root. The length of a path between two nodes is represented by the number 
	of edges between them.

	Example 1:
	Input: root = [1,2,3,4,5]
	Output: 3
	Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

	Example 2:
	Input: root = [1,2]
	Output: 1

	Constraints:
	* The number of nodes in the tree is in the range [1, 10^4].
	* -100 <= Node.val <= 100"""

    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        
        def fn(node):
            """Return node's height and sub-tree's diameter."""
            if not node: return (0, 0)
            l1, d1 = fn(node.left)
            l2, d2 = fn(node.right)
            return 1 + max(l1, l2), max(d1, d2, l1+l2)
        
        return fn(root)[1]


    """544. Output Contest Matches (Medium)
	During the NBA playoffs, we always set the rather strong team to play with 
	the rather weak team, like make the rank 1 team play with the rank nth team, 
	which is a good strategy to make the contest more interesting. Given n 
	teams, return their final contest matches in the form of a string. The n 
	teams are labeled from 1 to n, which represents their initial rank (i.e., 
	Rank 1 is the strongest team and Rank n is the weakest team). We will use 
	parentheses '(', and ')' and commas ',' to represent the contest team 
	pairing. We use the parentheses for pairing and the commas for partition. 
	During the pairing process in each round, you always need to follow the 
	strategy of making the rather strong one pair with the rather weak one.

	Example 1:
	Input: n = 4
	Output: "((1,4),(2,3))"
	Explanation: In the first round, we pair the team 1 and 4, the teams 2 and 
	             3 together, as we need to make the strong team and weak team 
	             together. And we got (1, 4),(2, 3). In the second round, the 
	             winners of (1, 4) and (2, 3) need to play again to generate 
	             the final winner, so you need to add the paratheses outside 
	             them. And we got the final answer ((1,4),(2,3)).
	
	Example 2:
	Input: n = 8
	Output: "(((1,8),(4,5)),((2,7),(3,6)))"
	Explanation: First round: (1, 8),(2, 7),(3, 6),(4, 5) 
	             Second round: ((1, 8),(4, 5)),((2, 7),(3, 6))
	             Third round: (((1, 8),(4, 5)),((2, 7),(3, 6)))
	             Since the third round will generate the final winner, you need 
	             to output the answer (((1,8),(4,5)),((2,7),(3,6))).

	Constraints: n == 2^x where x in in the range [1, 12]."""

    def findContestMatch(self, n: int) -> str:
        ans = [str(x) for x in range(1, n+1)]
        while len(ans) > 1: 
            n = len(ans)
            for i in range(n//2): 
                ans[i] = f"({ans[i]},{ans[n-i-1]})"
                ans.pop()
        return ans[0]


    """545. Boundary of Binary Tree (Medium)
	The boundary of a binary tree is the concatenation of the root, the left 
	boundary, the leaves ordered from left-to-right, and the reverse order of 
	the right boundary. The left boundary is the set of nodes defined by the 
	following:
	* The root node's left child is in the left boundary. If the root does not 
	  have a left child, then the left boundary is empty.
	* If a node in the left boundary and has a left child, then the left child 
	  is in the left boundary.
	* If a node is in the left boundary, has no left child, but has a right 
	  child, then the right child is in the left boundary.
	* The leftmost leaf is not in the left boundary.
	The right boundary is similar to the left boundary, except it is the right 
	side of the root's right subtree. Again, the leaf is not part of the right 
	boundary, and the right boundary is empty if the root does not have a right 
	child. The leaves are nodes that do not have any children. For this problem, 
	the root is not a leaf. Given the root of a binary tree, return the values 
	of its boundary.

	Example 1:
	Input: root = [1,null,2,3,4]
	Output: [1,3,4,2]
	Explanation: - The left boundary is empty because the root does not have a 
	               left child.
	             - The right boundary follows the path starting from the root's 
	               right child 2 -> 4. 4 is a leaf, so the right boundary is [2].
	             - The leaves from left to right are [3,4].
	             Concatenating everything results in 
	             [1] + [] + [3,4] + [2] = [1,3,4,2].
	
	Example 2:
	Input: root = [1,2,3,4,5,6,null,null,null,7,8,9,10]
	Output: [1,2,4,7,8,9,10,6,3]
	Explanation: - The left boundary follows the path starting from the root's 
	               left child 2 -> 4. 4 is a leaf, so the left boundary is [2].
	             - The right boundary follows the path starting from the root's 
	               right child 3 -> 6 -> 10. 10 is a leaf, so the right 
	               boundary is [3,6], and in reverse order is [6,3].
	             - The leaves from left to right are [4,7,8,9,10].
	             Concatenating everything results in 
	             [1] + [2] + [4,7,8,9,10] + [6,3] = [1,2,4,7,8,9,10,6,3].

	Constraints:
	* The number of nodes in the tree is in the range [1, 10^4].
	* -1000 <= Node.val <= 1000"""

    def boundaryOfBinaryTree(self, root: Optional[TreeNode]) -> List[int]:
        stack = []
        if root.right: stack.append((root.right, 1))
        if root.left: stack.append((root.left, -1))
        left, right, leaves = [], [], []
        while stack: 
            node, v = stack.pop()
            if node.left is node.right: leaves.append(node.val)
            elif v == -1: 
                left.append(node.val)
                if node.right: 
                    if node.left: stack.append((node.right, 0))
                    else: stack.append((node.right, -1))
                if node.left: stack.append((node.left, -1))
            elif v == 1: 
                right.append(node.val)
                if node.right: stack.append((node.right, 1))
                if node.left: 
                    if node.right: stack.append((node.left, 0))
                    else: stack.append((node.left, 1))
            else: 
                if node.right: stack.append((node.right, 0))
                if node.left: stack.append((node.left, 0))
        return [root.val] + left + leaves + right[::-1]


    """546. Remove Boxes (Hard)
	You are given several boxes with different colors represented by different 
	positive numbers. You may experience several rounds to remove boxes until 
	there is no box left. Each time you can choose some continuous boxes with 
	the same color (i.e., composed of k boxes, k >= 1), remove them and get 
	k * k points. Return the maximum points you can get.

	Example 1:
	Input: boxes = [1,3,2,2,2,3,4,3,1]
	Output: 23
	Explanation: [1, 3, 2, 2, 2, 3, 4, 3, 1] 
	             ----> [1, 3, 3, 4, 3, 1] (3*3=9 points) 
	             ----> [1, 3, 3, 3, 1] (1*1=1 points) 
	             ----> [1, 1] (3*3=9 points) 
	             ----> [] (2*2=4 points)
	
	Example 2:
	Input: boxes = [1,1,1]
	Output: 9

	Example 3:
	Input: boxes = [1]
	Output: 1

	Constraints:
	* 1 <= boxes.length <= 100
	* 1 <= boxes[i] <= 100"""

    def removeBoxes(self, boxes: List[int]) -> int:
        
        @cache
        def fn(lo, hi, k): 
            """Return max score of removing boxes from lo to hi with k to the left."""
            if lo == hi: return 0 
            while lo+1 < hi and boxes[lo] == boxes[lo+1]: lo, k = lo+1, k+1
            ans = (k+1)*(k+1) + fn(lo+1, hi, 0)
            for mid in range(lo+2, hi): 
                if boxes[lo] == boxes[mid]: 
                    ans = max(ans, fn(lo+1, mid, 0) + fn(mid, hi, k+1))
            return ans 
                
        return fn(0, len(boxes), 0)


    """547. Number of Provinces (Medium)
	There are n cities. Some of them are connected, while some are not. If city 
	a is connected directly with city b, and city b is connected directly with 
	city c, then city a is connected indirectly with city c. A province is a 
	group of directly or indirectly connected cities and no other cities 
	outside of the group. You are given an n x n matrix isConnected where 
	isConnected[i][j] = 1 if the ith city and the jth city are directly 
	connected, and isConnected[i][j] = 0 otherwise. Return the total number of 
	provinces.

	Example 1:
	Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
	Output: 2

	Example 2:
	Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
	Output: 3

	Constraints:
	* 1 <= n <= 200
	* n == isConnected.length
	* n == isConnected[i].length
	* isConnected[i][j] is 1 or 0.
	* isConnected[i][i] == 1
	* isConnected[i][j] == isConnected[j][i]"""

    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        ans = 0
        visited = [False]*n
        for x in range(n): 
            if not visited[x]:
                ans += 1
                stack = [x]
                visited[x] = True
                while stack: 
                    i = stack.pop()
                    for ii in range(n): 
                        if isConnected[i][ii] and not visited[ii]: 
                            stack.append(ii)
                            visited[ii] = True
        return ans


    """549. Binary Tree Longest Consecutive Sequence II (Medium)
	Given the root of a binary tree, return the length of the longest 
	consecutive path in the tree. A consecutive path is a path where the values 
	of the consecutive nodes in the path differ by one. This path can be either 
	increasing or decreasing. For example, [1,2,3,4] and [4,3,2,1] are both 
	considered valid, but the path [1,2,4,3] is not valid. On the other hand, 
	the path can be in the child-Parent-child order, where not necessarily be 
	parent-child order.

	Example 1:
	Input: root = [1,2,3]
	Output: 2
	Explanation: The longest consecutive path is [1, 2] or [2, 1].

	Example 2:
	Input: root = [2,1,3]
	Output: 3
	Explanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].

	Constraints:
	* The number of nodes in the tree is in the range [1, 3 * 10^4].
	* -3 * 10^4 <= Node.val <= 3 * 10^4"""

    def longestConsecutive(self, root: Optional[TreeNode]) -> int:
        ans = 0 
        mp, stack = {None: (0, 0)}, []
        node, prev = root, None
        while node or stack: 
            if node: 
                stack.append(node)
                node = node.left
            else: 
                node = stack[-1]
                if node.right and node.right != prev: node = node.right
                else: 
                    mp[node] = [1, 1]
                    if node.left:
                        if node.left.val + 1 == node.val: mp[node][0] = 1 + mp[node.left][0]
                        if node.left.val - 1 == node.val: mp[node][1] = 1 + mp[node.left][1]
                    if node.right: 
                        if node.right.val + 1 == node.val: mp[node][0] = max(mp[node][0], 1 + mp[node.right][0])
                        if node.right.val - 1 == node.val: mp[node][1] = max(mp[node][1], 1 + mp[node.right][1])
                    ans = max(ans, sum(mp[node]) - 1)
                    stack.pop()
                    prev = node
                    node = None
        return ans 


    """552. Student Attendance Record II (Hard)
	An attendance record for a student can be represented as a string where 
	each character signifies whether the student was absent, late, or present 
	on that day. The record only contains the following three characters:
	* 'A': Absent.
	* 'L': Late.
	* 'P': Present.
	Any student is eligible for an attendance award if they meet both of the 
	following criteria:
	* The student was absent ('A') for strictly fewer than 2 days total.
	* The student was never late ('L') for 3 or more consecutive days.
	Given an integer n, return the number of possible attendance records of 
	length n that make a student eligible for an attendance award. The answer 
	may be very large, so return it modulo 10^9 + 7.

	Example 1:
	Input: n = 2
	Output: 8
	Explanation: There are 8 records with length 2 that are eligible for an 
	             award: "PP", "AP", "PA", "LP", "PL", "AL", "LA", "LL". Only 
	             "AA" is not eligible because there are 2 absences (there need 
	             to be fewer than 2).
	
	Example 2:
	Input: n = 1
	Output: 3

	Example 3:
	Input: n = 10101
	Output: 183236316

	Constraints: 1 <= n <= 10^5"""

    def checkRecord(self, n: int) -> int:
        dp = [1, 2, 4]
        for i in range(3, n+1): 
            dp.append((dp[i-3] + dp[i-2] + dp[i-1]) % 1_000_000_007)
        ans = dp[n] 
        for i in range(n): 
            ans = (ans + dp[i] * dp[n-1-i]) % 1_000_000_007
        return ans


    """553. Optimal Division (Medium)
	You are given an integer array nums. The adjacent integers in nums will 
	perform the float division. For example, for nums = [2,3,4], we will 
	evaluate the expression "2/3/4". However, you can add any number of 
	parenthesis at any position to change the priority of operations. You want 
	to add these parentheses such the value of the expression after the 
	evaluation is maximum. Return the corresponding expression that has the 
	maximum value in string format. Note: your expression should not contain 
	redundant parenthesis.

	Example 1:
	Input: nums = [1000,100,10,2]
	Output: "1000/(100/10/2)"
	Explanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200. However, the bold 
	             parenthesis in "1000/((100/10)/2)" are redundant, since they 
	             don't influence the operation priority. So you should return 
	             "1000/(100/10/2)".
	             Other cases:
	             1000/(100/10)/2 = 50
	             1000/(100/(10/2)) = 50
	             1000/100/10/2 = 0.5
	             1000/100/(10/2) = 2
	
	Example 2:
	Input: nums = [2,3,4]
	Output: "2/(3/4)"

	Example 3:
	Input: nums = [2]
	Output: "2"

	Constraints:
	* 1 <= nums.length <= 10
	* 2 <= nums[i] <= 1000
	* There is only one optimal division for the given iput."""

    def optimalDivision(self, nums: List[int]) -> str:
        if len(nums) <= 2: return "/".join(map(str, nums))
        return f'{nums[0]}/({"/".join(map(str, nums[1:]))})'


    """555. Split Concatenated Strings (Medium)
	You are given an array of strings strs. You could concatenate these strings 
	together into a loop, where for each string, you could choose to reverse it 
	or not. Among all the possible loops, return the lexicographically largest 
	string after cutting the loop, which will make the looped string into a 
	regular one. Specifically, to find the lexicographically largest string, 
	you need to experience two phases:
	* Concatenate all the strings into a loop, where you can reverse some 
	  strings or not and connect them in the same order as given.
	* Cut and make one breakpoint in any place of the loop, which will make the 
	  looped string into a regular one starting from the character at the 
	  cutpoint.
	And your job is to find the lexicographically largest one among all the 
	possible regular strings.

	Example 1:
	Input: strs = ["abc","xyz"]
	Output: "zyxcba"
	Explanation: You can get the looped string "-abcxyz-", "-abczyx-", 
	             "-cbaxyz-", "-cbazyx-", where '-' represents the looped status. 
	             The answer string came from the fourth looped one, where you 
	             could cut from the middle character 'a' and get "zyxcba".
	
	Example 2:
	Input: strs = ["abc"]
	Output: "cba"

	Constraints:
	* 1 <= strs.length <= 1000
	* 1 <= strs[i].length <= 1000
	* 1 <= sum(strs[i].length) <= 1000
	* strs[i] consists of lowercase English letters."""

    def splitLoopedString(self, strs: List[str]) -> str:
        strs = [max(x, x[::-1]) for x in strs]
        
        ans = ""
        for i in range(len(strs)): 
            rev = strs[i][::-1]
            rest = "".join(strs[i+1:] + strs[:i])
            for k in range(len(strs[i])): 
                ans = max(ans, strs[i][k:] + rest + strs[i][:k])
                ans = max(ans, rev[k:] + rest + rev[:k])
        return ans 


    """557. Reverse Words in a String III (Easy)
	Given a string s, reverse the order of characters in each word within a 
	sentence while still preserving whitespace and initial word order.

	Example 1:
	Input: s = "Let's take LeetCode contest"
	Output: "s'teL ekat edoCteeL tsetnoc"

	Example 2:
	Input: s = "God Ding"
	Output: "doG gniD"

	Constraints:
	* 1 <= s.length <= 5 * 10^4
	* s contains printable ASCII characters.
	* s does not contain any leading or trailing spaces.
	* There is at least one word in s.
	* All the words in s are separated by a single space."""

    def reverseWords(self, s: str) -> str:
        return " ".join(w[::-1] for w in s.split())


    """560. Subarray Sum Equals K (Medium)
	Given an array of integers nums and an integer k, return the total number 
	of continuous subarrays whose sum equals to k.

	Example 1:
	Input: nums = [1,1,1], k = 2
	Output: 2

	Example 2:
	Input: nums = [1,2,3], k = 3
	Output: 2

	Constraints:
	* 1 <= nums.length <= 2 * 10^4
	* -1000 <= nums[i] <= 1000
	* -10^7 <= k <= 10^7"""

    def subarraySum(self, nums: List[int], k: int) -> int:
        ans = prefix = 0
        freq = defaultdict(int, {0:1})
        for x in nums: 
            prefix += x
            ans += freq[prefix - k]
            freq[prefix] += 1
        return ans 


    """562. Longest Line of Consecutive One in Matrix (Medium)
	Given a 01 matrix M, find the longest line of consecutive one in the matrix. 
	The line could be horizontal, vertical, diagonal or anti-diagonal.
	
	Example:
	Input: [[0,1,1,0],
	        [0,1,1,0],
	        [0,0,0,1]]
	Output: 3
	Hint: The number of elements in the given matrix will not exceed 10,000."""

    def longestLine(self, M: List[List[int]]) -> int:
        ans = 0 
        if M: 
            m, n = len(M), len(M[0]) # dimensions 
            rows, cols = [0]*m, [0]*n
            diag, anti = [0]*(m+n-1), [0]*(m+n-1)
            for i in range(m): 
                for j in range(n): 
                    if M[i][j]: 
                        rows[i] += 1
                        cols[j] += 1
                        diag[j-i+m-1] += 1
                        anti[i+j] += 1
                    else: rows[i] = cols[j] = diag[j-i+m-1] = anti[i+j] = 0
                    ans = max(ans, rows[i], cols[j], diag[j-i+m-1], anti[i+j])
        return ans 


    """565. Array Nesting (Medium)
	A zero-indexed array A of length N contains all integers from 0 to N-1. 
	Find and return the longest length of set S, where 
	S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below. 
	Suppose the first element in S starts with the selection of element A[i] of 
	index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]… By 
	that analogy, we stop adding right before a duplicate element occurs in S.

	Example 1:
	Input: A = [5,4,0,3,1,6,2]
	Output: 4
	Explanation: A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.
	One of the longest S[K]: S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}

	Note:
	* N is an integer within the range [1, 20,000].
	* The elements of A are all distinct.
	* Each element of A is an integer within the range [0, N-1]."""

    def arrayNesting(self, nums: List[int]) -> int:
        ans = 0 
        for i in range(len(nums)): 
            cnt = 0
            while nums[i] != -1: 
                cnt += 1
                nums[i], i = -1, nums[i]
            ans = max(ans, cnt)
        return ans 


    """566. Reshape the Matrix (Easy)
	In MATLAB, there is a handy function called reshape which can reshape an 
	m x n matrix into a new one with a different size r x c keeping its 
	original data. You are given an m x n matrix mat and two integers r and c 
	representing the row number and column number of the wanted reshaped matrix.
	The reshaped matrix should be filled with all the elements of the original 
	matrix in the same row-traversing order as they were. If the reshape 
	operation with given parameters is possible and legal, output the new 
	reshaped matrix; Otherwise, output the original matrix.

	Example 1:
	Input: mat = [[1,2],[3,4]], r = 1, c = 4
	Output: [[1,2,3,4]]

	Example 2:
	Input: mat = [[1,2],[3,4]], r = 2, c = 4
	Output: [[1,2],[3,4]]

	Constraints:
	* m == mat.length
	* n == mat[i].length
	* 1 <= m, n <= 100
	* -1000 <= mat[i][j] <= 1000
	* 1 <= r, c <= 300"""

    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:
        m, n = len(mat), len(mat[0])
        if m * n != r * c: return mat 
        it = (x for row in mat for x in row)
        return [[next(it) for _ in range(c)] for i in range(r)]


    """567. Permutation in String (Medium)
	Given two strings s1 and s2, return true if s2 contains a permutation of s1, 
	or false otherwise. In other words, return true if one of s1's permutations 
	is the substring of s2.

	Example 1:
	Input: s1 = "ab", s2 = "eidbaooo"
	Output: true
	Explanation: s2 contains one permutation of s1 ("ba").

	Example 2:
	Input: s1 = "ab", s2 = "eidboaoo"
	Output: false

	Constraints:
	* 1 <= s1.length, s2.length <= 10^4
	* s1 and s2 consist of lowercase English letters."""

    def checkInclusion(self, s1: str, s2: str) -> bool:
        freq = Counter(s1)
        for i, x in enumerate(s2): 
            freq[x] -= 1
            if i >= len(s1): freq[s2[i-len(s1)]] += 1
            if all(x == 0 for x in freq.values()): return True 
        return False


    """572. Subtree of Another Tree (Easy)
	Given the roots of two binary trees root and subRoot, return true if there 
	is a subtree of root with the same structure and node values of subRoot and 
	false otherwise. A subtree of a binary tree tree is a tree that consists of 
	a node in tree and all of this node's descendants. The tree tree could also 
	be considered as a subtree of itself.

	Example 1:
	Input: root = [3,4,5,1,2], subRoot = [4,1,2]
	Output: true

	Example 2:
	Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
	Output: false

	Constraints:
	* The number of nodes in the root tree is in the range [1, 2000].
	* The number of nodes in the subRoot tree is in the range [1, 1000].
	* -10^4 <= root.val <= 10^4
	* -10^4 <= subRoot.val <= 10^4"""

    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        ans = False 
        target = ""
        
        def fn(node):
            """Return hash of sub-tree rooted at node."""
            nonlocal ans
            if not node: return "$"
            left, right = fn(node.left), fn(node.right)
            sha = sha256()
            sha.update((left + str(node.val) + right).encode())
            if sha.hexdigest() == target: ans = True
            return sha.hexdigest()
        
        target = fn(subRoot)
        fn(root)
        return ans 


    """573. Squirrel Simulation (Medium)
	There's a tree, a squirrel, and several nuts. Positions are represented by 
	the cells in a 2D grid. Your goal is to find the minimal distance for the 
	squirrel to collect all the nuts and put them under the tree one by one. 
	The squirrel can only take at most one nut at one time and can move in four 
	directions - up, down, left and right, to the adjacent cell. The distance 
	is represented by the number of moves.
	
	Example 1:
	Input: 
	Height : 5
	Width : 7
	Tree position : [2,2]
	Squirrel : [4,4]
	Nuts : [[3,0], [2,5]]
	Output: 12
	Note:
	* All given positions won't overlap.
	* The squirrel can take at most one nut at one time.
	* The given positions of nuts have no order.
	* Height and width are positive integers. 3 <= height * width <= 10,000.
	* The given positions contain at least one nut, only one tree and one squirrel."""

    def minDistance(self, height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:
        ans, mn = 0, inf
        for x, y in nuts: 
            ans += 2*(abs(tree[0]-x) + abs(tree[1]-y))
            mn = min(mn, abs(squirrel[0]-x) + abs(squirrel[1]-y) - abs(tree[0]-x) - abs(tree[1]-y))
        return ans + mn


    """575. Distribute Candies (Easy)
	Alice has n candies, where the ith candy is of type candyType[i]. Alice 
	noticed that she started to gain weight, so she visited a doctor. The 
	doctor advised Alice to only eat n / 2 of the candies she has (n is always 
	even). Alice likes her candies very much, and she wants to eat the maximum 
	number of different types of candies while still following the doctor's 
	advice. Given the integer array candyType of length n, return the maximum 
	number of different types of candies she can eat if she only eats n / 2 of 
	them.

	Example 1:
	Input: candyType = [1,1,2,2,3,3]
	Output: 3
	Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 
	             types, she can eat one of each type.

	Example 2:
	Input: candyType = [1,1,2,3]
	Output: 2
	Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types 
	             [1,2], [1,3], or [2,3], she still can only eat 2 different 
	             types.
	
	Example 3:
	Input: candyType = [6,6,6,6]
	Output: 1
	Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 
	             2 candies, she only has 1 type.

	Constraints:
	* n == candyType.length
	* 2 <= n <= 10^4
	* n is even.
	* -10^5 <= candyType[i] <= 10^5"""

    def distributeCandies(self, candyType: List[int]) -> int:
        return min(len(candyType)//2, len(set(candyType)))


    """576. Out of Boundary Paths (Medium)
	There is an m x n grid with a ball. The ball is initially at the position 
	[startRow, startColumn]. You are allowed to move the ball to one of the 
	four adjacent four cells in the grid (possibly out of the grid crossing the 
	grid boundary). You can apply at most maxMove moves to the ball. Given the 
	five integers m, n, maxMove, startRow, startColumn, return the number of 
	paths to move the ball out of the grid boundary. Since the answer can be 
	very large, return it modulo 10^9 + 7.

	Example 1:
	Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0
	Output: 6

	Example 2:
	Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1
	Output: 12

	Constraints:
	* 1 <= m, n <= 50
	* 0 <= maxMove <= 50
	* 0 <= startRow <= m
	* 0 <= startColumn <= n"""

    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:
        
        @cache
        def fn(i, j, mv): 
            """Return out of boundary paths."""
            if not (0 <= i < m and 0 <= j < n): return 1 
            if mv == 0: return 0
            return (fn(i-1, j, mv-1) + fn(i, j-1, mv-1) + fn(i, j+1, mv-1) + fn(i+1, j, mv-1)) % 1_000_000_007
        
        return fn(startRow, startColumn, maxMove)


    """582. Kill Process (Medium)
	Given n processes, each process has a unique PID (process id) and its PPID 
	(parent process id). Each process only has one parent process, but may have 
	one or more children processes. This is just like a tree structure. Only 
	one process has PPID that is 0, which means this process has no parent 
	process. All the PIDs will be distinct positive integers. We use two list 
	of integers to represent a list of processes, where the first list contains 
	PID for each process and the second list contains the corresponding PPID. 
	Now given the two lists, and a PID representing a process you want to kill, 
	return a list of PIDs of processes that will be killed in the end. You 
	should assume that when a process is killed, all its children processes 
	will be killed. No order is required for the final answer.

	Example 1:
	Input: pid =  [1, 3, 10, 5]
	       ppid = [3, 0, 5, 3]
	       kill = 5
	Output: [5,10]
	Explanation: 
	           3
	         /   \
	        1     5
	             /
	            10
	Kill 5 will also kill 10.
	Note: 
	* The given kill id is guaranteed to be one of the given PIDs.
	* n >= 1."""

    def killProcess(self, pid: List[int], ppid: List[int], kill: int) -> List[int]:
        tree = {}
        for x, px in zip(pid, ppid): 
            tree.setdefault(px, []).append(x)

        ans, stack = [], [kill]
        while stack: 
            x = stack.pop()
            ans.append(x)
            stack.extend(tree.get(x, []))
        return ans 


    """583. Delete Operation for Two Strings (Medium)
	Given two strings word1 and word2, return the minimum number of steps 
	required to make word1 and word2 the same. In one step, you can delete 
	exactly one character in either string.

	Example 1:
	Input: word1 = "sea", word2 = "eat"
	Output: 2
	Explanation: You need one step to make "sea" to "ea" and another step to 
	             make "eat" to "ea".

	Example 2:
	Input: word1 = "leetcode", word2 = "etco"
	Output: 4

	Constraints:
	* 1 <= word1.length, word2.length <= 500
	* word1 and word2 consist of only lowercase English letters."""

    def minDistance(self, word1: str, word2: str) -> int:
        m, n = len(word1), len(word2)
        dp = [[0]*(n+1) for _ in range(m+1)]
        for i in range(m): dp[i][n] = m-i
        for j in range(n): dp[m][j] = n-j
        for i in range(m-1, -1, -1): 
            for j in range(n-1, -1, -1): 
                if word1[i] == word2[j]: dp[i][j] = dp[i+1][j+1]
                else: dp[i][j] = 1 + min(dp[i+1][j], dp[i][j+1])
        return dp[0][0]


    """587. Erect the Fence (Hard)
	You are given an array trees where trees[i] = [xi, yi] represents the 
	location of a tree in the garden. You are asked to fence the entire garden 
	using the minimum length of rope as it is expensive. The garden is well 
	fenced only if all the trees are enclosed. Return the coordinates of trees 
	that are exactly located on the fence perimeter.

	Example 1:
	Input: points = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
	Output: [[1,1],[2,0],[3,3],[2,4],[4,2]]

	Example 2:
	Input: points = [[1,2],[2,2],[4,2]]
	Output: [[4,2],[2,2],[1,2]]

	Constraints:
	* 1 <= points.length <= 3000
	* points[i].length == 2
	* 0 <= xi, yi <= 100
	* All the given points are unique."""

    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:
        # convex hull via Graham scan 
        xx, yy = min(trees, key=lambda x: (x[1], x[0])) # reference point
        
        mp = {}
        for x, y in trees: mp.setdefault(atan2(y-yy, x-xx), []).append([x, y])
        
        trees = []
        m = max(mp)
        for k in sorted(mp): 
            mp[k].sort(key=lambda p: abs(p[0]-xx)+abs(p[1]-yy))
            if k == m and trees: mp[k].reverse()
            trees.extend(mp[k])
                
        stack = []
        for x, y in trees: 
            while len(stack) >= 2: 
                x0, y0 = stack[-1]
                x1, y1 = stack[-2]
                if (x0-x1)*(y-y0) - (x-x0)*(y0-y1) >= 0: break
                else: stack.pop()
            stack.append([x, y])
        return stack


    """594. Longest Harmonious Subsequence (Easy)
	We define a harmonious array as an array where the difference between its 
	maximum value and its minimum value is exactly 1. Given an integer array 
	nums, return the length of its longest harmonious subsequence among all its 
	possible subsequences. A subsequence of array is a sequence that can be 
	derived from the array by deleting some or no elements without changing the 
	order of the remaining elements.

	Example 1:
	Input: nums = [1,3,2,2,5,2,3,7]
	Output: 5
	Explanation: The longest harmonious subsequence is [3,2,2,2,3].

	Example 2:
	Input: nums = [1,2,3,4]
	Output: 2

	Example 3:
	Input: nums = [1,1,1,1]
	Output: 0

	Constraints:
	* 1 <= nums.length <= 2 * 104
	* -109 <= nums[i] <= 109"""

    def findLHS(self, nums: List[int]) -> int:
        freq = {}
        for x in nums: freq[x] = 1 + freq.get(x, 0)
        
        ans = 0
        for x in nums: 
            if x + 1 in freq: ans = max(ans, freq[x] + freq[x+1])
        return ans 


    """598. Range Addition II (Easy)
	You are given an m x n matrix M initialized with all 0's and an array of 
	operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented 
	by one for all 0 <= x < ai and 0 <= y < bi. Count and return the number of 
	maximum integers in the matrix after performing all the operations.

	Example 1:
	Input: m = 3, n = 3, ops = [[2,2],[3,3]]
	Output: 4
	Explanation: The maximum integer in M is 2, and there are four of it in M. 
	             So return 4.
	
	Example 2:
	Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],
	                            [3,3],[2,2],[3,3],[3,3],[3,3]]
	Output: 4
	
	Example 3:
	Input: m = 3, n = 3, ops = []
	Output: 9

	Constraints:
	* 1 <= m, n <= 4 * 10^4
	* 1 <= ops.length <= 10^4
	* ops[i].length == 2
	* 1 <= ai <= m
	* 1 <= bi <= n"""

    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:
        for x, y in ops: 
            m = min(m, x)
            n = min(n, y)
        return m * n


    """600. Non-negative Integers without Consecutive Ones (Hard)
	Given a positive integer n, return the number of the integers in the range 
	[0, n] whose binary representations do not contain consecutive ones.

	Example 1:
	Input: n = 5
	Output: 5
	Explanation: Here are the non-negative integers <= 5 with their 
	             corresponding binary representations:
	             0 : 0
	             1 : 1
	             2 : 10
	             3 : 11
	             4 : 100
	             5 : 101
	             Among them, only integer 3 disobeys the rule (two consecutive 
	             ones) and the other 5 satisfy the rule. 
	
	Example 2:
	Input: n = 1
	Output: 2

	Example 3:
	Input: n = 2
	Output: 3

	Constraints: 1 <= n <= 10^9"""

    def findIntegers(self, n: int) -> int:
        fib = [1, 2]
        for _ in range(30): fib.append(fib[-2] + fib[-1])
        
        ans = prev = 0
        for i in range(31, -1, -1): 
            if n & (1<<i): 
                ans += fib[i]
                if prev: return ans
                else: prev = 1
            else: prev = 0
        return ans + 1


    """605. Can Place Flowers (Easy)
	You have a long flowerbed in which some of the plots are planted, and some 
	are not. However, flowers cannot be planted in adjacent plots. Given an 
	integer array flowerbed containing 0's and 1's, where 0 means empty and 1 
	means not empty, and an integer n, return if n new flowers can be planted 
	in the flowerbed without violating the no-adjacent-flowers rule.

	Example 1:
	Input: flowerbed = [1,0,0,0,1], n = 1
	Output: true

	Example 2:
	Input: flowerbed = [1,0,0,0,1], n = 2
	Output: false

	Constraints:
	* 1 <= flowerbed.length <= 2 * 10^4
	* flowerbed[i] is 0 or 1.
	* There are no two adjacent flowers in flowerbed.
	* 0 <= n <= flowerbed.length"""

    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        for i in range(len(flowerbed)):
            if (i == 0 or flowerbed[i-1] == 0) and flowerbed[i] == 0 and (i+1 == len(flowerbed) or flowerbed[i+1] == 0): 
                flowerbed[i] = 1
                n -= 1
        return n <= 0


    """611. Valid Triangle Number (Medium)
	Given an integer array nums, return the number of triplets chosen from the 
	array that can make triangles if we take them as side lengths of a triangle.

	Example 1:
	Input: nums = [2,2,3,4]
	Output: 3
	Explanation: Valid combinations are: 
	             2,3,4 (using the first 2)
	             2,3,4 (using the second 2)
	             2,2,3
	
	Example 2:
	Input: nums = [4,2,3,4]
	Output: 4

	Constraints:
	* 1 <= nums.length <= 1000
	* 0 <= nums[i] <= 1000"""

    def triangleNumber(self, nums: List[int]) -> int:
        nums.sort()
        ans = 0
        for i in range(len(nums)): 
            lo, hi = 0, i-1
            while lo < hi: 
                if nums[lo] + nums[hi] > nums[i]:
                    ans += hi - lo 
                    hi -= 1
                else: lo += 1
        return ans 


    """625. Minimum Factorization (Medium)
	Given a positive integer num, return the smallest positive integer x whose 
	multiplication of each digit equals num. If there is no answer or the 
	answer is not fit in 32-bit signed integer, return 0.

	Example 1:
	Input: num = 48
	Output: 68

	Example 2:
	Input: num = 15
	Output: 35

	Constraints: 1 <= num <= 2^31 - 1"""

    def smallestFactorization(self, num: int) -> int:
        if num == 1: return 1 # edge case 
        ans, mult = 0, 1
        for x in range(9, 1, -1): 
            while num % x == 0: 
                num //= x
                ans = ans + mult * x
                mult *= 10
        return ans if num == 1 and ans < (1 << 31) else 0


    """629. K Inverse Pairs Array (Hard)
	For an integer array nums, an inverse pair is a pair of integers [i, j] 
	where 0 <= i < j < nums.length and nums[i] > nums[j]. Given two integers n 
	and k, return the number of different arrays consist of numbers from 1 to n 
	such that there are exactly k inverse pairs. Since the answer can be huge, 
	return it modulo 10^9 + 7.

	Example 1:
	Input: n = 3, k = 0
	Output: 1
	Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 
	             has exactly 0 inverse pairs.
	
	Example 2:
	Input: n = 3, k = 1
	Output: 2
	Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.

	Constraints:
	* 1 <= n <= 1000
	* 0 <= k <= 1000"""

    def kInversePairs(self, n: int, k: int) -> int:
        
        @cache
        def fn(n, k):
            """Return number of ways for n numbers with k inverse pairs."""
            if k == 0: return 1 
            if n <= 0 or k < 0: return 0 
            return fn(n-1, k) + fn(n, k-1) - fn(n-1, k-n)
        
        return fn(n, k) % 1_000_000_007


    """630. Course Schedule III (Hard)
	There are n different online courses numbered from 1 to n. You are given an 
	array courses where courses[i] = [durationi, lastDayi] indicate that the ith 
	course should be taken continuously for durationi days and must be finished 
	before or on lastDayi. You will start on the 1st day and you cannot take two 
	or more courses simultaneously. Return the maximum number of courses that 
	you can take.

	Example 1:
	Input: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]
	Output: 3
	Explanation: There are totally 4 courses, but you can take 3 courses at most:
	             - First, take the 1st course, it costs 100 days so you will 
	               finish it on the 100th day, and ready to take the next course 
	               on the 101st day.
	             - Second, take the 3rd course, it costs 1000 days so you will 
	               finish it on the 1100th day, and ready to take the next 
	               course on the 1101st day. 
	             - Third, take the 2nd course, it costs 200 days so you will 
	               finish it on the 1300th day. 
	             - The 4th course cannot be taken now, since you will finish it 
	               on the 3300th day, which exceeds the closed date.
	
	Example 2:
	Input: courses = [[1,2]]
	Output: 1

	Example 3:
	Input: courses = [[3,2],[4,3]]
	Output: 0

	Constraints:
	* 1 <= courses.length <= 10^4
	* 1 <= durationi, lastDayi <= 10^4"""

    def scheduleCourse(self, courses: List[List[int]]) -> int:
        prefix = 0 
        pq = [] # max-heap 
        for x, y in sorted(courses, key=lambda x: x[1]): 
            prefix += x
            heappush(pq, -x)
            while prefix > y: prefix += heappop(pq)
        return len(pq)


    """632. Smallest Range Covering Elements from K Lists (Hard)
	You have k lists of sorted integers in non-decreasing order. Find the 
	smallest range that includes at least one number from each of the k lists.
	We define the range [a, b] is smaller than range [c, d] if b - a < d - c or 
	a < c if b - a == d - c.

	Example 1:
	Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
	Output: [20,24]
	Explanation: List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
	             List 2: [0, 9, 12, 20], 20 is in range [20,24].
	             List 3: [5, 18, 22, 30], 22 is in range [20,24].

	Example 2:
	Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
	Output: [1,1]
	
	Example 3:
	Input: nums = [[10,10],[11,11]]
	Output: [10,11]

	Example 4:
	Input: nums = [[10],[11]]
	Output: [10,11]

	Example 5:
	Input: nums = [[1],[2],[3],[4],[5],[6],[7]]
	Output: [1,7]

	Constraints:
	* nums.length == k
	* 1 <= k <= 3500
	* 1 <= nums[i].length <= 50
	* -10^5 <= nums[i][j] <= 10^5
	* nums[i] is sorted in non-decreasing order."""

    def smallestRange(self, nums: List[List[int]]) -> List[int]:
        hi = -inf
        pq = []
        for i, num in enumerate(nums): 
            heappush(pq, (num[0], i, 0))
            hi = max(hi, num[0])
        
        ans = [-inf, inf]
        while pq: 
            ans = min(ans, [pq[0][0], hi], key=lambda x: (x[1]-x[0], x[0]))
            _, i, j = heappop(pq)
            if j+1 == len(nums[i]): break 
            hi = max(hi, nums[i][j+1])
            heappush(pq, (nums[i][j+1], i, j+1))
        return ans 


    """633. Sum of Square Numbers (Medium)
	Given a non-negative integer c, decide whether there're two integers a and 
	b such that a^2 + b^2 = c.

	Example 1:
	Input: c = 5
	Output: true
	Explanation: 1 * 1 + 2 * 2 = 5

	Example 2:
	Input: c = 3
	Output: false

	Example 3:
	Input: c = 4
	Output: true

	Example 4:
	Input: c = 2
	Output: true

	Example 5:
	Input: c = 1
	Output: true

	Constraints: 0 <= c <= 2^31 - 1"""

    def judgeSquareSum(self, c: int) -> bool:
        # Fermat theorem on sum of two squares
        x = 2
        while x*x <= c: 
            if c % x == 0: 
                mult = 0
                while c % x == 0: 
                    mult += 1
                    c //= x
                if x % 4 == 3 and mult & 1: return False 
            x += 1
        return c % 4 != 3


    """634. Find the Derangement of An Array (Medium)
	In combinatorial mathematics, a derangement is a permutation of the 
	elements of a set, such that no element appears in its original position.
	You are given an integer n. There is originally an array consisting of n 
	integers from 1 to n in ascending order, return the number of derangements 
	it can generate. Since the answer may be huge, return it modulo 10^9 + 7.

	Example 1:
	Input: n = 3
	Output: 2
	Explanation: The original array is [1,2,3]. The two derangements are 
	             [2,3,1] and [3,1,2].
	
	Example 2:
	Input: n = 2
	Output: 1

	Constraints: 1 <= n <= 10^6"""

    def findDerangement(self, n: int) -> int:
        f0, f1 = 1, 0
        for i in range(2, n+1): 
            f0, f1 = f1, (i-1) * (f0+f1) % 1_000_000_007
        return f1

    
    """639. Decode Ways II (Hard)
	A message containing letters from A-Z can be encoded into numbers using the 
	following mapping:
	'A' -> "1"
	'B' -> "2"
	...
	'Z' -> "26"
	To decode an encoded message, all the digits must be grouped then mapped 
	back into letters using the reverse of the mapping above (there may be 
	multiple ways). For example, "11106" can be mapped into:
	* "AAJF" with the grouping (1 1 10 6)
	* "KJF" with the grouping (11 10 6)
	Note that the grouping (1 11 06) is invalid because "06" cannot be mapped 
	into 'F' since "6" is different from "06". In addition to the mapping above, 
	an encoded message may contain the '*' character, which can represent any 
	digit from '1' to '9' ('0' is excluded). For example, the encoded message 
	"1*" may represent any of the encoded messages "11", "12", "13", "14", "15", 
	"16", "17", "18", or "19". Decoding "1*" is equivalent to decoding any of 
	the encoded messages it can represent. Given a string s consisting of 
	digits and '*' characters, return the number of ways to decode it. Since 
	the answer may be very large, return it modulo 10^9 + 7.

	Example 1:
	Input: s = "*"
	Output: 9
	Explanation: The encoded message can represent any of the encoded messages 
	             "1", "2", "3", "4", "5", "6", "7", "8", or "9". Each of these 
	             can be decoded to the strings "A", "B", "C", "D", "E", "F", 
	             "G", "H", and "I" respectively. Hence, there are a total of 9 
	             ways to decode "*".
	
	Example 2:
	Input: s = "1*"
	Output: 18
	Explanation: The encoded message can represent any of the encoded messages 
	             "11", "12", "13", "14", "15", "16", "17", "18", or "19". Each 
	             of these encoded messages have 2 ways to be decoded (e.g. "11" 
	             can be decoded to "AA" or "K"). Hence, there are a total of 
	             9 * 2 = 18 ways to decode "1*".
	
	Example 3:
	Input: s = "2*"
	Output: 15
	Explanation: The encoded message can represent any of the encoded messages 
	             "21", "22", "23", "24", "25", "26", "27", "28", or "29". "21", 
	             "22", "23", "24", "25", and "26" have 2 ways of being decoded, 
	             but "27", "28", and "29" only have 1 way. Hence, there are a 
	             total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode "2*".

	Constraints:
	* 1 <= s.length <= 10^5
	* s[i] is a digit or '*'."""

    def numDecodings(self, s: str) -> int:
        
        @cache 
        def fn(i): 
            """Return decode ways."""
            if i == len(s): return 1 
            if s[i] == "0": return 0 
            if i == len(s)-1: return 9 if s[i] == '*' else 1
            if s[i] == "*": 
                ans = 9*fn(i+1)
                if s[i+1] == "*": ans += 15*fn(i+2)
                else: 
                    ans += fn(i+2)
                    if s[i+1] <= "6": ans += fn(i+2)
            else: 
                ans = fn(i+1)
                if s[i+1] == "*": 
                    if s[i] == "1": ans += 9*fn(i+2)
                    elif s[i] == "2": ans += 6*fn(i+2)
                elif int(s[i:i+2]) <= 26: ans += fn(i+2)
            return ans % 1_000_000_007
        
        return fn(0)


    """645. Set Mismatch (Easy)
	You have a set of integers s, which originally contains all the numbers 
	from 1 to n. Unfortunately, due to some error, one of the numbers in s got 
	duplicated to another number in the set, which results in repetition of one 
	number and loss of another number. You are given an integer array nums 
	representing the data status of this set after the error. Find the number 
	that occurs twice and the number that is missing and return them in the 
	form of an array.

	Example 1:
	Input: nums = [1,2,2,4]
	Output: [2,3]

	Example 2:
	Input: nums = [1,1]
	Output: [1,2]

	Constraints:
	* 2 <= nums.length <= 10^4
	* 1 <= nums[i] <= 10^4"""

    def findErrorNums(self, nums: List[int]) -> List[int]:
        freq = [0]*len(nums)
        for x in nums: freq[x-1] += 1
        
        ans = [0]*2
        for i, x in enumerate(freq): 
            if x == 2: ans[0] = i+1
            elif x == 0: ans[1] = i+1
        return ans 


    """650. 2 Keys Keyboard (Medium)
	Initially on a notepad only one character 'A' is present. You can perform 
	two operations on this notepad for each step:
	* Copy All: You can copy all the characters present on the notepad (partial 
	  copy is not allowed).
	* Paste: You can paste the characters which are copied last time.
	 
	Given a number n. You have to get exactly n 'A' on the notepad by 
	performing the minimum number of steps permitted. Output the minimum number 
	of steps to get n 'A'.

	Example 1:
	Input: 3
	Output: 3
	Explanation: Intitally, we have one character 'A'.
	In step 1, we use Copy All operation.
	In step 2, we use Paste operation to get 'AA'.
	In step 3, we use Paste operation to get 'AAA'.

	Note: The n will be in the range [1, 1000]."""

    def minSteps(self, n: int) -> int:
        for i in range(2, int(sqrt(n)+1)): 
            if n%i == 0: return i + self.minSteps(n//i)
        return 0 if n == 1 else n 


    """651. 4 Keys Keyboard (Medium)
	Imagine you have a special keyboard with the following keys:
	* A: Print one 'A' on the screen.
	* Ctrl-A: Select the whole screen.
	* Ctrl-C: Copy selection to buffer.
	* Ctrl-V: Print buffer on screen appending it after what has already been 
	  printed.
	Given an integer n, return the maximum number of 'A' you can print on the 
	screen with at most n presses on the keys.

	Example 1:
	Input: n = 3
	Output: 3
	Explanation: We can at most get 3 A's on screen by pressing the following 
	             key sequence: A, A, A
	
	Example 2:
	Input: n = 7
	Output: 9
	Explanation: We can at most get 9 A's on screen by pressing following key 
	             sequence: A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V

	Constraints: 1 <= n <= 50"""

    def maxA(self, n: int) -> int:
        dp = [0, 1]
        for x in range(2, n+1): 
            dp.append(1 + dp[x-1])
            for xx in range(x-2): dp[x] = max(dp[x], dp[xx]*(x-xx-1))
        return dp[n]


    """653. Two Sum IV - Input is a BST (Easy)
	Given the root of a Binary Search Tree and a target number k, return true 
	if there exist two elements in the BST such that their sum is equal to the 
	given target.

	Example 1:
	Input: root = [5,3,6,2,4,null,7], k = 9
	Output: true

	Example 2:
	Input: root = [5,3,6,2,4,null,7], k = 28
	Output: false

	Example 3:
	Input: root = [2,1,3], k = 4
	Output: true

	Example 4:
	Input: root = [2,1,3], k = 1
	Output: false

	Example 5:
	Input: root = [2,1,3], k = 3
	Output: true

	Constraints:
	* The number of nodes in the tree is in the range [1, 10^4].
	* -10^4 <= Node.val <= 10^4
	* root is guaranteed to be a valid binary search tree.
	* -10^5 <= k <= 10^5"""

    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        
        def fn(node, tf): 
            if node: 
                yield from fn(node.left, tf) if tf else fn(node.right, tf)
                yield node.val 
                yield from fn(node.right, tf) if tf else fn(node.left, tf)
                        
        fit = fn(root, 1) # forward iterator
        bit = fn(root, 0) # backward iterator
        lo, hi = next(fit), next(bit)
        while lo < hi: 
            sm = lo + hi 
            if sm < k: lo = next(fit)
            elif sm == k: return True
            else: hi = next(bit)
        return False 


    """654. Maximum Binary Tree (Medium)
	Given an integer array with no duplicates. A maximum tree building on this 
	array is defined as follow:
	* The root is the maximum number in the array.
	* The left subtree is the maximum tree constructed from left part subarray 
	  divided by the maximum number.
	* The right subtree is the maximum tree constructed from right part 
	  subarray divided by the maximum number.
	Construct the maximum tree by the given array and output the root node of 
	this tree.

	Example 1:
	Input: [3,2,1,6,0,5]
	Output: return the tree root node representing the following tree:
	      6
	    /   \
	   3     5
	    \    / 
	     2  0   
	       \
	        1
	Note: The size of the given array will be in the range [1,1000]."""

    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:
        stack = []
        for x in nums: 
            node = TreeNode(x)
            while stack and stack[-1].val < x: node.left = stack.pop()
            if stack: stack[-1].right = node 
            stack.append(node)
        return stack[0]


    """655. Print Binary Tree (Medium)
	Print a binary tree in an m*n 2D string array following these rules:
	1 The row number m should be equal to the height of the given binary tree.
	2 The column number n should always be an odd number.
	3 The root node's value (in string format) should be put in the exactly 
	  middle of the first row it can be put. The column and the row where the 
	  root node belongs will separate the rest space into two parts (left-
	  bottom part and right-bottom part). You should print the left subtree in 
	  the left-bottom part and print the right subtree in the right-bottom part. 
	  The left-bottom part and the right-bottom part should have the same size. 
	  Even if one subtree is none while the other is not, you don't need to 
	  print anything for the none subtree but still need to leave the space as 
	  large as that for the other subtree. However, if two subtrees are none, 
	  then you don't need to leave space for both of them.
	4 Each unused space should contain an empty string "".
	5 Print the subtrees following the same rules.
	
	Example 1:
	Input:
	     1
	    /
	   2
	Output:
	[["", "1", ""],
	 ["2", "", ""]]
	
	Example 2:
	Input:
	     1
	    / \
	   2   3
	    \
	     4
	Output:
	[["", "", "", "1", "", "", ""],
	 ["", "2", "", "", "", "3", ""],
	 ["", "", "4", "", "", "", ""]]
	
	Example 3:
	Input:
	      1
	     / \
	    2   5
	   / 
	  3 
	 / 
	4 
	Output:
	[["",  "",  "", "",  "", "", "", "1", "",  "",  "",  "",  "", "", ""]
	 ["",  "",  "", "2", "", "", "", "",  "",  "",  "",  "5", "", "", ""]
	 ["",  "3", "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]
	 ["4", "",  "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]]

	Note: The height of binary tree is in the range of [1, 10]."""

    def printTree(self, root: TreeNode) -> List[List[str]]:
        ht = lambda node: 1 + max(ht(node.left), ht(node.right)) if node else 0 # height of binary tree 
        m = ht(root) # rows 
        n = 2**m - 1 # columns 
        
        def dfs(node, i, lo=0, hi=n): 
            """Populate ans via dfs."""
            if not node: return 
            mid = lo + hi >> 1
            ans[i][mid] = str(node.val)
            dfs(node.left, i+1, lo, mid) or dfs(node.right, i+1, mid+1, hi)

        ans = [[""]*n for _ in range(m)]
        dfs(root, 0)
        return ans


    """658. Find K Closest Elements (Medium)
	Given a sorted array arr, two integers k and x, find the k closest elements 
	to x in the array. The result should also be sorted in ascending order. If 
	there is a tie, the smaller elements are always preferred.

	Example 1:
	Input: arr = [1,2,3,4,5], k = 4, x = 3
	Output: [1,2,3,4]

	Example 2:
	Input: arr = [1,2,3,4,5], k = 4, x = -1
	Output: [1,2,3,4]

	Constraints:
	* 1 <= k <= arr.length
	* 1 <= arr.length <= 10^4
	* Absolute value of elements in the array and x will not exceed 10^4"""

    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        lo, hi = 0, len(arr)-k
        while lo < hi: 
            mid = lo + hi >> 1
            if x - arr[mid] > arr[mid+k] - x: lo = mid + 1
            else: hi = mid
        return arr[lo:lo+k]


    """659. Split Array into Consecutive Subsequences (Medium)
	Given an array nums sorted in ascending order, return true if and only if 
	you can split it into 1 or more subsequences such that each subsequence 
	consists of consecutive integers and has length at least 3.

	Example 1:
	Input: [1,2,3,3,4,5]
	Output: True
	Explanation: You can split them into two consecutive subsequences : 
	1, 2, 3
	3, 4, 5

	Example 2:
	Input: [1,2,3,3,4,4,5,5]
	Output: True
	Explanation: You can split them into two consecutive subsequences : 
	1, 2, 3, 4, 5
	3, 4, 5
	
	Example 3:
	Input: [1,2,3,4,4,5]
	Output: False

	Constraints: 1 <= nums.length <= 10000"""

    def isPossible(self, nums: List[int]) -> bool:
        freq = {}
        for x in nums: freq[x] = 1 + freq.get(x, 0) # frequency table of nums
        
        seen = deque()
        for i, x in enumerate(nums):
            if i == 0 or nums[i-1] != x: 
                if (n := freq[x] - freq.get(x-1, 0)) > 0: seen.extend([x]*n)
                elif any(x - seen.popleft() < 3 for _ in range(-n)): return False 
                if not freq.get(x+1, 0) and any(x - seen.popleft() < 2 for _ in range(freq[x])): return False 
        return True 


    """662. Maximum Width of Binary Tree (Medium)
	Given a binary tree, write a function to get the maximum width of the given 
	tree. The maximum width of a tree is the maximum width among all levels. 
	The width of one level is defined as the length between the end-nodes (the 
	leftmost and right most non-null nodes in the level, where the null nodes 
	between the end-nodes are also counted into the length calculation. It is 
	guaranteed that the answer will in the range of 32-bit signed integer.

	Example 1:
	Input: 
	           1
	         /   \
	        3     2
	       / \     \  
	      5   3     9 
	Output: 4
	Explanation: The maximum width existing in the third level with the length 
	             4 (5,3,null,9).

	Example 2:
	Input: 
	          1
	         /  
	        3    
	       / \       
	      5   3     
	Output: 2
	Explanation: The maximum width existing in the third level with the length 
	             2 (5,3).

	Example 3:
	Input: 
	          1
	         / \
	        3   2 
	       /        
	      5      
	Output: 2
	Explanation: The maximum width existing in the second level with the length 
	             2 (3,2).

	Example 4:
	Input: 
	          1
	         / \
	        3   2
	       /     \  
	      5       9 
	     /         \
	    6           7
	Output: 8
	Explanation:The maximum width existing in the fourth level with the length 
	            8 (6,null,null,null,null,null,null,7).
	 
	Constraints: The given binary tree will have between 1 and 3000 nodes."""

    def widthOfBinaryTree(self, root: TreeNode) -> int:
        ans = 1
        queue = [(root, 0)]
        while queue: 
            ans = max(ans, queue[-1][1] - queue[0][1] + 1)
            newq = []
            for node, i in queue: 
                if node.left: newq.append((node.left, 2*i))
                if node.right: newq.append((node.right, 2*i+1))
            queue = newq
        return ans 


    """663. Equal Tree Partition (Medium)
	Given the root of a binary tree, return true if you can partition the tree 
	into two trees with equal sums of values after removing exactly one edge on 
	the original tree.

	Example 1:
	Input: root = [5,10,10,null,null,2,3]
	Output: true

	Example 2:
	Input: root = [1,2,10,null,null,2,20]
	Output: false
	Explanation: You cannot split the tree into two trees with equal sums after 
	             removing exactly one edge on the tree.

	Constraints:
	* The number of nodes in the tree is in the range [1, 10^4].
	* -10^5 <= Node.val <= 10^5"""

    def checkEqualTree(self, root: Optional[TreeNode]) -> bool:
        
        def fn(node): 
            """Return sum of sub-tree."""
            if not node: return 0 
            ans = node.val + fn(node.left) + fn(node.right)
            freq[ans] += 1
            return ans
        
        freq = defaultdict(int)
        total = fn(root)
        return not total and freq[total] > 1 or total and total % 2 == 0 and freq[total//2]


    """664. Strange Printer (Hard)
	There is a strange printer with the following two special properties:
	* The printer can only print a sequence of the same character each time.
	* At each turn, the printer can print new characters starting from and 
	  ending at any place and will cover the original existing characters.
	Given a string s, return the minimum number of turns the printer needed to 
	print it.

	Example 1:
	Input: s = "aaabbb"
	Output: 2
	Explanation: Print "aaa" first and then print "bbb".

	Example 2:
	Input: s = "aba"
	Output: 2
	Explanation: Print "aaa" first and then print "b" from the second place of 
	             the string, which will cover the existing character 'a'.

	Constraints:
	* 1 <= s.length <= 100
	* s consists of lowercase English letters."""

    def strangePrinter(self, s: str) -> int:
        s = "".join(ch for i, ch in enumerate(s) if i == 0 or s[i-1] != ch)
        
        @cache
        def fn(lo, hi): 
            """Return min ops to print s[lo:hi]."""
            if lo == hi: return 0
            ans = 1 + fn(lo+1, hi)
            for mid in range(lo+1, hi): 
                if s[lo] == s[mid]: 
                    ans = min(ans, fn(lo, mid) + fn(mid+1, hi))
            return ans 
        
        return fn(0, len(s))


    """665. Non-decreasing Array (Medium)
	Given an array nums with n integers, your task is to check if it could 
	become non-decreasing by modifying at most one element. We define an array 
	is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) 
	such that (0 <= i <= n - 2).

	Example 1:
	Input: nums = [4,2,3]
	Output: true
	Explanation: You could modify the first 4 to 1 to get a non-decreasing array.

	Example 2:
	Input: nums = [4,2,1]
	Output: false
	Explanation: You can't get a non-decreasing array by modify at most one element.

	Constraints:
	n == nums.length
	1 <= n <= 10^4
	-10^5 <= nums[i] <= 10^5"""

    def checkPossibility(self, nums: List[int]) -> bool:
        cnt = 0 
        for i in range(1, len(nums)): 
            if nums[i-1] > nums[i]: 
                if (i-1 == 0 or nums[i-2] <= nums[i]) or (i+1 == len(nums) or nums[i-1] <= nums[i+1]): 
                    cnt += 1
                else: return False 
        return cnt <= 1


    """666. Path Sum IV (Medium)
	If the depth of a tree is smaller than 5, then this tree can be represented 
	by an array of three-digit integers. For each integer in this array:
	* The hundreds digit represents the depth d of this node where 1 <= d <= 4.
	* The tens digit represents the position p of this node in the level it 
	  belongs to where 1 <= p <= 8. The position is the same as that in a full 
	  binary tree.
	* The units digit represents the value v of this node where 0 <= v <= 9.
	Given an array of ascending three-digit integers nums representing a binary 
	tree with a depth smaller than 5, return the sum of all paths from the root 
	towards the leaves. It is guaranteed that the given array represents a 
	valid connected binary tree.

	Example 1:
	Input: nums = [113,215,221]
	Output: 12
	Explanation: The tree that the list represents is shown. The path sum is 
	             (3 + 5) + (3 + 1) = 12.
	
	Example 2:
	Input: nums = [113,221]
	Output: 4
	Explanation: The tree that the list represents is shown. The path sum is 
	             (3 + 1) = 4.

	Constraints:
	* 1 <= nums.length <= 15
	* 110 <= nums[i] <= 489
	* nums represents a valid binary tree with depth less than 5."""

    def pathSum(self, nums: List[int]) -> int:
        tree = {}
        for num in nums: 
            d, p, v = (int(x) for x in str(num))
            tree[d, p] = v
        
        ans = 0
        stack = [(1, 1, 0)]
        while stack: 
            d, p, v = stack.pop()
            v += tree[d, p]
            dd, ll, rr = d+1, 2*p-1, 2*p
            if (dd, ll) not in tree and (dd, rr) not in tree: ans += v # leaf
            if (dd, ll) in tree: stack.append((dd, ll, v))
            if (dd, rr) in tree: stack.append((dd, rr, v))
        return ans 


    """667. Beautiful Arrangement II (Medium)
	Given two integers n and k, you need to construct a list which contains n 
	different positive integers ranging from 1 to n and obeys the following 
	requirement:
	Suppose this list is [a1, a2, a3, ... , an], then the list 
	[|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct 
	integers. If there are multiple answers, print any of them.

	Example 1:
	Input: n = 3, k = 1
	Output: [1, 2, 3]
	Explanation: The [1, 2, 3] has three different positive integers ranging 
	             from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.
	
	Example 2:
	Input: n = 3, k = 2
	Output: [1, 3, 2]
	Explanation: The [1, 3, 2] has three different positive integers ranging 
	             from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 
	             and 2.
	
	Note: The n and k are in the range 1 <= k < n <= 104."""

    def constructArray(self, n: int, k: int) -> List[int]:
        lo, hi = 1, n 
        ans = []
        while lo <= hi: 
            if k&1: 
                ans.append(lo)
                lo += 1
            else: 
                ans.append(hi)
                hi -= 1
            if k > 1: k -= 1
        return ans 


    """668. Kth Smallest Number in Multiplication Table (Hard)
	Nearly everyone has used the Multiplication Table. The multiplication table 
	of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).
	Given three integers m, n, and k, return the kth smallest element in the 
	m x n multiplication table.

	Example 1:
	Input: m = 3, n = 3, k = 5
	Output: 3
	Explanation: The 5th smallest number is 3.

	Example 2:
	Input: m = 2, n = 3, k = 6
	Output: 6
	Explanation: The 6th smallest number is 6.

	Constraints:
	* 1 <= m, n <= 3 * 10^4
	* 1 <= k <= m * n"""

    def findKthNumber(self, m: int, n: int, k: int) -> int:
        lo, hi = 0, m*n + 1
        while lo < hi: 
            mid = lo + hi >> 1
            x = sum(min(n, mid//i) for i in range(1, m+1))
            if x < k: lo = mid + 1
            else: hi = mid 
        return lo 


    """678. Valid Parenthesis String (Medium)
	Given a string containing only three types of characters: '(', ')' and '*', 
	write a function to check whether this string is valid. We define the 
	validity of a string by these rules:
	1) Any left parenthesis '(' must have a corresponding right parenthesis ')'.
	2) Any right parenthesis ')' must have a corresponding left parenthesis '('.
	3) Left parenthesis '(' must go before the corresponding right parenthesis ')'.
	4) '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
	5) An empty string is also valid.
	
	Example 1:
	Input: "()"
	Output: True
	
	Example 2:
	Input: "(*)"
	Output: True
	
	Example 3:
	Input: "(*))"
	Output: True
	
	Note: The string size will be in the range [1, 100]."""

    def checkValidString(self, s: str) -> bool:
        op = cl = 0
        for i in range(len(s)):
            op += 1 if s[ i] in "(*" else -1
            cl += 1 if s[~i] in ")*" else -1
            if op < 0 or cl < 0: return False 
        return True 


    """681. Next Closest Time (Medium)
	Given a time represented in the format "HH:MM", form the next closest time 
	by reusing the current digits. There is no limit on how many times a digit 
	can be reused. You may assume the given input string is always valid. For 
	example, "01:34", "12:09" are all valid. "1:34", "12:9" are all invalid.

	Example 1:
	Input: time = "19:34"
	Output: "19:39"
	Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 
	             19:39, which occurs 5 minutes later. It is not 19:33, because 
	             this occurs 23 hours and 59 minutes later.
	
	Example 2:
	Input: time = "23:59"
	Output: "22:22"
	Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 
	             22:22. It may be assumed that the returned time is next day's 
	             time since it is smaller than the input time numerically.

	Constraints:
	* time.length == 5
	* time is a valid time in the form "HH:MM".
	* 0 <= HH < 24
	* 0 <= MM < 60"""

    def nextClosestTime(self, time: str) -> str:
        digit = sorted([time[0], time[1], time[3], time[4]])
        
        upper = ["2", "9", None, "5", "9"]
        if time[0] == "2": upper[1] = "3"
        
        suffix = ""
        for i in reversed(range(5)): 
            if i == 2: suffix = ":" + suffix
            else: 
                k = digit.index(time[i])
                for kk in range(k+1, 4): 
                    if time[i] < digit[kk] <= upper[i]: return time[:i] + digit[kk] + suffix
                suffix = digit[0] + suffix
        return suffix


    """686. Repeated String Match (Medium)
	Given two strings a and b, return the minimum number of times you should 
	repeat string a so that string b is a substring of it. If it is impossible 
	for b to be a substring of a after repeating it, return -1. Notice: string 
	"abc" repeated 0 times is "",  repeated 1 time is "abc" and repeated 2 
	times is "abcabc".

	Example 1:
	Input: a = "abcd", b = "cdabcdab"
	Output: 3
	Explanation: We return 3 because by repeating a three times "abcdabcdabcd", 
	             b is a substring of it.

	Example 2:
	Input: a = "a", b = "aa"
	Output: 2

	Example 3:
	Input: a = "a", b = "a"
	Output: 1

	Example 4:
	Input: a = "abc", b = "wxyz"
	Output: -1

	Constraints:
	* 1 <= a.length <= 104
	* 1 <= b.length <= 104
	* a and b consist of lower-case English letters."""

    def repeatedStringMatch(self, a: str, b: str) -> int:
        n = ceil(len(b)/len(a)) # ceiling of len(b)/len(a)
        return next((n+i for i in range(2) if b in (n+i)*a), -1)


    """687. Longest Univalue Path (Medium)
	Given the root of a binary tree, return the length of the longest path, 
	where each node in the path has the same value. This path may or may not 
	pass through the root. The length of the path between two nodes is 
	represented by the number of edges between them.

	Example 1:
	Input: root = [5,4,5,1,1,5]
	Output: 2

	Example 2:
	Input: root = [1,4,5,4,4,5]
	Output: 2

	Constraints:
	* The number of nodes in the tree is in the range [0, 104].
	* -1000 <= Node.val <= 1000
	* The depth of the tree will not exceed 1000."""

    def longestUnivaluePath(self, root: TreeNode) -> int:
        
        def dfs(node): 
            """Return longest univalue branch and longest univalue path (post-order traversal)."""
            nonlocal ans 
            if not node: return 0
            lx, rx = dfs(node.left), dfs(node.right) 
            if not node.left or node.left.val != node.val: lx = 0
            if not node.right or node.right.val != node.val: rx = 0 
            ans = max(ans, 1 + lx + rx)
            return 1 + max(lx, rx)
        
        ans = 0
        dfs(root)
        return max(0, ans-1)


    """688. Knight Probability in Chessboard (Medium)
	On an NxN chessboard, a knight starts at the r-th row and c-th column and 
	attempts to make exactly K moves. The rows and columns are 0 indexed, so 
	the top-left square is (0, 0), and the bottom-right square is (N-1, N-1). A 
	chess knight has 8 possible moves it can make, as illustrated below. Each 
	move is two squares in a cardinal direction, then one square in an 
	orthogonal direction. Each time the knight is to move, it chooses one of 
	eight possible moves uniformly at random (even if the piece would go off 
	the chessboard) and moves there. The knight continues moving until it has 
	made exactly K moves or has moved off the chessboard. Return the 
	probability that the knight remains on the board after it has stopped 
	moving.

	Example:
	Input: 3, 2, 0, 0
	Output: 0.0625
	Explanation: There are two moves (to (1,2), (2,1)) that will keep the 
	             knight on the board. From each of those positions, there are 
	             also two moves that will keep the knight on the board. The 
	             total probability the knight stays on the board is 0.0625.
	 
	Note:
	* N will be between 1 and 25.
	* K will be between 0 and 100.
	* The knight always initially starts on the board."""

    def knightProbability(self, N: int, K: int, r: int, c: int) -> float:
        
        @cache
        def fn(k, i, j): 
            """Return probability in chessboard at (i, j) with k moves left."""
            if not (0 <= i < N and 0 <= j < N): return 0
            if k == 0: return 1 
            return 1/8*sum(fn(k-1, i+ii, j+jj) for ii, jj in ((-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)))
            
        return fn(K, r, c)


    """689. Maximum Sum of 3 Non-Overlapping Subarrays (Hard)
	Given an integer array nums and an integer k, find three non-overlapping 
	subarrays of length k with maximum sum and return them. Return the result 
	as a list of indices representing the starting position of each interval 
	(0-indexed). If there are multiple answers, return the lexicographically 
	smallest one.

	Example 1:
	Input: nums = [1,2,1,2,6,7,5,1], k = 2
	Output: [0,3,5]
	Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting 
	             indices [0, 3, 5]. We could have also taken [2, 1], but an 
	             answer of [1, 3, 5] would be lexicographically larger.
	
	Example 2:
	Input: nums = [1,2,1,2,1,2,1,2,1], k = 2
	Output: [0,2,4]

	Constraints:
	* 1 <= nums.length <= 2 * 10^4
	* 1 <= nums[i] < 2^16
	* 1 <= k <= floor(nums.length / 3)"""

    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:
        rs0, rs1, rs2 = sum(nums[:k]), sum(nums[k:2*k]), sum(nums[2*k:3*k])
        m0, m1, m2 = rs0, rs0 + rs1, rs0 + rs1 + rs2
        i0, i1, i2 = [0], [0, k], [0, k, 2*k]
        for i in range(len(nums)-3*k): 
            rs0 += nums[i+k] - nums[i]
            rs1 += nums[i+2*k] - nums[i+k]
            rs2 += nums[i+3*k] - nums[i+2*k]
            if rs0 > m0: m0, i0 = rs0, [i+1]
            if m0 + rs1 > m1: m1, i1 = m0 + rs1, i0 + [i+k+1]
            if m1 + rs2 > m2: m2, i2 = m1 + rs2, i1 + [i+2*k+1]
        return i2


    """690. Employee Importance (Easy)
	You are given a data structure of employee information, which includes the 
	employee's unique id, their importance value and their direct subordinates' 
	id. For example, employee 1 is the leader of employee 2, and employee 2 is 
	the leader of employee 3. They have importance value 15, 10 and 5, 
	respectively. Then employee 1 has a data structure like [1, 15, [2]], and 
	employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that 
	although employee 3 is also a subordinate of employee 1, the relationship 
	is not direct. Now given the employee information of a company, and an 
	employee id, you need to return the total importance value of this employee 
	and all their subordinates.

	Example 1:
	Input: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1
	Output: 11
	Explanation: Employee 1 has importance value 5, and he has two direct 
	             subordinates: employee 2 and employee 3. They both have 
	             importance value 3. So the total importance value of employee 
	             1 is 5 + 3 + 3 = 11.

	Note:
	* One employee has at most one direct leader and may have several subordinates.
	* The maximum number of employees won't exceed 2000."""

    def getImportance(self, employees: List['Employee'], id: int) -> int:
        mp = {x.id: x for x in employees}
        
        ans = 0
        stack = [id]
        while stack: 
            x = stack.pop()
            ans += mp[x].importance
            stack.extend(mp[x].subordinates)
        return ans 


    """691. Stickers to Spell Word (Hard)
	We are given n different types of stickers. Each sticker has a lowercase 
	English word on it. You would like to spell out the given string target by 
	cutting individual letters from your collection of stickers and rearranging 
	them. You can use each sticker more than once if you want, and you have 
	infinite quantities of each sticker. Return the minimum number of stickers 
	that you need to spell out target. If the task is impossible, return -1.
	Note: In all test cases, all words were chosen randomly from the 1000 most 
	common US English words, and target was chosen as a concatenation of two 
	random words.

	Example 1:
	Input: stickers = ["with","example","science"], target = "thehat"
	Output: 3
	Explanation: We can use 2 "with" stickers, and 1 "example" sticker. After 
	             cutting and rearrange the letters of those stickers, we can 
	             form the target "thehat". Also, this is the minimum number of 
	             stickers necessary to form the target string.
	
	Example 2:
	Input: stickers = ["notice","possible"], target = "basicbasic"
	Output: -1
	Explanation: We cannot form the target "basicbasic" from cutting letters 
	             from the given stickers.

	Constraints:
	* n == stickers.length
	* 1 <= n <= 50
	* 1 <= stickers[i].length <= 10
	* 1 <= target <= 15
	* stickers[i] and target consist of lowercase English letters."""

    def minStickers(self, stickers: List[str], target: str) -> int:
        freqs = [Counter(x) for x in stickers]
        
        @cache
        def fn(x):
            """Return min sticks to give x."""
            if not x: return 0 
            ans = inf
            freq = Counter(x)
            for cnt in freqs: 
                if x[0] in cnt: 
                    xx = "".join(k*v for k, v in (freq - cnt).items())
                    ans = min(ans, 1 + fn(xx))
            return ans 
        
        ans = fn(target)
        return ans if ans < inf else -1


    """692. Top K Frequent Words (Medium)
	Given a non-empty list of words, return the k most frequent elements. Your 
	answer should be sorted by frequency from highest to lowest. If two words 
	have the same frequency, then the word with the lower alphabetical order 
	comes first.

	Example 1:
	Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
	Output: ["i", "love"]
	Explanation: "i" and "love" are the two most frequent words. Note that "i" 
	             comes before "love" due to a lower alphabetical order.
	
	Example 2:
	Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
	Output: ["the", "is", "sunny", "day"]
	Explanation: "the", "is", "sunny" and "day" are the four most frequent 
	             words, with the number of occurrence being 4, 3, 2 and 1 
	             respectively.
	Note:
	* You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
	* Input words contain only lowercase letters.
	
	Follow up: Try to solve it in O(n log k) time and O(n) extra space."""

    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        freq = {} # frequency table
        for x in words: freq[x] = 1 + freq.get(x, 0) 
        return nsmallest(k, freq, key=lambda x: (-freq[x], x))


    """694. Number of Distinct Islands (Medium)
	Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's 
	(representing land) connected 4-directionally (horizontal or vertical.) You 
	may assume all four edges of the grid are surrounded by water. Count the 
	number of distinct islands. An island is considered to be the same as 
	another if and only if one island can be translated (and not rotated or 
	reflected) to equal the other.

	Example 1:
	11000
	11000
	00011
	00011
	Given the above grid map, return 1.
	
	Example 2:
	11011
	10000
	00001
	11011
	Given the above grid map, return 3.

	Notice that:
	11 and  1 are considered different island shapes, because we do not consider 
	1      11
	reflection / rotation.
	
	Note: The length of each dimension in the given grid does not exceed 50."""

    def numDistinctIslands(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0]) # dimensions 
        seen = set()
        
        def fn(i, j):
            """Travere grid depth-first."""
            grid[i][j] = 0 # mark visited 
            vals.add((i, j))
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j):
                if 0 <= ii < m and 0 <= jj < n and grid[ii][jj]: fn(ii, jj)
        
        for i in range(m):
            for j in range(n): 
                if grid[i][j]: 
                    vals = set()
                    fn(i, j)
                    mi = min(i for i, _ in vals)
                    mj = min(j for _, j in vals) 
                    seen.add(tuple(sorted((i-mi, j-mj) for i, j in vals)))
        return len(seen)


    """695. Max Area of Island (Medium)
	Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's 
	(representing land) connected 4-directionally (horizontal or vertical.) You 
	may assume all four edges of the grid are surrounded by water. Find the 
	maximum area of an island in the given 2D array. (If there is no island, 
	the maximum area is 0.)

	Example 1:
	[[0,0,1,0,0,0,0,1,0,0,0,0,0],
	 [0,0,0,0,0,0,0,1,1,1,0,0,0],
	 [0,1,1,0,1,0,0,0,0,0,0,0,0],
	 [0,1,0,0,1,1,0,0,1,0,1,0,0],
	 [0,1,0,0,1,1,0,0,1,1,1,0,0],
	 [0,0,0,0,0,0,0,0,0,0,1,0,0],
	 [0,0,0,0,0,0,0,1,1,1,0,0,0],
	 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
	Given the above grid, return 6. Note the answer is not 11, because the 
	island must be connected 4-directionally.
	
	Example 2:
	[[0,0,0,0,0,0,0,0]]
	Given the above grid, return 0.

	Note: The length of each dimension in the given grid does not exceed 50."""

    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        ans = 0
        for r in range(m):
            for c in range(n): 
                if grid[r][c]: 
                    val = 1
                    grid[r][c] = 0
                    stack = [(r, c)]
                    while stack: 
                        i, j = stack.pop()
                        for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j):
                            if 0 <= ii < m and 0 <= jj < n and grid[ii][jj]: 
                                val += 1
                                grid[ii][jj] = 0 
                                stack.append((ii, jj))
                    ans = max(ans, val)
        return ans 


    """698. Partition to K Equal Sum Subsets (Medium)
	Given an integer array nums and an integer k, return true if it is possible 
	to divide this array into k non-empty subsets whose sums are all equal.

	Example 1:
	Input: nums = [4,3,2,3,5,2,1], k = 4
	Output: true
	Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), 
	             (2,3) with equal sums.
	
	Example 2:
	Input: nums = [1,2,3,4], k = 3
	Output: false

	Constraints:
	* 1 <= k <= nums.length <= 16
	* 1 <= nums[i] <= 10^4
	* The frequency of each element is in the range [1, 4]."""

    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        total = sum(nums)
        if total % k: return False 
        avg = total // k
        
        @cache
        def fn(x, mask):
            """Return True if possible to partition."""
            if x > avg: return False 
            if x == avg: return fn(0, mask)
            if not mask: return True 
            for i in range(len(nums)): 
                if mask & 1<<i and fn(x + nums[i], mask ^ 1<<i): return True 
            return False 
        
        nums.sort(reverse=True)
        return fn(0, (1 << len(nums))-1)


    """700. Search in a Binary Search Tree (Easy)
	You are given the root of a binary search tree (BST) and an integer val. 
	Find the node in the BST that the node's value equals val and return the 
	subtree rooted with that node. If such a node does not exist, return null.

	Example 1:
	Input: root = [4,2,7,1,3], val = 2
	Output: [2,1,3]

	Example 2:
	Input: root = [4,2,7,1,3], val = 5
	Output: []

	Constraints:
	* The number of nodes in the tree is in the range [1, 5000].
	* 1 <= Node.val <= 10^7
	* root is a binary search tree.
	* 1 <= val <= 10^7"""

    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        node = root
        while node: 
            if node.val < val: node = node.right
            elif node.val == val: break
            else: node = node.left 
        return node 


    """701. Insert into a Binary Search Tree (Medium)
	You are given the root node of a binary search tree (BST) and a value to 
	insert into the tree. Return the root node of the BST after the insertion. 
	It is guaranteed that the new value does not exist in the original BST.
	Notice that there may exist multiple valid ways for the insertion, as long 
	as the tree remains a BST after insertion. You can return any of them.

	Example 1:
	Input: root = [4,2,7,1,3], val = 5
	Output: [4,2,7,1,3,5]
	Explanation: Another accepted tree is:

	Example 2:
	Input: root = [40,20,60,10,30,50,70], val = 25
	Output: [40,20,60,10,30,50,70,null,null,25]

	Example 3:
	Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
	Output: [4,2,7,1,3,5]

	Constraints:
	* The number of nodes in the tree will be in the range [0, 10^4].
	* -10^8 <= Node.val <= 10^8
	* All the values Node.val are unique.
	* -10^8 <= val <= 10^8
	* It's guaranteed that val does not exist in the original BST."""

    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        if not root: return TreeNode(val)
        node = root
        while node: 
            if node.val < val: 
                if node.right: node = node.right
                else: 
                    node.right = TreeNode(val)
                    break 
            else: 
                if node.left: node = node.left
                else: 
                    node.left = TreeNode(val)
                    break 
        return root


    """702. Search in a Sorted Array of Unknown Size (Medium)
	This is an interactive problem. You have a sorted array of unique elements 
	and an unknown size. You do not have an access to the array but you can use 
	the ArrayReader interface to access it. You can call ArrayReader.get(i) 
	that:
	* returns the value at the ith index (0-indexed) of the secret array (i.e., 
	  secret[i]), or
	* returns 2^31 - 1 if the i is out of the boundary of the array.
	You are also given an integer target. Return the index k of the hidden 
	array where secret[k] == target or return -1 otherwise. You must write an 
	algorithm with O(log n) runtime complexity.

	Example 1:
	Input: secret = [-1,0,3,5,9,12], target = 9
	Output: 4
	Explanation: 9 exists in secret and its index is 4.

	Example 2:
	Input: secret = [-1,0,3,5,9,12], target = 2
	Output: -1
	Explanation: 2 does not exist in secret so return -1.

	Constraints:
	* 1 <= secret.length <= 10^4
	* -10^4 <= secret[i], target <= 10^4
	* secret is sorted in a strictly increasing order."""

    def search(self, reader, target):
        lo, hi = 0, 10_000
        while lo <= hi: 
            mid = lo + hi >> 1
            val = reader.get(mid)
            if val < target: lo = mid + 1
            elif val == target: return mid 
            else: hi = mid - 1
        return -1


    """704. Binary Search (Easy)
	Given an array of integers nums which is sorted in ascending order, and an 
	integer target, write a function to search target in nums. If target exists, 
	then return its index. Otherwise, return -1. You must write an algorithm 
	with O(log n) runtime complexity.

	Example 1:
	Input: nums = [-1,0,3,5,9,12], target = 9
	Output: 4
	Explanation: 9 exists in nums and its index is 4

	Example 2:
	Input: nums = [-1,0,3,5,9,12], target = 2
	Output: -1
	Explanation: 2 does not exist in nums so return -1

	Constraints:
	* 1 <= nums.length <= 10^4
	* -10^4 < nums[i], target < 10^4
	* All the integers in nums are unique.
	* nums is sorted in ascending order."""

    def search(self, nums: List[int], target: int) -> int:
        lo, hi = 0, len(nums)
        while lo < hi: 
            mid = lo + hi >> 1
            if nums[mid] < target: lo = mid + 1
            elif nums[mid] == target: return mid
            else: hi = mid
        return -1 


    """708. Insert into a Sorted Circular Linked List (Medium)
	Given a Circular Linked List node, which is sorted in ascending order, 
	write a function to insert a value insertVal into the list such that it 
	remains a sorted circular list. The given node can be a reference to any 
	single node in the list and may not necessarily be the smallest value in 
	the circular list. If there are multiple suitable places for insertion, 
	you may choose any place to insert the new value. After the insertion, the 
	circular list should remain sorted. If the list is empty (i.e., the given 
	node is null), you should create a new single circular list and return the 
	reference to that single node. Otherwise, you should return the originally 
	given node.

	Example 1:
	Input: head = [3,4,1], insertVal = 2
	Output: [3,4,1,2]
	Explanation: In the figure above, there is a sorted circular list of three 
	             elements. You are given a reference to the node with value 3, 
	             and we need to insert 2 into the list. The new node should be 
	             inserted between node 1 and node 3. After the insertion, the 
	             list should look like this, and we should still return node 3.

	Example 2:
	Input: head = [], insertVal = 1
	Output: [1]
	Explanation: The list is empty (given head is null). We create a new single 
	             circular list and return the reference to that single node.
	
	Example 3:
	Input: head = [1], insertVal = 0
	Output: [1,0]

	Constraints:
	* 0 <= Number of Nodes <= 5 * 10^4
	* -10^6 <= Node.val, insertVal <= 10^6"""

    def insert(self, head: 'Node', insertVal: int) -> 'Node':
        temp = Node(insertVal)
        if not head: 
            temp.next = temp
            return temp
        prev, node = head, head.next
        while True: 
            if prev.val <= insertVal <= node.val: break 
            if prev.val > node.val and (insertVal < node.val or prev.val < insertVal): break
            prev, node = node, node.next
            if prev == head: break 
        prev.next = temp
        temp.next = node
        return head


    """709. To Lower Case (Easy)
	Given a string s, return the string after replacing every uppercase letter 
	with the same lowercase letter.

	Example 1:
	Input: s = "Hello"
	Output: "hello"

	Example 2:
	Input: s = "here"
	Output: "here"

	Example 3:
	Input: s = "LOVELY"
	Output: "lovely"

	Constraints:
	* 1 <= s.length <= 100
	* s consists of printable ASCII characters."""

    def toLowerCase(self, s: str) -> str:
        s = list(s)
        for i in range(len(s)): 
            if s[i].isupper(): s[i] = chr(ord(s[i]) ^ 32) # convert lowercase to uppercase or uppercase to lowercase 
        return "".join(s)


    """713. Subarray Product Less Than K (Medium)
	Given an array of integers nums and an integer k, return the number of 
	contiguous subarrays where the product of all the elements in the subarray 
	is strictly less than k.

	Example 1:
	Input: nums = [10,5,2,6], k = 100
	Output: 8
	Explanation: The 8 subarrays that have product less than 100 are: 
	             [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]. Note 
	             that [10, 5, 2] is not included as the product of 100 is not 
	             strictly less than k.
	
	Example 2:
	Input: nums = [1,2,3], k = 0
	Output: 0

	Constraints:
	* 1 <= nums.length <= 3 * 10^4
	* 1 <= nums[i] <= 1000
	* 0 <= k <= 10^6"""

    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:
        ans = ii = 0
        prod = 1
        for i, x in enumerate(nums): 
            prod *= x
            while ii <= i and k <= prod: 
                prod //= nums[ii]
                ii += 1
            ans += i - ii + 1
        return ans 


    """714. Best Time to Buy and Sell Stock with Transaction Fee (Medium)
	You are given an array prices where prices[i] is the price of a given stock 
	on the ith day, and an integer fee representing a transaction fee. Find the 
	maximum profit you can achieve. You may complete as many transactions as 
	you like, but you need to pay the transaction fee for each transaction. 
	Note: You may not engage in multiple transactions simultaneously (i.e., you 
	must sell the stock before you buy again).

	Example 1:
	Input: prices = [1,3,2,8,4,9], fee = 2
	Output: 8
	Explanation: The maximum profit can be achieved by:
	             - Buying at prices[0] = 1
	             - Selling at prices[3] = 8
	             - Buying at prices[4] = 4
	             - Selling at prices[5] = 9
	             The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
	
	Example 2:
	Input: prices = [1,3,7,5,10,3], fee = 3
	Output: 6

	Constraints:
	* 1 <= prices.length <= 5 * 10^4
	* 1 <= prices[i] < 5 * 10^4
	* 0 <= fee < 5 * 10^4"""

    def maxProfit(self, prices: List[int], fee: int) -> int:
        buy, sell = inf, 0
        for x in prices: 
            buy = min(buy, x - sell)
            sell = max(sell, x - buy - fee)
        return sell 


    """719. Find K-th Smallest Pair Distance (Hard)
	The distance of a pair of integers a and b is defined as the absolute 
	difference between a and b. Given an integer array nums and an integer k, 
	return the kth smallest distance among all the pairs nums[i] and nums[j] 
	where 0 <= i < j < nums.length.

	Example 1:
	Input: nums = [1,3,1], k = 1
	Output: 0
	Explanation: Here are all the pairs: (1,3) -> 2
	                                     (1,1) -> 0
	                                     (3,1) -> 2
	             Then the 1st smallest distance pair is (1,1), and its distance 
	             is 0.
	
	Example 2:
	Input: nums = [1,1,1], k = 2
	Output: 0

	Example 3:
	Input: nums = [1,6,1], k = 3
	Output: 5

	Constraints:
	* n == nums.length
	* 2 <= n <= 10^4
	* 0 <= nums[i] <= 10^6
	* 1 <= k <= n * (n - 1) / 2"""

    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        
        def fn(val): 
            """Return count of pairs whose diff <= val."""
            ans = ii = 0
            for i, x in enumerate(nums):
                while ii < i and x - nums[ii] > val: ii += 1
                ans += i - ii
            return ans 
        
        lo, hi = 0, nums[-1] - nums[0]
        while lo < hi: 
            mid = lo + hi >> 1
            if fn(mid) < k: lo = mid + 1
            else: hi = mid
        return lo


    """721. Accounts Merge (Medium)
	Given a list of accounts where each element accounts[i] is a list of 
	strings, where the first element accounts[i][0] is a name, and the rest of 
	the elements are emails representing emails of the account. Now, we would 
	like to merge these accounts. Two accounts definitely belong to the same 
	person if there is some common email to both accounts. Note that even if 
	two accounts have the same name, they may belong to different people as 
	people could have the same name. A person can have any number of accounts 
	initially, but all of their accounts definitely have the same name. After 
	merging the accounts, return the accounts in the following format: the 
	first element of each account is the name, and the rest of the elements are 
	emails in sorted order. The accounts themselves can be returned in any order.

	Example 1:
	Input: accounts = [["John","johnsmith@mail.com","john_newyork@mail.com"],
	                   ["John","johnsmith@mail.com","john00@mail.com"],
	                   ["Mary","mary@mail.com"],
	                   ["John","johnnybravo@mail.com"]]
	Output: [["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],
	         ["Mary","mary@mail.com"],
	         ["John","johnnybravo@mail.com"]]
	Explanation:
	The first and third John's are the same person as they have the common email "johnsmith@mail.com".
	The second John and Mary are different people as none of their email addresses are used by other accounts.
	We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], 
	['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.

	Example 2:
	Input: accounts = [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],
	                   ["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],
	                   ["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],
	                   ["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],
	                   ["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]
	Output: [["Ethan","Ethan0@m.co","Ethan4@m.co","Ethan5@m.co"],
	         ["Gabe","Gabe0@m.co","Gabe1@m.co","Gabe3@m.co"],
	         ["Hanzo","Hanzo0@m.co","Hanzo1@m.co","Hanzo3@m.co"],
	         ["Kevin","Kevin0@m.co","Kevin3@m.co","Kevin5@m.co"],
	         ["Fern","Fern0@m.co","Fern1@m.co","Fern5@m.co"]]

	Constraints:
	* 1 <= accounts.length <= 1000
	* 2 <= accounts[i].length <= 10
	* 1 <= accounts[i][j] <= 30
	* accounts[i][0] consists of English letters.
	* accounts[i][j] (for j > 0) is a valid email.

class UnionFind:
    def __init__(self): 
        self.parent = {}
        self.rank = defaultdict(lambda: 1)
    
    def find(self, p):
        if p not in self.parent: 
            self.parent[p] = p
        elif p != self.parent[p]:
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q):
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False # already connected 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt 
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True 

	"""

    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:
        email = {}
        uf = UnionFind()
        for account in accounts: 
            for i in range(1, len(account)):
                email[account[i]] = account[0]
                uf.union(account[1], account[i])
        
        groups = {}
        for x in email: 
            groups.setdefault(uf.find(x), []).append(x)
        
        ans = []
        for value in groups.values(): 
            ans.append([email[value[0]]] + sorted(value))
        return ans 


    """722. Remove Comments (Medium)
	Given a C++ program, remove comments from it. The program source is an 
	array of strings source where source[i] is the ith line of the source code. 
	This represents the result of splitting the original source code string by 
	the newline character '\n'. In C++, there are two types of comments, line 
	comments, and block comments.
	* The string "//" denotes a line comment, which represents that it and the 
	  rest of the characters to the right of it in the same line should be 
	  ignored.
	* The string "/*" denotes a block comment, which represents that all 
	  characters until the next (non-overlapping) occurrence of "*/" should be 
	  ignored. (Here, occurrences happen in reading order: line by line from 
	  left to right.) To be clear, the string "/*/" does not yet end the block 
	  comment, as the ending would be overlapping the beginning.
	
	The first effective comment takes precedence over others.
	* For example, if the string "//" occurs in a block comment, it is ignored.
	* Similarly, if the string "/*" occurs in a line or block comment, it is 
	  also ignored.
	If a certain line of code is empty after removing comments, you must not 
	output that line: each string in the answer list will be non-empty. There 
	will be no control characters, single quote, or double quote characters.
	* For example, source = "string s = "/* Not a comment. */";" will not be a 
	  test case.
	Also, nothing else such as defines or macros will interfere with the 
	comments. It is guaranteed that every open block comment will eventually be 
	closed, so "/*" outside of a line or block comment always starts a new 
	comment. Finally, implicit newline characters can be deleted by block 
	comments. Please see the examples below for details. After removing the 
	comments from the source code, return the source code in the same format.

	Example 1:
	Input: source = ["/*Test program */", 
	                 "int main()", 
	                 "{ ", 
	                 "  // variable declaration ", 
	                 "int a, b, c;", 
	                 "/* This is a test", 
	                 "   multiline  ", 
	                 "   comment for ", 
	                 "   testing */", 
	                 "a = b + c;", "}"]
	Output: ["int main()","{ ","  ","int a, b, c;","a = b + c;","}"]
	Explanation: The line by line code is visualized as below:
	                 /*Test program */
	                 int main()
	                 { 
	                   // variable declaration 
	                 int a, b, c;
	                 /* This is a test
	                    multiline  
	                    comment for 
	                    testing */
	                 a = b + c;
	                 }
	             The string /* denotes a block comment, including line 1 and 
	             lines 6-9. The string // denotes line 4 as comments. The line 
	             by line output code is visualized as below:
	                 int main()
	                 { 
	                   
	                 int a, b, c;
	                 a = b + c;
	                 }
	
	Example 2:
	Input: source = ["a/*comment", 
	                 "line", 
	                 "more_comment*/b"]
	Output: ["ab"]
	Explanation: The original source string is "a/*comment\nline\nmore_comment*/b", 
	             where we have bolded the newline characters.  After deletion, 
	             the implicit newline characters are deleted, leaving the 
	             string "ab", which when delimited by newline characters 
	             becomes ["ab"].

	Constraints:
	* 1 <= source.length <= 100
	* 0 <= source[i].length <= 80
	* source[i] consists of printable ASCII characters.
	* Every open block comment is eventually closed.
	* There are no single-quote or double-quote in the input."""

    def removeComments(self, source: List[str]) -> List[str]:
        ans = []
        comment = False # True for block comment 
        
        for line in source: 
            if not comment: ans.append([]) # if not started as comment
            i = 0
            while i < len(line): 
                if comment: 
                    if line[i:i+2] == "*/": 
                        comment = False 
                        i += 1
                else:  
                    if line[i:i+2] == "//": break 
                    elif line[i:i+2] == "/*": 
                        comment = True 
                        i += 1
                    else: ans[-1].append(line[i])
                i += 1
        return filter(None, map("".join, ans))


    """723. Candy Crush (Medium)
	This question is about implementing a basic elimination algorithm for Candy 
	Crush. Given an m x n integer array board representing the grid of candy 
	where board[i][j] represents the type of candy. A value of board[i][j] == 0 
	represents that the cell is empty. The given board represents the state of 
	the game following the player's move. Now, you need to restore the board to 
	a stable state by crushing candies according to the following rules:
	* If three or more candies of the same type are adjacent vertically or 
	  horizontally, crush them all at the same time - these positions become 
	  empty.
	* After crushing all candies simultaneously, if an empty space on the board 
	  has candies on top of itself, then these candies will drop until they hit 
	  a candy or bottom at the same time. No new candies will drop outside the 
	  top boundary.
	* After the above steps, there may exist more candies that can be crushed. 
	  If so, you need to repeat the above steps.
	* If there does not exist more candies that can be crushed (i.e., the board 
	  is stable), then return the current board.
	You need to perform the above rules until the board becomes stable, then 
	return the stable board.

	Example 1:
	Input: board = [[110,  5,112,113, 114],
	                [210,211,  5,213, 214],
	                [310,311,  3,313, 314],
	                [410,411,412,  5, 414],
	                [  5,  1,512,  3,   3],
	                [610,  4,  1,613, 614],
	                [710,  1,  2,713, 714],
	                [810,  1,  2,  1,   1],
	                [  1,  1,  2,  2,   2],
	                [  4,  1,  4,  4,1014]]
	Output: [[  0,  0,  0,  0,   0],
	         [  0,  0,  0,  0,   0],
	         [  0,  0,  0,  0,   0],
	         [110,  0,  0,  0, 114],
	         [210,  0,  0,  0, 214],
	         [310,  0,  0,113, 314],
	         [410,  0,  0,213, 414],
	         [610,211,112,313, 614],
	         [710,311,412,613, 714],
	         [810,411,512,713,1014]]
	Example 2:

	Input: board = [[1,3,5,5,2],
	                [3,4,3,3,1],
	                [3,2,4,5,2],
	                [2,4,4,5,5],
	                [1,4,4,1,1]]
	Output: [[1,3,0,0,0],
	         [3,4,0,5,2],
	         [3,2,0,3,1],
	         [2,4,0,5,2],
	         [1,4,3,1,1]]

	Constraints:
	* m == board.length
	* n == board[i].length
	* 3 <= m, n <= 50
	* 1 <= board[i][j] <= 2000"""

    def candyCrush(self, board: List[List[int]]) -> List[List[int]]:
        m, n = len(board), len(board[0]) 
        
        while True: 
            vals = []
            for i in range(m): 
                for j in range(n): 
                    if board[i][j]: 
                        if 0 <= i-2 and board[i-2][j] == board[i-1][j] == board[i][j] \
                        or 0 <= i-1 and i+1 < m and board[i-1][j] == board[i][j] == board[i+1][j] \
                        or i+2 < m and board[i][j] == board[i+1][j] == board[i+2][j] \
                        or 0 <= j-2 and board[i][j-2] == board[i][j-1] == board[i][j] \
                        or 0 <= j-1 and j+1 < n and board[i][j-1] == board[i][j] == board[i][j+1] \
                        or j+2 < n and board[i][j] == board[i][j+1] == board[i][j+2]: vals.append((i, j))
                            
            if not vals: break
            for i, j in vals: board[i][j] = 0
            
            # precipitate 
            for j in range(n):
                ii = m-1 
                for i in reversed(range(m)): 
                    if board[i][j]: 
                        board[ii][j], board[i][j] = board[i][j], board[ii][j]
                        ii -= 1
        return board 


    """725. Split Linked List in Parts (Medium)
	Given a (singly) linked list with head node root, write a function to split 
	the linked list into k consecutive linked list "parts". The length of each 
	part should be as equal as possible: no two parts should have a size 
	differing by more than 1. This may lead to some parts being null. The parts 
	should be in order of occurrence in the input list, and parts occurring 
	earlier should always have a size greater than or equal parts occurring 
	later. Return a List of ListNode's representing the linked list parts that 
	are formed. Examples 1->2->3->4, k = 5 // 5 equal parts [ [1], [2], [3], [4], null ]

	Example 1:
	Input: root = [1, 2, 3], k = 5
	Output: [[1],[2],[3],[],[]]
	Explanation: The input and each element of the output are ListNodes, not 
	arrays. For example, the input root has root.val = 1, root.next.val = 2, 
	root.next.next.val = 3, and root.next.next.next = null. The first element 
	output[0] has output[0].val = 1, output[0].next = null. The last element 
	output[4] is null, but it's string representation as a ListNode is [].
	
	Example 2:
	Input: root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
	Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
	Explanation: The input has been split into consecutive parts with size 
	difference at most 1, and earlier parts are a larger size than the later 
	parts.
	
	Note:
	* The length of root will be in the range [0, 1000].
	* Each value of a node in the input will be an integer in the range [0, 999].
	* k will be an integer in the range [1, 50]."""

    def splitListToParts(self, root: ListNode, k: int) -> List[ListNode]:
        n, node = 0, root # length of linked list 
        while node: n, node = n+1, node.next
        
        ans = []
        node = root 
        q, r = divmod(n, k) # quotient & residual
        q += 1
        for i in range(k): 
            ans.append(node)
            if i == r: q -= 1
            prev = None
            for _ in range(q): prev, node = node, node.next
            if prev: prev.next = None # break list into parts 
        return ans 


    """726. Number of Atoms (Hard)
	Given a string formula representing a chemical formula, return the count of 
	each atom. The atomic element always starts with an uppercase character, 
	then zero or more lowercase letters, representing the name. One or more 
	digits representing that element's count may follow if the count is greater 
	than 1. If the count is 1, no digits will follow. For example, "H2O" and 
	"H2O2" are possible, but "H1O2" is impossible. Two formulas are 
	concatenated together to produce another formula. For example, "H2O2He3Mg4" 
	is also a formula. A formula placed in parentheses, and a count (optionally 
	added) is also a formula. For example, "(H2O2)" and "(H2O2)3" are formulas.
	Return the count of all elements as a string in the following form: the 
	first name (in sorted order), followed by its count (if that count is more 
	than 1), followed by the second name (in sorted order), followed by its 
	count (if that count is more than 1), and so on.

	Example 1:
	Input: formula = "H2O"
	Output: "H2O"
	Explanation: The count of elements are {'H': 2, 'O': 1}.

	Example 2:
	Input: formula = "Mg(OH)2"
	Output: "H2MgO2"
	Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.

	Example 3:
	Input: formula = "K4(ON(SO3)2)2"
	Output: "K4N2O14S4"
	Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.

	Example 4:
	Input: formula = "Be32"
	Output: "Be32"

	Constraints:
	* 1 <= formula.length <= 1000
	* formula consists of English letters, digits, '(', and ')'.
	* formula is always valid.
	* All the values in the output will fit in a 32-bit integer."""

    def countOfAtoms(self, formula: str) -> str:
        mp = {}
        stack = []
        for i, x in enumerate(formula): 
            if x == "(": stack.append(i)
            elif x == ")": mp[stack.pop()] = i
        
        def fn(lo, hi): 
            """Return count of atom in a freq table."""
            k = lo 
            ans = defaultdict(int)
            while k < hi: 
                cnt = 0 
                if formula[k] == "(": 
                    freq = fn(k+1, mp[k])
                    k = mp[k] + 1
                    while k < hi and formula[k].isdigit(): 
                        cnt = 10*cnt + int(formula[k])
                        k += 1
                    for key, val in freq.items(): ans[key] += val * max(1, cnt)
                else: 
                    atom = formula[k]
                    k += 1
                    while k < hi and formula[k] != "(" and not formula[k].isupper(): 
                        if formula[k].isalpha(): atom += formula[k]
                        else: cnt = 10*cnt + int(formula[k])
                        k += 1
                    ans[atom] += max(1, cnt)
            return ans 
        
        
        ans = []
        for k, v in sorted(fn(0, len(formula)).items()): 
            ans.append(k)
            if v > 1: ans.append(str(v))
        return "".join(ans)


    """733. Flood Fill (Easy)
	An image is represented by an m x n integer grid image where image[i][j] 
	represents the pixel value of the image. You are also given three integers 
	sr, sc, and newColor. You should perform a flood fill on the image starting 
	from the pixel image[sr][sc]. To perform a flood fill, consider the 
	starting pixel, plus any pixels connected 4-directionally to the starting 
	pixel of the same color as the starting pixel, plus any pixels connected 
	4-directionally to those pixels (also with the same color), and so on. 
	Replace the color of all of the aforementioned pixels with newColor. Return 
	the modified image after performing the flood fill.

	Example 1:
	Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2
	Output: [[2,2,2],[2,2,0],[2,0,1]]
	Explanation: From the center of the image with position (sr, sc) = (1, 1) 
	             (i.e., the red pixel), all pixels connected by a path of the 
	             same color as the starting pixel (i.e., the blue pixels) are 
	             colored with the new color. Note the bottom corner is not 
	             colored 2, because it is not 4-directionally connected to the 
	             starting pixel.
	
	Example 2:
	Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, newColor = 2
	Output: [[2,2,2],[2,2,2]]

	Constraints:
	* m == image.length
	* n == image[i].length
	* 1 <= m, n <= 50
	* 0 <= image[i][j], newColor < 2^16
	* 0 <= sr < m
	* 0 <= sc < n"""

    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:
        m, n = len(image), len(image[0])
        oldColor = image[sr][sc]
        if oldColor != newColor: 
            stack = [(sr, sc)]
            while stack: 
                i, j = stack.pop()
                image[i][j] = newColor 
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    if 0 <= ii < m and 0 <= jj < n and image[ii][jj] == oldColor: 
                        stack.append((ii, jj))
        return image


    """734. Sentence Similarity (Easy)
	We can represent a sentence as an array of words, for example, the sentence 
	"I am happy with leetcode" can be represented as 
	arr = ["I","am",happy","with","leetcode"]. Given two sentences sentence1 
	and sentence2 each represented as a string array and given an array of 
	string pairs similarPairs where similarPairs[i] = [xi, yi] indicates that 
	the two words xi and yi are similar. Return true if sentence1 and sentence2 
	are similar, or false if they are not similar.

	Two sentences are similar if:
	* They have the same length (i.e. the same number of words)
	* sentence1[i] and sentence2[i] are similar.
	Notice that a word is always similar to itself, also notice that the 
	similarity relation is not transitive. For example, if the words a and b 
	are similar and the words b and c are similar, a and c are not necessarily 
	similar.

	Example 1:
	Input: sentence1 = ["great","acting","skills"], 
	       sentence2 = ["fine","drama","talent"], 
	       similarPairs = [["great","fine"],["drama","acting"],["skills","talent"]]
	Output: true
	Explanation: The two sentences have the same length and each word i of 
	             sentence1 is also similar to the corresponding word in 
	             sentence2.
	
	Example 2:
	Input: sentence1 = ["great"], 
	       sentence2 = ["great"], 
	       similarPairs = []
	Output: true
	Explanation: A word is similar to itself.

	Example 3:
	Input: sentence1 = ["great"], 
	       sentence2 = ["doubleplus","good"], 
	       similarPairs = [["great","doubleplus"]]
	Output: false
	Explanation: As they don't have the same length, we return false.

	Constraints:
	* 1 <= sentence1.length, sentence2.length <= 1000
	* 1 <= sentence1[i].length, sentence2[i].length <= 20
	* sentence1[i] and sentence2[i] consist of lower-case and upper-case English letters.
	* 0 <= similarPairs.length <= 1000
	* similarPairs[i].length == 2
	* 1 <= xi.length, yi.length <= 20
	* xi and yi consist of lower-case and upper-case English letters.
	* All the pairs (xi, yi) are distinct."""

    def areSentencesSimilar(self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]) -> bool:
        if len(sentence1) != len(sentence2): return False # edge case 
        
        mp = {}
        for x, y in similarPairs: 
            mp.setdefault(x, set()).add(y)
            mp.setdefault(y, set()).add(x)
        
        for w1, w2 in zip(sentence1, sentence2): 
            if w1 != w2 and w1 not in mp.get(w2, set()): return False 
        return True 


    """737. Sentence Similarity II (Medium)
	We can represent a sentence as an array of words, for example, the sentence 
	"I am happy with leetcode" can be represented as 
	arr = ["I","am",happy","with","leetcode"]. Given two sentences sentence1 
	and sentence2 each represented as a string array and given an array of 
	string pairs similarPairs where similarPairs[i] = [xi, yi] indicates that 
	the two words xi and yi are similar. Return true if sentence1 and sentence2 
	are similar, or false if they are not similar. Two sentences are similar if:
	* They have the same length (i.e., the same number of words)
	* sentence1[i] and sentence2[i] are similar.
	Notice that a word is always similar to itself, also notice that the 
	similarity relation is transitive. For example, if the words a and b are 
	similar, and the words b and c are similar, then a and c are similar.

	Example 1:
	Input: sentence1 = ["great","acting","skills"], 
	       sentence2 = ["fine","drama","talent"], 
	       similarPairs = [["great","good"],["fine","good"],["drama","acting"],["skills","talent"]]
	Output: true
	Explanation: The two sentences have the same length and each word i of 
	             sentence1 is also similar to the corresponding word in 
	             sentence2.
	
	Example 2:
	Input: sentence1 = ["I","love","leetcode"], 
	       sentence2 = ["I","love","onepiece"], 
	       similarPairs = [["manga","onepiece"],["platform","anime"],["leetcode","platform"],["anime","manga"]]
	Output: true
	Explanation: "leetcode" --> "platform" --> "anime" --> "manga" --> "onepiece".
	             Since "leetcode is similar to "onepiece" and the first two 
	             words are the same, the two sentences are similar.
	
	Example 3:
	Input: sentence1 = ["I","love","leetcode"], 
	       sentence2 = ["I","love","onepiece"], 
	       similarPairs = [["manga","hunterXhunter"],["platform","anime"],["leetcode","platform"],["anime","manga"]]
	Output: false
	Explanation: "leetcode" is not similar to "onepiece".

	Constraints:
	* 1 <= sentence1.length, sentence2.length <= 1000
	* 1 <= sentence1[i].length, sentence2[i].length <= 20
	* sentence1[i] and sentence2[i] consist of lower-case and upper-case English letters.
	* 0 <= similarPairs.length <= 2000
	* similarPairs[i].length == 2
	* 1 <= xi.length, yi.length <= 20
	* xi and yi consist of English letters.

	class UnionFind: 

	    def __init__(self): 
	        self.parent = {}
	        self.rank = defaultdict(lambda: 1)
	        
	    def find(self, p): 
	        if p not in self.parent: self.parent[p] = p
	        if p != self.parent[p]: 
	            self.parent[p] = self.find(self.parent[p])
	        return self.parent[p]
	    
	    def union(self, p, q): 
	        prt, qrt = self.find(p), self.find(q)
	        if prt == qrt: return False
	        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
	        self.parent[prt] = qrt
	        self.rank[qrt] += self.rank[prt]
	        return True"""

    def areSentencesSimilarTwo(self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]) -> bool:
        if len(sentence1) != len(sentence2): return False
        
        uf = UnionFind()
        for x, y in similarPairs: uf.union(x, y)
        for x, y in zip(sentence1, sentence2): 
            if uf.find(x) != uf.find(y): return False 
        return True 


    """739. Daily Temperatures (Medium)
	Given a list of daily temperatures T, return a list such that, for each day 
	in the input, tells you how many days you would have to wait until a warmer 
	temperature. If there is no future day for which this is possible, put 0 
	instead. For example, given the list of temperatures T = [73, 74, 75, 71, 
	69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0]. Note that 
	the length of temperatures will be in the range [1, 30000]. Each temperature 
	will be an integer in the range [30, 100]."""

    def dailyTemperatures(self, T: List[int]) -> List[int]:
        ans = [0]*len(T)
        stack = []
        for i in range(len(T)): 
            while stack and T[stack[-1]] < T[i]: 
                ii = stack.pop()
                ans[ii] = i - ii 
            stack.append(i)
        return ans 


    """740. Delete and Earn (Medium)
	Given an array nums of integers, you can perform operations on the array. 
	In each operation, you pick any nums[i] and delete it to earn nums[i] 
	points. After, you must delete every element equal to nums[i] - 1 or 
	nums[i] + 1. You start with 0 points. Return the maximum number of points 
	you can earn by applying such operations.

	Example 1:
	Input: nums = [3, 4, 2]
	Output: 6
	Explanation: Delete 4 to earn 4 points, consequently 3 is also deleted. 
	             Then, delete 2 to earn 2 points. 6 total points are earned.
	Example 2:
	Input: nums = [2, 2, 3, 3, 3, 4]
	Output: 9
	Explanation: Delete 3 to earn 3 points, deleting both 2's and the 4. Then, 
	             delete 3 again to earn 3 points, and 3 again to earn 3 points. 
	             9 total points are earned.
	Note:
	* The length of nums is at most 20000.
	* Each element nums[i] is an integer in the range [1, 10000]."""

    def deleteAndEarn(self, nums: List[int]) -> int:
        freq = Counter(nums)
        prev = -1
        f0 = f1 = 0
        for x in sorted(freq): 
            if prev + 1 == x: f0, f1 = max(f0, f1), f0 + x*freq[x]
            else: f0, f1 = max(f0, f1), max(f0, f1) + x*freq[x]
            prev = x
        return max(f0, f1)


    """742. Closest Leaf in a Binary Tree (Medium)
	Given the root of a binary tree where every node has a unique value and a 
	target integer k, return the value of the nearest leaf node to the target k 
	in the tree. Nearest to a leaf means the least number of edges traveled on 
	the binary tree to reach any leaf of the tree. Also, a node is called a 
	leaf if it has no children.

	Example 1:
	Input: root = [1,3,2], k = 1
	Output: 2
	Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.

	Example 2:
	Input: root = [1], k = 1
	Output: 1
	Explanation: The nearest leaf node is the root node itself.

	Example 3:
	Input: root = [1,2,3,4,null,null,null,5,null,6], k = 2
	Output: 3
	Explanation: The leaf node with value 3 (and not the leaf node with value 6) 
	             is nearest to the node with value 2.

	Constraints:
	* The number of nodes in the tree is in the range [1, 1000].
	* 1 <= Node.val <= 1000
	* All the values of the tree are unique.
	* There exist some node in the tree where Node.val == k."""

    def findClosestLeaf(self, root: Optional[TreeNode], k: int) -> int:
        mp = {root: None}
        stack = [root]
        while stack: 
            node = stack.pop()
            if node.val == k: source = node
            if node.left: 
                mp[node.left] = node
                stack.append(node.left)
            if node.right:
                mp[node.right] = node
                stack.append(node.right)
        
        queue = deque([source])
        seen = {source}
        while queue: 
            x = queue.popleft()
            if x.left is x.right is None: return x.val
            for xx in (x.left, x.right, mp[x]): 
                if xx and xx not in seen: 
                    queue.append(xx)
                    seen.add(xx)


    """746. Min Cost Climbing Stairs (Easy)
	You are given an integer array cost where cost[i] is the cost of ith step 
	on a staircase. Once you pay the cost, you can either climb one or two 
	steps. You can either start from the step with index 0, or the step with 
	index 1. Return the minimum cost to reach the top of the floor.

	Example 1:
	Input: cost = [10,15,20]
	Output: 15
	Explanation: Cheapest is: start on cost[1], pay that cost, and go to the 
	             top.
	
	Example 2:
	Input: cost = [1,100,1,1,1,100,1,1,100,1]
	Output: 6
	Explanation: Cheapest is: start on cost[0], and only step on 1s, skipping 
	             cost[3].

	Constraints:
	* 2 <= cost.length <= 1000
	* 0 <= cost[i] <= 999"""

    def minCostClimbingStairs(self, cost: List[int]) -> int:
        f0 = f1 = 0 
        for x in reversed(cost): 
            f0, f1 = f1, min(f0, f1) + x
        return min(f0, f1)


    """750. Number Of Corner Rectangles (Medium)
	Given a grid where each entry is only 0 or 1, find the number of corner 
	rectangles. A corner rectangle is 4 distinct 1s on the grid that form an 
	axis-aligned rectangle. Note that only the corners need to have the value 
	1. Also, all four 1s used must be distinct.

	Example 1:
	Input: grid = [[1, 0, 0, 1, 0],
         	       [0, 0, 1, 0, 1],
         	       [0, 0, 0, 1, 0],
         	       [1, 0, 1, 0, 1]]
	Output: 1
	Explanation: There is only one corner rectangle, with corners grid[1][2], 
	             grid[1][4], grid[3][2], grid[3][4].

	Example 2:
	Input: grid = [[1, 1, 1],
	               [1, 1, 1],
	               [1, 1, 1]]
	Output: 9
	Explanation: There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, 
	             and one 3x3 rectangle.

	Example 3:
	Input: grid = [[1, 1, 1, 1]]
	Output: 0
	Explanation: Rectangles must have four distinct corners.

	Note:
	* The number of rows and columns of grid will each be in the range [1, 200].
	* Each grid[i][j] will be either 0 or 1.
	* The number of 1s in the grid will be at most 6000."""

    def countCornerRectangles(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0]) # dimensions 
        seen = {}
        ans = 0
        for i in range(m):
            for j in range(n): 
                if grid[i][j]: 
                    for jj in range(j): 
                        if grid[i][jj]: 
                            ans += seen.get((jj, j), 0)
                            seen[jj, j] = 1 + seen.get((jj, j), 0)
        return ans 


    """752. Open the Lock (Medium)
	You have a lock in front of you with 4 circular wheels. Each wheel has 10 
	slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can 
	rotate freely and wrap around: for example we can turn '9' to be '0', or 
	'0' to be '9'. Each move consists of turning one wheel one slot. The lock 
	initially starts at '0000', a string representing the state of the 4 wheels. 
	You are given a list of deadends dead ends, meaning if the lock displays 
	any of these codes, the wheels of the lock will stop turning and you will 
	be unable to open it. Given a target representing the value of the wheels 
	that will unlock the lock, return the minimum total number of turns 
	required to open the lock, or -1 if it is impossible.

	Example 1:
	Input: deadends = ["0201","0101","0102","1212","2002"], target = "0202"
	Output: 6
	Explanation:
	A sequence of valid moves would be "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202".
	Note that a sequence like "0000" -> "0001" -> "0002" -> "0102" -> "0202" would be invalid,
	because the wheels of the lock become stuck after the display becomes the dead end "0102".

	Example 2:
	Input: deadends = ["8888"], target = "0009"
	Output: 1
	Explanation:
	We can turn the last wheel in reverse to move from "0000" -> "0009".

	Example 3:
	Input: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
	Output: -1
	Explanation:
	We can't reach the target without getting stuck.

	Example 4:
	Input: deadends = ["0000"], target = "8888"
	Output: -1

	Constraints:
	* 1 <= deadends.length <= 500
	* deadends[i].length == 4
	* target.length == 4
	* target will not be in the list deadends.
	* target and deadends[i] consist of digits only."""

    def openLock(self, deadends: List[str], target: str) -> int:
        pq = [(0, "0000")] # min priority queue
        seen = set(deadends)
        
        while pq: 
            k, n = heappop(pq)
            if n not in seen: 
                if n == target: return k
                seen.add(n)  # marked as seen upon processing 
                for i in range(4): 
                    for chg in (-1, 1): 
                        nn = n[:i] + str((int(n[i]) + chg)%10) + n[i+1:]
                        if nn not in seen: heappush(pq, (k+1, nn))
        return -1 


    """753. Cracking the Safe (Hard)
	There is a box protected by a password. The password is a sequence of n 
	digits where each digit can be in the range [0, k - 1]. While entering a 
	password, the last n digits entered will automatically be matched against 
	the correct password. For example, assuming the correct password is "345", 
	if you type "012345", the box will open because the correct password 
	matches the suffix of the entered password. Return any password of minimum 
	length that is guaranteed to open the box at some point of entering it.

	Example 1:
	Input: n = 1, k = 2
	Output: "10"
	Explanation: "01" will be accepted too.

	Example 2:
	Input: n = 2, k = 2
	Output: "01100"
	Explanation: "01100", "10011", "11001" will be accepted too.

	Constraints:
	* 1 <= n <= 4
	* 1 <= k <= 10
	* 1 <= kn <= 4096"""

    def crackSafe(self, n: int, k: int) -> str:
    	"""This problem is to find De Bruijn sequence"""
        if n == 1: return "".join(map(str, reversed(range(k))))
        
        def fn(x): 
            """Return Eulerian path via Hierholzer's algo."""
            while mp.get(x, 0) < k: 
                mp[x] = 1 + mp.get(x, 0)
                fn(x[1:] + str(mp[x]-1))
            if not ans: ans.append(x)
            else: ans.append(x[0])
        
        mp = {}
        ans = []
        fn("0"*(n-1))
        return "".join(ans)


    """754. Reach a Number (Medium)
	You are standing at position 0 on an infinite number line. There is a goal 
	at position target. On each move, you can either go left or right. During 
	the n-th move (starting from 1), you take n steps. Return the minimum 
	number of steps required to reach the destination.

	Example 1:
	Input: target = 3
	Output: 2
	Explanation:
	On the first move we step from 0 to 1.
	On the second step we step from 1 to 3.
	
	Example 2:
	Input: target = 2
	Output: 3
	Explanation:
	On the first move we step from 0 to 1.
	On the second move we step  from 1 to -1.
	On the third move we step from -1 to 2.
	
	Note: target will be a non-zero integer in the range [-10^9, 10^9]."""

    def reachNumber(self, target: int) -> int:
        target = abs(target)
        k = ceil((-1 + sqrt(1 + 8*target))/2)
        return k if not k*(k+1)//2 - target & 1 else k + 1 + k%2


    """755. Pour Water (Medium)
	You are given an elevation map represents as an integer array heights where 
	heights[i] representing the height of the terrain at index i. The width at 
	each index is 1. You are also given two integers volume and k. volume units 
	of water will fall at index k. Water first drops at the index k and rests 
	on top of the highest terrain or water at that index. Then, it flows 
	according to the following rules:
	* If the droplet would eventually fall by moving left, then move left.
	* Otherwise, if the droplet would eventually fall by moving right, then 
	  move right.
	* Otherwise, rise to its current position.
	Here, "eventually fall" means that the droplet will eventually be at a 
	lower level if it moves in that direction. Also, level means the height of 
	the terrain plus any water in that column. We can assume there is 
	infinitely high terrain on the two sides out of bounds of the array. Also, 
	there could not be partial water being spread out evenly on more than one 
	grid block, and each unit of water has to be in exactly one block.

	Example 1:
	Input: heights = [2,1,1,2,1,2,2], volume = 4, k = 3
	Output: [2,2,2,3,2,2,2]
	Explanation: The first drop of water lands at index k = 3. When moving left 
	             or right, the water can only move to the same level or a lower 
	             level. (By level, we mean the total height of the terrain plus 
	             any water in that column.) Since moving left will eventually 
	             make it fall, it moves left. (A droplet "made to fall" means 
	             go to a lower height than it was at previously.) Since moving 
	             left will not make it fall, it stays in place. The next 
	             droplet falls at index k = 3. Since the new droplet moving 
	             left will eventually make it fall, it moves left. Notice that 
	             the droplet still preferred to move left, even though it could 
	             move right (and moving right makes it fall quicker.) The third 
	             droplet falls at index k = 3. Since moving left would not 
	             eventually make it fall, it tries to move right. Since moving 
	             right would eventually make it fall, it moves right. Finally, 
	             the fourth droplet falls at index k = 3. Since moving left 
	             would not eventually make it fall, it tries to move right. 
	             Since moving right would not eventually make it fall, it stays 
	             in place.

	Example 2:
	Input: heights = [1,2,3,4], volume = 2, k = 2
	Output: [2,3,3,4]
	Explanation: The last droplet settles at index 1, since moving further left 
	             would not cause it to eventually fall to a lower height.
	
	Example 3:
	Input: heights = [3,1,3], volume = 5, k = 1
	Output: [4,4,4]

	Constraints:
	* 1 <= heights.length <= 100
	* 0 <= heights[i] <= 99
	* 0 <= volume <= 2000
	* 0 <= k < heights.length"""

    def pourWater(self, heights: List[int], volume: int, k: int) -> List[int]:
        left, right = [], [] # 2 stacks 
        lo = hi = k
        for _ in range(volume): 
            
            while lo and heights[lo-1] <= heights[lo]: 
                if heights[lo-1] < heights[lo]: left.append(lo-1)
                lo -= 1
            while hi+1 < len(heights) and heights[hi] >= heights[hi+1]: 
                if heights[hi] > heights[hi+1]: right.append(hi+1)
                hi += 1
                
            if left: 
                i = left[-1]
                heights[i] += 1
                if heights[i] == heights[i+1]: left.pop()
                if lo <= i-1: left.append(i-1)
            elif right: 
                i = right[-1]
                heights[i] += 1
                if heights[i-1] == heights[i]: right.pop()
                if i+1 <= hi: right.append(i+1)
            else: 
                heights[k] += 1
                if k and heights[k-1] < heights[k]: left.append(k-1)
                if k+1 < len(heights) and heights[k] > heights[k+1]: right.append(k+1)
        return heights


    """756. Pyramid Transition Matrix (Medium)
	We are stacking blocks to form a pyramid. Each block has a color which is a 
	one letter string. We are allowed to place any color block C on top of two 
	adjacent blocks of colors A and B, if and only if ABC is an allowed triple. 
	We start with a bottom row of bottom, represented as a single string. We 
	also start with a list of allowed triples allowed. Each allowed triple is 
	represented as a string of length 3. Return true if we can build the pyramid 
	all the way to the top, otherwise false.

	Example 1:
	Input: bottom = "BCD", allowed = ["BCG", "CDE", "GEA", "FFF"]
	Output: true
	Explanation: We can stack the pyramid like this:
	    A
	   / \
	  G   E
	 / \ / \
	B   C   D
	We are allowed to place G on top of B and C because BCG is an allowed triple.  
	Similarly, we can place E on top of C and D, then A on top of G and E.

	Example 2:
	Input: bottom = "AABA", allowed = ["AAA", "AAB", "ABA", "ABB", "BAC"]
	Output: false
	Explanation: We can't stack the pyramid to the top. Note that there could 
	             be allowed triples (A, B, C) and (A, B, D) with C != D.
	 
	Constraints:
	* bottom will be a string with length in range [2, 8].
	* allowed will have length in range [0, 200].
	* Letters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}."""

    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:
        mp = {}
        for x, y, z in allowed: mp.setdefault((x, y), []).append(z)
        
        def fn(row):
            """Return True if row could be built from allowed transition."""
            if len(row) == 1: return True 
            for xx in product(*(mp.get((x, y), []) for x, y in zip(row, row[1:]))):
                if fn(xx): return True
            return False 
        
        return fn(bottom)


    """758. Bold Words in String (Easy)
	Given a set of keywords words and a string S, make all appearances of all 
	keywords in S bold. Any letters between <b> and </b> tags become bold. The 
	returned string should use the least number of tags possible, and of course 
	the tags should form a valid combination. For example, given that 
	words = ["ab", "bc"] and S = "aabcd", we should return "a<b>abc</b>d". Note 
	that returning "a<b>a<b>b</b>c</b>d" would use more tags, so it is incorrect.

	Constraints:
	* words has length in range [0, 50].
	* words[i] has length in range [1, 10].
	* S has length in range [0, 500].
	* All characters in words[i] and S are lowercase letters.
	* Note: This question is the same as 616: https://leetcode.com/problems/add-bold-tag-in-string/"""

    def boldWords(self, words: List[str], S: str) -> str:
        mark = [False]*len(S)
        
        for word in words: 
            k = -1
            while True: 
                k = S.find(word, k+1)
                if k == -1: break 
                mark[k:k+len(word)] = [True]*len(word)
        
        ans = []
        for i in range(len(S)): 
            if mark[i] and (i == 0 or not mark[i-1]): ans.append("<b>")
            ans.append(S[i])
            if mark[i] and (i+1 == len(S) or not mark[i+1]): ans.append("</b>")
        return "".join(ans)


    """760. Find Anagram Mappings (Easy)
	Given two lists Aand B, and B is an anagram of A. B is an anagram of A 
	means B is made by randomizing the order of the elements in A. We want to 
	find an index mapping P, from A to B. A mapping P[i] = j means the ith 
	element in A appears in B at index j. These lists A and B may contain 
	duplicates. If there are multiple answers, output any of them. For example, 
	given
	A = [12, 28, 46, 32, 50]
	B = [50, 12, 32, 46, 28]

	We should return [1, 4, 3, 2, 0] as P[0] = 1 because the 0th element of A 
	appears at B[1], and P[1] = 4 because the 1st element of A appears at B[4], 
	and so on.
	
	Note:
	* A, B have equal lengths in range [1, 100].
	* A[i], B[i] are integers in range [0, 10^5]."""

    def anagramMappings(self, A: List[int], B: List[int]) -> List[int]:
        mp = {}
        for i, x in enumerate(B):
            mp.setdefault(x, []).append(i)
        
        ans = []
        for x in A: 
            ans.append(mp[x].pop())
        return ans 


    """763. Partition Labels (Medium)
	A string S of lowercase English letters is given. We want to partition this 
	string into as many parts as possible so that each letter appears in at 
	most one part, and return a list of integers representing the size of these 
	parts.

	Example 1:
	Input: S = "ababcbacadefegdehijhklij"
	Output: [9,7,8]
	Explanation: The partition is "ababcbaca", "defegde", "hijhklij". This is a 
	             partition so that each letter appears in at most one part. A 
	             partition like "ababcbacadefegde", "hijhklij" is incorrect, 
	             because it splits S into less parts.
	Note:
	* S will have length in range [1, 500].
	* S will consist of lowercase English letters ('a' to 'z') only."""

    def partitionLabels(self, s: str) -> List[int]:
        last = {ch : i for i, ch in enumerate(s)}
        ans = []
        lo = hi = 0 
        for i, ch in enumerate(s): 
            hi = max(hi, last[ch])
            if i == hi: 
                ans.append(hi - lo + 1)
                lo = hi + 1
        return ans 


    """764. Largest Plus Sign (Medium)
	In a 2D grid from (0, 0) to (N-1, N-1), every cell contains a 1, except 
	those cells in the given list mines which are 0. What is the largest axis-
	aligned plus sign of 1s contained in the grid? Return the order of the 
	plus sign. If there is none, return 0. An "axis-aligned plus sign of 1s of 
	order k" has some center grid[x][y] = 1 along with 4 arms of length k-1 
	going up, down, left, and right, and made of 1s. This is demonstrated in 
	the diagrams below. Note that there could be 0s or 1s beyond the arms of 
	the plus sign, only the relevant area of the plus sign is checked for 1s.

	Examples of Axis-Aligned Plus Signs of Order k:
	Order 1:
	000
	010
	000

	Order 2:
	00000
	00100
	01110
	00100
	00000

	Order 3:
	0000000
	0001000
	0001000
	0111110
	0001000
	0001000
	0000000

	Example 1:
	Input: N = 5, mines = [[4, 2]]
	Output: 2
	Explanation:
	11111
	11111
	11111
	11111
	11011
	In the above grid, the largest plus sign can only be order 2. One of them 
	is marked in bold.

	Example 2:
	Input: N = 2, mines = []
	Output: 1
	Explanation: There is no plus sign of order 2, but there is of order 1.

	Example 3:

	Input: N = 1, mines = [[0, 0]]
	Output: 0
	Explanation:
	There is no plus sign, so return 0.
	
	Note:
	* N will be an integer in the range [1, 500].
	* mines will have length at most 5000.
	* mines[i] will be length 2 and consist of integers in the range [0, N-1].
	* (Additionally, programs submitted in C, C++, or C# will be judged with a 
	  slightly smaller time limit.)"""

    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:
        dp = [[n] * n for _ in range(n)]
        for i, j in mines: dp[i][j] = 0
        
        for i in range(n):
            ll = dd = rr = uu = 0 
            for j in range(n): 
                dp[i][j] = min(dp[i][j], ll := ll+1 if dp[i][j] else 0)
                dp[j][i] = min(dp[j][i], dd := dd+1 if dp[j][i] else 0)
                dp[i][~j] = min(dp[i][~j], rr := rr+1 if dp[i][~j] else 0)
                dp[~j][i] = min(dp[~j][i], uu := uu+1 if dp[~j][i] else 0)
                    
        return max(map(max, dp))


    """765. Couples Holding Hands (Hard)
	N couples sit in 2N seats arranged in a row and want to hold hands. We want 
	to know the minimum number of swaps so that every couple is sitting side by 
	side. A swap consists of choosing any two people, then they stand up and 
	switch seats. The people and seats are represented by an integer from 0 to 
	2N-1, the couples are numbered in order, the first couple being (0, 1), the 
	second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).
	The couples' initial seating is given by row[i] being the value of the person 
	who is initially sitting in the i-th seat.

	Example 1:
	Input: row = [0, 2, 1, 3]
	Output: 1
	Explanation: We only need to swap the second (row[1]) and third (row[2]) person.

	Example 2:
	Input: row = [3, 2, 0, 1]
	Output: 0
	Explanation: All couples are already seated side by side.

	Note:
	* len(row) is even and in the range of [4, 60].
	* row is guaranteed to be a permutation of 0...len(row)-1."""

    def minSwapsCouples(self, row: List[int]) -> int:
        loc = {x: i for i, x in enumerate(row)}
        ans = 0
        for i in range(0, len(row), 2): 
            p = row[i] - 1 if row[i]&1 else row[i]+1
            if row[i+1] != p: 
                ans += 1
                ii = loc[p]
                loc[row[i+1]], loc[row[ii]] = loc[row[ii]], loc[row[i+1]] # swap mappings
                row[i+1], row[ii] = row[ii], row[i+1] # swap values 
        return ans 


    """767. Reorganize String (Medium)
	Given a string S, check if the letters can be rearranged so that two 
	characters that are adjacent to each other are not the same. If possible, 
	output any possible result.  If not possible, return the empty string.

	Example 1:
	Input: S = "aab"
	Output: "aba"

	Example 2:
	Input: S = "aaab"
	Output: ""
	Note: S will consist of lowercase letters and have length in range [1, 500]."""

    def reorganizeString(self, S: str) -> str:
        freq = {}
        for c in S: freq[c] = 1 +freq.get(c, 0) # frequency table 
        
        ans = [""]*len(S)
        i = 0
        for k in sorted(freq, reverse=True, key=freq.get): 
            if 2*freq[k] - 1 > len(S): return "" # impossible 
            for _ in range(freq[k]): 
                ans[i] = k
                i = i+2 if i+2 < len(S) else 1 # reset to 1 
        return "".join(ans)


    """768. Max Chunks To Make Sorted II (Hard)
	You are given an integer array arr. We split arr into some number of chunks 
	(i.e., partitions), and individually sort each chunk. After concatenating 
	them, the result should equal the sorted array. Return the largest number 
	of chunks we can make to sort the array.

	Example 1:
	Input: arr = [5,4,3,2,1]
	Output: 1
	Explanation: Splitting into two or more chunks will not return the required 
	             result. For example, splitting into [5, 4], [3, 2, 1] will 
	             result in [4, 5, 1, 2, 3], which isn't sorted.
	
	Example 2:
	Input: arr = [2,1,3,4,4]
	Output: 4
	Explanation: We can split into two chunks, such as [2, 1], [3, 4, 4]. 
	             However, splitting into [2, 1], [3], [4], [4] is the highest 
	             number of chunks possible.

	Constraints:
	* 1 <= arr.length <= 2000
	* 0 <= arr[i] <= 10^8"""

    def maxChunksToSorted(self, arr: List[int]) -> int:
        stack = []
        for i, x in enumerate(arr): 
            most = x
            while stack and stack[-1] > x: most = max(most, stack.pop())
            stack.append(most)
        return len(stack)


    """769. Max Chunks To Make Sorted (Medium)
	Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we 
	split the array into some number of "chunks" (partitions), and individually 
	sort each chunk.  After concatenating them, the result equals the sorted 
	array. What is the most number of chunks we could have made?

	Example 1:
	Input: arr = [4,3,2,1,0]
	Output: 1
	Explanation: Splitting into two or more chunks will not return the required 
	             result. For example, splitting into [4, 3], [2, 1, 0] will 
	             result in [3, 4, 0, 1, 2], which isn't sorted.

	Example 2:
	Input: arr = [1,0,2,3,4]
	Output: 4
	Explanation: We can split into two chunks, such as [1, 0], [2, 3, 4]. 
	             However, splitting into [1, 0], [2], [3], [4] is the highest 
	             number of chunks possible.
	
	Note:
	* arr will have length in range [1, 10].
	* arr[i] will be a permutation of [0, 1, ..., arr.length - 1]."""

    def maxChunksToSorted(self, arr: List[int]) -> int:
        ans = prefix = 0
        for i, x in enumerate(arr): 
            prefix = max(prefix, x)
            if i == prefix: ans += 1
        return ans 


    """773. Sliding Puzzle (Hard)
	On a 2x3 board, there are 5 tiles represented by the integers 1 through 5, 
	and an empty square represented by 0. A move consists of choosing 0 and a 
	4-directionally adjacent number and swapping it. The state of the board is 
	solved if and only if the board is [[1,2,3],[4,5,0]]. Given a puzzle board, 
	return the least number of moves required so that the state of the board is 
	solved. If it is impossible for the state of the board to be solved, return 
	-1.

	Examples:
	Input: board = [[1,2,3],[4,0,5]]
	Output: 1
	Explanation: Swap the 0 and the 5 in one move.

	Input: board = [[1,2,3],[5,4,0]]
	Output: -1
	Explanation: No number of moves will make the board solved.

	Input: board = [[4,1,2],[5,0,3]]
	Output: 5
	Explanation: 5 is the smallest number of moves that solves the board.
	An example path:
	After move 0: [[4,1,2],[5,0,3]]
	After move 1: [[4,1,2],[0,5,3]]
	After move 2: [[0,1,2],[4,5,3]]
	After move 3: [[1,0,2],[4,5,3]]
	After move 4: [[1,2,0],[4,5,3]]
	After move 5: [[1,2,3],[4,5,0]]

	Input: board = [[3,2,4],[1,5,0]]
	Output: 14

	Note:
	* board will be a 2 x 3 array as described above.
	* board[i][j] will be a permutation of [0, 1, 2, 3, 4, 5]."""

    def slidingPuzzle(self, board: List[List[int]]) -> int:
        board = board[0] + board[1] # flatten into vector 
        
        ans = 0 
        seen = set([tuple(board)])
        queue = [board]
        while queue: 
            newq = []
            for x in queue: 
                if x == [1,2,3,4,5,0]: return ans 
                k = x.index(0)
                for kk in (k-1, k+1, k-3, k+3): 
                    if 0 <= kk < 6 and (k, kk) not in ((2, 3), (3, 2)):
                        xx = x.copy()
                        xx[k], xx[kk] = xx[kk], xx[k]
                        if tuple(xx) not in seen: 
                            seen.add(tuple(xx))
                            newq.append(xx)
            queue = newq 
            ans += 1
        return -1 


    """776. Split BST (Medium)
	Given the root of a binary search tree (BST) and an integer target, split 
	the tree into two subtrees where one subtree has nodes that are all smaller 
	or equal to the target value, while the other subtree has all nodes that 
	are greater than the target value. It Is not necessarily the case that the 
	tree contains a node with the value target. Additionally, most of the 
	structure of the original tree should remain. Formally, for any child c 
	with parent p in the original tree, if they are both in the same subtree 
	after the split, then node c should still have the parent p. Return an 
	array of the two roots of the two subtrees.

	Example 1:
	Input: root = [4,2,6,1,3,5,7], target = 2
	Output: [[2,1],[4,3,6,null,null,5,7]]

	Example 2:
	Input: root = [1], target = 1
	Output: [[1],[]]

	Constraints:
	* The number of nodes in the tree is in the range [1, 50].
	* 0 <= Node.val, target <= 1000"""

    def splitBST(self, root: Optional[TreeNode], target: int) -> List[Optional[TreeNode]]:
        
        def fn(node):
            """Return splitted BST."""
            if not node: return None, None
            if node.val <= target: 
                left, right = fn(node.right)
                node.right = left
                return node, right
            else: 
                left, right = fn(node.left)
                node.left = right
                return left, node
                
        return fn(root)


    """777. Swap Adjacent in LR String (Medium)
	In a string composed of 'L', 'R', and 'X' characters, like "RXXLRXRXL", a 
	move consists of either replacing one occurrence of "XL" with "LX", or 
	replacing one occurrence of "RX" with "XR". Given the starting string start 
	and the ending string end, return True if and only if there exists a 
	sequence of moves to transform one string to the other.

	Example 1:
	Input: start = "RXXLRXRXL", end = "XRLXXRRLX"
	Output: true
	Explanation: We can transform start to end following these steps:
	RXXLRXRXL ->
	XRXLRXRXL ->
	XRLXRXRXL ->
	XRLXXRRXL ->
	XRLXXRRLX

	Example 2:
	Input: start = "X", end = "L"
	Output: false

	Example 3:
	Input: start = "LLR", end = "RRL"
	Output: false

	Example 4:
	Input: start = "XL", end = "LX"
	Output: true

	Example 5:
	Input: start = "XLLR", end = "LXLX"
	Output: false

	Constraints:
	* 1 <= start.length <= 104
	* start.length == end.length
	* Both start and end will only consist of characters in 'L', 'R', and 'X'."""

    def canTransform(self, start: str, end: str) -> bool:
        ss = [(x, i) for i, x in enumerate(start) if x != "X"]
        ee = [(x, i) for i, x in enumerate(end) if x != "X"]
        
        if len(ss) != len(ee): return False 
        
        for (s, i), (e, j) in zip(ss, ee): 
            if s != e: return False 
            if s == e == "L" and i < j: return False 
            if s == e == "R" and i > j: return False 
        return True 


    """778. Swim in Rising Water (Hard)
	On an N x N grid, each square grid[i][j] represents the elevation at that 
	point (i,j). Now rain starts to fall. At time t, the depth of the water 
	everywhere is t. You can swim from a square to another 4-directionally 
	adjacent square if and only if the elevation of both squares individually 
	are at most t. You can swim infinite distance in zero time. Of course, you 
	must stay within the boundaries of the grid during your swim. You start at 
	the top left square (0, 0). What is the least time until you can reach the 
	bottom right square (N-1, N-1)?

	Example 1:
	Input: [[0,2],[1,3]]
	Output: 3
	Explanation: At time 0, you are in grid location (0, 0). You cannot go 
	             anywhere else because 4-directionally adjacent neighbors have 
	             a higher elevation than t = 0. You cannot reach point (1, 1) 
	             until time 3. When the depth of water is 3, we can swim 
	             anywhere inside the grid.
	
	Example 2:
	Input: [[ 0, 1, 2, 3, 4],
	        [24,23,22,21, 5],
	        [12,13,14,15,16],
	        [11,17,18,19,20],
	        [10, 9, 8, 7, 6]]
	Output: 16
	Explanation:
	 0  1  2  3  4
	24 23 22 21  5
	12 13 14 15 16
	11 17 18 19 20
	10  9  8  7  6

	The final route is marked in bold. We need to wait until time 16 so that 
	(0, 0) and (4, 4) are connected.
	
	Note:
	* 2 <= N <= 50.
	* grid[i][j] is a permutation of [0, ..., N*N - 1]."""

    def swimInWater(self, grid: List[List[int]]) -> int:
        n = len(grid) # dimension
        pq = [(grid[0][0], 0, 0)]
        seen = {(0, 0)}
        while pq: 
            k, i, j = heappop(pq)
            if i == j == n-1: return k
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < n and 0 <= jj < n and (ii, jj) not in seen:
                    heappush(pq, (max(k, grid[ii][jj]), ii, jj))
                    seen.add((ii, jj))


    """779. K-th Symbol in Grammar (Medium)
	On the first row, we write a 0. Now in every subsequent row, we look at the 
	previous row and replace each occurrence of 0 with 01, and each occurrence 
	of 1 with 10. Given row N and index K, return the K-th indexed symbol in 
	row N. (The values of K are 1-indexed.) (1 indexed).

	Examples:
	Input: N = 1, K = 1
	Output: 0

	Input: N = 2, K = 1
	Output: 0

	Input: N = 2, K = 2
	Output: 1

	Input: N = 4, K = 5
	Output: 1

	Explanation:
	row 1: 0
	row 2: 01
	row 3: 0110
	row 4: 01101001
	
	Note:
	* N will be an integer in the range [1, 30].
	* K will be an integer in the range [1, 2^(N-1)]."""

    def kthGrammar(self, N: int, K: int) -> int:
        return bin(K-1).count("1") & 1


    """780. Reaching Points (Hard)
	Given four integers sx, sy, tx, and ty, return true if it is possible to 
	convert the point (sx, sy) to the point (tx, ty) through some operations, 
	or false otherwise. The allowed operation on some point (x, y) is to 
	convert it to either (x, x + y) or (x + y, y).

	Example 1:
	Input: sx = 1, sy = 1, tx = 3, ty = 5
	Output: true
	Explanation: One series of moves that transforms the starting point to the 
	             target is:
	             (1, 1) -> (1, 2)
	             (1, 2) -> (3, 2)
	             (3, 2) -> (3, 5)
	
	Example 2:
	Input: sx = 1, sy = 1, tx = 2, ty = 2
	Output: false

	Example 3:
	Input: sx = 1, sy = 1, tx = 1, ty = 1
	Output: true

	Constraints: 1 <= sx, sy, tx, ty <= 109"""

    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:
        while sx < tx or sy < ty: 
            if tx > ty: 
                k = (tx - sx)//ty 
                if k == 0: break 
                tx -= k * ty 
            else: 
                k = (ty - sy)//tx 
                if k == 0: break 
                ty -= k * tx 
        return sx == tx and sy == ty


    """781. Rabbits in Forest (Medium)
	In a forest, each rabbit has some color. Some subset of rabbits (possibly 
	all of them) tell you how many other rabbits have the same color as them. 
	Those answers are placed in an array. Return the minimum number of rabbits 
	that could be in the forest.

	Examples:
	Input: answers = [1, 1, 2]
	Output: 5
	Explanation:
	The two rabbits that answered "1" could both be the same color, say red. 
	The rabbit than answered "2" can't be red or the answers would be 
	inconsistent. Say the rabbit that answered "2" was blue. Then there should 
	be 2 other blue rabbits in the forest that didn't answer into the array. 
	The smallest possible number of rabbits in the forest is therefore 5: 3 
	that answered plus 2 that didn't.

	Input: answers = [10, 10, 10]
	Output: 11

	Input: answers = []
	Output: 0
	
	Note:
	* answers will have length at most 1000.
	* Each answers[i] will be an integer in the range [0, 999]."""

    def numRabbits(self, answers: List[int]) -> int:
        ans = 0
        cnt = defaultdict(int)
        for x in answers: 
            if not cnt[x] % (1 + x): ans += 1 + x # reached capacity & update ans
            cnt[x] += 1
        return ans 


    """782. Transform to Chessboard (Hard)
	You are given an n x n binary grid board. In each move, you can swap any 
	two rows with each other, or any two columns with each other. Return the 
	minimum number of moves to transform the board into a chessboard board. If 
	the task is impossible, return -1. A chessboard board is a board where no 
	0's and no 1's are 4-directionally adjacent.

	Example 1:
	Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
	Output: 2
	Explanation: One potential sequence of moves is shown. The first move swaps 
	             the first and second column. The second move swaps the second 
	             and third row.
	
	Example 2:
	Input: board = [[0,1],[1,0]]
	Output: 0
	Explanation: Also note that the board with 0 in the top left corner, is 
	             also a valid chessboard.
	
	Example 3:
	Input: board = [[1,0],[1,0]]
	Output: -1
	Explanation: No matter what sequence of moves you make, you cannot end with 
	             a valid chessboard.

	Constraints:
	* n == board.length
	* n == board[i].length
	* 2 <= n <= 30
	* board[i][j] is either 0 or 1."""

    def movesToChessboard(self, board: List[List[int]]) -> int:
        n = len(board)
        
        def fn(vals): 
            """Return min moves to transform to chessboard."""
            total = odd = 0 
            for i, x in enumerate(vals): 
                if vals[0] == x: 
                    total += 1
                    if i&1: odd += 1
                elif vals[0] ^ x != (1 << n) - 1: return inf
            ans = inf 
            if len(vals) <= 2*total <= len(vals)+1: ans = min(ans, odd)
            if len(vals)-1 <= 2*total <= len(vals): ans = min(ans, total - odd)
            return ans 
        
        rows, cols = [0]*n, [0]*n
        for i in range(n): 
            for j in range(n): 
                if board[i][j]: 
                    rows[i] ^= 1 << j 
                    cols[j] ^= 1 << i
        ans = fn(rows) + fn(cols)
        return ans if ans < inf else -1 


    """784. Letter Case Permutation (Medium)
	Given a string S, we can transform every letter individually to be 
	lowercase or uppercase to create another string. Return a list of all 
	possible strings we could create. You can return the output in any order.

	Example 1:
	Input: S = "a1b2"
	Output: ["a1b2","a1B2","A1b2","A1B2"]

	Example 2:
	Input: S = "3z4"
	Output: ["3z4","3Z4"]

	Example 3:
	Input: S = "12345"
	Output: ["12345"]

	Example 4:
	Input: S = "0"
	Output: ["0"]

	Constraints:
	* S will be a string with length between 1 and 12.
	* S will consist only of letters or digits."""

    def letterCasePermutation(self, S: str) -> List[str]:
        ans = [""]
        for c in S: 
            ans = [x + cc for x in ans for cc in {c, c.swapcase()}]
        return ans 


    """785. Is Graph Bipartite? (Medium)
	There is an undirected graph with n nodes, where each node is numbered 
	between 0 and n - 1. You are given a 2D array graph, where graph[u] is an 
	array of nodes that node u is adjacent to. More formally, for each v in 
	graph[u], there is an undirected edge between node u and node v. The graph 
	has the following properties:
	* There are no self-edges (graph[u] does not contain u).
	* There are no parallel edges (graph[u] does not contain duplicate values).
	* If v is in graph[u], then u is in graph[v] (the graph is undirected).
	* The graph may not be connected, meaning there may be two nodes u and v 
	  such that there is no path between them.
	A graph is bipartite if the nodes can be partitioned into two independent 
	sets A and B such that every edge in the graph connects a node in set A and 
	a node in set B. Return true if and only if it is bipartite.

	Example 1:
	Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
	Output: false
	Explanation: There is no way to partition the nodes into two independent 
	             sets such that every edge connects a node in one and a node in 
	             the other.

	Example 2:
	Input: graph = [[1,3],[0,2],[1,3],[0,2]]
	Output: true
	Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.

	Constraints:
	* graph.length == n
	* 1 <= n <= 100
	* 0 <= graph[u].length < n
	* 0 <= graph[u][i] <= n - 1
	* graph[u] does not contain u.
	* All the values of graph[u] are unique.
	* If graph[u] contains v, then graph[v] contains u."""

    def isBipartite(self, graph: List[List[int]]) -> bool:
        seen = [0]*len(graph)
        
        for k in range(len(graph)): 
            if not seen[k]: 
                seen[k] = 1
                stack = [k]
                while stack: 
                    n = stack.pop()
                    for nn in graph[n]: 
                        if not seen[nn]: 
                            seen[nn] = seen[n] + 1
                            stack.append(nn)
                        elif seen[n] & 1 == seen[nn] & 1: return False # check parity
        return True 


    """786. K-th Smallest Prime Fraction (Hard)
	You are given a sorted integer array arr containing 1 and prime numbers, 
	where all the integers of arr are unique. You are also given an integer k.
	For every i and j where 0 <= i < j < arr.length, we consider the fraction 
	arr[i] / arr[j]. Return the kth smallest fraction considered. Return your 
	answer as an array of integers of size 2, where answer[0] == arr[i] and 
	answer[1] == arr[j].

	Example 1:
	Input: arr = [1,2,3,5], k = 3
	Output: [2,5]
	Explanation: The fractions to be considered in sorted order are:
	             1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
	             The third fraction is 2/5.
	
	Example 2:
	Input: arr = [1,7], k = 1
	Output: [1,7]

	Constraints:
	* 2 <= arr.length <= 1000
	* 1 <= arr[i] <= 3 * 10^4
	* arr[0] == 1
	* arr[i] is a prime number for i > 0.
	* All the numbers of arr are unique and sorted in strictly increasing order.
	* 1 <= k <= arr.length * (arr.length - 1) / 2"""

    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:
        pq = [(arr[i]/arr[-1], i, -1) for i in range(len(arr)-1)]
        for _ in range(k): 
            _, i, j = heappop(pq)
            if i - j + 1 < len(arr): heappush(pq, (arr[i]/arr[j-1], i, j-1))
        return [arr[i], arr[j]]


    """787. Cheapest Flights Within K Stops (Medium)
	There are n cities connected by m flights. Each flight starts from city u 
	and arrives at v with a price w. Now given all the cities and flights, 
	together with starting city src and the destination dst, your task is to 
	find the cheapest price from src to dst with up to k stops. If there is no 
	such route, output -1.

	Example 1:
	Input: 
	n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
	src = 0, dst = 2, k = 1
	Output: 200
	Explanation: The cheapest price from city 0 to city 2 with at most 1 stop 
	             costs 200, as marked red in the picture.

	Example 2:
	Input: 
	n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
	src = 0, dst = 2, k = 0
	Output: 500
	Explanation: The cheapest price from city 0 to city 2 with at most 0 stop 
	             costs 500, as marked blue in the picture.

	Constraints:
	* The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.
	* The size of flights will be in range [0, n * (n - 1) / 2].
	* The format of each flight will be (src, dst, price).
	* The price of each flight will be in the range [1, 10000].
	* k is in the range of [0, n - 1].
	* There will not be any duplicated flights or self cycles."""

    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:
        graph = {} # digraph 
        for u, v, p in flights: 
            graph.setdefault(u, []).append((v, p)) 
            
        pq = [(0, -1, src)] # min-heap (cost-stop-city)
        while pq: 
            p, k, u = heappop(pq) # current stop 
            if k <= K: 
                if u == dst: return p
                for v, pp in graph.get(u, []): 
                    heappush(pq, (p + pp, k+1, v))
        return -1


    """789. Escape The Ghosts (Medium)
	You are playing a simplified PAC-MAN game on an infinite 2-D grid. You 
	start at the point [0, 0], and you are given a destination point 
	target = [xtarget, ytarget], which you are trying to get to. There are 
	several ghosts on the map with their starting positions given as an array 
	ghosts, where ghosts[i] = [xi, yi] represents the starting position of the 
	ith ghost. All inputs are integral coordinates. Each turn, you and all the 
	ghosts may independently choose to either move 1 unit in any of the four 
	cardinal directions: north, east, south, or west or stay still. All actions 
	happen simultaneously. You escape if and only if you can reach the target 
	before any ghost reaches you. If you reach any square (including the 
	target) at the same time as a ghost, it does not count as an escape. Return 
	true if it is possible to escape, otherwise return false.

	Example 1:
	Input: ghosts = [[1,0],[0,3]], target = [0,1]
	Output: true
	Explanation: You can reach the destination (0, 1) after 1 turn, while the 
	             ghosts located at (1, 0) and (0, 3) cannot catch up with you.

	Example 2:
	Input: ghosts = [[1,0]], target = [2,0]
	Output: false
	Explanation: You need to reach the destination (2, 0), but the ghost at 
	             (1, 0) lies between you and the destination.
	
	Example 3:
	Input: ghosts = [[2,0]], target = [1,0]
	Output: false
	Explanation: The ghost can reach the target at the same time as you.

	Example 4:
	Input: ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]
	Output: false

	Example 5:
	Input: ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]
	Output: true

	Constraints:
	* 1 <= ghosts.length <= 100
	* ghosts[i].length == 2
	* -10^4 <= xi, yi <= 10^4
	* There can be multiple ghosts in the same location.
	* target.length == 2
	* -10^4 <= xtarget, ytarget <= 10^4"""

    def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        xx, yy = target 
        return all(abs(x-xx) + abs(y-yy) > abs(xx) + abs(yy) for x, y in ghosts)


    """790. Domino and Tromino Tiling (Medium)
	We have two types of tiles: a 2x1 domino shape, and an "L" tromino shape. 
	These shapes may be rotated.
	XX  <- domino
	XX  <- "L" tromino
	X
	Given N, how many ways are there to tile a 2 x N board? Return your answer 
	modulo 10^9 + 7. (In a tiling, every square must be covered by a tile. Two 
	tilings are different if and only if there are two 4-directionally adjacent 
	cells on the board such that exactly one of the tilings has both squares 
	occupied by a tile.)

	Example:
	Input: 3
	Output: 5
	Explanation: 
	The five different ways are listed below, different letters indicates different tiles:
	XYZ XXZ XYY XXY XYY
	XYZ YYZ XZZ XYY XXY
	
	Note: N  will be in range [1, 1000]."""

    def numTilings(self, N: int) -> int:
        f0, f1, f2 = 0, 1, 1
        for i in range(N-1): 
            f0, f1, f2 = f1, f2, 2*f2 + f0
        return f2 % 1_000_000_007


    """791. Custom Sort String (Medium)
	S and T are strings composed of lowercase letters. In S, no letter occurs 
	more than once. S was sorted in some custom order previously. We want to 
	permute the characters of T so that they match the order that S was sorted. 
	More specifically, if x occurs before y in S, then x should occur before y 
	in the returned string. Return any permutation of T (as a string) that 
	satisfies this property.

	Example :
	Input: S = "cba"
		   T = "abcd"
	Output: "cbad"
	Explanation: "a", "b", "c" appear in S, so the order of "a", "b", "c" 
	             should be "c", "b", and "a". Since "d" does not appear in S, 
	             it can be at any position in T. "dcba", "cdba", "cbda" are 
	             also valid outputs.
	Note:
	* S has length at most 26, and no character is repeated in S.
	* T has length at most 200.
	* S and T consist of lowercase letters only."""

    def customSortString(self, order: str, str: str) -> str:
        freq = {}
        for c in str: freq[c] = 1 + freq.get(c, 0)
        
        ans = []
        for c in order: 
            if c in freq: ans.append(c * freq.pop(c))
        return "".join(ans) + "".join(k*v for k, v in freq.items())


    """792. Number of Matching Subsequences (Medium)
	Given a string s and an array of strings words, return the number of 
	words[i] that is a subsequence of s. A subsequence of a string is a new 
	string generated from the original string with some characters (can be 
	none) deleted without changing the relative order of the remaining 
	characters. For example, "ace" is a subsequence of "abcde".

	Example 1:
	Input: s = "abcde", words = ["a","bb","acd","ace"]
	Output: 3
	Explanation: There are three strings in words that are a subsequence of s: 
	             "a", "acd", "ace".
	
	Example 2:
	Input: s = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
	Output: 2

	Constraints:
	* 1 <= s.length <= 5 * 10^4
	* 1 <= words.length <= 5000
	* 1 <= words[i].length <= 50
	* s and words[i] consist of only lowercase English letters."""

    def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        loc = {}
        for i, ch in enumerate(s):
            loc.setdefault(ch, []).append(i)
        
        ans = 0
        for word in words: 
            x = 0
            for ch in word: 
                i = bisect_left(loc.get(ch, []), x)
                if i == len(loc.get(ch, [])): break 
                x = loc[ch][i] + 1
            else: ans += 1
        return ans 


    """793. Preimage Size of Factorial Zeroes Function (Hard)
	Let f(x) be the number of zeroes at the end of x!. (Recall that 
	x! = 1 * 2 * 3 * ... * x, and by convention, 0! = 1.) For example, f(3) = 0 
	because 3! = 6 has no zeroes at the end, while f(11) = 2 because 
	11! = 39916800 has 2 zeroes at the end. Given k, find how many non-negative 
	integers x have the property that f(x) = k.

	Example 1:
	Input: k = 0
	Output: 5
	Explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.

	Example 2:
	Input: k = 5
	Output: 0
	Explanation: There is no x such that x! ends in k = 5 zeroes.
	
	Note: k will be an integer in the range [0, 10^9]."""

    def preimageSizeFZF(self, k: int) -> int:
        lo, hi = 0, 1 << 32
        while lo <= hi: 
            mid = lo + hi >> 1
            x, y = mid, 0 
            while x: 
                x //= 5
                y += x
            if y < k: lo = mid + 1
            elif y > k: hi = mid - 1
            else: return 5
        return 0 


    """795. Number of Subarrays with Bounded Maximum (Medium)
	We are given an array A of positive integers, and two positive integers L 
	and R (L <= R). Return the number of (contiguous, non-empty) subarrays such 
	that the value of the maximum array element in that subarray is at least L 
	and at most R.

	Example :
	Input: A = [2, 1, 4, 3]
	       L = 2
	       R = 3
	Output: 3
	Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
	
	Note:
	* L, R  and A[i] will be an integer in the range [0, 10^9].
	* The length of A will be in the range of [1, 50000]."""

    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        ans = inc = cnt = 0 
        for x in nums: 
            if x < left: cnt += 1
            elif left <= x <= right: inc = cnt = cnt + 1
            else: inc = cnt = 0 
            ans += inc 
        return ans 


    """797. All Paths From Source to Target (Medium)
	Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, 
	find all possible paths from node 0 to node n - 1, and return them in any 
	order. The graph is given as follows: graph[i] is a list of all nodes you 
	can visit from node i (i.e., there is a directed edge from node i to node 
	graph[i][j]).

	Example 1:
	Input: graph = [[1,2],[3],[3],[]]
	Output: [[0,1,3],[0,2,3]]
	Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

	Example 2:
	Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
	Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

	Example 3:
	Input: graph = [[1],[]]
	Output: [[0,1]]

	Example 4:
	Input: graph = [[1,2,3],[2],[3],[]]
	Output: [[0,1,2,3],[0,2,3],[0,3]]

	Example 5:
	Input: graph = [[1,3],[2],[3],[]]
	Output: [[0,1,2,3],[0,3]]

	Constraints:
	* n == graph.length
	* 2 <= n <= 15
	* 0 <= graph[i][j] < n
	* graph[i][j] != i (i.e., there will be no self-loops).
	* The input graph is guaranteed to be a DAG."""

    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        indeg = [0]*len(graph)
        for val in graph: 
            for x in val: indeg[x] += 1
        
        queue = deque(i for i, x in enumerate(indeg) if x == 0)
        dp = [[] for _ in range(len(graph))]
        
        # bfs along topological order 
        while queue: 
            x = queue.popleft()
            if x == 0: dp[0].append([0])
            for xx in graph[x]: 
                for seq in dp[x]: dp[xx].append(seq + [xx])
                indeg[xx] -= 1
                if indeg[xx] == 0: queue.append(xx)
        return dp[-1]


    """798. Smallest Rotation with Highest Score (Hard)
	Given an array nums, we may rotate it by a non-negative integer k so that 
	the array becomes nums[k], nums[k+1], nums[k+2], ... nums[nums.length - 1], 
	nums[0], nums[1], ..., nums[k-1].  Afterward, any entries that are less 
	than or equal to their index are worth 1 point. For example, if we have 
	[2, 4, 1, 3, 0], and we rotate by k = 2, it becomes [1, 3, 0, 2, 4]. This 
	is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 
	0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point]. Over all 
	possible rotations, return the rotation index k that corresponds to the 
	highest score we could receive. If there are multiple answers, return the 
	smallest such index k.

	Example 1:
	Input: [2, 3, 1, 4, 0]
	Output: 3
	Explanation: Scores for each k are listed below: 
	             k = 0,  nums = [2,3,1,4,0],    score 2
	             k = 1,  nums = [3,1,4,0,2],    score 3
	             k = 2,  nums = [1,4,0,2,3],    score 3
	             k = 3,  nums = [4,0,2,3,1],    score 4
	             k = 4,  nums = [0,2,3,1,4],    score 3
	             So we should choose k = 3, which has the highest score.

	Example 2:
	Input: [1, 3, 0, 2, 4]
	Output: 0
	Explanation: nums will always have 3 points no matter how it shifts. So we 
	             will choose the smallest k, which is 0.
	
	Note:
	* nums will have length at most 20000.
	* nums[i] will be in the range [0, nums.length]."""

    def bestRotation(self, nums: List[int]) -> int:
        diff = [1] * len(nums)
        for i, x in enumerate(nums): 
            diff[(i-x+1)%len(nums)] -= 1
        
        ans = prefix = 0 
        mx = -inf 
        for i, x in enumerate(diff): 
            prefix += x
            if prefix > mx: mx, ans = prefix, i
        return ans 


    """800. Similar RGB Color (Easy)
	In the following, every capital letter represents some hexadecimal digit 
	from 0 to f. The red-green-blue color "#AABBCC" can be written as "#ABC" in 
	shorthand.  For example, "#15c" is shorthand for the color "#1155cc". Now, 
	say the similarity between two colors "#ABCDEF" and "#UVWXYZ" is 
	-(AB - UV)^2 - (CD - WX)^2 - (EF - YZ)^2. Given the color "#ABCDEF", return 
	a 7 character color that is most similar to #ABCDEF, and has a shorthand 
	(that is, it can be represented as some "#XYZ"

	Example 1:
	Input: color = "#09f166"
	Output: "#11ee66"
	Explanation: The similarity is 
	             -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73.
	             This is the highest among any shorthand color.
	
	Note:
	* color is a string of length 7.
	* color is a valid RGB color: for i > 0, color[i] is a hexadecimal digit from 0 to f
	* Any answer which has the same (highest) similarity as the best answer will be accepted.
	* All inputs and outputs should use lowercase letters, and the output is 7 characters."""

    def similarRGB(self, color: str) -> str:
        
        def fn(c):
            """Return color of xx closest to input."""
            ans = 0
            for k in range(1, 16): 
                ans = min(ans, k*16+k, key=lambda x: abs(x - int(c, 16)))
            return hex(ans)[2:].zfill(2)
        
        return "#" + "".join(fn(color[i:i+2]) for i in (1,3,5))


    """803. Bricks Falling When Hit (Hard)
	You are given an m x n binary grid, where each 1 represents a brick and 0 
	represents an empty space. A brick is stable if:
	* It is directly connected to the top of the grid, or
	* At least one other brick in its four adjacent cells is stable.
	You are also given an array hits, which is a sequence of erasures we want 
	to apply. Each time we want to erase the brick at the location 
	hits[i] = (rowi, coli). The brick on that location (if it exists) will 
	disappear. Some other bricks may no longer be stable because of that 
	erasure and will fall. Once a brick falls, it is immediately erased from 
	the grid (i.e., it does not land on other stable bricks). Return an array 
	result, where each result[i] is the number of bricks that will fall after 
	the ith erasure is applied. Note that an erasure may refer to a location 
	with no brick, and if it does, no bricks drop.

	Example 1:
	Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]
	Output: [2]
	Explanation: Starting with the grid:
	             [[1,0,0,0],
	              [1,1,1,0]]
	             We erase the underlined brick at (1,0), resulting in the grid:
	             [[1,0,0,0],
	              [0,1,1,0]]
	             The two underlined bricks are no longer stable as they are no 
	             longer connected to the top nor adjacent to another stable 
	             brick, so they will fall. The resulting grid is:
	             [[1,0,0,0],
	              [0,0,0,0]]
	             Hence the result is [2].
	
	Example 2:
	Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]
	Output: [0,0]
	Explanation: Starting with the grid:
	             [[1,0,0,0],
	              [1,1,0,0]]
	             We erase the underlined brick at (1,1), resulting in the grid:
	             [[1,0,0,0],
	              [1,0,0,0]]
	             All remaining bricks are still stable, so no bricks fall. The 
	             grid remains the same:
	             [[1,0,0,0],
	              [1,0,0,0]]
	             Next, we erase the underlined brick at (1,0), resulting in the 
	             grid:
	             [[1,0,0,0],
	              [0,0,0,0]]
	             Once again, all remaining bricks are still stable, so no bricks 
	             fall. Hence the result is [0,0].

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 200
	* grid[i][j] is 0 or 1.
	* 1 <= hits.length <= 4 * 10^4
	* hits[i].length == 2
	* 0 <= xi <= m - 1
	* 0 <= yi <= n - 1
	* All (xi, yi) are unique.

class UnionFind: 
    
    def __init__(self, n): 
        self.parent = list(range(n))
        self.rank = [1] * n
        
    def find(self, p): 
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q):
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True """

    def hitBricks(self, grid: List[List[int]], hits: List[List[int]]) -> List[int]:
        m, n = len(grid), len(grid[0]) # dimensions 
        
        seen = set()
        for i, j in hits: 
            if grid[i][j]: 
                seen.add((i, j))
                grid[i][j] = 0
        
        uf = UnionFind(m*n+1)
        for i in range(m): 
            for j in range(n): 
                if i == 0 and grid[i][j]: uf.union(j, m*n)
                if grid[i][j]: 
                    for ii, jj in (i-1, j), (i, j-1): 
                        if 0 <= ii < m and 0 <= jj < n and grid[ii][jj]: uf.union(i*n+j, ii*n+jj)
        
        ans = []
        prev = uf.rank[uf.find(m*n)]
        for i, j in reversed(hits): 
            if (i, j) in seen: 
                grid[i][j] = 1
                if i == 0: uf.union(j, m*n)
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    if 0 <= ii < m and 0 <= jj < n and grid[ii][jj]: uf.union(i*n+j, ii*n+jj)
                rank = uf.rank[uf.find(m*n)]
                ans.append(max(0, rank - prev - 1))
                prev = rank
            else: ans.append(0)
        return ans[::-1]


    """810. Chalkboard XOR Game (Hard)
	We are given non-negative integers nums[i] which are written on a 
	chalkboard. Alice and Bob take turns erasing exactly one number from the 
	chalkboard, with Alice starting first.  If erasing a number causes the 
	bitwise XOR of all the elements of the chalkboard to become 0, then that 
	player loses.  (Also, we'll say the bitwise XOR of one element is that 
	element itself, and the bitwise XOR of no elements is 0.) Also, if any 
	player starts their turn with the bitwise XOR of all the elements of the 
	chalkboard equal to 0, then that player wins. Return True if and only if 
	Alice wins the game, assuming both players play optimally.

	Example:
	Input: nums = [1, 1, 2]
	Output: false
	Explanation: Alice has two choices: erase 1 or erase 2. If she erases 1, 
	             the nums array becomes [1, 2]. The bitwise XOR of all the 
	             elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove 
	             any element he wants, because Alice will be the one to erase 
	             the last element and she will lose. If Alice erases 2 first, 
	             now nums becomes [1, 1]. The bitwise XOR of all the elements 
	             of the chalkboard is 1 XOR 1 = 0. Alice will lose.

	Notes:
	* 1 <= N <= 1000. 
	* 0 <= nums[i] <= 2^16."""

    def xorGame(self, nums: List[int]) -> bool:
        return reduce(xor, nums) == 0 or not len(nums)&1


    """813. Largest Sum of Averages (Medium)
	We partition a row of numbers A into at most K adjacent (non-empty) groups, 
	then our score is the sum of the average of each group. What is the largest 
	score we can achieve? Note that our partition must use every number in A, 
	and that scores are not necessarily integers.

	Example:
	Input: A = [9,1,2,3,9]
	       K = 3
	Output: 20
	Explanation: The best choice is to partition A into [9], [1, 2, 3], [9]. 
	             The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20. We could have also 
	             partitioned A into [9, 1], [2], [3, 9], for example. That 
	             partition would lead to a score of 5 + 2 + 6 = 13, which is worse.
	 
	Note:
	* 1 <= A.length <= 100.
	* 1 <= A[i] <= 10000.
	* 1 <= K <= A.length.
	* Answers within 10^-6 of the correct answer will be accepted as correct."""

    def largestSumOfAverages(self, A: List[int], K: int) -> float:
        prefix = [0]
        for x in A: prefix.append(prefix[-1] + x) # prefix sum 
        
        @cache
        def fn(i, k): 
            """Return largest sum of average of A[lo:hi+1] with at most k groups."""
            if i == 1 or k == 1: return prefix[i]/i # boundary condition 
            if i <= k: return prefix[i] # shortcut
            ans = fn(i, k-1)
            for ii in range(1, i):
                ans = max(ans, fn(i-ii, k-1) + (prefix[i] - prefix[i-ii])/ii)
            return ans 
            
        return fn(len(A), K)


    """814. Binary Tree Pruning (Medium)
	Given the root of a binary tree, return the same tree where every subtree 
	(of the given tree) not containing a 1 has been removed. A subtree of a 
	node node is node plus every node that is a descendant of node.

	Example 1:
	Input: root = [1,null,0,0,1]
	Output: [1,null,0,null,1]
	Explanation: Only the red nodes satisfy the property "every subtree not 
	             containing a 1". The diagram on the right represents the 
	             answer.
	
	Example 2:
	Input: root = [1,0,1,0,0,0,1]
	Output: [1,null,1,null,1]

	Example 3:
	Input: root = [1,1,0,1,1,0,1,0]
	Output: [1,1,0,1,1,null,1]

	Constraints:
	* The number of nodes in the tree is in the range [1, 200].
	* Node.val is either 0 or 1."""

    def pruneTree(self, root: TreeNode) -> TreeNode:
        
        def fn(node): 
            """Return pruned node."""
            if node: 
                node.left, node.right = fn(node.left), fn(node.right)
                if node.left or node.val == 1 or node.right: return node 
            
        return fn(root)


    """815. Bus Routes (Hard)
	You are given an array routes representing bus routes where routes[i] is a 
	bus route that the ith bus repeats forever. For example, if 
	routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 
	1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever. You will start at the bus 
	stop source (You are not on any bus initially), and you want to go to the 
	bus stop target. You can travel between bus stops by buses only. Return the 
	least number of buses you must take to travel from source to target. Return 
	-1 if it is not possible.

	Example 1:
	Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
	Output: 2
	Explanation: The best strategy is take the first bus to the bus stop 7, 
	             then take the second bus to the bus stop 6.
	
	Example 2:
	Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
	Output: -1

	Constraints:
	* 1 <= routes.length <= 500.
	* 1 <= routes[i].length <= 10^5
	* All the values of routes[i] are unique.
	* sum(routes[i].length) <= 10^5
	* 0 <= routes[i][j] < 10^6
	* 0 <= source, target < 10^6"""

    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        mp = {}
        for i, route in enumerate(routes): 
            for x in route: 
                mp.setdefault(x, []).append(i)
        
        ans = 0 
        seen = {source}
        queue = [source]
        while queue: 
            newq = []
            for x in queue: 
                if x == target: return ans 
                for i in mp[x]: 
                    for xx in routes[i]: 
                        if xx not in seen: 
                            seen.add(xx)
                            newq.append(xx)
                    routes[i] = []
            ans += 1
            queue = newq
        return -1 


    """816. Ambiguous Coordinates (Medium)
	We had some 2-dimensional coordinates, like "(1, 3)" or "(2, 0.5)".  Then, 
	we removed all commas, decimal points, and spaces, and ended up with the 
	string S.  Return a list of strings representing all possibilities for what 
	our original coordinates could have been. Our original representation never 
	had extraneous zeroes, so we never started with numbers like "00", "0.0", 
	"0.00", "1.0", "001", "00.01", or any other number that can be represented 
	with less digits.  Also, a decimal point within a number never occurs 
	without at least one digit occuring before it, so we never started with 
	numbers like ".1". The final answer list can be returned in any order.  
	Also note that all coordinates in the final answer have exactly one space 
	between them (occurring after the comma.)

	Example 1:
	Input: "(123)"
	Output: ["(1, 23)", "(12, 3)", "(1.2, 3)", "(1, 2.3)"]
	
	Example 2:
	Input: "(00011)"
	Output:  ["(0.001, 1)", "(0, 0.011)"]
	Explanation: 0.0, 00, 0001 or 00.01 are not allowed.
	
	Example 3:
	Input: "(0123)"
	Output: ["(0, 123)", "(0, 12.3)", "(0, 1.23)", "(0.1, 23)", "(0.1, 2.3)", "(0.12, 3)"]
	
	Example 4:
	Input: "(100)"
	Output: [(10, 0)]
	Explanation: 1.0 is not allowed.

	Note:
	* 4 <= S.length <= 12.
	* S[0] = "(", S[S.length - 1] = ")", and the other elements in S are digits."""

    def ambiguousCoordinates(self, S: str) -> List[str]:
        S = S[1:-1] # strip "(" and ")"
        
        def fn(s): 
            """Return valid number derived from s."""
            if len(s) == 1: return [s] # edge case 
            if s.startswith("0") and s.endswith("0"): return []
            if s.startswith("0"): return [s[:1] + "." + s[1:]]
            if s.endswith("0"): return [s]
            return [s] + [s[:i] + "." + s[i:] for i in range(1, len(s))]

        ans = []
        for i in range(1, len(S)): 
            ans.extend([f"({x}, {y})" for x in fn(S[:i]) for y in fn(S[i:])])
        return ans



    """817. Linked List Components (Medium)
	We are given head, the head node of a linked list containing unique integer 
	values. We are also given the list G, a subset of the values in the linked 
	list. Return the number of connected components in G, where two values are 
	connected if they appear consecutively in the linked list.

	Example 1:
	Input: head: 0->1->2->3
	       G = [0, 1, 3]
	Output: 2
	Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected 
	             components.

	Example 2:
	Input: head: 0->1->2->3->4
	       G = [0, 3, 1, 4]
	Output: 2
	Explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and 
	             [3, 4] are the two connected components.
	
	Note:
	* If N is the length of the linked list given by head, 1 <= N <= 10000.
	* The value of each node in the linked list will be in the range [0, N - 1].
	* 1 <= G.length <= 10000.
	* G is a subset of all values in the linked list."""

    def numComponents(self, head: ListNode, G: List[int]) -> int:
        Gs = set(G)
        ans = 0
        while head: 
            if head.val in Gs and (head.next is None or head.next.val not in Gs): ans += 1
            head = head.next 
        return ans 


    """821. Shortest Distance to a Character (Easy)
	Given a string s and a character c that occurs in s, return an array of 
	integers answer where answer.length == s.length and answer[i] is the 
	shortest distance from s[i] to the character c in s.

	Example 1:
	Input: s = "loveleetcode", c = "e"
	Output: [3,2,1,0,1,0,0,1,2,2,1,0]

	Example 2:
	Input: s = "aaab", c = "b"
	Output: [3,2,1,0]

	Constraints:
	* 1 <= s.length <= 104
	* s[i] and c are lowercase English letters.
	* c occurs at least once in s."""

    def shortestToChar(self, s: str, c: str) -> List[int]:
        locs = [i for i, x in enumerate(s) if x == c]
        ans = []
        k = 0
        for i, c in enumerate(s):
            if k+1 < len(locs) and locs[k+1]-i < i - locs[k]: k += 1
            ans.append(abs(i - locs[k]))
        return ans 


    """822. Card Flipping Game (Medium)
	On a table are N cards, with a positive integer printed on the front and 
	back of each card (possibly different). We flip any number of cards, and 
	after we choose one card. If the number X on the back of the chosen card 
	is not on the front of any card, then this number X is good. What is the 
	smallest number that is good?  If no number is good, output 0. Here, 
	fronts[i] and backs[i] represent the number on the front and back of card 
	i. A flip swaps the front and back numbers, so the value on the front is 
	now on the back and vice versa.

	Example:
	Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]
	Output: 2
	Explanation: If we flip the second card, the fronts are [1,3,4,4,7] and the 
	             backs are [1,2,4,1,3]. We choose the second card, which has 
	             number 2 on the back, and it isn't on the front of any card, 
	             so 2 is good.
	Note:
	* 1 <= fronts.length == backs.length <= 1000.
	* 1 <= fronts[i] <= 2000.
	* 1 <= backs[i] <= 2000."""

    def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        same = {ff for ff, bb in zip(fronts, backs) if ff == bb}
        return min((x for x in fronts+backs if x not in same), default=0)


    """823. Binary Trees With Factors (Medium)
	Given an array of unique integers, each integer is strictly greater than 1. 
	We make a binary tree using these integers and each number may be used for 
	any number of times. Each non-leaf node's value should be equal to the 
	product of the values of it's children. How many binary trees can we make?  
	Return the answer modulo 10 ** 9 + 7.

	Example 1:
	Input: A = [2, 4]
	Output: 3
	Explanation: We can make these trees: [2], [4], [4, 2, 2]

	Example 2:
	Input: A = [2, 4, 5, 10]
	Output: 7
	Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], 
	             [10, 2, 5], [10, 5, 2].

	Note:
	* 1 <= A.length <= 1000.
	* 2 <= A[i] <= 10 ^ 9."""

    def numFactoredBinaryTrees(self, arr: List[int]) -> int:
        freq = {}
        for x in sorted(arr): 
            freq[x] = 1
            for xx in freq: 
                freq[x] += freq[xx] * freq.get(x/xx, 0)
        return sum(freq.values()) % 1_000_000_007


    """825. Friends Of Appropriate Ages (Medium)
	Some people will make friend requests. The list of their ages is given and 
	ages[i] is the age of the ith person. Person A will NOT friend request 
	person B (B != A) if any of the following conditions are true:
	* age[B] <= 0.5 * age[A] + 7
	* age[B] > age[A]
	* age[B] > 100 && age[A] < 100
	Otherwise, A will friend request B. Note that if A requests B, B does not 
	necessarily request A.  Also, people will not friend request themselves. 
	How many total friend requests are made?

	Example 1:
	Input: [16,16]
	Output: 2
	Explanation: 2 people friend request each other.
	
	Example 2:
	Input: [16,17,18]
	Output: 2
	Explanation: Friend requests are made 17 -> 16, 18 -> 17.

	Example 3:
	Input: [20,30,100,110,120]
	Output: 3
	Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.

	Notes:
	* 1 <= ages.length <= 20000.
	* 1 <= ages[i] <= 120."""

    def numFriendRequests(self, ages: List[int]) -> int:
        freq = {}
        for x in ages: freq[x] = 1 + freq.get(x, 0)
        
        ans = 0 
        for x in freq: 
            for y in freq: 
                if 0.5*x + 7 < y <= x: 
                    ans += freq[x] * freq[y]
                    if x == y: ans -= freq[x]
        return ans 


    """826. Most Profit Assigning Work (Medium)
	We have jobs: difficulty[i] is the difficulty of the ith job, and profit[i] 
	is the profit of the ith job. Now we have some workers. worker[i] is the 
	ability of the ith worker, which means that this worker can only complete a 
	job with difficulty at most worker[i]. Every worker can be assigned at most 
	one job, but one job can be completed multiple times. For example, if 3 
	people attempt the same job that pays $1, then the total profit will be $3.
	If a worker cannot complete any job, his profit is $0. What is the most 
	profit we can make?

	Example 1:
	Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
	Output: 100 
	Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get 
	             profit of [20,20,30,30] seperately.

	Notes:
	* 1 <= difficulty.length = profit.length <= 10000
	* 1 <= worker.length <= 10000
	* difficulty[i], profit[i], worker[i]  are in range [1, 10^5]"""

    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:
        job = sorted(zip(difficulty, profit))
        ans = i = mx = 0 
        for w in sorted(worker): 
            while i < len(job) and job[i][0] <= w: 
                mx = max(mx, job[i][1])
                i += 1
            ans += mx 
        return ans 


    """827. Making A Large Island (Hard)
	You are given an n x n binary matrix grid. You are allowed to change at 
	most one 0 to be 1. Return the size of the largest island in grid after 
	applying this operation. An island is a 4-directionally connected group 
	of 1s.

	Example 1:
	Input: grid = [[1,0],[0,1]]
	Output: 3
	Explanation: Change one 0 to 1 and connect two 1s, then we get an island 
	             with area = 3.
	
	Example 2:
	Input: grid = [[1,1],[1,0]]
	Output: 4
	Explanation: Change the 0 to 1 and make the island bigger, only one island 
	             with area = 4.
	
	Example 3:
	Input: grid = [[1,1],[1,1]]
	Output: 4
	Explanation: Can't change any 0 to 1, only one island with area = 4.

	Constraints:
	* n == grid.length
	* n == grid[i].length
	* 1 <= n <= 500
	* grid[i][j] is either 0 or 1."""

    def largestIsland(self, grid: List[List[int]]) -> int:
        n = len(grid)
        k = 2
        freq = defaultdict(int)
        for r in range(n): 
            for c in range(n): 
                if grid[r][c] == 1: 
                    stack = [(r, c)]
                    grid[r][c] = k 
                    while stack: 
                        i, j = stack.pop()
                        freq[k] += 1
                        for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                            if 0 <= ii < n and 0 <= jj < n and grid[ii][jj] == 1: 
                                stack.append((ii, jj))
                                grid[ii][jj] = k 
                    k += 1
        
        ans = 0
        for i in range(n): 
            for j in range(n): 
                if grid[i][j]: ans = max(ans, freq[grid[i][j]])
                else: 
                    cand = 1
                    seen = set()
                    for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                        if 0 <= ii < n and 0 <= jj < n and grid[ii][jj] and grid[ii][jj] not in seen: 
                            seen.add(grid[ii][jj])
                            cand += freq[grid[ii][jj]]
                    ans = max(ans, cand)
        return ans 


    """828. Count Unique Characters of All Substrings of a Given String (Hard)
	Let's define a function countUniqueChars(s) that returns the number of 
	unique characters on s. 
	* For example if s = "LEETCODE" then "L", "T", "C", "O", "D" are the unique 
	characters since they appear only once in s, therefore countUniqueChars(s) = 5.
	Given a string s, return the sum of countUniqueChars(t) where t is a 
	substring of s. Notice that some substrings can be repeated so in this case 
	you have to count the repeated ones too.

	Example 1:
	Input: s = "ABC"
	Output: 10
	Explanation: All possible substrings are: "A","B","C","AB","BC" and "ABC".
	             Evey substring is composed with only unique letters. Sum of 
	             lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10
	
	Example 2:
	Input: s = "ABA"
	Output: 8
	Explanation: The same as example 1, except countUniqueChars("ABA") = 1.

	Example 3:
	Input: s = "LEETCODE"
	Output: 92

	Constraints:
	* 1 <= s.length <= 10^5
	* s consists of uppercase English letters only."""

    def uniqueLetterString(self, s: str) -> int:
        locs = [[-1] for _ in range(26)]
        for i, x in enumerate(s): locs[ord(x)-65].append(i)
        
        ans = 0 
        for i in range(26): 
            locs[i].append(len(s))
            for k in range(1, len(locs[i])-1): 
                ans += (locs[i][k] - locs[i][k-1]) * (locs[i][k+1] - locs[i][k])
        return ans 


    """829. Consecutive Numbers Sum (Hard)
	Given an integer n, return the number of ways you can write n as the sum of 
	consecutive positive integers.

	Example 1:
	Input: n = 5
	Output: 2
	Explanation: 5 = 2 + 3

	Example 2:
	Input: n = 9
	Output: 3
	Explanation: 9 = 4 + 5 = 2 + 3 + 4

	Example 3:
	Input: n = 15
	Output: 4
	Explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5

	Constraints: 1 <= n <= 10^9"""

    def consecutiveNumbersSum(self, n: int) -> int:
        ans = 0
        for x in range(1, int(sqrt(2*n))+1): 
            if (n - x*(x+1)//2) % x == 0: ans += 1
        return ans 


    """831. Masking Personal Information (Medium)
	We are given a personal information string S, which may represent either an 
	email address or a phone number. We would like to mask this personal 
	information according to the following rules:

	1. Email address:
	We define a name to be a string of length ≥ 2 consisting of only lowercase 
	letters a-z or uppercase letters A-Z. An email address starts with a name, 
	followed by the symbol '@', followed by a name, followed by the dot '.' and 
	followed by a name. All email addresses are guaranteed to be valid and in 
	the format of "name1@name2.name3". To mask an email, all names must be 
	converted to lowercase and all letters between the first and last letter of 
	the first name must be replaced by 5 asterisks '*'.

	2. Phone number:
	A phone number is a string consisting of only the digits 0-9 or the 
	characters from the set {'+', '-', '(', ')', ' '}. You may assume a phone 
	number contains 10 to 13 digits. The last 10 digits make up the local 
	number, while the digits before those make up the country code. Note that 
	the country code is optional. We want to expose only the last 4 digits and 
	mask all other digits. The local number should be formatted and masked as 
	"***-***-1111", where 1 represents the exposed digits. To mask a phone 
	number with country code like "+111 111 111 1111", we write it in the form 
	"+***-***-***-1111".  The '+' sign and the first '-' sign before the local 
	number should only exist if there is a country code.  For example, a 12 
	digit phone number mask should start with "+**-". Note that extraneous 
	characters like "(", ")", " ", as well as extra dashes or plus signs not 
	part of the above formatting scheme should be removed.

	Return the correct "mask" of the information provided.

	Example 1:
	Input: "LeetCode@LeetCode.com"
	Output: "l*****e@leetcode.com"
	Explanation: All names are converted to lowercase, and the letters between 
	             the first and last letter of the first name is replaced by 5 
	             asterisks. Therefore, "leetcode" -> "l*****e".

	Example 2:
	Input: "AB@qq.com"
	Output: "a*****b@qq.com"
	Explanation: There must be 5 asterisks between the first and last letter 
	             of the first name "ab". Therefore, "ab" -> "a*****b".
	
	Example 3:
	Input: "1(234)567-890"
	Output: "***-***-7890"
	Explanation: 10 digits in the phone number, which means all digits make up 
	             the local number.

	Example 4:
	Input: "86-(10)12345678"
	Output: "+**-***-***-5678"
	Explanation: 12 digits, 2 digits for country code and 10 digits for local 
	             number. 

	Notes:
	* S.length <= 40.
	* Emails have length at least 8.
	* Phone numbers have length at least 10."""

    def maskPII(self, S: str) -> str:
        if "@" in S: # email address
            name, domain = S.lower().split("@")
            return f"{name[0]}*****{name[-1]}@{domain}"
        else: # phone number 
            d = "".join(c for c in S if c.isdigit())
            ans = f"***-***-{d[-4:]}"
            return ans if len(d) == 10 else f"+{'*'*(len(d)-10)}-" + ans 


    """832. Flipping an Image (Easy)
	Given a binary matrix A, we want to flip the image horizontally, then 
	invert it, and return the resulting image. To flip an image horizontally 
	means that each row of the image is reversed.  For example, flipping 
	[1, 1, 0] horizontally results in [0, 1, 1]. To invert an image means that 
	each 0 is replaced by 1, and each 1 is replaced by 0. For example, 
	inverting [0, 1, 1] results in [1, 0, 0].

	Example 1:
	Input: [[1,1,0],[1,0,1],[0,0,0]]
	Output: [[1,0,0],[0,1,0],[1,1,1]]
	Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]]. Then, 
	             invert the image: [[1,0,0],[0,1,0],[1,1,1]]

	Example 2:
	Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
	Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
	Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]. 
	             Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]

	Notes:
	* 1 <= A.length = A[0].length <= 20
	* 0 <= A[i][j] <= 1"""

    def flipAndInvertImage(self, A: List[List[int]]) -> List[List[int]]:
        m, n = len(A), len(A[0])
        for i in range(m):
            for j in range(n+1 >> 1): 
                A[i][j], A[i][~j] = 1^A[i][~j], 1^A[i][j]
        return A


    """833. Find And Replace in String (Medium)
	To some string S, we will perform some replacement operations that replace 
	groups of letters with new ones (not necessarily the same size). Each 
	replacement operation has 3 parameters: a starting index i, a source word x 
	and a target word y.  The rule is that if x starts at position i in the 
	original string S, then we will replace that occurrence of x with y.  If 
	not, we do nothing. For example, if we have S = "abcd" and we have some 
	replacement operation i = 2, x = "cd", y = "ffff", then because "cd" starts 
	at position 2 in the original string S, we will replace it with "ffff". 
	Using another example on S = "abcd", if we have both the replacement 
	operation i = 0, x = "ab", y = "eee", as well as another replacement 
	operation i = 2, x = "ec", y = "ffff", this second operation does nothing 
	because in the original string S[2] = 'c', which doesn't match x[0] = 'e'. 
	All these operations occur simultaneously.  

	It's guaranteed that there won't be any overlap in replacement: for example, 
	S = "abc", indexes = [0, 1], sources = ["ab","bc"] is not a valid test case.

	Example 1:
	Input: S = "abcd", indexes = [0, 2], sources = ["a", "cd"], targets = ["eee", "ffff"]
	Output: "eeebffff"
	Explanation: "a" starts at index 0 in S, so it's replaced by "eee".
	             "cd" starts at index 2 in S, so it's replaced by "ffff".

	Example 2:
	Input: S = "abcd", indexes = [0, 2], sources = ["ab","ec"], targets = ["eee","ffff"]
	Output: "eeecd"
	Explanation: "ab" starts at index 0 in S, so it's replaced by "eee".
	             "ec" doesn't starts at index 2 in the original S, so we do nothing.

	Constraints:
	* 0 <= S.length <= 1000
	* S consists of only lowercase English letters.
	* 0 <= indexes.length <= 100
	* 0 <= indexes[i] < S.length
	* sources.length == indexes.length
	* targets.length == indexes.length
	* 1 <= sources[i].length, targets[i].length <= 50
	* sources[i] and targets[i] consist of only lowercase English letters."""

    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:
        for i, s, t in sorted(zip(indexes, sources, targets), reverse=True): 
            if S[i:i+len(s)] == s: S = S[:i] + t + S[i+len(s):]
        return S


    """834. Sum of Distances in Tree (Hard)
	An undirected, connected tree with n nodes labelled 0...n-1 and n-1 edges 
	are given. The ith edge connects nodes edges[i][0] and edges[i][1] together.
	Return a list ans, where ans[i] is the sum of the distances between node i 
	and all other nodes.

	Example 1:
	Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
	Output: [8,12,6,10,10,10]
	Explanation: Here is a diagram of the given tree:
	  0
	 / \
	1   2
	   /|\
	  3 4 5
	We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
	equals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.
	Note: 1 <= n <= 10000"""

    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:
        graph = {}
        for u, v in edges: 
            graph.setdefault(u, []).append(v)
            graph.setdefault(v, []).append(u)
        
        size = [0]*n
        
        def fn(x, par): 
            """Return size and sum of distances in sub-tree."""
            c = s = 0
            for xx in graph.get(x, []): 
                if xx != par: 
                    cc, ss = fn(xx, x)
                    c, s = c + cc, s + ss + cc
            size[x] = c + 1
            return c + 1, s
        
        ans = [0]*n
        ans[0] = fn(0, -1)[1]
        
        stack = [0]
        while stack: 
            x = stack.pop()
            for xx in graph.get(x, []): 
                if not ans[xx]: 
                    ans[xx] = ans[x] + n - 2*size[xx]
                    stack.append(xx)
        return ans 


    """837. New 21 Game (Medium)
	Alice plays the following game, loosely based on the card game "21". Alice 
	starts with 0 points, and draws numbers while she has less than K points. 
	During each draw, she gains an integer number of points randomly from the 
	range [1, W], where W is an integer.  Each draw is independent and the 
	outcomes have equal probabilities. Alice stops drawing numbers when she 
	gets K or more points.  What is the probability that she has N or less 
	points?

	Example 1:
	Input: N = 10, K = 1, W = 10
	Output: 1.00000
	Explanation:  Alice gets a single card, then stops.

	Example 2:
	Input: N = 6, K = 1, W = 10
	Output: 0.60000
	Explanation:  Alice gets a single card, then stops.
	In 6 out of W = 10 possibilities, she is at or below N = 6 points.

	Example 3:
	Input: N = 21, K = 17, W = 10
	Output: 0.73278

	Note:
	* 0 <= K <= N <= 10000
	* 1 <= W <= 10000
	* Answers will be accepted as correct if they are within 10^-5 of the correct answer.
	* The judging time limit has been reduced for this question."""

    def new21Game(self, N: int, K: int, W: int) -> float:
        ans = [0]*K + [1]*(N-K+1) + [0]*W
        val = sum(ans[K:K+W+1])
        for i in reversed(range(K)): 
            ans[i] = val/W
            val += ans[i] - ans[i+W]
        return ans[0]


    """838. Push Dominoes (Medium)
	There are n dominoes in a line, and we place each domino vertically upright. 
	In the beginning, we simultaneously push some of the dominoes either to the 
	left or to the right. After each second, each domino that is falling to the 
	left pushes the adjacent domino on the left. Similarly, the dominoes 
	falling to the right push their adjacent dominoes standing on the right.
	When a vertical domino has dominoes falling on it from both sides, it stays 
	still due to the balance of the forces. For the purposes of this question, 
	we will consider that a falling domino expends no additional force to a 
	falling or already fallen domino. You are given a string dominoes 
	representing the initial state where:
	* dominoes[i] = 'L', if the ith domino has been pushed to the left,
	* dominoes[i] = 'R', if the ith domino has been pushed to the right, and
	* dominoes[i] = '.', if the ith domino has not been pushed.
	Return a string representing the final state.

	Example 1:
	Input: dominoes = "RR.L"
	Output: "RR.L"
	Explanation: The first domino expends no additional force on the second 
	             domino.

	Example 2:
	Input: dominoes = ".L.R...LR..L.."
	Output: "LL.RR.LLRRLL.."

	Constraints:
	* n == dominoes.length
	* 1 <= n <= 10^5
	* dominoes[i] is either 'L', 'R', or '.'."""

    def pushDominoes(self, dominoes: str) -> str:
        mp = [0]*len(dominoes)
        ii = len(dominoes)
        for i in reversed(range(len(dominoes))): 
            if dominoes[i] != ".": ii = i 
            mp[i] = ii 
            
        ans = []
        ii = -1 
        for i, x in enumerate(dominoes): 
            if dominoes[i] in "LR": 
                ans.append(dominoes[i])
                ii = i 
            else: 
                ll = "L" if ii == -1 else dominoes[ii]
                rr = "R" if mp[i] == len(dominoes) else dominoes[mp[i]]
                if ll == rr: ans.append(ll)
                elif ll == "L": ans.append(".")
                else: 
                    if i - ii < mp[i] - i: ans.append("R")
                    elif i - ii > mp[i] - i: ans.append("L")
                    else: ans.append(".")
        return "".join(ans)


    """839. Similar String Groups (Hard)
	Two strings X and Y are similar if we can swap two letters (in different 
	positions) of X, so that it equals Y. Also two strings X and Y are similar 
	if they are equal. For example, "tars" and "rats" are similar (swapping at 
	positions 0 and 2), and "rats" and "arts" are similar, but "star" is not 
	similar to "tars", "rats", or "arts". Together, these form two connected 
	groups by similarity: {"tars", "rats", "arts"} and {"star"}.  Notice that 
	"tars" and "arts" are in the same group even though they are not similar.  
	Formally, each group is such that a word is in the group if and only if it 
	is similar to at least one other word in the group. We are given a list 
	strs of strings where every string in strs is an anagram of every other 
	string in strs. How many groups are there?

	Example 1:
	Input: strs = ["tars","rats","arts","star"]
	Output: 2

	Example 2:
	Input: strs = ["omv","ovm"]
	Output: 1

	Constraints:
	* 1 <= strs.length <= 300
	* 1 <= strs[i].length <= 300
	* strs[i] consists of lowercase letters only.
	* All words in strs have the same length and are anagrams of each other.

class UnionFind:
    
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1] * n
        
    def find(self, p):
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q): 
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True"""

    def numSimilarGroups(self, strs: List[str]) -> int:
        
        def fn(x, y): 
            cnt = 0
            for xx, yy in zip(x, y): 
                if xx != yy: cnt += 1
                if cnt > 2: return False 
            return True 
        
        n = len(strs)
        uf = UnionFind(n)
        for i in range(n): 
            for ii in range(i): 
                if fn(strs[i], strs[ii]) and uf.union(i, ii): 
                    n -= 1
        return n


    """840. Magic Squares In Grid (Medium)
	A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 
	9 such that each row, column, and both diagonals all have the same sum. 
	Given a row x col grid of integers, how many 3 x 3 "magic square" subgrids 
	are there?  (Each subgrid is contiguous).

	Example 1:
	Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
	Output: 1
	
	Example 2:
	Input: grid = [[8]]
	Output: 0

	Example 3:
	Input: grid = [[4,4],[3,3]]
	Output: 0

	Example 4:
	Input: grid = [[4,7,8],[9,5,1],[2,3,6]]
	Output: 0

	Constraints:
	* row == grid.length
	* col == grid[i].length
	* 1 <= row, col <= 10
	* 0 <= grid[i][j] <= 15"""

    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0]) # dimension 
        
        def fn(i, j): 
            """Return True if grid[i-1:i+2][j-1:j+2] is a magic squre."""
            seen = set()
            row, col = [0]*3, [0]*3 # row sum & column sum 
            diag = anti = 0
            for ii in range(i-1, i+2):
                for jj in range(j-1, j+2):
                    if not 0 <= grid[ii][jj] < 10 or grid[ii][jj] in seen: return False 
                    seen.add(grid[ii][jj])
                    row[ii-i+1] += grid[ii][jj]
                    col[jj-j+1] += grid[ii][jj]
                    if ii-jj == i-j: diag += grid[ii][jj]
                    if ii+jj == i+j: anti += grid[ii][jj]
            return len(set(row)) == 1 and len(set(col)) == 1 and row[0] == col[0] == diag == anti
        
        ans = 0
        for i in range(1, m-1):
            for j in range(1, n-1): 
                if grid[i][j] == 5 and fn(i, j): ans += 1
        return ans 


    """841. Keys and Rooms (Medium)
	There are N rooms and you start in room 0. Each room has a distinct number 
	in 0, 1, 2, ..., N-1, and each room may have some keys to access the next 
	room. Formally, each room i has a list of keys rooms[i], and each key 
	rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length.  A 
	key rooms[i][j] = v opens the room with number v. Initially, all the rooms 
	start locked (except for room 0). You can walk back and forth between rooms 
	freely. Return true if and only if you can enter every room.

	Example 1:
	Input: [[1],[2],[3],[]]
	Output: true
	Explanation:  
	We start in room 0, and pick up key 1.
	We then go to room 1, and pick up key 2.
	We then go to room 2, and pick up key 3.
	We then go to room 3.  Since we were able to go to every room, we return true.

	Example 2:
	Input: [[1,3],[3,0,1],[2],[0]]
	Output: false
	Explanation: We can't enter the room with number 2.

	Note:
	* 1 <= rooms.length <= 1000
	* 0 <= rooms[i].length <= 1000
	* The number of keys in all rooms combined is at most 3000."""

    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        seen = [False]*len(rooms)
        stack = [0]
        while stack: 
            n = stack.pop()
            if not seen[n]:
                seen[n] = True 
                stack.extend(rooms[n])
        return all(seen)


    """843. Guess the Word (Hard)
	This is an interactive problem. You are given an array of unique strings 
	wordlist where wordlist[i] is 6 letters long, and one word in this list is 
	chosen as secret. You may call Master.guess(word) to guess a word. The 
	guessed word should have type string and must be from the original list 
	with 6 lowercase letters. This function returns an integer type, 
	representing the number of exact matches (value and position) of your guess 
	to the secret word. Also, if your guess is not in the given wordlist, it 
	will return -1 instead. For each test case, you have exactly 10 guesses to 
	guess the word. At the end of any number of calls, if you have made 10 or 
	fewer calls to Master.guess and at least one of these guesses was secret, 
	then you pass the test case.

	Example 1:
	Input: secret = "acckzz", wordlist = ["acckzz","ccbazz","eiowzz","abcczz"], numguesses = 10
	Output: You guessed the secret word correctly.
	Explanation: master.guess("aaaaaa") returns -1, because "aaaaaa" is not in wordlist.
	             master.guess("acckzz") returns 6, because "acckzz" is secret and has all 6 matches.
	             master.guess("ccbazz") returns 3, because "ccbazz" has 3 matches.
	             master.guess("eiowzz") returns 2, because "eiowzz" has 2 matches.
	             master.guess("abcczz") returns 4, because "abcczz" has 4 matches.
	             We made 5 calls to master.guess and one of them was the secret, so we pass the test case.

	Example 2:
	Input: secret = "hamada", wordlist = ["hamada","khaled"], numguesses = 10
	Output: You guessed the secret word correctly.

	Constraints:
	* 1 <= wordlist.length <= 100
	* wordlist[i].length == 6
	* wordlist[i] consist of lowercase English letters.
	* All the strings of wordlist are unique.
	* secret exists in wordlist.
	* numguesses == 10"""

    def findSecretWord(self, wordlist: List[str], master: 'Master') -> None:   
        shuffle(wordlist) # statistical guarantee to pass 
        for _ in range(10): 
            if wordlist: 
                w = wordlist.pop()
                m = master.guess(w)
                wordlist = [ww for ww in wordlist if sum(x == xx for x, xx in zip(w, ww)) == m]


    """844. Backspace String Compare (Easy)
	Given two strings s and t, return true if they are equal when both are 
	typed into empty text editors. '#' means a backspace character. Note that 
	after backspacing an empty text, the text will continue empty.

	Example 1:
	Input: s = "ab#c", t = "ad#c"
	Output: true
	Explanation: Both s and t become "ac".

	Example 2:
	Input: s = "ab##", t = "c#d#"
	Output: true
	Explanation: Both s and t become "".

	Example 3:
	Input: s = "a##c", t = "#a#c"
	Output: true
	Explanation: Both s and t become "c".

	Example 4:
	Input: s = "a#c", t = "b"
	Output: false
	Explanation: s becomes "c" while t becomes "b".

	Constraints:
	* 1 <= s.length, t.length <= 200
	* s and t only contain lowercase letters and '#' characters.
 
	Follow up: Can you solve it in O(n) time and O(1) space?"""

    def backspaceCompare(self, s: str, t: str) -> bool:
        i, j = len(s)-1, len(t)-1
        ss = tt = 0
        while 0 <= i or 0 <= j: 
            while 0 <= i and (s[i] == "#" or ss): 
                if s[i] == "#": ss += 1
                else: ss -= 1
                i -= 1
            while 0 <= j and (t[j] == "#" or tt): 
                if t[j] == "#": tt += 1
                else: tt -= 1
                j -= 1
            if i < 0 and 0 <= j or 0 <= i and j < 0 or 0 <= i and 0 <= j and s[i] != t[j]: return False 
            i, j = i-1, j-1
        return True 


    """845. Longest Mountain in Array (Medium)
	Let's call any (contiguous) subarray B (of A) a mountain if the following 
	properties hold:
	* B.length >= 3
	* There exists some 0 < i < B.length - 1 such that 
	  B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]
	(Note that B could be any subarray of A, including the entire array A.)
	Given an array A of integers, return the length of the longest mountain. 
	Return 0 if there is no mountain.

	Example 1:
	Input: [2,1,4,7,3,2,5]
	Output: 5
	Explanation: The largest mountain is [1,4,7,3,2] which has length 5.

	Example 2:
	Input: [2,2,2]
	Output: 0
	Explanation: There is no mountain.

	Note:
	* 0 <= A.length <= 10000
	* 0 <= A[i] <= 10000
	
	Follow up:
	* Can you solve it using only one pass?
	* Can you solve it in O(1) space?"""

    def longestMountain(self, A: List[int]) -> int:
        ans = 0
        for i in range(1, len(A)-1): 
            if A[i-1] < A[i] > A[i+1]: 
                lo = hi = i
                while 0 < lo and A[lo-1] < A[lo]: lo -= 1
                while hi < len(A)-1 and A[hi] > A[hi+1]: hi += 1
                ans = max(ans, hi - lo + 1)
        return ans 


    """847. Shortest Path Visiting All Nodes (Hard)
	You have an undirected, connected graph of n nodes labeled from 0 to n - 1. 
	You are given an array graph where graph[i] is a list of all the nodes 
	connected with node i by an edge. Return the length of the shortest path 
	that visits every node. You may start and stop at any node, you may revisit 
	nodes multiple times, and you may reuse edges.

	Example 1:
	Input: graph = [[1,2,3],[0],[0],[0]]
	Output: 4
	Explanation: One possible path is [1,0,2,0,3]

	Example 2:
	Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]
	Output: 4
	Explanation: One possible path is [0,1,4,2,3]

	Constraints:
	* n == graph.length
	* 1 <= n <= 12
	* 0 <= graph[i].length < n
	* graph[i] does not contain i.
	* If graph[a] contains b, then graph[b] contains a.
	* The input graph is always connected."""

    def shortestPathLength(self, graph: List[List[int]]) -> int:
        queue = [(i, 1 << i) for i in range(len(graph))]
        seen = set(queue)
        ans = 0
        while queue: 
            newq = []
            for i, mask in queue: 
                if mask == (1 << len(graph)) - 1: return ans 
                for ii in graph[i]: 
                    if (ii, mask | (1 << ii)) not in seen: 
                        newq.append((ii, mask | (1 << ii)))
                        seen.add((ii, mask | (1 << ii)))
            queue = newq
            ans += 1


    """848. Shifting Letters (Medium)
	We have a string S of lowercase letters, and an integer array shifts. Call 
	the shift of a letter, the next letter in the alphabet, (wrapping around so 
	that 'z' becomes 'a'). For example, shift('a') = 'b', shift('t') = 'u', and 
	shift('z') = 'a'. Now for each shifts[i] = x, we want to shift the first 
	i+1 letters of S, x times. Return the final string after all such shifts to 
	S are applied.

	Example 1:
	Input: S = "abc", shifts = [3,5,9]
	Output: "rpl"
	Explanation: We start with "abc".
	After shifting the first 1 letters of S by 3, we have "dbc".
	After shifting the first 2 letters of S by 5, we have "igc".
	After shifting the first 3 letters of S by 9, we have "rpl", the answer.

	Note:
	* 1 <= S.length = shifts.length <= 20000
	* 0 <= shifts[i] <= 10 ^ 9"""

    def shiftingLetters(self, S: str, shifts: List[int]) -> str:
        for i in reversed(range(1, len(shifts))): shifts[i-1] += shifts[i]
        return "".join(chr(97 + (ord(c) - 97 + x) % 26) for c, x in zip(S, shifts))


    """849. Maximize Distance to Closest Person (Medium)
	You are given an array representing a row of seats where seats[i] = 1 
	represents a person sitting in the ith seat, and seats[i] = 0 represents 
	that the ith seat is empty (0-indexed). There is at least one empty seat, 
	and at least one person sitting. Alex wants to sit in the seat such that 
	the distance between him and the closest person to him is maximized. Return 
	that maximum distance to the closest person.

	Example 1:
	Input: seats = [1,0,0,0,1,0,1]
	Output: 2
	Explanation: If Alex sits in the second open seat (i.e. seats[2]), then the 
	             closest person has distance 2. If Alex sits in any other open 
	             seat, the closest person has distance 1. Thus, the maximum 
	             distance to the closest person is 2.

	Example 2:
	Input: seats = [1,0,0,0]
	Output: 3
	Explanation: If Alex sits in the last seat (i.e. seats[3]), the closest 
	             person is 3 seats away. This is the maximum distance possible, 
	             so the answer is 3.
	
	Example 3:
	Input: seats = [0,1]
	Output: 1

	Constraints:
	* 2 <= seats.length <= 2 * 104
	* seats[i] is 0 or 1.
	* At least one seat is empty.
	* At least one seat is occupied."""

    def maxDistToClosest(self, seats: List[int]) -> int:
        ans = 0
        ii = -1
        for i, x in enumerate(seats): 
            if x: 
                ans = max(ans, i) if ii < 0 else max(ans, (i-ii)//2)
                ii = i 
        return max(ans, i - ii)


    """850. Rectangle Area II (Hard)
	We are given a list of (axis-aligned) rectangles. Each 
	rectangle[i] = [xi1, yi1, xi2, yi2], where (xi1, yi1) are the coordinates 
	of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-
	right corner of the ith rectangle. Find the total area covered by all 
	rectangles in the plane. Since the answer may be too large, return it 
	modulo 10^9 + 7.

	Example 1:
	Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
	Output: 6
	Explanation: As illustrated in the picture.

	Example 2:
	Input: rectangles = [[0,0,1000000000,1000000000]]
	Output: 49
	Explanation: The answer is 1018 modulo (109 + 7), which is (109)2 = (-7)2 = 49.

	Constraints:
	* 1 <= rectangles.length <= 200
	* rectanges[i].length = 4
	* 0 <= rectangles[i][j] <= 10^9
	* The total area covered by all rectangles will never exceed 2^63 - 1 and 
	  thus will fit in a 64-bit signed integer."""

    def rectangleArea(self, rectangles: List[List[int]]) -> int:
        line = []
        for x1, y1, x2, y2 in rectangles: 
            line.append((y1, x1, x2, 1))
            line.append((y2, x1, x2, 0))
        
        ans = yy = val = 0
        seg = []
        for y, x1, x2, tf in sorted(line): 
            ans += val * (y - yy)
            yy = y 
            if tf: insort(seg, (x1, x2))
            else: seg.remove((x1, x2))
            val = 0 
            prev = -inf 
            for x1, x2 in seg: 
                val += max(0, x2 - max(x1, prev))
                prev = max(prev, x2)
        return ans % 1_000_000_007


    """851. Loud and Rich (Medium)
	In a group of N people (labelled 0, 1, 2, ..., N-1), each person has 
	different amounts of money, and different levels of quietness. For 
	convenience, we'll call the person with label x, simply "person x". We'll 
	say that richer[i] = [x, y] if person x definitely has more money than 
	person y.  Note that richer may only be a subset of valid observations. 
	Also, we'll say quiet[x] = q if person x has quietness q. Now, return 
	answer, where answer[x] = y if y is the least quiet person (that is, the 
	person y with the smallest value of quiet[y]), among all people who 
	definitely have equal to or more money than person x.

	Example 1:
	Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], 
	       quiet = [3,2,5,4,6,1,7,0]
	Output: [5,5,2,5,4,5,6,7]
	Explanation: 
	answer[0] = 5.
	Person 5 has more money than 3, which has more money than 1, which has more 
	money than 0. The only person who is quieter (has lower quiet[x]) is person 
	7, but it isn't clear if they have more money than person 0.
	answer[7] = 7.
	Among all people that definitely have equal to or more money than person 7
	(which could be persons 3, 4, 5, 6, or 7), the person who is the quietest 
	(has lower quiet[x]) is person 7. The other answers can be filled out with 
	similar reasoning.
	
	Note:
	* 1 <= quiet.length = N <= 500
	* 0 <= quiet[i] < N, all quiet[i] are different.
	* 0 <= richer.length <= N * (N-1) / 2
	* 0 <= richer[i][j] < N
	* richer[i][0] != richer[i][1]
	* richer[i]'s are all different.
	* The observations in richer are all logically consistent."""

    def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:
        graph = {} # graph as adjacency list 
        for x, y in richer: graph.setdefault(y, []).append(x)
        
        @cache
        def fn(x): 
            """Return richer & loudest person given person."""
            ans = x
            for xx in graph.get(x, []): 
                if quiet[fn(xx)] < quiet[ans]: ans = fn(xx)
            return ans 
        
        return [fn(x) for x in range(len(quiet))]


    """853. Car Fleet (Medium)
	N cars are going to the same destination along a one lane road. The 
	destination is target miles away. Each car i has a constant speed speed[i] 
	(in miles per hour), and initial position position[i] miles towards the 
	target along the road. A car can never pass another car ahead of it, but it 
	can catch up to it, and drive bumper to bumper at the same speed. The 
	distance between these two cars is ignored - they are assumed to have the 
	same position. A car fleet is some non-empty set of cars driving at the 
	same position and same speed.  Note that a single car is also a car fleet. 
	If a car catches up to a car fleet right at the destination point, it will 
	still be considered as one car fleet. How many car fleets will arrive at 
	the destination?

	Example 1:
	Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
	Output: 3
	Explanation:
	The cars starting at 10 and 8 become a fleet, meeting each other at 12.
	The car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.
	The cars starting at 5 and 3 become a fleet, meeting each other at 6.
	Note that no other cars meet these fleets before the destination, so the answer is 3.

	Note:
	* 0 <= N <= 10 ^ 4
	* 0 < target <= 10 ^ 6
	* 0 < speed[i] <= 10 ^ 6
	* 0 <= position[i] < target
	* All initial positions are different."""

    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        ans = prev = 0
        for pp, ss in sorted(zip(position, speed), reverse=True): 
            tt = (target - pp)/ss # time to arrive at target 
            if prev < tt: 
                ans += 1
                prev = tt
        return ans 


    """854. K-Similar Strings (Hard)
	Strings s1 and s2 are k-similar (for some non-negative integer k) if we can 
	swap the positions of two letters in s1 exactly k times so that the 
	resulting string equals s2. Given two anagrams s1 and s2, return the 
	smallest k for which s1 and s2 are k-similar.

	Example 1:
	Input: s1 = "ab", s2 = "ba"
	Output: 1

	Example 2:
	Input: s1 = "abc", s2 = "bca"
	Output: 2

	Example 3:
	Input: s1 = "abac", s2 = "baca"
	Output: 2

	Example 4:
	Input: s1 = "aabc", s2 = "abca"
	Output: 2

	Constraints:
	* 1 <= s1.length <= 20
	* s2.length == s1.length
	* s1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}.
	* s2 is an anagram of s1."""

    def kSimilarity(self, s1: str, s2: str) -> int:
        ans = 0
        seen = {s1}
        queue = deque([s1])
        while queue: 
            for _ in range(len(queue)): 
                s = queue.popleft()
                if s == s2: return ans 
                for i in range(len(s)): 
                    if s[i] != s2[i]: 
                        for j in range(i+1, len(s)): 
                            if s[j] != s2[j] and s[j] == s2[i]: 
                                ss = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]
                                if ss not in seen: 
                                    seen.add(ss)
                                    queue.append(ss)
                        break
            ans += 1


    """856. Score of Parentheses (Medium)
	Given a balanced parentheses string S, compute the score of the string 
	based on the following rule:
	* () has score 1
	* AB has score A + B, where A and B are balanced parentheses strings.
	* (A) has score 2 * A, where A is a balanced parentheses string.

	Example 1:
	Input: "()"
	Output: 1

	Example 2:
	Input: "(())"
	Output: 2

	Example 3:
	Input: "()()"
	Output: 2

	Example 4:
	Input: "(()(()))"
	Output: 6

	Note:
	* S is a balanced parentheses string, containing only ( and ).
	* 2 <= S.length <= 50"""

    def scoreOfParentheses(self, S: str) -> int:
        ans, stack = 0, []
        for c in S: 
            if c == "(": 
                stack.append(ans)
                ans = 0
            else: ans = max(1, 2*ans) + stack.pop()
        return ans


    """857. Minimum Cost to Hire K Workers (Hard)
	There are n workers. The i-th worker has a quality[i] and a minimum wage 
	expectation wage[i]. Now we want to hire exactly k workers to form a paid 
	group. When hiring a group of k workers, we must pay them according to the 
	following rules:
	* Every worker in the paid group should be paid in the ratio of their 
	  quality compared to other workers in the paid group.
	* Every worker in the paid group must be paid at least their minimum wage 
	  expectation.
	Return the least amount of money needed to form a paid group satisfying the 
	above conditions.

	Example 1:
	Input: quality = [10,20,5], wage = [70,50,30], k = 2
	Output: 105.00000
	Explanation: We pay 70 to 0-th worker and 35 to 2-th worker.

	Example 2:
	Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3
	Output: 30.66667
	Explanation: We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers 
	             seperately. 

	Note:
	* 1 <= k <= n <= 10000, where n = quality.length = wage.length
	* 1 <= quality[i] <= 10000
	* 1 <= wage[i] <= 10000
	* Answers within 10-5 of the correct answer will be considered correct."""

    def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        ans, rsm = inf, 0
        pq = [] # max-heap 
        for q, w in sorted(zip(quality, wage), key=lambda x: x[1]/x[0]): 
            rsm += q 
            heappush(pq, -q)
            if len(pq) > k: rsm += heappop(pq)
            if len(pq) == k: ans = min(ans, rsm * w/q)
        return ans 


    """862. Shortest Subarray with Sum at Least K (Hard)
	Given an integer array nums and an integer k, return the length of the 
	shortest non-empty subarray of nums with a sum of at least k. If there is 
	no such subarray, return -1. A subarray is a contiguous part of an array.

	Example 1:
	Input: nums = [1], k = 1
	Output: 1

	Example 2:
	Input: nums = [1,2], k = 4
	Output: -1

	Example 3:
	Input: nums = [2,-1,2], k = 3
	Output: 3

	Constraints:
	* 1 <= nums.length <= 10^5
	* -10^5 <= nums[i] <= 10^5
	* 1 <= k <= 10^9"""

    def shortestSubarray(self, nums: List[int], k: int) -> int:
        ans = inf 
        queue = deque([(-1, 0)])
        prefix = 0
        for i, x in enumerate(nums): 
            prefix += x
            while queue and prefix - queue[0][1] >= k: ans = min(ans, i - queue.popleft()[0])
            while queue and queue[-1][1] >= prefix: queue.pop()
            queue.append((i, prefix))
        return ans if ans < inf else -1 


    """864. Shortest Path to Get All Keys (Hard)
	You are given an m x n grid grid where:
	* '.' is an empty cell.
	* '#' is a wall.
	* '@' is the starting point.
	* Lowercase letters represent keys.
	* Uppercase letters represent locks.
	You start at the starting point and one move consists of walking one space 
	in one of the four cardinal directions. You cannot walk outside the grid, 
	or walk into a wall. If you walk over a key, you can pick it up and you 
	cannot walk over a lock unless you have its corresponding key. For some 
	1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the 
	first k letters of the English alphabet in the grid. This means that there 
	is exactly one key for each lock, and one lock for each key; and also that 
	the letters used to represent the keys and locks were chosen in the same 
	order as the English alphabet. Return the lowest number of moves to acquire 
	all keys. If it is impossible, return -1.

	Example 1:
	Input: grid = ["@.a.#","###.#","b.A.B"]
	Output: 8
	Explanation: Note that the goal is to obtain all the keys not to open all 
	             the locks.
	
	Example 2:
	Input: grid = ["@..aA","..B#.","....b"]
	Output: 6

	Example 3:
	Input: grid = ["@Aa"]
	Output: -1

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 30
	* grid[i][j] is either an English letter, '.', '#', or '@'.
	* The number of keys in the grid is in the range [1, 6].
	* Each key in the grid is unique.
	* Each key in the grid has a matching lock."""

    def shortestPathAllKeys(self, grid: List[str]) -> int:
        m, n = len(grid), len(grid[0])
        
        ii = jj = total = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "@": ii, jj = i, j
                elif grid[i][j].islower(): total += 1
        
        ans = 0
        seen = {(ii, jj, 0)}
        queue = [(ii, jj, 0)]
        while queue: 
            newq = []
            for i, j, keys in queue: 
                if keys == (1 << total) - 1: return ans 
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    if 0 <= ii < m and 0 <= jj < n and grid[ii][jj] != "#": 
                        kk = keys 
                        if grid[ii][jj].islower(): kk |= 1 << ord(grid[ii][jj]) - 97
                        if (ii, jj, kk) in seen or grid[ii][jj].isupper() and not kk & (1 << ord(grid[ii][jj])-65): continue 
                        newq.append((ii, jj, kk))
                        seen.add((ii, jj, kk))
            ans += 1
            queue = newq
        return -1


    """865. Smallest Subtree with all the Deepest Nodes (Medium)
	Given the root of a binary tree, the depth of each node is the shortest 
	distance to the root. Return the smallest subtree such that it contains all 
	the deepest nodes in the original tree. A node is called the deepest if it 
	has the largest depth possible among any node in the entire tree. The 
	subtree of a node is tree consisting of that node, plus the set of all 
	descendants of that node.

	Example 1:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4]
	Output: [2,7,4]
	Explanation: We return the node with value 2, colored in yellow in the 
	             diagram. The nodes coloured in blue are the deepest nodes of 
	             the tree. Notice that nodes 5, 3 and 2 contain the deepest 
	             nodes in the tree but node 2 is the smallest subtree among 
	             them, so we return it.

	Example 2:
	Input: root = [1]
	Output: [1]
	Explanation: The root is the deepest node in the tree.
	
	Example 3:
	Input: root = [0,1,3,null,2]
	Output: [2]
	Explanation: The deepest node in the tree is 2, the valid subtrees are the 
	             subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the 
	             smallest.

	Constraints:
	* The number of nodes in the tree will be in the range [1, 500].
	* 0 <= Node.val <= 500
	* The values of the nodes in the tree are unique."""

    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:
        
        @cache
        def fn(node):
            """Return height of tree rooted at node."""
            if not node: return 0
            return 1 + max(fn(node.left), fn(node.right))
        
        node = root
        while node: 
            left, right = fn(node.left), fn(node.right)
            if left == right: return node
            elif left > right: node = node.left
            else: node = node.right 


    """866. Prime Palindrome (Medium)
	Given an integer n, return the smallest prime palindrome greater than or 
	equal to n. An integer is prime if it has exactly two divisors: 1 and 
	itself. Note that 1 is not a prime number. For example, 2, 3, 5, 7, 11, 
	and 13 are all primes. An integer is a palindrome if it reads the same from 
	left to right as it does from right to left. For example, 101 and 12321 are 
	palindromes. The test cases are generated so that the answer always exists 
	and is in the range [2, 2 * 10^8].

	Example 1:
	Input: n = 6
	Output: 7

	Example 2:
	Input: n = 8
	Output: 11

	Example 3:
	Input: n = 13
	Output: 101

	Constraints: 1 <= n <= 10^8"""

    def primePalindrome(self, n: int) -> int:
        if 8 <= n <= 11: return 11 # edge case 
        
        def fn(n): 
            """Return next palindromic number greater than x."""
            digits = [int(x) for x in str(n)]
            for i in reversed(range(len(digits)//2+1)): 
                if digits[i] < 9: break 
            else: return 10*n + 11
            digits[i] = digits[~i] = digits[i] + 1
            for ii in range(i): 
                digits[~ii] = digits[ii]
            for ii in range(i+1, len(digits)//2+1): 
                digits[ii] = digits[~ii] = 0
            return int("".join(map(str, digits)))
        
        def isprime(x): 
            """Return True if x is prime."""
            if x <= 1: return False 
            if x % 2 == 0: return x == 2
            for k in range(3, int(sqrt(x))+1, 2): 
                if x % k == 0: return False
            return True 
        
        nn = n 
        k = 0
        while nn: 
            nn //= 10
            k += 1
            
        if not k&1: n = 10**k + 1
        elif str(n) != str(n)[::-1]: n = fn(n)
        
        while True: 
            if isprime(n): return n
            n = fn(n)


    """869. Reordered Power of 2 (Medium)
	Starting with a positive integer N, we reorder the digits in any order 
	(including the original order) such that the leading digit is not zero. 
	Return true if and only if we can do this in a way such that the resulting 
	number is a power of 2.

	Example 1:
	Input: 1
	Output: true

	Example 2:
	Input: 10
	Output: false

	Example 3:
	Input: 16
	Output: true

	Example 4:
	Input: 24
	Output: false

	Example 5:
	Input: 46
	Output: true

	Note: 1 <= N <= 10^9"""

    def reorderedPowerOf2(self, N: int) -> bool:
        return any(Counter(str(N)) == Counter(str(1 << i)) for i in range(30))


    """871. Minimum Number of Refueling Stops (Hard)
	A car travels from a starting position to a destination which is target 
	miles east of the starting position. Along the way, there are gas stations.  
	Each station[i] represents a gas station that is station[i][0] miles east 
	of the starting position, and has station[i][1] liters of gas. The car 
	starts with an infinite tank of gas, which initially has startFuel liters 
	of fuel in it.  It uses 1 liter of gas per 1 mile that it drives. When the 
	car reaches a gas station, it may stop and refuel, transferring all the gas 
	from the station into the car. What is the least number of refueling stops 
	the car must make in order to reach its destination?  If it cannot reach 
	the destination, return -1. Note that if the car reaches a gas station with 
	0 fuel left, the car can still refuel there.  If the car reaches the 
	destination with 0 fuel left, it is still considered to have arrived.

	Example 1:
	Input: target = 1, startFuel = 1, stations = []
	Output: 0
	Explanation: We can reach the target without refueling.

	Example 2:
	Input: target = 100, startFuel = 1, stations = [[10,100]]
	Output: -1
	Explanation: We can't reach the target (or even the first gas station).

	Example 3:
	Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]
	Output: 2
	Explanation: We start with 10 liters of fuel. We drive to position 10, 
	             expending 10 liters of fuel.  We refuel from 0 liters to 60 
	             liters of gas. Then, we drive from position 10 to position 60 
	             (expending 50 liters of fuel), and refuel from 10 liters to 50 
	             liters of gas.  We then drive to and reach the target. We made 
	             2 refueling stops along the way, so we return 2.

	Note:
	* 1 <= target, startFuel, stations[i][1] <= 10^9
	* 0 <= stations.length <= 500
	* 0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target"""

    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:
        ans = k = 0 
        total = startFuel 
        pq = [] 
        while total < target: 
            while k < len(stations) and stations[k][0] <= total: 
                heappush(pq, -stations[k][1]) 
                k += 1
            if not pq: return -1 
            total -= heappop(pq)
            ans += 1
        return ans 


    """876. Middle of the Linked List (Easy)
	Given the head of a singly linked list, return the middle node of the 
	linked list. If there are two middle nodes, return the second middle node.

	Example 1:
	Input: head = [1,2,3,4,5]
	Output: [3,4,5]
	Explanation: The middle node of the list is node 3.

	Example 2:
	Input: head = [1,2,3,4,5,6]
	Output: [4,5,6]
	Explanation: Since the list has two middle nodes with values 3 and 4, we 
	             return the second one.

	Constraints:
	* The number of nodes in the list is in the range [1, 100].
	* 1 <= Node.val <= 100"""

    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = fast = head
        while fast and fast.next: 
            slow = slow.next 
            fast = fast.next.next
        return slow


    """877. Stone Game (Medium)
	Alex and Lee play a game with piles of stones. There are an even number of 
	piles arranged in a row, and each pile has a positive integer number of 
	stones piles[i]. The objective of the game is to end with the most stones.  
	The total number of stones is odd, so there are no ties. Alex and Lee take 
	turns, with Alex starting first. Each turn, a player takes the entire pile 
	of stones from either the beginning or the end of the row. This continues 
	until there are no more piles left, at which point the person with the most 
	stones wins. Assuming Alex and Lee play optimally, return True if and only 
	if Alex wins the game.

	Example 1:
	Input: piles = [5,3,4,5]
	Output: true
	Explanation: 
	Alex starts first, and can only take the first 5 or the last 5.
	Say he takes the first 5, so that the row becomes [3, 4, 5].
	If Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.
	If Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.
	This demonstrated that taking the first 5 was a winning move for Alex, so we return true.

	Constraints:
	* 2 <= piles.length <= 500
	* piles.length is even.
	* 1 <= piles[i] <= 500
	* sum(piles) is odd."""

    def stoneGame(self, piles: List[int]) -> bool:
        
        @cache
        def fn(lo, hi): 
            """Return diff when picking stones from lo to hi (inclusive)."""
            if lo == hi: return piles[lo]
            return max(piles[lo] - fn(lo+1, hi), piles[hi] - fn(lo, hi-1))
        
        return fn(0, len(piles)-1) > 0


    """878. Nth Magical Number (Hard)
	A positive integer is magical if it is divisible by either a or b. Given 
	the three integers n, a, and b, return the nth magical number. Since the 
	answer may be very large, return it modulo 10^9 + 7.

	Example 1:
	Input: n = 1, a = 2, b = 3
	Output: 2

	Example 2:
	Input: n = 4, a = 2, b = 3
	Output: 6

	Example 3:
	Input: n = 5, a = 2, b = 4
	Output: 10

	Example 4:
	Input: n = 3, a = 6, b = 4
	Output: 8

	Constraints:
	* 1 <= n <= 109
	* 2 <= a, b <= 4 * 10^4"""

    def nthMagicalNumber(self, n: int, a: int, b: int) -> int:
	    # inclusion-exclusion principle
        ab = a*b//gcd(a,b)
        lo, hi = 0, n*min(a, b)
        while lo < hi: 
            mid = lo + hi >> 1
            if mid//a + mid//b - mid//ab < n: lo = mid + 1
            else: hi = mid 
        return lo % 1_000_000_007


    """879. Profitable Schemes (Hard)
	There is a group of n members, and a list of various crimes they could 
	commit. The ith crime generates a profit[i] and requires group[i] members 
	to participate in it. If a member participates in one crime, that member 
	can't participate in another crime. Let's call a profitable scheme any 
	subset of these crimes that generates at least minProfit profit, and the 
	total number of members participating in that subset of crimes is at most 
	n. Return the number of schemes that can be chosen. Since the answer may 
	be very large, return it modulo 10^9 + 7.

	Example 1:
	Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]
	Output: 2
	Explanation: To make a profit of at least 3, the group could either commit 
	             crimes 0 and 1, or just crime 1. In total, there are 2 schemes.
	
	Example 2:
	Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]
	Output: 7
	Explanation: To make a profit of at least 5, the group could commit any 
	             crimes, as long as they commit one. There are 7 possible 
	             schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).

	Constraints:
	* 1 <= n <= 100
	* 0 <= minProfit <= 100
	* 1 <= group.length <= 100
	* 1 <= group[i] <= 100
	* profit.length == group.length
	* 0 <= profit[i] <= 100"""

    def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:
        dp = [[0]*(1 + n) for _ in range(1 + minProfit)]
        dp[0][0] = 1
        for p, g in zip(profit, group): 
            for i in range(minProfit, -1, -1): 
                for j in range(n - g, -1, -1): 
                    dp[min(i+p, minProfit)][j + g] += dp[i][j]
        return sum(dp[minProfit]) % 1_000_000_007


    """881. Boats to Save People (Medium)
	The i-th person has weight people[i], and each boat can carry a maximum 
	weight of limit. Each boat carries at most 2 people at the same time, 
	provided the sum of the weight of those people is at most limit. Return the 
	minimum number of boats to carry every given person.  (It is guaranteed 
	each person can be carried by a boat.)

	Example 1:
	Input: people = [1,2], limit = 3
	Output: 1
	Explanation: 1 boat (1, 2)

	Example 2:
	Input: people = [3,2,2,1], limit = 3
	Output: 3
	Explanation: 3 boats (1, 2), (2) and (3)

	Example 3:
	Input: people = [3,5,3,4], limit = 5
	Output: 4
	Explanation: 4 boats (3), (3), (4), (5)

	Note:
	* 1 <= people.length <= 50000
	* 1 <= people[i] <= limit <= 30000"""

    def numRescueBoats(self, people: List[int], limit: int) -> int:
        people.sort()
        
        ans = 0
        lo, hi = 0, len(people)-1
        while lo < hi: 
            if people[lo] + people[hi] <= limit: lo += 1
            ans += 1
            hi -= 1
        return ans + (lo == hi)


    """882. Reachable Nodes In Subdivided Graph (Hard)
	You are given an undirected graph (the "original graph") with n nodes 
	labeled from 0 to n - 1. You decide to subdivide each edge in the graph 
	into a chain of nodes, with the number of new nodes varying between each 
	edge. The graph is given as a 2D array of edges where 
	edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui 
	and vi in the original graph, and cnti is the total number of new nodes 
	that you will subdivide the edge into. Note that cnti == 0 means you will 
	not subdivide the edge. To subdivide the edge [ui, vi], replace it with 
	(cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2, ..., 
	xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., 
	[xcnti11, xcnti], [xcnti, vi]. In this new graph, you want to know how many 
	nodes are reachable from the node 0, where a node is reachable if the 
	distance is maxMoves or less. Given the original graph and maxMoves, return 
	the number of nodes that are reachable from node 0 in the new graph.

	Example 1:
	Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3
	Output: 13
	Explanation: The edge subdivisions are shown in the image above. The nodes 
	             that are reachable are highlighted in yellow.

	Example 2:
	Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4
	Output: 23
	
	Example 3:
	Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5
	Output: 1
	Explanation: Node 0 is disconnected from the rest of the graph, so only 
	             node 0 is reachable.

	Constraints:
	* 0 <= edges.length <= min(n * (n - 1) / 2, 10^4)
	* edges[i].length == 3
	* 0 <= ui < vi < n
	* There are no multiple edges in the graph.
	* 0 <= cnti <= 10^4
	* 0 <= maxMoves <= 10^9
	* 1 <= n <= 3000"""

    def reachableNodes(self, edges: List[List[int]], maxMoves: int, n: int) -> int:
        graph = defaultdict(dict)
        for u, v, w in edges: graph[u][v] = graph[v][u] = w
        
        ans = 0
        pq = [(0, 0)] # min-heap 
        
        seen = [False] * n
        used = defaultdict(int)
        
        while pq: 
            x, u = heappop(pq)
            if not seen[u]: 
                ans += 1
                seen[u] = True 
                for v, c in graph[u].items(): 
                    if not used[u, v]: 
                        if used[v, u] < graph[v][u]: 
                            used[u, v] = min(maxMoves - x, graph[v][u] - used[v, u])
                            ans += used[u, v]
                        if x + c + 1 <= maxMoves and not seen[v]: heappush(pq, (x + c + 1, v))
        return ans 


    """887. Super Egg Drop (Hard)
	You are given k identical eggs and you have access to a building with n 
	floors labeled from 1 to n. You know that there exists a floor f where 
	0 <= f <= n such that any egg dropped at a floor higher than f will break, 
	and any egg dropped at or below floor f will not break. Each move, you may 
	take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If 
	the egg breaks, you can no longer use it. However, if the egg does not 
	break, you may reuse it in future moves. Return the minimum number of moves 
	that you need to determine with certainty what the value of f is.

	Example 1:
	Input: k = 1, n = 2
	Output: 2
	Explanation: Drop the egg from floor 1. If it breaks, we know that f = 0.
	             Otherwise, drop the egg from floor 2. If it breaks, we know 
	             that f = 1. If it does not break, then we know f = 2. Hence, 
	             we need at minimum 2 moves to determine with certainty what 
	             the value of f is.
	
	Example 2:
	Input: k = 2, n = 6
	Output: 3

	Example 3:
	Input: k = 3, n = 14
	Output: 4

	Constraints:
	* 1 <= k <= 100
	* 1 <= n <= 10^4"""

    def superEggDrop(self, k: int, n: int) -> int:
        
        @cache
        def fn(m, k): 
            """Return max floor reachable with m moves and k eggs."""
            if m == 0 or k == 0: return 0 
            return 1 + fn(m-1, k-1) + fn(m-1, k)
        
        return next(m for m in range(1, n+1) if fn(m, k) >= n)


    """889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)
	Return any binary tree that matches the given preorder and postorder 
	traversals. Values in the traversals pre and post are distinct positive 
	integers.

	Example 1:
	Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
	Output: [1,2,3,4,5,6,7]

	Note:
	* 1 <= pre.length == post.length <= 30
	* pre[] and post[] are both permutations of 1, 2, ..., pre.length.
	* It is guaranteed an answer exists. If there exists multiple answers, you 
	  can return any of them."""


    def constructFromPrePost(self, pre: List[int], post: List[int]) -> TreeNode:
        mp = {x: i for i, x in enumerate(post)}
        
        root = None 
        stack = []
        for x in pre: 
            if not root: root = node = TreeNode(x)
            elif mp[x] < mp[stack[-1].val]: stack[-1].left = node = TreeNode(x)
            else: 
                while mp[stack[-1].val] < mp[x]: stack.pop() # retrace 
                stack[-1].right = node = TreeNode(x)
            stack.append(node)
        return root 


    """890. Find and Replace Pattern (Medium)
	You have a list of words and a pattern, and you want to know which words in 
	words matches the pattern. A word matches the pattern if there exists a 
	permutation of letters p so that after replacing every letter x in the 
	pattern with p(x), we get the desired word. (Recall that a permutation of 
	letters is a bijection from letters to letters: every letter maps to 
	another letter, and no two letters map to the same letter.) Return a list 
	of the words in words that match the given pattern. You may return the 
	answer in any order.

	Example 1:
	Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
	Output: ["mee","aqq"]
	Explanation: "mee" matches the pattern because there is a permutation 
	             {a -> m, b -> e, ...}. "ccc" does not match the pattern 
	             because {a -> c, b -> c, ...} is not a permutation, since a 
	             and b map to the same letter.

	Note:
	* 1 <= words.length <= 50
	* 1 <= pattern.length = words[i].length <= 20"""

    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        return [word for word in words if len(set(zip(word, pattern))) == len(set(word)) == len(set(pattern))]


    """891. Sum of Subsequence Widths (Hard)
	The width of a sequence is the difference between the maximum and minimum 
	elements in the sequence. Given an array of integers nums, return the sum 
	of the widths of all the non-empty subsequences of nums. Since the answer 
	may be very large, return it modulo 10^9 + 7. A subsequence is a sequence 
	that can be derived from an array by deleting some or no elements without 
	changing the order of the remaining elements. For example, [3,6,2,7] is a 
	subsequence of the array [0,3,1,6,2,2,7].

	Example 1:
	Input: nums = [2,1,3]
	Output: 6
	Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], 
	             [2,1,3]. The corresponding widths are 0, 0, 0, 1, 1, 2, 2.
	             The sum of these widths is 6.
	
	Example 2:
	Input: nums = [2]
	Output: 0

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^5"""

    def sumSubseqWidths(self, nums: List[int]) -> int:
        MOD = 1_000_000_007
        ans = 0 
        for i, x in enumerate(sorted(nums)): 
            ans += x * (pow(2, i, MOD) - pow(2, len(nums)-i-1, MOD))
        return ans % MOD


    """894. All Possible Full Binary Trees (Medium)
	A full binary tree is a binary tree where each node has exactly 0 or 2 
	children. Return a list of all possible full binary trees with N nodes. 
	Each element of the answer is the root node of one possible tree. Each node 
	of each tree in the answer must have node.val = 0. You may return the final 
	list of trees in any order.

	Example 1:
	Input: 7
	Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],
	         [0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],
	         [0,0,0,0,0,null,null,0,0]]

	Note: 1 <= N <= 20"""

    def allPossibleFBT(self, N: int) -> List[TreeNode]:
        
        @cache
        def fn(n):
            """Return all full binary trees of n nodes."""
            if n == 1: return [TreeNode()]
            ans = []
            for nn in range(1, n, 2): 
                for left in fn(nn):
                    for right in fn(n-1-nn): 
                        ans.append(TreeNode(left=left, right=right))
            return ans 
        
        return fn(N)


    """897. Increasing Order Search Tree (Easy)
	Given the root of a binary search tree, rearrange the tree in in-order so 
	that the leftmost node in the tree is now the root of the tree, and every 
	node has no left child and only one right child.

	Example 1:
	Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
	Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

	Example 2:
	Input: root = [5,1,7]
	Output: [1,null,5,null,7]

	Constraints:
	* The number of nodes in the given tree will be in the range [1, 100].
	* 0 <= Node.val <= 1000"""

    def increasingBST(self, root: TreeNode) -> TreeNode:
        ans = temp = None
        stack = []
        node = root
        while stack or node: 
            if node: 
                stack.append(node)
                node = node.left
                continue
            node = stack.pop()
            if not ans: ans = temp = node 
            else: temp.right = temp = node
            node.left = None 
            node = node.right
        return ans 


    """898. Bitwise ORs of Subarrays (Medium)
	We have an array A of non-negative integers. For every (contiguous) 
	subarray B = [A[i], A[i+1], ..., A[j]] (with i <= j), we take the bitwise 
	OR of all the elements in B, obtaining a result A[i] | A[i+1] | ... | A[j]. 
	Return the number of possible results.  (Results that occur more than once 
	are only counted once in the final answer.)

	Example 1:
	Input: [0]
	Output: 1
	Explanation: There is only one possible result: 0.

	Example 2:
	Input: [1,1,2]
	Output: 3
	Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].
				 These yield the results 1, 1, 2, 1, 3, 3.
				 There are 3 unique values, so the answer is 3.
	
	Example 3:
	Input: [1,2,4]
	Output: 6
	Explanation: The possible results are 1, 2, 3, 4, 6, and 7.

	Note:
	* 1 <= A.length <= 50000
	* 0 <= A[i] <= 10^9"""

    def subarrayBitwiseORs(self, A: List[int]) -> int:
        ans, vals = set(), set()
        for x in A: 
            vals = {x | xx for xx in vals} | {x}
            ans |= vals
        return len(ans)


    """899. Orderly Queue (Hard)
	A string s of lowercase letters is given. Then, we may make any number of 
	moves. In each move, we choose one of the first k letters (starting from 
	the left), remove it, and place it at the end of the string. Return the 
	lexicographically smallest string we could have after any number of moves.

	Example 1:
	Input: s = "cba", k = 1
	Output: "acb"
	Explanation: In the first move, we move the 1st character ("c") to the end, 
	             obtaining the string "bac". In the second move, we move the 
	             1st character ("b") to the end, obtaining the final result 
	             "acb".
	
	Example 2:
	Input: s = "baaca", k = 3
	Output: "aaabc"
	Explanation: In the first move, we move the 1st character ("b") to the end, 
	             obtaining the string "aacab". In the second move, we move the 
	             3rd character ("c") to the end, obtaining the final result 
	             "aaabc".

	Note:
	* 1 <= k <= s.length <= 1000
	* s consists of lowercase letters only."""

    def orderlyQueue(self, s: str, k: int) -> str:
        if k == 1: return min(s[i:] + s[:i] for i in range(len(s)))
        return "".join(sorted(s))


    """902. Numbers At Most N Given Digit Set (Hard)
	Given an array of digits which is sorted in non-decreasing order. You can 
	write numbers using each digits[i] as many times as we want. For example, 
	if digits = ['1','3','5'], we may write numbers such as '13', '551', and 
	'1351315'. Return the number of positive integers that can be generated 
	that are less than or equal to a given integer n.

	Example 1:
	Input: digits = ["1","3","5","7"], n = 100
	Output: 20
	Explanation: The 20 numbers that can be written are: 1, 3, 5, 7, 11, 13, 
	             15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.
	
	Example 2:
	Input: digits = ["1","4","9"], n = 1000000000
	Output: 29523
	Explanation: We can write 3 one digit numbers, 9 two digit numbers, 27 
	             three digit numbers, 81 four digit numbers, 243 five digit 
	             numbers, 729 six digit numbers, 2187 seven digit numbers, 6561 
	             eight digit numbers, and 19683 nine digit numbers. In total, 
	             this is 29523 integers that can be written using the digits 
	             array.
	
	Example 3:
	Input: digits = ["7"], n = 8
	Output: 1

	Constraints:
	* 1 <= digits.length <= 9
	* digits[i].length == 1
	* digits[i] is a digit from '1' to '9'.
	* All the values in digits are unique.
	* digits is sorted in non-decreasing order.
	* 1 <= n <= 10^9"""

    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:
        s = str(n)
        ans = sum(len(digits) ** i for i in range(1, len(s)))
        for i in range(len(s)): 
            ans += sum(c < s[i] for c in digits) * (len(digits) ** (len(s) - i - 1))
            if s[i] not in digits: return ans
        return ans + 1


    """903. Valid Permutations for DI Sequence (Hard)
	We are given s, a length n string of characters from the set {'D', 'I'}. 
	(These letters stand for "decreasing" and "increasing".) A valid 
	permutation is a permutation p[0], p[1], ..., p[n] of integers 
	{0, 1, ..., n}, such that for all i:
	* If s[i] == 'D', then p[i] > p[i+1], and;
	* If s[i] == 'I', then p[i] < p[i+1].
	How many valid permutations are there?  Since the answer may be large, 
	return your answer modulo 109 + 7.

	Example 1:
	Input: s = "DID"
	Output: 5
	Explanation: The 5 valid permutations of (0, 1, 2, 3) are:
	             (1, 0, 3, 2)
	             (2, 0, 3, 1)
	             (2, 1, 3, 0)
	             (3, 0, 2, 1)
	             (3, 1, 2, 0)

	Note:
	* 1 <= s.length <= 200
	* s consists only of characters from the set {'D', 'I'}."""

    def numPermsDISequence(self, s: str) -> int:
        
        @cache 
        def fn(i, x): 
            """Return number of valid permutations for s[i:] given x numbers smaller than previous one."""
            if i == len(s): return 1 
            if s[i] == "D": 
                if x == 0: return 0 # cannot decrease
                return fn(i, x-1) + fn(i+1, x-1)
            else: 
                if x == len(s)-i: return 0 # cannot increase 
                return fn(i, x+1) + fn(i+1, x)
        
        return sum(fn(0, x) for x in range(len(s)+1)) % 1_000_000_007

    
    """909. Snakes and Ladders (Medium)
	On an N x N board, the numbers from 1 to N*N are written boustrophedonically 
	starting from the bottom left of the board, and alternating direction each 
	row. You start on square 1 of the board (which is always in the last row and 
	first column).  Each move, starting from square x, consists of the following:
	* You choose a destination square S with number x+1, x+2, x+3, x+4, x+5, or 
	  x+6, provided this number is <= N*N.
	  + (This choice simulates the result of a standard 6-sided die roll: ie., 
	    there are always at most 6 destinations, regardless of the size of the 
	    board.)
	* If S has a snake or ladder, you move to the destination of that snake or 
	  ladder.  Otherwise, you move to S.
	A board square on row r and column c has a "snake or ladder" if 
	board[r][c] != -1.  The destination of that snake or ladder is board[r][c]. 
	Note that you only take a snake or ladder at most once per move: if the 
	destination to a snake or ladder is the start of another snake or ladder, 
	you do not continue moving.  (For example, if the board is `[[4,-1],[-1,3]]`, 
	and on the first move your destination square is `2`, then you finish your 
	first move at `3`, because you do not continue moving to `4`.) Return the 
	least number of moves required to reach square N*N.  If it is not possible, 
	return -1.

	Example 1:
	Input: [
	[-1,-1,-1,-1,-1,-1],
	[-1,-1,-1,-1,-1,-1],
	[-1,-1,-1,-1,-1,-1],
	[-1,35,-1,-1,13,-1],
	[-1,-1,-1,-1,-1,-1],
	[-1,15,-1,-1,-1,-1]]
	Output: 4
	Explanation: 
	At the beginning, you start at square 1 [at row 5, column 0].
	You decide to move to square 2, and must take the ladder to square 15.
	You then decide to move to square 17 (row 3, column 5), and must take the snake to square 13.
	You then decide to move to square 14, and must take the ladder to square 35.
	You then decide to move to square 36, ending the game.
	It can be shown that you need at least 4 moves to reach the N*N-th square, so the answer is 4.

	Note:
	* 2 <= board.length = board[0].length <= 20
	* board[i][j] is between 1 and N*N or is equal to -1.
	* The board square with number 1 has no snake or ladder.
	* The board square with number N*N has no snake or ladder."""

    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)
        ans = 0
        queue = [1]
        seen = {1}
        while queue: # bfs 
            newq = []
            for x in queue: 
                if x == n*n: return ans 
                for xx in range(x+1, x+7): 
                    if xx <= n*n:
                        i, j = divmod(xx-1, n)
                        if board[~i][~j if i&1 else j] != -1: xx = board[~i][~j if i&1 else j]
                        if xx not in seen: 
                            newq.append(xx)
                            seen.add(xx)
            ans += 1
            queue = newq 
        return -1 


    """910. Smallest Range II (Medium)
	Given an array A of integers, for each integer A[i] we need to choose 
	either x = -K or x = K, and add x to A[i] (only once). After this process, 
	we have some array B. Return the smallest possible difference between the 
	maximum value of B and the minimum value of B.

	Example 1:
	Input: A = [1], K = 0
	Output: 0
	Explanation: B = [1]

	Example 2:
	Input: A = [0,10], K = 2
	Output: 6
	Explanation: B = [2,8]

	Example 3:
	Input: A = [1,3,6], K = 3
	Output: 3
	Explanation: B = [4,6,3]

	Note:
	* 1 <= A.length <= 10000
	* 0 <= A[i] <= 10000
	* 0 <= K <= 10000"""

    def smallestRangeII(self, A: List[int], K: int) -> int:
        A.sort()
        ans = A[-1] - A[0]
        for i in range(1, len(A)): 
            mn = min(A[0] + K, A[i] - K) # move up A[:i]
            mx = max(A[i-1]+K, A[-1] - K) # move down A[i:]
            ans = min(ans, mx - mn)
        return ans 


    """912. Sort an Array (Medium)
	Given an array of integers nums, sort the array in ascending order.

	Example 1:
	Input: nums = [5,2,3,1]
	Output: [1,2,3,5]

	Example 2:
	Input: nums = [5,1,1,2,0,0]
	Output: [0,0,1,1,2,5]

	Constraints:
	* 1 <= nums.length <= 50000
	* -50000 <= nums[i] <= 50000"""

    def sortArray(self, nums: List[int]) -> List[int]:
        
        def part(lo, hi): 
            """Return a random partition of nums[lo:hi]."""
            mid = randint(lo, hi-1)
            nums[lo], nums[mid] = nums[mid], nums[lo]
            i, j = lo+1, hi-1
            while i <= j: 
                if nums[i] < nums[lo]: i += 1
                elif nums[j] > nums[lo]: j -= 1
                else: 
                    nums[i], nums[j] = nums[j], nums[i]
                    i += 1
                    j -= 1
            nums[lo], nums[j] = nums[j], nums[lo]
            return j
                
            
        def sort(lo, hi): 
            """Sort subarray nums[lo:hi] in place."""
            if lo + 1 >= hi: return 
            mid = part(lo, hi)
            sort(lo, mid)
            sort(mid+1, hi)
            
        sort(0, len(nums))
        return nums


    """915. Partition Array into Disjoint Intervals (Medium)
	Given an array A, partition it into two (contiguous) subarrays left and 
	right so that:
	* Every element in left is less than or equal to every element in right.
	* left and right are non-empty.
	* left has the smallest possible size.
	Return the length of left after such a partitioning.  It is guaranteed that 
	such a partitioning exists.

	Example 1:
	Input: [5,0,3,8,6]
	Output: 3
	Explanation: left = [5,0,3], right = [8,6]

	Example 2:
	Input: [1,1,1,0,6,12]
	Output: 4
	Explanation: left = [1,1,1,0], right = [6,12]

	Note:
	* 2 <= A.length <= 30000
	* 0 <= A[i] <= 10^6
	* It is guaranteed there is at least one way to partition A as described."""

    def partitionDisjoint(self, nums: List[int]) -> int:
        ans = 0 
        mx = threshold = nums[0]
        for i, x in enumerate(nums): 
            mx = max(mx, x) 
            if x < threshold: # threshold to partition the array
                ans = i 
                threshold = mx
        return ans + 1


    """916. Word Subsets (Medium)
	We are given two arrays A and B of words. Each word is a string of 
	lowercase letters. Now, say that word b is a subset of word a if every 
	letter in b occurs in a, including multiplicity.  For example, "wrr" is a 
	subset of "warrior", but is not a subset of "world". Now say a word a from 
	A is universal if for every b in B, b is a subset of a. Return a list of 
	all universal words in A.  You can return the words in any order.

	Example 1:
	Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","o"]
	Output: ["facebook","google","leetcode"]

	Example 2:
	Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["l","e"]
	Output: ["apple","google","leetcode"]

	Example 3:
	Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","oo"]
	Output: ["facebook","google"]

	Example 4:
	Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["lo","eo"]
	Output: ["google","leetcode"]

	Example 5:
	Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["ec","oc","ceo"]
	Output: ["facebook","leetcode"]

	Note:
	* 1 <= A.length, B.length <= 10000
	* 1 <= A[i].length, B[i].length <= 10
	* A[i] and B[i] consist only of lowercase letters.
	* All words in A[i] are unique: there isn't i != j with A[i] == A[j]."""

    def wordSubsets(self, A: List[str], B: List[str]) -> List[str]:
        freq = Counter()
        for x in B: freq |= Counter(x)
        return [x for x in A if not freq - Counter(x)]


    """917. Reverse Only Letters (Easy)
	Given a string s, reverse the string according to the following rules:
	* All the characters that are not English letters remain in the same position.
	* All the English letters (lowercase or uppercase) should be reversed.
	Return s after reversing it.

	Example 1:
	Input: s = "ab-cd"
	Output: "dc-ba"

	Example 2:
	Input: s = "a-bC-dEf-ghIj"
	Output: "j-Ih-gfE-dCba"

	Example 3:
	Input: s = "Test1ng-Leet=code-Q!"
	Output: "Qedo1ct-eeLg=ntse-T!"

	Constraints:
	* 1 <= s.length <= 100
	* s consists of characters with ASCII values in the range [33, 122].
	* s does not contain '\"' or '\\'."""

    def reverseOnlyLetters(self, s: str) -> str:
        s = list(s)
        lo, hi = 0, len(s)-1
        while lo < hi: 
            if not s[lo].isalpha(): lo += 1
            elif not s[hi].isalpha(): hi -= 1
            else: 
                s[lo], s[hi] = s[hi], s[lo]
                lo += 1
                hi -= 1
        return "".join(s)


    """920. Number of Music Playlists (Hard)
	Your music player contains n different songs and she wants to listen to 
	goal (not necessarily different) songs during your trip.  You create a 
	playlist so that:
	* Every song is played at least once
	* A song can only be played again only if k other songs have been played
	Return the number of possible playlists.  As the answer can be very large, 
	return it modulo 10^9 + 7.

	Example 1:
	Input: n = 3, goal = 3, k = 1
	Output: 6
	Explanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], 
	             [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].
	
	Example 2:
	Input: n = 2, goal = 3, k = 0
	Output: 6
	Explanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], 
	             [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]
	
	Example 3:
	Input: n = 2, goal = 3, k = 1
	Output: 2
	Explanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]

	Note: 0 <= k < n <= goal <= 100"""

    def numMusicPlaylists(self, n: int, goal: int, k: int) -> int:
        
        @cache
        def fn(i, x): 
            """Return number starting from ith position with x songs already appeared."""
            if i == goal: return x == n 
            ans = 0 
            if x < n: ans += (n-x) * fn(i+1, x+1) # a new song
            if k < x: ans += (x-k) * fn(i+1, x) # an old song
            return ans % 1_000_000_007
        
        return fn(0, 0)


    """921. Minimum Add to Make Parentheses Valid (Medium)
	Given a string S of '(' and ')' parentheses, we add the minimum number of 
	parentheses ( '(' or ')', and in any positions ) so that the resulting 
	parentheses string is valid. Formally, a parentheses string is valid if and 
	only if:
	* It is the empty string, or
	* It can be written as AB (A concatenated with B), where A and B are valid 
	  strings, or
	* It can be written as (A), where A is a valid string.
	Given a parentheses string, return the minimum number of parentheses we 
	must add to make the resulting string valid.

	Example 1:
	Input: "())"
	Output: 1

	Example 2:
	Input: "((("
	Output: 3

	Example 3:
	Input: "()"
	Output: 0

	Example 4:
	Input: "()))(("
	Output: 4

	Note:
	* S.length <= 1000
	* S only consists of '(' and ')' characters."""

    def minAddToMakeValid(self, S: str) -> int:
        op = cl = 0 # open and closed parenthesis needed 
        for c in S: 
            cl += 1 if c == "(" else -1 # need ) to balance extra (
            if cl < 0: 
                cl = 0
                op += 1 # need ( to balance extra )
        return op + cl 


    """922. Sort Array By Parity II (Easy)
	Given an array of integers nums, half of the integers in nums are odd, and 
	the other half are even. Sort the array so that whenever nums[i] is odd, i 
	is odd, and whenever nums[i] is even, i is even. Return any answer array 
	that satisfies this condition.

	Example 1:
	Input: nums = [4,2,5,7]
	Output: [4,5,2,7]
	Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.

	Example 2:
	Input: nums = [2,3]
	Output: [2,3]

	Constraints:
	* 2 <= nums.length <= 2 * 10^4
	* nums.length is even.
	* Half of the integers in nums are even.
	* 0 <= nums[i] <= 1000

	Follow Up: Could you solve it in-place?"""

    def sortArrayByParityII(self, nums: List[int]) -> List[int]:
        ii, i = 0, 1
        while ii < len(nums) and i < len(nums): 
            if not nums[ii] & 1: ii += 2
            elif nums[i] & 1: i += 2
            else: 
                nums[ii], nums[i] = nums[i], nums[ii]
                ii += 2
                i += 2
        return nums


    """923. 3Sum With Multiplicity (Medium)
	Given an integer array A, and an integer target, return the number of 
	tuples i, j, k  such that i < j < k and A[i] + A[j] + A[k] == target. As 
	the answer can be very large, return it modulo 109 + 7.

	Example 1:
	Input: A = [1,1,2,2,3,3,4,4,5,5], target = 8
	Output: 20
	Explanation: 
	Enumerating by the values (A[i], A[j], A[k]):
	(1, 2, 5) occurs 8 times;
	(1, 3, 4) occurs 8 times;
	(2, 2, 4) occurs 2 times;
	(2, 3, 3) occurs 2 times.

	Example 2:
	Input: A = [1,1,2,2,2,2], target = 5
	Output: 12
	Explanation: 
	A[i] = 1, A[j] = A[k] = 2 occurs 12 times:
	We choose one 1 from [1,1] in 2 ways,
	and two 2s from [2,2,2,2] in 6 ways.

	Constraints:
	* 3 <= A.length <= 3000
	* 0 <= A[i] <= 100
	* 0 <= target <= 300"""

    def threeSumMulti(self, arr: List[int], target: int) -> int:
        ans = 0
        seen = {}
        for i, x in enumerate(arr): 
            ans += seen.get(target - x, 0)
            for ii in range(i): 
                sm = arr[ii] + arr[i]
                seen[sm] = 1 + seen.get(sm, 0)
        return ans % 1_000_000_007


    """924. Minimize Malware Spread (Hard)
	You are given a network of n nodes represented as an n x n adjacency matrix 
	graph, where the ith node is directly connected to the jth node if 
	graph[i][j] == 1. Some nodes initial are initially infected by malware. 
	Whenever two nodes are directly connected, and at least one of those two 
	nodes is infected by malware, both nodes will be infected by malware. This 
	spread of malware will continue until no more nodes can be infected in this 
	manner. Suppose M(initial) is the final number of nodes infected with 
	malware in the entire network after the spread of malware stops. We will 
	remove exactly one node from initial. Return the node that, if removed, 
	would minimize M(initial). If multiple nodes could be removed to minimize 
	M(initial), return such a node with the smallest index. Note that if a node 
	was removed from the initial list of infected nodes, it might still be 
	infected later due to the malware spread.

	Example 1:
	Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
	Output: 0

	Example 2:
	Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
	Output: 0

	Example 3:
	Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
	Output: 1

	Constraints:
	* n == graph.length
	* n == graph[i].length
	* 2 <= n <= 300
	* graph[i][j] is 0 or 1.
	* graph[i][j] == graph[j][i]
	* graph[i][i] == 1
	* 1 <= initial.length <= n
	* 0 <= initial[i] <= n - 1
	* All the integers in initial are unique.

class UnionFind: 
    
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1]*n
        
    def find(self, p): 
        if p != self.parent[p]: self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q):
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True"""

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)
        for u in range(n):
            for v in range(u+1, n):
                if graph[u][v]: uf.union(u, v)
                    
        freq = defaultdict(int)
        for u in initial: freq[uf.find(u)] += 1
            
        ans = best = -1 
        for u in initial: 
            uu = uf.find(u)
            cnt = uf.rank[uu] if freq[uu] == 1 else 0
            if cnt > best or cnt == best and u < ans: ans, best = u, cnt
        return ans 


    """926. Flip String to Monotone Increasing (Medium)
	A string of '0's and '1's is monotone increasing if it consists of some 
	number of '0's (possibly 0), followed by some number of '1's (also possibly 
	0.) We are given a string S of '0's and '1's, and we may flip any '0' to a 
	'1' or a '1' to a '0'. Return the minimum number of flips to make S monotone 
	increasing.

	Example 1:
	Input: "00110"
	Output: 1
	Explanation: We flip the last digit to get 00111.

	Example 2:
	Input: "010110"
	Output: 2
	Explanation: We flip to get 011111, or alternatively 000111.

	Example 3:
	Input: "00011000"
	Output: 2
	Explanation: We flip to get 00000000.

	Note:
	* 1 <= S.length <= 20000
	* S only consists of '0' and '1' characters."""

    def minFlipsMonoIncr(self, S: str) -> int:
        ones = flip = 0
        for ch in S: 
            if ch == "1": ones += 1
            else: flip = min(ones, flip + 1)
        return flip 


    """928. Minimize Malware Spread II (Hard)
	You are given a network of n nodes represented as an n x n adjacency matrix 
	graph, where the ith node is directly connected to the jth node if 
	graph[i][j] == 1. Some nodes initial are initially infected by malware. 
	Whenever two nodes are directly connected, and at least one of those two 
	nodes is infected by malware, both nodes will be infected by malware. This 
	spread of malware will continue until no more nodes can be infected in this 
	manner. Suppose M(initial) is the final number of nodes infected with 
	malware in the entire network after the spread of malware stops. We will 
	remove exactly one node from initial, completely removing it and any 
	connections from this node to any other node. Return the node that, if 
	removed, would minimize M(initial). If multiple nodes could be removed to 
	minimize M(initial), return such a node with the smallest index.

	Example 1:
	Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
	Output: 0

	Example 2:
	Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
	Output: 1

	Example 3:
	Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
	Output: 1

	Constraints:
	* n == graph.length
	* n == graph[i].length
	* 2 <= n <= 300
	* graph[i][j] is 0 or 1.
	* graph[i][j] == graph[j][i]
	* graph[i][i] == 1
	* 1 <= initial.length < n
	* 0 <= initial[i] <= n - 1
	* All the integers in initial are unique.

class UnionFind: 
    
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1] * n 
    
    def find(self, p):
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q): 
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True"""
    
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)
        initial = set(initial)
        for u in range(n): 
            if u not in initial: 
                for v in range(u+1, n): 
                    if graph[u][v] and v not in initial: 
                        uf.union(u, v)
                        
        mp = defaultdict(set)
        for u in initial: 
            for v in range(n): 
                if graph[u][v] and v not in initial: 
                    mp[u].add(uf.find(v))
        freq = sum((Counter(v) for v in mp.values()), Counter())
        
        ans = best = -1
        for u in initial: 
            cnt = 0
            for v in mp[u]: 
                if freq[v] == 1: cnt += uf.rank[v]
            if cnt > best or cnt == best and u < ans: ans, best= u, cnt
        return ans


    """929. Unique Email Addresses (Easy)
	Every valid email consists of a local name and a domain name, separated by 
	the '@' sign. Besides lowercase letters, the email may contain one or more 
	'.' or '+'. For example, in "alice@leetcode.com", "alice" is the local name, 
	and "leetcode.com" is the domain name. If you add periods '.' between some 
	characters in the local name part of an email address, mail sent there will 
	be forwarded to the same address without dots in the local name. Note that 
	this rule does not apply to domain names. For example, "alice.z@leetcode.com" 
	and "alicez@leetcode.com" forward to the same email address. If you add a 
	plus '+' in the local name, everything after the first plus sign will be 
	ignored. This allows certain emails to be filtered. Note that this rule 
	does not apply to domain names. For example, "m.y+name@email.com" will be 
	forwarded to "my@email.com". It is possible to use both of these rules at 
	the same time. Given an array of strings emails where we send one email to 
	each email[i], return the number of different addresses that actually 
	receive mails.

	Example 1:
	Input: emails = ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]
	Output: 2
	Explanation: "testemail@leetcode.com" and "testemail@lee.tcode.com" actually receive mails.

	Example 2:
	Input: emails = ["a@leetcode.com","b@leetcode.com","c@leetcode.com"]
	Output: 3

	Constraints:
	* 1 <= emails.length <= 100
	* 1 <= emails[i].length <= 100
	* email[i] consist of lowercase English letters, '+', '.' and '@'.
	* Each emails[i] contains exactly one '@' character.
	* All local and domain names are non-empty.
	* Local names do not start with a '+' character."""

    def numUniqueEmails(self, emails: List[str]) -> int:
        seen = set()
        for email in emails: 
            local, domain = email.split("@")
            local = local.split("+")[0].replace(".", "")
            seen.add("@".join((local, domain)))
        return len(seen)


    """930. Binary Subarrays With Sum (Medium)
	In an array A of 0s and 1s, how many non-empty subarrays have sum S?

	Example 1:
	Input: A = [1,0,1,0,1], S = 2
	Output: 4
	Explanation: 
	The 4 subarrays are bolded below:
	[1,0,1,0,1]
	[1,0,1,0,1]
	[1,0,1,0,1]
	[1,0,1,0,1]

	Note:
	* A.length <= 30000
	* 0 <= S <= A.length
	* A[i] is either 0 or 1."""

    def numSubarraysWithSum(self, A: List[int], S: int) -> int:
        ans = prefix = 0
        seen = {0: 1}
        for x in A:
            prefix += x
            ans += seen.get(prefix - S, 0)
            seen[prefix] = 1 + seen.get(prefix, 0)
        return ans 


    """931. Minimum Falling Path Sum (Medium)
	Given a square array of integers A, we want the minimum sum of a falling 
	path through A. A falling path starts at any element in the first row, and 
	chooses one element from each row.  The next row's choice must be in a 
	column that is different from the previous row's column by at most one.

	Example 1:
	Input: [[1,2,3],[4,5,6],[7,8,9]]
	Output: 12
	Explanation: 
	The possible falling paths are:
	[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
	[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
	[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
	The falling path with the smallest sum is [1,4,7], so the answer is 12.

	Constraints:
	* 1 <= A.length == A[0].length <= 100
	* -100 <= A[i][j] <= 100"""

    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        for i in range(1, len(matrix)):
            for j in range(len(matrix)):
                matrix[i][j] += min(matrix[i-1][max(0, j-1):j+2])
        return min(matrix[-1])


    """932. Beautiful Array (Medium)
	For some fixed N, an array A is beautiful if it is a permutation of the 
	integers 1, 2, ..., N, such that for every i < j, there is no k with 
	i < k < j such that A[k] * 2 = A[i] + A[j]. Given N, return any beautiful 
	array A.  (It is guaranteed that one exists.)

	Example 1:
	Input: 4
	Output: [2,1,4,3]

	Example 2:
	Input: 5
	Output: [3,1,2,5,4]

	Note: 1 <= N <= 1000"""

    def beautifulArray(self, N: int) -> List[int]:
        
        def fn(nums): 
            """Return beautiful array by rearraning elements in nums."""
            if len(nums) == 1: return nums
            return fn(nums[::2]) + fn(nums[1::2])
        
        return fn(list(range(1, N+1)))


    """934. Shortest Bridge (Medium)
	In a given 2D binary array A, there are two islands.  (An island is a 4-
	directionally connected group of 1s not connected to any other 1s.) Now, we 
	may change 0s to 1s so as to connect the two islands together to form 1 
	island. Return the smallest number of 0s that must be flipped.  (It is 
	guaranteed that the answer is at least 1.)

	Example 1:
	Input: A = [[0,1],[1,0]]
	Output: 1

	Example 2:
	Input: A = [[0,1,0],[0,0,0],[0,0,1]]
	Output: 2

	Example 3:
	Input: A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
	Output: 1

	Constraints:
	* 2 <= A.length == A[0].length <= 100
	* A[i][j] == 0 or A[i][j] == 1"""

    def shortestBridge(self, A: List[List[int]]) -> int:
        m, n = len(A), len(A[0])
        i, j = next((i, j) for i in range(m) for j in range(n) if A[i][j])
        
        # dfs 
        stack = [(i, j)]
        seen = set(stack)
        while stack: 
            i, j = stack.pop()
            seen.add((i, j)) # mark as visited 
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < m and 0 <= jj < n and A[ii][jj] and (ii, jj) not in seen: 
                    stack.append((ii, jj))
                    seen.add((ii, jj))
        
        # bfs 
        ans = 0
        queue = list(seen)
        while queue:
            newq = []
            for i, j in queue: 
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    if 0 <= ii < m and 0 <= jj < n and (ii, jj) not in seen: 
                        if A[ii][jj] == 1: return ans 
                        newq.append((ii, jj))
                        seen.add((ii, jj))
            queue = newq
            ans += 1


    """935. Knight Dialer (Medium)
	The chess knight has a unique movement, it may move two squares vertically 
	and one square horizontally, or two squares horizontally and one square 
	vertically (with both forming the shape of an L). We have a chess knight 
	and a phone pad as shown below, the knight can only stand on a numeric cell 
	(i.e. blue cell). Given an integer n, return how many distinct phone numbers 
	of length n we can dial. You are allowed to place the knight on any numeric 
	cell initially and then you should perform n - 1 jumps to dial a number of 
	length n. All jumps should be valid knight jumps. As the answer may be very 
	large, return the answer modulo 109 + 7.

	Example 1:
	Input: n = 1
	Output: 10
	Explanation: We need to dial a number of length 1, so placing the knight 
	             over any numeric cell of the 10 cells is sufficient.

	Example 2:
	Input: n = 2
	Output: 20
	Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 
	             34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]
	
	Example 3:
	Input: n = 3
	Output: 46

	Example 4:
	Input: n = 4
	Output: 104

	Example 5:
	Input: n = 3131
	Output: 136006598
	Explanation: Please take care of the mod.
	 
	Constraints: 1 <= n <= 5000"""

    def knightDialer(self, n: int) -> int:
        mp = {0: [4, 6], 1: [6, 8], 2: [7, 9], 3: [4, 8], 4: [0, 3, 9], 
              5: [], 6: [0, 1, 7], 7: [2, 6], 8: [1, 3], 9: [2, 4]}
        ans = [1]*10 
        for _ in range(n-1): 
            temp = [0]*10
            for i in range(10): 
                for ii in mp[i]: temp[i] += ans[ii]
                temp[i] %= 1_000_000_007
            ans = temp 
        return sum(ans) % 1_000_000_007


    """939. Minimum Area Rectangle (Medium)
	Given a set of points in the xy-plane, determine the minimum area of a 
	rectangle formed from these points, with sides parallel to the x and y axes.
	If there isn't any rectangle, return 0.

	Example 1:
	Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]
	Output: 4

	Example 2:
	Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
	Output: 2

	Note:
	* 1 <= points.length <= 500
	* 0 <= points[i][0] <= 40000
	* 0 <= points[i][1] <= 40000
	* All points are distinct."""

    def minAreaRect(self, points: List[List[int]]) -> int:
        ans = inf
        seen = {(x, y) for x, y in points}
        for x, y in points: 
            for xx, yy in points: 
                if x != xx and y != yy and (x, yy) in seen and (xx, y) in seen: 
                    ans = min(ans, abs((xx-x)*(yy-y)))
        return ans if ans < inf else 0


    """940. Distinct Subsequences II (Hard)
	Given a string s, return the number of distinct non-empty subsequences of s. 
	Since the answer may be very large, return it modulo 10^9 + 7. A 
	subsequence of a string is a new string that is formed from the original 
	string by deleting some (can be none) of the characters without disturbing 
	the relative positions of the remaining characters. (i.e., "ace" is a 
	subsequence of "abcde" while "aec" is not.

	Example 1:
	Input: s = "abc"
	Output: 7
	Explanation: The 7 distinct subsequences are "a", "b", "c", "ab", "ac", 
	             "bc", and "abc".
	
	Example 2:
	Input: s = "aba"
	Output: 6
	Explanation: The 6 distinct subsequences are "a", "b", "ab", "aa", "ba", 
	             and "aba".
	
	Example 3:
	Input: s = "aaa"
	Output: 3
	Explanation: The 3 distinct subsequences are "a", "aa" and "aaa".

	Constraints:
	* 1 <= s.length <= 2000
	* s consists of lowercase English letters."""

    def distinctSubseqII(self, s: str) -> int:
        freq = [0]*26 
        for i in reversed(range(len(s))): freq[ord(s[i])-97] = (1 + sum(freq)) % 1_000_000_007
        return sum(freq) % 1_000_000_007


    """943. Find the Shortest Superstring (Hard)
	Given an array of strings words, return the smallest string that contains 
	each string in words as a substring. If there are multiple valid strings of 
	the smallest length, return any of them. You may assume that no string in 
	words is a substring of another string in words.

	Example 1:
	Input: words = ["alex","loves","leetcode"]
	Output: "alexlovesleetcode"
	Explanation: All permutations of "alex","loves","leetcode" would also be 
	             accepted.

	Example 2:
	Input: words = ["catg","ctaagt","gcta","ttca","atgcatc"]
	Output: "gctaagttcatgcatc"

	Constraints:
	* 1 <= words.length <= 12
	* 1 <= words[i].length <= 20
	* words[i] consists of lowercase English letters.
	* All the strings of words are unique."""

    def shortestSuperstring(self, words: List[str]) -> str:
        """Travelling sales person (TSP) O(n^2*2^n)"""
        n = len(words)
        graph = [[0]*n for _ in range(n)] # graph as adjacency matrix 
        
        for i in range(n):
            for j in range(n): 
                if i != j: 
                    for k in range(len(words[j])): 
                        if words[i].endswith(words[j][:k]): 
                            graph[i][j] = len(words[j]) - k 
                            
        @cache
        def fn(prev, mask): 
            """Return length of shortest superstring & current choice of word."""
            if mask == 0: return 0, None
            vv, kk = inf, None
            for k in range(n): 
                if mask & 1<<k: 
                    v, _ = fn(k, mask ^ 1<<k)
                    offset = len(words[k]) if prev == -1 else graph[prev][k]
                    if v + offset < vv: vv, kk = v + offset, k
            return vv, kk
        
        ans = []
        prev = -1 
        mask = (1<<n) - 1
        while mask: 
            _, k = fn(prev, mask)
            if ans: ans.append(words[k][-graph[prev][k]:])
            else: ans.append(words[k])
            prev = k
            mask ^= 1<<k 
        return "".join(ans)


    """945. Minimum Increment to Make Array Unique (Medium)
	Given an array of integers A, a move consists of choosing any A[i], and 
	incrementing it by 1. Return the least number of moves to make every value 
	in A unique.

	Example 1:
	Input: [1,2,2]
	Output: 1
	Explanation: After 1 move, the array could be [1, 2, 3].

	Example 2:
	Input: [3,2,1,2,1,7]
	Output: 6
	Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7]. It can 
	             be shown with 5 or less moves that it is impossible for the 
	             array to have all unique values.

	Note:
	* 0 <= A.length <= 40000
	* 0 <= A[i] < 40000"""

    def minIncrementForUnique(self, A: List[int]) -> int:
        ans = cap = 0
        for x in sorted(A): 
            ans += max(0, cap - x)
            cap = max(cap, x) + 1
        return ans 

    
    """946. Validate Stack Sequences (Medium)
	Given two sequences pushed and popped with distinct values, return true if 
	and only if this could have been the result of a sequence of push and pop 
	operations on an initially empty stack.

	Example 1:
	Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
	Output: true
	Explanation: We might do the following sequence:
	push(1), push(2), push(3), push(4), pop() -> 4,
	push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

	Example 2:
	Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
	Output: false
	Explanation: 1 cannot be popped before 2.

	Constraints:
	* 0 <= pushed.length == popped.length <= 1000
	* 0 <= pushed[i], popped[i] < 1000
	* pushed is a permutation of popped.
	* pushed and popped have distinct values."""

    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
        i = 0
        stack = []
        for x in pushed: 
            stack.append(x)
            while stack and stack[-1] == popped[i]:
                stack.pop()
                i += 1
        return not stack 


    """948. Bag of Tokens (Medium)
	You have an initial power of P, an initial score of 0, and a bag of tokens 
	where tokens[i] is the value of the ith token (0-indexed). Your goal is to 
	maximize your total score by potentially playing each token in one of two 
	ways:
	* If your current power is at least tokens[i], you may play the ith token 
	  face up, losing tokens[i] power and gaining 1 score.
	* If your current score is at least 1, you may play the ith token face down, 
	  gaining tokens[i] power and losing 1 score.
	Each token may be played at most once and in any order. You do not have to 
	play all the tokens. Return the largest possible score you can achieve 
	after playing any number of tokens.

	Example 1:
	Input: tokens = [100], P = 50
	Output: 0
	Explanation: Playing the only token in the bag is impossible because you 
	             either have too little power or too little score.

	Example 2:
	Input: tokens = [100,200], P = 150
	Output: 1
	Explanation: Play the 0th token (100) face up, your power becomes 50 and 
	             score becomes 1. There is no need to play the 1st token since 
	             you cannot play it face up to add to your score.
	
	Example 3:
	Input: tokens = [100,200,300,400], P = 200
	Output: 2
	Explanation: Play the tokens in this order to get a score of 2:
	1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.
	2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.
	3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.
	4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.

	Constraints:
	* 0 <= tokens.length <= 1000
	* 0 <= tokens[i], P < 104"""

    def bagOfTokensScore(self, tokens: List[int], P: int) -> int:
        tokens.sort()
        score, lo, hi = 0, 0, len(tokens)-1
        while lo <= hi: 
            if tokens[lo] <= P: # exchange power for score
                P -= tokens[lo]
                lo += 1
                score += 1
            elif score and lo < hi: # exchange score for power 
                P += tokens[hi]
                hi -= 1
                score -= 1
            else: break 
        return score


    """949. Largest Time for Given Digits (Medium)
	Given an array arr of 4 digits, find the latest 24-hour time that can be 
	made using each digit exactly once. 24-hour times are formatted as "HH:MM", 
	where HH is between 00 and 23, and MM is between 00 and 59. The earliest 
	24-hour time is 00:00, and the latest is 23:59. Return the latest 24-hour 
	time in "HH:MM" format. If no valid time can be made, return an empty string.

	Example 1:
	Input: A = [1,2,3,4]
	Output: "23:41"
	Explanation: The valid 24-hour times are "12:34", "12:43", "13:24", "13:42", 
	             "14:23", "14:32", "21:34", "21:43", "23:14", and "23:41". Of 
	             these times, "23:41" is the latest.

	Example 2:
	Input: A = [5,5,5,5]
	Output: ""
	Explanation: There are no valid 24-hour times as "55:55" is not valid.
	
	Example 3:
	Input: A = [0,0,0,0]
	Output: "00:00"

	Example 4:
	Input: A = [0,0,1,0]
	Output: "10:00"

	Constraints:
	* arr.length == 4
	* 0 <= arr[i] <= 9"""

    def largestTimeFromDigits(self, arr: List[int]) -> str:
        hh = mm = -1
        for x in permutations(arr):
            h = 10*x[0] + x[1]
            m = 10*x[2] + x[3]
            if h < 24 and m < 60 and 60*hh + mm < 60*h + m: hh, mm = h, m
        return f"{hh:02}:{mm:02}" if hh > -1 else ""


    """950. Reveal Cards In Increasing Order (Medium)
	In a deck of cards, every card has a unique integer. You can order the deck
	in any order you want. Initially, all the cards start face down (unrevealed) 
	in one deck. Now, you do the following steps repeatedly, until all cards are 
	revealed:
	1) Take the top card of the deck, reveal it, and take it out of the deck.
	2) If there are still cards in the deck, put the next top card of the deck 
	   at the bottom of the deck.
	3) If there are still unrevealed cards, go back to step 1.  Otherwise, stop.
	Return an ordering of the deck that would reveal the cards in increasing order.
	The first entry in the answer is considered to be the top of the deck.

	Example 1:
	Input: [17,13,11,2,3,5,7]
	Output: [2,13,3,11,5,17,7]
	Explanation: 
	We get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), 
	and reorder it. After reordering, the deck starts as [2,13,3,11,5,17,7], 
	where 2 is the top of the deck.
	We reveal  2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].
	We reveal  3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].
	We reveal  5, and move 17 to the bottom.  The deck is now [7,13,11,17].
	We reveal  7, and move 13 to the bottom.  The deck is now [11,17,13].
	We reveal 11, and move 17 to the bottom.  The deck is now [13,17].
	We reveal 13, and move 17 to the bottom.  The deck is now [17].
	We reveal 17.
	Since all the cards revealed are in increasing order, the answer is correct.

	Note:
	* 1 <= A.length <= 1000
	* 1 <= A[i] <= 10^6
	* A[i] != A[j] for all i != j"""

    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:
        ans = [0]*len(deck)
        idx = deque(range(len(deck)))
        for x in sorted(deck): 
            ans[idx.popleft()] = x
            if idx: idx.append(idx.popleft())
        return ans 


    """951. Flip Equivalent Binary Trees (Medium)
	For a binary tree T, we can define a flip operation as follows: choose any 
	node, and swap the left and right child subtrees. A binary tree X is flip 
	equivalent to a binary tree Y if and only if we can make X equal to Y after 
	some number of flip operations. Given the roots of two binary trees root1 
	and root2, return true if the two trees are flip equivelent or false 
	otherwise.

	Example 1:
	Flipped Trees Diagram
	Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], 
	       root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
	Output: true
	Explanation: We flipped at nodes with values 1, 3, and 5.

	Example 2:
	Input: root1 = [], root2 = []
	Output: true

	Example 3:
	Input: root1 = [], root2 = [1]
	Output: false

	Example 4:
	Input: root1 = [0,null,1], root2 = []
	Output: false

	Example 5:
	Input: root1 = [0,null,1], root2 = [0,1]
	Output: true

	Constraints:
	* The number of nodes in each tree is in the range [0, 100].
	* Each tree will have unique node values in the range [0, 99]."""

    def flipEquiv(self, root1: TreeNode, root2: TreeNode) -> bool:
        
        def fn(n1, n2):
            """Return True if n1 is a flip of n2."""
            if not n1 or not n2: return n1 is n2
            return n1.val == n2.val and (fn(n1.left, n2.right) and fn(n1.right, n2.left) or fn(n1.left, n2.left) and fn(n1.right, n2.right))
        
        return fn(root1, root2)


    """952. Largest Component Size by Common Factor (Hard)
	You are given an integer array of unique positive integers nums. Consider 
	the following graph:
	* There are nums.length nodes, labeled nums[0] to nums[nums.length - 1],
	* There is an undirected edge between nums[i] and nums[j] if nums[i] and 
	  nums[j] share a common factor greater than 1.
	Return the size of the largest connected component in the graph.

	Example 1:
	Input: nums = [4,6,15,35]
	Output: 4

	Example 2:
	Input: nums = [20,50,9,63]
	Output: 2

	Example 3:
	Input: nums = [2,3,6,7,4,12,21,39]
	Output: 8

	Constraints:
	* 1 <= nums.length <= 2 * 10^4
	* 1 <= nums[i] <= 10^5
	* All the values of nums are unique.

class UnionFind: 
    
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1]*n
        
    def find(self, p): 
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q): 
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True"""

    def largestComponentSize(self, A: List[int]) -> int:
        m = max(A)
        uf = UnionFind(m+1)
        seen = set(A)
        # modified sieve of eratosthenes 
        sieve = [1]*(m+1)
        sieve[0] = sieve[1] = 0 
        for k in range(m//2+1): 
            if sieve[k]: 
                ref = k if k in seen else 0
                for x in range(2*k, m+1, k): 
                    sieve[x] = 0
                    if x in seen: 
                        if ref: uf.union(ref, x)
                        ref = x
        freq = Counter(uf.find(i) for i in range(m+1))
        return max(freq.values())


    """954. Array of Doubled Pairs (Medium)
	Given an array of integers arr of even length, return true if and only if 
	it is possible to reorder it such that arr[2 * i + 1] = 2 * arr[2 * i] for 
	every 0 <= i < len(arr) / 2.

	Example 1:
	Input: arr = [3,1,3,6]
	Output: false

	Example 2:
	Input: arr = [2,1,2,6]
	Output: false

	Example 3:
	Input: arr = [4,-2,2,-4]
	Output: true
	Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] 
	             or [2,4,-2,-4].

	Example 4:
	Input: arr = [1,2,4,16,8,4]
	Output: false

	Constraints:
	* 0 <= arr.length <= 3 * 10^4
	* arr.length is even.
	* -10^5 <= arr[i] <= 10^5"""

    def canReorderDoubled(self, arr: List[int]) -> bool:
        freq = Counter(arr)
        for x in sorted(freq, key=abs): 
            if freq[2*x] < freq[x]: return False 
            freq[2*x] -= freq[x]
        return True 


    """955. Delete Columns to Make Sorted II (Medium)
	You are given an array of n strings strs, all of the same length. We may 
	choose any deletion indices, and we delete all the characters in those 
	indices for each string. For example, if we have strs = ["abcdef","uvwxyz"] 
	and deletion indices {0, 2, 3}, then the final array after deletions is 
	["bef", "vyz"]. Suppose we chose a set of deletion indices answer such that 
	after deletions, the final array has its elements in lexicographic order 
	(i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). Return the 
	minimum possible value of answer.length.

	Example 1:
	Input: strs = ["ca","bb","ac"]
	Output: 1
	Explanation: After deleting the first column, strs = ["a", "b", "c"]. Now 
	             strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).
	             We require at least 1 deletion since initially strs was not in 
	             lexicographic order, so the answer is 1.
	
	Example 2:
	Input: strs = ["xc","yb","za"]
	Output: 0
	Explanation: strs is already in lexicographic order, so we do not need to 
	             delete anything. Note that the rows of strs are not 
	             necessarily in lexicographic order: i.e., it is NOT 
	             necessarily true that (strs[0][0] <= strs[0][1] <= ...)
	
	Example 3:
	Input: strs = ["zyx","wvu","tsr"]
	Output: 3
	Explanation: We have to delete every column.

	Constraints:
	* n == strs.length
	* 1 <= n <= 100
	* 1 <= strs[i].length <= 100
	* strs[i] consists of lowercase English letters."""

    def minDeletionSize(self, strs: List[str]) -> int:
        m, n = len(strs), len(strs[0]) # dimensions 
        ans, grp = 0, [0]*m
        for j in range(n): 
            for i in range(1, m): 
                if grp[i-1] == grp[i] and strs[i-1][j] > strs[i][j]: 
                    ans += 1
                    break
            else: 
                for i in range(1, m): 
                    grp[i] = max(grp[i-1], grp[i])
                    if grp[i-1] == grp[i] and strs[i-1][j] < strs[i][j]: grp[i] = i
        return ans 


    """956. Tallest Billboard (Hard)
	You are installing a billboard and want it to have the largest height. The 
	billboard will have two steel supports, one on each side. Each steel 
	support must be an equal height. You are given a collection of rods that 
	can be welded together. For example, if you have rods of lengths 1, 2, and 
	3, you can weld them together to make a support of length 6. Return the 
	largest possible height of your billboard installation. If you cannot 
	support the billboard, return 0.

	Example 1:
	Input: rods = [1,2,3,6]
	Output: 6
	Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the 
	             same sum = 6.
	
	Example 2:
	Input: rods = [1,2,3,4,5,6]
	Output: 10
	Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the 
	             same sum = 10.
	
	Example 3:
	Input: rods = [1,2]
	Output: 0
	Explanation: The billboard cannot be supported, so we return 0.

	Constraints:
	* 1 <= rods.length <= 20
	* 1 <= rods[i] <= 1000
	* sum(rods[i]) <= 5000"""

    def tallestBillboard(self, rods: List[int]) -> int:
        dp = {0: 0}
        for x in rods: 
            for k, v in dp.copy().items(): 
                dp[k+x] = max(dp.get(k+x, 0), v)
                if k >= x: dp[k-x] = max(dp.get(k-x, 0), v+x)
                else: dp[x-k] = max(dp.get(x-k, 0), v+k)
        return dp[0]


    """964. Least Operators to Express Number (Hard)
	Given a single positive integer x, we will write an expression of the form 
	x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either 
	addition, subtraction, multiplication, or division (+, -, *, or /). For 
	example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.
	When writing such an expression, we adhere to the following conventions:
	* The division operator (/) returns rational numbers.
	* There are no parentheses placed anywhere.
	* We use the usual order of operations: multiplication and division happen 
	  before addition and subtraction.
	* It is not allowed to use the unary negation operator (-). For example, 
	  "x - x" is a valid expression as it only uses subtraction, but "-x + x" 
	  is not because it uses negation.
	We would like to write an expression with the least number of operators 
	such that the expression equals the given target. Return the least number 
	of operators used.

	Example 1:
	Input: x = 3, target = 19
	Output: 5
	Explanation: 3 * 3 + 3 * 3 + 3 / 3. The expression contains 5 operations.
	
	Example 2:
	Input: x = 5, target = 501
	Output: 8
	Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5. The expression contains 8 
	             operations.
	
	Example 3:
	Input: x = 100, target = 100000000
	Output: 3
	Explanation: 100 * 100 * 100 * 100. The expression contains 3 operations.

	Constraints:
	* 2 <= x <= 100
	* 1 <= target <= 2 * 10^8"""

    def leastOpsExpressTarget(self, x: int, target: int) -> int:
        
        @cache
        def fn(val): 
            """Return min ops to express val."""
            if val < x: return min(2*val-1, 2*(x-val))
            k = int(log(val)//log(x))
            ans = k + fn(val - x**k)
            if x**(k+1) < 2*val: 
                ans = min(ans, k + 1 + fn(x**(k+1) - val))
            return ans 
        
        return fn(target)


    """968. Binary Tree Cameras (Hard)
	Given a binary tree, we install cameras on the nodes of the tree. Each 
	camera at a node can monitor its parent, itself, and its immediate children.
	Calculate the minimum number of cameras needed to monitor all nodes of the 
	tree.

	Example 1:
	Input: [0,0,null,0,0]
	Output: 1
	Explanation: One camera is enough to monitor all nodes if placed as shown.

	Example 2:
	Input: [0,0,null,0,null,0,null,null,0]
	Output: 2
	Explanation: At least two cameras are needed to monitor all nodes of the 
	             tree. The above image shows one of the valid configurations of 
	             camera placement.

	Note:
	* The number of nodes in the given tree will be in the range [1, 1000].
	* Every node has value 0."""

    def minCameraCover(self, root: TreeNode) -> int:
        
        def fn(node):
            """Return color-coding of a node.
            0 - not covered 
            1 - covered w/o camera
            2 - covered w/ camera 
            """
            nonlocal ans 
            if not node: return 1
            left, right = fn(node.left), fn(node.right)
            if left == 0 or right == 0: 
                ans += 1
                return 2 # add a camera 
            if left == 2 or right == 2: return 1
            return 0 
        
        ans = 0 
        return int(fn(root) == 0) + ans 


    """970. Powerful Integers (Medium)
	Given three integers x, y, and bound, return a list of all the powerful 
	integers that have a value less than or equal to bound. An integer is 
	powerful if it can be represented as xi + yj for some integers i >= 0 and 
	j >= 0. You may return the answer in any order. In your answer, each value 
	should occur at most once.

	Example 1:
	Input: x = 2, y = 3, bound = 10
	Output: [2,3,4,5,7,9,10]
	Explanation: 2 = 20 + 30
	             3 = 21 + 30
	             4 = 20 + 31
	             5 = 21 + 31
	             7 = 22 + 31
	             9 = 23 + 30
	             10 = 20 + 32

	Example 2:
	Input: x = 3, y = 5, bound = 15
	Output: [2,4,6,8,10,14]

	Constraints:
	* 1 <= x, y <= 100
	* 0 <= bound <= 10^6"""

    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:
        bx = int(log(bound)/log(x)) if x > 1 else 0
        by = int(log(bound)/log(y)) if y > 1 else 0 
        
        ans = set()
        for i in range(bx+1): 
            for j in range(by+1):
                if x**i + y**j <= bound: 
                    ans.add(x**i + y**j)
        return ans 


    """971. Flip Binary Tree To Match Preorder Traversal (Medium)
	You are given the root of a binary tree with n nodes, where each node is 
	uniquely assigned a value from 1 to n. You are also given a sequence of n 
	values voyage, which is the desired pre-order traversal of the binary tree.
	Any node in the binary tree can be flipped by swapping its left and right 
	subtrees. Flip the smallest number of nodes so that the pre-order traversal 
	of the tree matches voyage. Return a list of the values of all flipped 
	nodes. You may return the answer in any order. If it is impossible to flip 
	the nodes in the tree to make the pre-order traversal match voyage, return 
	the list [-1].

	Example 1:
	Input: root = [1,2], voyage = [2,1]
	Output: [-1]
	Explanation: It is impossible to flip the nodes such that the pre-order 
	             traversal matches voyage.

	Example 2:
	Input: root = [1,2,3], voyage = [1,3,2]
	Output: [1]
	Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order 
	             traversal matches voyage.
	
	Example 3:
	Input: root = [1,2,3], voyage = [1,2,3]
	Output: []
	Explanation: The tree's pre-order traversal already matches voyage, so no 
	             nodes need to be flipped.

	Constraints:
	* The number of nodes in the tree is n.
	* n == voyage.length
	* 1 <= n <= 100
	* 1 <= Node.val, voyage[i] <= n
	* All the values in the tree are unique.
	* All the values in voyage are unique."""

    def flipMatchVoyage(self, root: TreeNode, voyage: List[int]) -> List[int]:
        ans = []
        stack = [root]
        i = 0 
        while stack: 
            node = stack.pop()
            if node: 
                if node.val != voyage[i]: return [-1]
                i += 1
                if node.left and node.right and voyage[i] == node.right.val: 
                    ans.append(node.val)
                    node.left, node.right = node.right, node.left 
                stack.extend([node.right, node.left])
        return ans 


    """973. K Closest Points to Origin (Medium)
	Given an array of points where points[i] = [xi, yi] represents a point on 
	the X-Y plane and an integer k, return the k closest points to the origin 
	(0, 0). The distance between two points on the X-Y plane is the Euclidean 
	distance (i.e., √(x1 - x2)^2 + (y1 - y2)^2). You may return the answer in 
	any order. The answer is guaranteed to be unique (except for the order that 
	it is in).

	Example 1:
	Input: points = [[1,3],[-2,2]], k = 1
	Output: [[-2,2]]
	Explanation: The distance between (1, 3) and the origin is sqrt(10). The 
	             distance between (-2, 2) and the origin is sqrt(8). Since 
	             sqrt(8) < sqrt(10), (-2, 2) is closer to the origin. We only 
	             want the closest k = 1 points from the origin, so the answer 
	             is just [[-2,2]].
	
	Example 2:
	Input: points = [[3,3],[5,-1],[-2,4]], k = 2
	Output: [[3,3],[-2,4]]
	Explanation: The answer [[-2,4],[3,3]] would also be accepted.

	Constraints:
	* 1 <= k <= points.length <= 10^4
	* -10^4 < xi, yi < 10^4"""

    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        
        def partition(lo, hi): 
            """Return partition of dist[lo:hi]."""
            i, j = lo+1, hi-1
            while i <= j: 
                if dist[i] < dist[lo]: i += 1
                elif dist[j] > dist[lo]: j -= 1
                else: 
                    dist[i], dist[j] = dist[j], dist[i]
                    i += 1
                    j -= 1
            dist[lo], dist[j] = dist[j], dist[lo]
            return j 
        
        dist = [x*x+y*y for x, y in points]
        shuffle(dist)
        lo, hi = 0, len(dist)
        while lo < hi: 
            mid = partition(lo, hi)
            if mid + 1 < k: lo = mid + 1
            elif mid + 1 == k: break 
            else: hi = mid
        return [[x, y] for x, y in points if x*x + y*y <= dist[mid]]


    """975. Odd Even Jump (Hard)
	You are given an integer array arr. From some starting index, you can make 
	a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called 
	odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are 
	called even-numbered jumps. Note that the jumps are numbered, not the 
	indices. You may jump forward from index i to index j (with i < j) in the 
	following way:
	* During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the 
	  index j such that arr[i] <= arr[j] and arr[j] is the smallest possible 
	  value. If there are multiple such indices j, you can only jump to the 
	  smallest such index j.
	* During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the 
	  index j such that arr[i] >= arr[j] and arr[j] is the largest possible 
	  value. If there are multiple such indices j, you can only jump to the 
	  smallest such index j.
	* It may be the case that for some index i, there are no legal jumps.
	A starting index is good if, starting from that index, you can reach the 
	end of the array (index arr.length - 1) by jumping some number of times 
	(possibly 0 or more than once). Return the number of good starting indices.

	Example 1:
	Input: arr = [10,13,12,14,15]
	Output: 2
	Explanation: From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.
	             From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.
	             From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.
	             From starting index i = 4, we have reached the end already.
	             In total, there are 2 different starting indices i = 3 and 
	             i = 4, where we can reach the end with some number of jumps.
	
	Example 2:
	Input: arr = [2,3,1,1,4]
	Output: 3
	Explanation: From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:
	             During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].
	             During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3
	             During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].
	             We can't jump from i = 3 to i = 4, so the starting index i = 0 
	             is not good. In a similar manner, we can deduce that:
	             From starting index i = 1, we jump to i = 4, so we reach the end.
	             From starting index i = 2, we jump to i = 3, and then we can't jump anymore.
	             From starting index i = 3, we jump to i = 4, so we reach the end.
	             From starting index i = 4, we are already at the end.
	             In total, there are 3 different starting indices i = 1, i = 3, 
	             and i = 4, where we can reach the end with some number of jumps.
	
	Example 3:
	Input: arr = [5,1,3,4,2]
	Output: 3
	Explanation: We can reach the end from starting indices 1, 2, and 4.

	Constraints:
	* 1 <= arr.length <= 2 * 10^4
	* 0 <= arr[i] < 10^5"""

    def oddEvenJumps(self, arr: List[int]) -> int:
        large = [-1] * len(arr)
        small = [-1] * len(arr)
        
        stack = []
        for i, x in sorted(enumerate(arr), key=lambda x: (x[1], x[0])): 
            while stack and stack[-1] < i: large[stack.pop()] = i 
            stack.append(i)
        
        stack = []
        for i, x in sorted(enumerate(arr), key=lambda x: (-x[1], x[0])): 
            while stack and stack[-1] < i: small[stack.pop()] = i
            stack.append(i)
        
        odd = [0] * len(arr)
        even = [0] * len(arr)
        odd[-1] = even[-1] = 1
        for i in reversed(range(len(arr))): 
            if 0 <= large[i]: odd[i] = even[large[i]]
            if 0 <= small[i]: even[i] = odd[small[i]]
        return sum(odd)


    """977. Squares of a Sorted Array (Easy)
	Given an integer array nums sorted in non-decreasing order, return an array 
	of the squares of each number sorted in non-decreasing order.

	Example 1:
	Input: nums = [-4,-1,0,3,10]
	Output: [0,1,9,16,100]
	Explanation: After squaring, the array becomes [16,1,0,9,100]. After 
	             sorting, it becomes [0,1,9,16,100].
	
	Example 2:
	Input: nums = [-7,-3,2,3,11]
	Output: [4,9,9,49,121]

	Constraints:
	* 1 <= nums.length <= 10^4
	* -10^4 <= nums[i] <= 10^4
	* nums is sorted in non-decreasing order.

	Follow up: Squaring each element and sorting the new array is very trivial, 
	           could you find an O(n) solution using a different approach?"""

    def sortedSquares(self, nums: List[int]) -> List[int]:
        ans = [0] * len(nums)
        lo, hi = 0, len(nums)-1
        for i in reversed(range(len(nums))):
            if abs(nums[lo]) >= abs(nums[hi]): 
                ans[i] = nums[lo]**2
                lo += 1
            else: 
                ans[i] = nums[hi]**2
                hi -= 1
        return ans


    """978. Longest Turbulent Subarray (Medium)
	Given an integer array arr, return the length of a maximum size turbulent 
	subarray of arr. A subarray is turbulent if the comparison sign flips 
	between each adjacent pair of elements in the subarray. More formally, a 
	subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent 
	if and only if:
	* For i <= k < j:
	  + arr[k] > arr[k + 1] when k is odd, and
	  + arr[k] < arr[k + 1] when k is even.
	* Or, for i <= k < j:
	  + arr[k] > arr[k + 1] when k is even, and
	  + arr[k] < arr[k + 1] when k is odd.

	Example 1:
	Input: arr = [9,4,2,10,7,8,8,1,9]
	Output: 5
	Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]

	Example 2:
	Input: arr = [4,8,12,16]
	Output: 2

	Example 3:
	Input: arr = [100]
	Output: 1

	Constraints:
	* 1 <= arr.length <= 4 * 10^4
	* 0 <= arr[i] <= 10^9"""

    def maxTurbulenceSize(self, arr: List[int]) -> int:
        ans = cnt = 0
        for i in range(len(arr)): 
            if i >= 2 and (arr[i-2] > arr[i-1] < arr[i] or arr[i-2] < arr[i-1] > arr[i]): cnt += 1
            elif i >= 1 and arr[i-1] != arr[i]: cnt = 2
            else: cnt = 1
            ans = max(ans, cnt)
        return ans 


    """980. Unique Paths III (Hard)
	On a 2-dimensional grid, there are 4 types of squares:
	* 1 represents the starting square.  There is exactly one starting square.
	* 2 represents the ending square.  There is exactly one ending square.
	* 0 represents empty squares we can walk over.
	* -1 represents obstacles that we cannot walk over.
	Return the number of 4-directional walks from the starting square to the 
	ending square, that walk over every non-obstacle square exactly once.

	Example 1:
	Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
	Output: 2
	Explanation: We have the following two paths: 
	1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
	2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)

	Example 2:
	Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
	Output: 4
	Explanation: We have the following four paths: 
	1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
	2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
	3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
	4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)

	Example 3:
	Input: [[0,1],[2,0]]
	Output: 0
	Explanation: There is no path that walks over every empty square exactly 
	once. Note that the starting and ending square can be anywhere in the grid.

	Note: 1 <= grid.length * grid[0].length <= 20"""

    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0]) # dimensions 
        empty = 0 
        for i in range(m):
            for j in range(n): 
                if grid[i][j] == 1: start = (i, j)
                elif grid[i][j] == 0: empty += 1 # empty squares 
        
        def fn(i, j, empty): 
            """Count paths via backtracking."""
            nonlocal ans 
            if grid[i][j] == 2: 
                if empty == -1: ans += 1
                return 
            grid[i][j] = -1 # mark as visited 
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < m and 0 <= jj < n and grid[ii][jj] != -1: 
                    fn(ii, jj, empty-1)
            grid[i][j] = 0 # backtracking
        
        ans = 0 
        fn(*start, empty)
        return ans


    """982. Triples with Bitwise AND Equal To Zero (Hard)
	Given an array of integers nums, find the number of triples of indices 
	(i, j, k) such that:
	* 0 <= i < nums.length
	* 0 <= j < nums.length
	* 0 <= k < nums.length
	* nums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-AND 
	  operator.

	Example 1:
	Input: nums = [2,1,3]
	Output: 12
	Explanation: We could choose the following i, j, k triples:
	(i=0, j=0, k=1) : 2 & 2 & 1
	(i=0, j=1, k=0) : 2 & 1 & 2
	(i=0, j=1, k=1) : 2 & 1 & 1
	(i=0, j=1, k=2) : 2 & 1 & 3
	(i=0, j=2, k=1) : 2 & 3 & 1
	(i=1, j=0, k=0) : 1 & 2 & 2
	(i=1, j=0, k=1) : 1 & 2 & 1
	(i=1, j=0, k=2) : 1 & 2 & 3
	(i=1, j=1, k=0) : 1 & 1 & 2
	(i=1, j=2, k=0) : 1 & 3 & 2
	(i=2, j=0, k=1) : 3 & 2 & 1
	(i=2, j=1, k=0) : 3 & 1 & 2
	 
	Note:
	* 1 <= nums.length <= 1000
	* 0 <= nums[i] < 2^16"""

    def countTriplets(self, nums: List[int]) -> int:
        freq = defaultdict(int)
        for x in nums: 
            for y in nums: 
                freq[x&y] += 1
        
        ans = 0
        for x in nums: 
            mask = x = x ^ 0xffff
            while x: 
                ans += freq[x]
                x = mask & (x-1)
            ans += freq[0]
        return ans 


    """986. Interval List Intersections (Medium)
	You are given two lists of closed intervals, firstList and secondList, 
	where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. 
	Each list of intervals is pairwise disjoint and in sorted order. Return the 
	intersection of these two interval lists. A closed interval [a, b] (with 
	a <= b) denotes the set of real numbers x with a <= x <= b. The 
	intersection of two closed intervals is a set of real numbers that are 
	either empty or represented as a closed interval. For example, the 
	intersection of [1, 3] and [2, 4] is [2, 3].

	Example 1:
	Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
	Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

	Example 2:
	Input: firstList = [[1,3],[5,9]], secondList = []
	Output: []

	Example 3:
	Input: firstList = [], secondList = [[4,8],[10,12]]
	Output: []

	Example 4:
	Input: firstList = [[1,7]], secondList = [[3,10]]
	Output: [[3,7]]

	Constraints:
	* 0 <= firstList.length, secondList.length <= 1000
	* firstList.length + secondList.length >= 1
	* 0 <= starti < endi <= 10^9
	* endi < starti+1
	* 0 <= startj < endj <= 10^9
	* endj < startj+1"""

    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:
        ans = []
        i = j = 0
        while i < len(firstList) and j < len(secondList): 
            if firstList[i][0] <= secondList[j][1] and secondList[j][0] <= firstList[i][1]: 
                ans.append([max(firstList[i][0], secondList[j][0]), min(firstList[i][1], secondList[j][1])])
            if firstList[i][1] <= secondList[j][1]: i += 1
            else: j += 1
        return ans


    """992. Subarrays with K Different Integers (Hard)
	Given an array nums of positive integers, call a (contiguous, not 
	necessarily distinct) subarray of nums good if the number of different 
	integers in that subarray is exactly k. (For example, [1,2,3,1,2] has 3 
	different integers: 1, 2, and 3.) Return the number of good subarrays of 
	nums.

	Example 1:
	Input: nums = [1,2,1,2,3], k = 2
	Output: 7
	Explanation: Subarrays formed with exactly 2 different integers: 
	             [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].
	
	Example 2:
	Input: nums = [1,2,1,3,4], k = 3
	Output: 3
	Explanation: Subarrays formed with exactly 3 different integers: 
	             [1,2,1,3], [2,1,3], [1,3,4].

	Note:
	* 1 <= nums.length <= 20000
	* 1 <= nums[i] <= nums.length
	* 1 <= k <= nums.length"""

    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
        ans = ii = 0 
        freq = defaultdict(int)
        queue = deque()
        for i, x in enumerate(nums): 
            freq[x] += 1
            queue.append(i)
            if len(freq) > k: 
                ii = queue[0]+1
                freq.pop(nums[queue.popleft()])
            while freq[nums[queue[0]]] > 1: freq[nums[queue.popleft()]] -= 1
            if len(freq) == k: ans += queue[0] - ii + 1
        return ans 


    """993. Cousins in Binary Tree (Easy)
	Given the root of a binary tree with unique values and the values of two 
	different nodes of the tree x and y, return true if the nodes corresponding 
	to the values x and y in the tree are cousins, or false otherwise. Two 
	nodes of a binary tree are cousins if they have the same depth with 
	different parents. Note that in a binary tree, the root node is at the 
	depth 0, and children of each depth k node are at the depth k + 1.

	Example 1:
	Input: root = [1,2,3,4], x = 4, y = 3
	Output: false

	Example 2:
	Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
	Output: true

	Example 3:
	Input: root = [1,2,3,null,4], x = 2, y = 3
	Output: false

	Constraints:
	* The number of nodes in the tree is in the range [2, 100].
	* 1 <= Node.val <= 100
	* Each node has a unique value.
	* x != y
	* x and y are exist in the tree."""

    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:
        queue = [(root, None)]
        while queue: 
            newq = []
            seen = 0
            for n, p in queue: 
                if n.val in (x, y): 
                    if not seen: seen = p
                    else: return seen != p
                if n.left: newq.append((n.left, n))
                if n.right: newq.append((n.right, n))
            if seen: return False 
            queue = newq 


    """994. Rotting Oranges (Medium)
	You are given an m x n grid where each cell can have one of three values:
	* 0 representing an empty cell,
	* 1 representing a fresh orange, or
	* 2 representing a rotten orange.
	Every minute, any fresh orange that is 4-directionally adjacent to a rotten 
	orange becomes rotten. Return the minimum number of minutes that must 
	elapse until no cell has a fresh orange. If this is impossible, return -1.

	Example 1:
	Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
	Output: 4

	Example 2:
	Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
	Output: -1
	Explanation: The orange in the bottom left corner (row 2, column 0) is 
	             never rotten, because rotting only happens 4-directionally.
	
	Example 3:
	Input: grid = [[0,2]]
	Output: 0
	Explanation: Since there are already no fresh oranges at minute 0, the 
	             answer is just 0.

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 10
	* grid[i][j] is 0, 1, or 2."""

    def orangesRotting(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        ans = fresh = 0 
        queue = deque()
        for i in range(m): 
            for j in range(n): 
                if grid[i][j] == 1: fresh += 1
                elif grid[i][j] == 2: queue.append((i, j))
        
        while queue and fresh: 
            for _ in range(len(queue)): 
                i, j = queue.popleft()
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    if 0 <= ii < m and 0 <= jj < n and grid[ii][jj] == 1: 
                        fresh -= 1
                        grid[ii][jj] = 2 # mark as rotten 
                        queue.append((ii, jj))
            ans += 1
        return ans if fresh == 0 else -1


    """995. Minimum Number of K Consecutive Bit Flips (Hard)
	In an array nums containing only 0s and 1s, a k-bit flip consists of 
	choosing a (contiguous) subarray of length k and simultaneously changing 
	every 0 in the subarray to 1, and every 1 in the subarray to 0. Return the 
	minimum number of k-bit flips required so that there is no 0 in the array.  
	If it is not possible, return -1.

	Example 1:
	Input: nums = [0,1,0], k = 1
	Output: 2
	Explanation: Flip nums[0], then flip nums[2].

	Example 2:
	Input: nums = [1,1,0], k = 2
	Output: -1
	Explanation: No matter how we flip subarrays of size 2, we can't make the 
	             array become [1,1,1].
	
	Example 3:
	Input: nums = [0,0,0,1,0,1,1,0], k = 3
	Output: 3
	Explanation:
	Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]
	Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]
	Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]

	Note:
	* 1 <= nums.length <= 30000
	* 1 <= k <= nums.length"""

    def minKBitFlips(self, nums: List[int], k: int) -> int:
        ans = flip = 0 
        queue = deque()
        for i, x in enumerate(nums):
            if queue and i == queue[0]: 
                flip ^= 1
                queue.popleft()
            if x == flip: 
                if len(nums) - i < k: return -1
                ans += 1
                flip ^= 1
                queue.append(i+k)
        return ans


    """997. Find the Town Judge (Easy)
	In a town, there are n people labeled from 1 to n. There is a rumor that 
	one of these people is secretly the town judge. If the town judge exists, 
	then:
	* The town judge trusts nobody.
	* Everybody (except for the town judge) trusts the town judge.
	* There is exactly one person that satisfies properties 1 and 2.
	You are given an array trust where trust[i] = [ai, bi] representing that 
	the person labeled ai trusts the person labeled bi. Return the label of the 
	town judge if the town judge exists and can be identified, or return -1 
	otherwise.

	Example 1:
	Input: n = 2, trust = [[1,2]]
	Output: 2

	Example 2:
	Input: n = 3, trust = [[1,3],[2,3]]
	Output: 3

	Example 3:
	Input: n = 3, trust = [[1,3],[2,3],[3,1]]
	Output: -1

	Example 4:
	Input: n = 3, trust = [[1,2],[2,3]]
	Output: -1

	Example 5:
	Input: n = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
	Output: 3

	Constraints:
	* 1 <= n <= 1000
	* 0 <= trust.length <= 10^4
	* trust[i].length == 2
	* All the pairs of trust are unique.
	* ai != bi"""

    def findJudge(self, n: int, trust: List[List[int]]) -> int:
        degree = [0]*n
        for u, v in trust: 
            degree[v-1] += 1
            degree[u-1] -= 1
        return next((i+1 for i, x in enumerate(degree) if x == n-1), -1)


    """1000. Minimum Cost to Merge Stones (Hard)
	There are n piles of stones arranged in a row. The ith pile has stones[i] 
	stones. A move consists of merging exactly k consecutive piles into one 
	pile, and the cost of this move is equal to the total number of stones in 
	these k piles. Return the minimum cost to merge all piles of stones into 
	one pile. If it is impossible, return -1.

	Example 1:
	Input: stones = [3,2,4,1], k = 2
	Output: 20
	Explanation: We start with [3, 2, 4, 1].
	             We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].
	             We merge [4, 1] for a cost of 5, and we are left with [5, 5].
	             We merge [5, 5] for a cost of 10, and we are left with [10].
	             The total cost was 20, and this is the minimum possible.
	
	Example 2:
	Input: stones = [3,2,4,1], k = 3
	Output: -1
	Explanation: After any merge operation, there are 2 piles left, and we 
	             can't merge anymore.  So the task is impossible.
	
	Example 3:
	Input: stones = [3,5,1,2,6], k = 3
	Output: 25
	Explanation: We start with [3, 5, 1, 2, 6].
	             We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].
	             We merge [3, 8, 6] for a cost of 17, and we are left with [17].
	             The total cost was 25, and this is the minimum possible.

	Constraints:
	* n == stones.length
	* 1 <= n <= 30
	* 1 <= stones[i] <= 100
	* 2 <= k <= 30"""

    def mergeStones(self, stones: List[int], k: int) -> int:
        if (len(stones)-1) % (k-1): return -1 # impossible
        
        prefix = [0]
        for x in stones: prefix.append(prefix[-1] + x)
        
        @cache
        def fn(lo, hi): 
            """Return min cost of merging stones[lo:hi]."""
            if hi - lo < k: return 0 # not enough stones
            ans = inf 
            for mid in range(lo+1, hi, k-1): 
                ans = min(ans, fn(lo, mid) + fn(mid, hi))
            if (hi-lo-1) % (k-1) == 0: ans += prefix[hi] - prefix[lo]
            return ans 
        
        return fn(0, len(stones))


    """1001. Grid Illumination (Hard)
	There is a 2D grid of size n x n where each cell of this grid has a lamp 
	that is initially turned off. You are given a 2D array of lamp positions 
	lamps, where lamps[i] = [rowi, coli] indicates that the lamp at 
	grid[rowi][coli] is turned on. Even if the same lamp is listed more than 
	once, it is turned on. When a lamp is turned on, it illuminates its cell 
	and all other cells in the same row, column, or diagonal. You are also 
	given another 2D array queries, where queries[j] = [rowj, colj]. For the 
	jth query, determine whether grid[rowj][colj] is illuminated or not. After 
	answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 
	adjacent lamps if they exist. A lamp is adjacent if its cell shares either 
	a side or corner with grid[rowj][colj]. Return an array of integers ans, 
	where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 
	if the lamp was not.

	Example 1:
	Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]
	Output: [1,0]
	Explanation: We have the initial grid with all lamps turned off. In the 
	             above picture we see the grid after turning on the lamp at 
	             grid[0][0] then turning on the lamp at grid[4][4]. The 0th 
	             query asks if the lamp at grid[1][1] is illuminated or not 
	             (the blue square). It is illuminated, so set ans[0] = 1. Then, 
	             we turn off all lamps in the red square. The 1st query asks if 
	             the lamp at grid[1][0] is illuminated or not (the blue square). 
	             It is not illuminated, so set ans[1] = 0. Then, we turn off 
	             all lamps in the red rectangle.

	Example 2:
	Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]
	Output: [1,1]

	Example 3:
	Input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]
	Output: [1,1,0]

	Constraints:
	* 1 <= n <= 109
	* 0 <= lamps.length <= 20000
	* 0 <= queries.length <= 20000
	* lamps[i].length == 2
	* 0 <= rowi, coli < n
	* queries[j].length == 2
	* 0 <= rowj, colj < n"""

    def gridIllumination(self, n: int, lamps: List[List[int]], queries: List[List[int]]) -> List[int]:
        lamps = {(i, j) for i, j in lamps}
        rows = defaultdict(int)
        cols = defaultdict(int)
        anti = defaultdict(int)
        diag = defaultdict(int)
        for i, j in lamps: 
            rows[i] += 1
            cols[j] += 1
            anti[i+j] += 1
            diag[i-j] += 1
        
        ans = []
        for i, j in queries: 
            if rows[i] or cols[j] or anti[i+j] or diag[i-j]: ans.append(1)
            else: ans.append(0)
            for ii in range(i-1, i+2): 
                for jj in range(j-1, j+2): 
                    if (ii, jj) in lamps: 
                        lamps.remove((ii, jj))
                        rows[ii] -= 1
                        cols[jj] -= 1
                        anti[ii+jj] -= 1
                        diag[ii-jj] -= 1
        return ans 


    """1004. Max Consecutive Ones III (Medium)
	Given a binary array nums and an integer k, return the maximum number of 
	consecutive 1's in the array if you can flip at most k 0's.

	Example 1:
	Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
	Output: 6
	Explanation: [1,1,1,0,0,1,1,1,1,1,1]
	             Bolded numbers were flipped from 0 to 1. The longest subarray 
	             is underlined.
	
	Example 2:
	Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
	Output: 10
	Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
	             Bolded numbers were flipped from 0 to 1. The longest subarray 
	             is underlined.

	Constraints:
	* 1 <= nums.length <= 10^5
	* nums[i] is either 0 or 1.
	* 0 <= k <= nums.length"""

    def longestOnes(self, nums: List[int], k: int) -> int:
        ans = ii = 0 
        for i in range(len(nums)): 
            if nums[i] == 0: k -= 1
            while k < 0: 
                if nums[ii] == 0: k += 1
                ii += 1
            ans = max(ans, i - ii + 1)
        return ans 


    """1008. Construct Binary Search Tree from Preorder Traversal (Medium)
	Given an array of integers preorder, which represents the preorder 
	traversal of a BST (i.e., binary search tree), construct the tree and 
	return its root. It is guaranteed that there is always possible to find a 
	binary search tree with the given requirements for the given test cases.
	A binary search tree is a binary tree where for every node, any descendant 
	of Node.left has a value strictly less than Node.val, and any descendant of 
	Node.right has a value strictly greater than Node.val. A preorder traversal 
	of a binary tree displays the value of the node first, then traverses 
	Node.left, then traverses Node.right.

	Example 1:
	Input: preorder = [8,5,1,7,10,12]
	Output: [8,5,10,1,7,null,12]

	Example 2:
	Input: preorder = [1,3]
	Output: [1,null,3]

	Constraints:
	* 1 <= preorder.length <= 100
	* 1 <= preorder[i] <= 10^8
	* All the values of preorder are unique."""

    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:
        root = None
        stack = []
        for x in preorder: 
            if not root: root = node = TreeNode(x)
            elif x < node.val: 
                stack.append(node)
                node.left = node = TreeNode(x)
            else: 
                while stack and stack[-1].val < x: node = stack.pop()
                node.right = node = TreeNode(x)
        return root


    """1014. Best Sightseeing Pair (Medium)
	Given an array A of positive integers, A[i] represents the value of the 
	i-th sightseeing spot, and two sightseeing spots i and j have distance 
	j - i between them. The score of a pair (i < j) of sightseeing spots is 
	(A[i] + A[j] + i - j) : the sum of the values of the sightseeing spots, 
	minus the distance between them. Return the maximum score of a pair of 
	sightseeing spots.

	Example 1:
	Input: [8,1,5,2,6]
	Output: 11
	Explanation: i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11

	Note:
	* 2 <= A.length <= 50000
	* 1 <= A[i] <= 1000"""

    def maxScoreSightseeingPair(self, A: List[int]) -> int:
        ans = most = 0
        for i, x in enumerate(A): 
            ans = max(ans, most + x - i)
            most = max(most, x + i)
        return ans 


    """1017. Convert to Base -2 (Medium)
	Given a number N, return a string consisting of "0"s and "1"s that 
	represents its value in base -2 (negative two). The returned string must 
	have no leading zeroes, unless the string is "0".

	Example 1:
	Input: 2
	Output: "110"
	Explantion: (-2) ^ 2 + (-2) ^ 1 = 2

	Example 2:
	Input: 3
	Output: "111"
	Explantion: (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3

	Example 3:
	Input: 4
	Output: "100"
	Explantion: (-2) ^ 2 = 4

	Note: 0 <= N <= 10^9"""

    def baseNeg2(self, N: int) -> str:
        ans = []
        while N: 
            ans.append(N & 1)
            N = -(N >> 1)
        return "".join(map(str, ans[::-1] or [0]))


    """1019. Next Greater Node In Linked List (Medium)
	We are given a linked list with head as the first node. Let's number the 
	nodes in the list: node_1, node_2, node_3, ... etc. Each node may have a 
	next larger value: for node_i, next_larger(node_i) is the node_j.val such 
	that j > i, node_j.val > node_i.val, and j is the smallest possible choice.  
	If such a j does not exist, the next larger value is 0. Return an array of 
	integers answer, where answer[i] = next_larger(node_{i+1}). Note that in 
	the example inputs (not outputs) below, arrays such as [2,1,5] represent 
	the serialization of a linked list with a head node value of 2, second node 
	value of 1, and third node value of 5.

	Example 1:
	Input: [2,1,5]
	Output: [5,5,0]

	Example 2:
	Input: [2,7,4,3,5]
	Output: [7,0,5,5,0]

	Example 3:
	Input: [1,7,5,1,9,2,5,1]
	Output: [7,9,9,9,0,5,0,0]

	Note:
	* 1 <= node.val <= 10^9 for each node in the linked list.
	* The given list has length in the range [0, 10000]."""

    def nextLargerNodes(self, head: ListNode) -> List[int]:
        ans, stack = [], []
        while head: 
            while stack and stack[-1][1] < head.val: ans[stack.pop()[0]] = head.val 
            stack.append((len(ans), head.val))
            ans.append(0)
            head = head.next 
        return ans 


    """1020. Number of Enclaves (Medium)
	Given a 2D array A, each cell is 0 (representing sea) or 1 (representing 
	land). A move consists of walking from one land square 4-directionally to 
	another land square, or off the boundary of the grid. Return the number of 
	land squares in the grid for which we cannot walk off the boundary of the 
	grid in any number of moves.

	Example 1:
	Input: [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
	Output: 3
	Explanation: There are three 1s that are enclosed by 0s, and one 1 that 
	             isn't enclosed because its on the boundary.

	Example 2:
	Input: [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
	Output: 0
	Explanation: All 1s are either on the boundary or can reach the boundary.

	Note:
	* 1 <= A.length <= 500
	* 1 <= A[i].length <= 500
	* 0 <= A[i][j] <= 1
	* All rows have the same size."""

    def numEnclaves(self, A: List[List[int]]) -> int:
        m, n = len(A), len(A[0])
        
        stack = []
        for i in range(m):
            if A[i][0]: stack.append((i, 0))
            if A[i][n-1]: stack.append((i, n-1))
        
        for j in range(n):
            if A[0][j]: stack.append((0, j))
            if A[m-1][j]: stack.append((m-1, j))
                
        while stack: 
            i, j = stack.pop()
            A[i][j] = 0 # mark as visited 
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < m and 0 <= jj < n and A[ii][jj]: stack.append((ii, jj))
        
        return sum(map(sum, A))


    """1023. Camelcase Matching (Medium)
	A query word matches a given pattern if we can insert lowercase letters to 
	the pattern word so that it equals the query. (We may insert each character 
	at any position, and may insert 0 characters.) Given a list of queries, and 
	a pattern, return an answer list of booleans, where answer[i] is true if 
	and only if queries[i] matches the pattern.

	Example 1:
	Input: queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FB"
	Output: [true,false,true,true,false]
	Explanation: "FooBar" can be generated like this "F" + "oo" + "B" + "ar".
 				 "FootBall" can be generated like this "F" + "oot" + "B" + "all".
  				 "FrameBuffer" can be generated like this "F" + "rame" + "B" + "uffer".

	Example 2:
	Input: queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FoBa"
	Output: [true,false,true,false,false]
	Explanation: "FooBar" can be generated like this "Fo" + "o" + "Ba" + "r".
	             "FootBall" can be generated like this "Fo" + "ot" + "Ba" + "ll".

	Example 3:
	Input: queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FoBaT"
	Output: [false,true,false,false,false]
	Explanation: "FooBarTest" can be generated like this "Fo" + "o" + "Ba" + "r" + "T" + "est".

	Note:
	* 1 <= queries.length <= 100
	* 1 <= queries[i].length <= 100
	* 1 <= pattern.length <= 100
	* All strings consists only of lower and upper case English letters."""

    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:
        
        def fn(query): 
            """Return true if query matches pattern."""
            i = 0
            for x in query:
                if i < len(pattern) and x == pattern[i]: i += 1
                elif x.isupper(): return False
            return i == len(pattern)
        
        return [fn(query) for query in queries]


    """1024. Video Stitching (Medium)
	You are given a series of video clips from a sporting event that lasted T 
	seconds. These video clips can be overlapping with each other and have 
	varied lengths. Each video clip clips[i] is an interval: it starts at time 
	clips[i][0] and ends at time clips[i][1].  We can cut these clips into 
	segments freely: for example, a clip [0, 7] can be cut into segments 
	[0, 1] + [1, 3] + [3, 7]. Return the minimum number of clips needed so that 
	we can cut the clips into segments that cover the entire sporting event 
	([0, T]).  If the task is impossible, return -1.

	Example 1:
	Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
	Output: 3
	Explanation: 
	We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.
	Then, we can reconstruct the sporting event as follows:
	We cut [1,9] into segments [1,2] + [2,8] + [8,9].
	Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].

	Example 2:
	Input: clips = [[0,1],[1,2]], T = 5
	Output: -1
	Explanation: We can't cover [0,5] with only [0,1] and [1,2].

	Example 3:
	Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9
	Output: 3
	Explanation: We can take clips [0,4], [4,7], and [6,9].

	Example 4:
	Input: clips = [[0,4],[2,8]], T = 5
	Output: 2
	Explanation: Notice you can have extra video after the event ends.

	Constraints:
	* 1 <= clips.length <= 100
	* 0 <= clips[i][0] <= clips[i][1] <= 100
	* 0 <= T <= 100"""

    def videoStitching(self, clips: List[List[int]], T: int) -> int:
        if not T: return 0 # edge case 
        
        ans = yy = mx = 0
        for x, y in sorted(clips):
            if mx < x: return -1 # gap 
            if yy < x <= mx: ans, yy = ans+1, mx
            mx = max(mx, y)
            if T <= mx: return ans + 1
        return -1 # not reaching T


    """1026. Maximum Difference Between Node and Ancestor (Medium)
	Given the root of a binary tree, find the maximum value V for which there 
	exist different nodes A and B where V = |A.val - B.val| and A is an 
	ancestor of B. A node A is an ancestor of B if either: any child of A is 
	equal to B, or any child of A is an ancestor of B.

	Example 1:
	Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
	Output: 7
	Explanation: We have various ancestor-node differences, some of which are given below :
	|8 - 3| = 5
	|3 - 7| = 4
	|8 - 1| = 7
	|10 - 13| = 3
	Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.

	Example 2:
	Input: root = [1,null,2,null,0,3]
	Output: 3

	Constraints:
	* The number of nodes in the tree is in the range [2, 5000].
	* 0 <= Node.val <= 10^5"""

    def maxAncestorDiff(self, root: TreeNode) -> int:
        
        def fn(node, mn, mx): 
            """Return maximum difference on sub-tree rooted at node."""
            if not node: return mx - mn 
            mn = min(mn, node.val)
            mx = max(mx, node.val)
            lv = fn(node.left, mn, mx)
            rv = fn(node.right, mn, mx)
            return max(lv, rv)
        
        return fn(root, root.val, root.val)


    """1027. Longest Arithmetic Subsequence (Medium)
	Given an array A of integers, return the length of the longest arithmetic 
	subsequence in A. Recall that a subsequence of A is a list A[i_1], A[i_2],
	..., A[i_k] with 0 <= i_1 < i_2 < ... < i_k <= A.length - 1, and that a 
	sequence B is arithmetic if B[i+1] - B[i] are all the same value (for 
	0 <= i < B.length - 1).

	Example 1:
	Input: A = [3,6,9,12]
	Output: 4
	Explanation: 
	The whole array is an arithmetic sequence with steps of length = 3.

	Example 2:
	Input: A = [9,4,7,2,10]
	Output: 3
	Explanation: 
	The longest arithmetic subsequence is [4,7,10].

	Example 3:
	Input: A = [20,1,15,3,10,5,8]
	Output: 4
	Explanation: 
	The longest arithmetic subsequence is [20,15,10,5].

	Constraints:
	* 2 <= A.length <= 1000
	* 0 <= A[i] <= 500"""

    def longestArithSeqLength(self, A: List[int]) -> int:
        ans = 0
        cnt = defaultdict(lambda: 1)
        seen = set()
        for x in A: 
            for xx in seen: 
                cnt[x, x-xx] = 1 + cnt[xx, x-xx]
                ans = max(ans, cnt[x, x-xx])
            seen.add(x)
        return ans 


    """1028. Recover a Tree From Preorder Traversal (Hard)
	We run a preorder depth-first search (DFS) on the root of a binary tree. At 
	each node in this traversal, we output D dashes (where D is the depth of 
	this node), then we output the value of this node.  If the depth of a node 
	is D, the depth of its immediate child is D + 1.  The depth of the root 
	node is 0. If a node has only one child, that child is guaranteed to be the 
	left child. Given the output S of this traversal, recover the tree and 
	return its root.

	Example 1:
	Input: S = "1-2--3--4-5--6--7"
	Output: [1,2,5,3,4,6,7]

	Example 2:
	Input: S = "1-2--3---4-5--6---7"
	Output: [1,2,5,3,null,6,null,4,null,7]

	Example 3:
	Input: S = "1-401--349---90--88"
	Output: [1,401,null,349,88,90]

	Constraints:
	* The number of nodes in the original tree is in the range [1, 1000].
	* 1 <= Node.val <= 10^9"""

    def recoverFromPreorder(self, S: str) -> TreeNode:
        stack = []
        depth, val = 0, ""
        for i, x in enumerate(S): 
            if x == "-": 
                depth += 1
                val = ""
            else: 
                val += S[i]
                if i+1 == len(S) or S[i+1] == "-": 
                    node = TreeNode(int(val))
                    while len(stack) > depth: stack.pop()
                    if stack:
                        if not stack[-1].left: stack[-1].left = node
                        else: stack[-1].right = node
                    stack.append(node)
                    depth = 0
        return stack[0]


    """1029. Two City Scheduling (Medium)
	A company is planning to interview 2n people. Given the array costs where 
	costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is 
	aCosti, and the cost of flying the ith person to city b is bCosti. Return 
	the minimum cost to fly every person to a city such that exactly n people 
	arrive in each city.

	Example 1:
	Input: costs = [[10,20],[30,200],[400,50],[30,20]]
	Output: 110
	Explanation: 
	The first person goes to city A for a cost of 10.
	The second person goes to city A for a cost of 30.
	The third person goes to city B for a cost of 50.
	The fourth person goes to city B for a cost of 20.
	The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.

	Example 2:
	Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
	Output: 1859

	Example 3:
	Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
	Output: 3086

	Constraints:
	* 2 * n == costs.length
	* 2 <= costs.length <= 100
	* costs.length is even.
	* 1 <= aCosti, bCosti <= 1000"""

    def twoCitySchedCost(self, costs: List[List[int]]) -> int:
        costs.sort(key=lambda x: x[1] - x[0])
        ans = 0
        for i, (a, b) in enumerate(costs): 
            if i < len(costs)//2: ans += b
            else: ans += a
        return ans 


    """1031. Maximum Sum of Two Non-Overlapping Subarrays (Medium)
	Given an array A of non-negative integers, return the maximum sum of 
	elements in two non-overlapping (contiguous) subarrays, which have lengths 
	L and M.  (For clarification, the L-length subarray could occur before or 
	after the M-length subarray.) Formally, return the largest V for which 
	V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) and 
	either:
	* 0 <= i < i + L - 1 < j < j + M - 1 < A.length, or
	* 0 <= j < j + M - 1 < i < i + L - 1 < A.length.

	Example 1:
	Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
	Output: 20
	Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.

	Example 2:
	Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
	Output: 29
	Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.

	Example 3:
	Input: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3
	Output: 31
	Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.

	Note:
	* L >= 1
	* M >= 1
	* L + M <= A.length <= 1000
	* 0 <= A[i] <= 1000"""

    def maxSumTwoNoOverlap(self, A: List[int], L: int, M: int) -> int:
        prefix = [0]
        for x in A: prefix.append(prefix[-1] + x) # prefix sum w/ leading 0
        ans = lmx = mmx = -inf 
        for i in range(M+L, len(A)+1): 
            lmx = max(lmx, prefix[i-M] - prefix[i-L-M])
            mmx = max(mmx, prefix[i-L] - prefix[i-L-M])
            ans = max(ans, lmx + prefix[i] - prefix[i-M], mmx + prefix[i] - prefix[i-L])
        return ans 


    """1034. Coloring A Border (Medium)
	Given a 2-dimensional grid of integers, each value in the grid represents 
	the color of the grid square at that location. Two squares belong to the 
	same connected component if and only if they have the same color and are 
	next to each other in any of the 4 directions. The border of a connected 
	component is all the squares in the connected component that are either 
	4-directionally adjacent to a square not in the component, or on the 
	boundary of the grid (the first or last row or column). Given a square at 
	location (r0, c0) in the grid and a color, color the border of the 
	connected component of that square with the given color, and return the 
	final grid.

	Example 1:
	Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3
	Output: [[3, 3], [3, 2]]

	Example 2:
	Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3
	Output: [[1, 3, 3], [2, 3, 3]]

	Example 3:
	Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2
	Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]

	Note:
	* 1 <= grid.length <= 50
	* 1 <= grid[0].length <= 50
	* 1 <= grid[i][j] <= 1000
	* 0 <= r0 < grid.length
	* 0 <= c0 < grid[0].length
	* 1 <= color <= 1000"""

    def colorBorder(self, grid: List[List[int]], r0: int, c0: int, color: int) -> List[List[int]]:
        m, n, orig = len(grid), len(grid[0]), grid[r0][c0] # dimensions 
        seen = {(r0, c0)}
        stack = [(r0, c0)]
        while stack: 
            i, j = stack.pop()
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if (ii, jj) not in seen:
                    if 0 <= ii < m and 0 <= jj < n and grid[ii][jj] == orig: 
                        stack.append((ii, jj))
                        seen.add((ii, jj))
                    else: 
                        grid[i][j] = color 
        return grid 


    """1035. Uncrossed Lines (Medium)
	We write the integers of A and B (in the order they are given) on two 
	separate horizontal lines. Now, we may draw connecting lines: a straight 
	line connecting two numbers A[i] and B[j] such that:
	* A[i] == B[j];
	* The line we draw does not intersect any other connecting (non-horizontal) 
	  line.
	Note that a connecting lines cannot intersect even at the endpoints: each 
	number can only belong to one connecting line. Return the maximum number of 
	connecting lines we can draw in this way.

	Example 1:
	Input: A = [1,4,2], B = [1,2,4]
	Output: 2
	Explanation: We can draw 2 uncrossed lines as in the diagram. We cannot draw 
	             3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will 
	             intersect the line from A[2]=2 to B[1]=2.

	Example 2:
	Input: A = [2,5,1,2,5], B = [10,5,2,1,5,2]
	Output: 3
	
	Example 3:
	Input: A = [1,3,7,1,7,5], B = [1,9,2,5,1]
	Output: 2

	Note:
	* 1 <= A.length <= 500
	* 1 <= B.length <= 500
	* 1 <= A[i], B[i] <= 2000"""

    def maxUncrossedLines(self, A: List[int], B: List[int]) -> int:
        
        @cache
        def fn(i, j): 
            """Return maximum uncrossed lines of A[i:] and B[j:]."""
            if i == len(A) or j == len(B): return 0
            if A[i] == B[j]: return 1 + fn(i+1, j+1)
            return max(fn(i+1, j), fn(i, j+1))
        
        return fn(0, 0)


    """1036. Escape a Large Maze (Hard)
	There is a 1 million by 1 million grid on an XY-plane, and the coordinates 
	of each grid square are (x, y). We start at the source = [sx, sy] square 
	and want to reach the target = [tx, ty] square. There is also an array of 
	blocked squares, where each blocked[i] = [xi, yi] represents a blocked 
	square with coordinates (xi, yi). Each move, we can walk one square north, 
	east, south, or west if the square is not in the array of blocked squares. 
	We are also not allowed to walk outside of the grid. Return true if and 
	only if it is possible to reach the target square from the source square 
	through a sequence of valid moves.

	Example 1:
	Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
	Output: false
	Explanation: The target square is inaccessible starting from the source 
	             square because we cannot move. We cannot move north or east 
	             because those squares are blocked. We cannot move south or 
	             west because we cannot go outside of the grid.
	
	Example 2:
	Input: blocked = [], source = [0,0], target = [999999,999999]
	Output: true
	Explanation: Because there are no blocked cells, it is possible to reach 
	             the target square.

	Constraints:
	* 0 <= blocked.length <= 200
	* blocked[i].length == 2
	* 0 <= xi, yi < 10^6
	* source.length == target.length == 2
	* 0 <= sx, sy, tx, ty < 10^6
	* source != target
	* It is guaranteed that source and target are not blocked."""

    def isEscapePossible(self, blocked: List[List[int]], source: List[int], target: List[int]) -> bool:
        blocked = set(map(tuple, blocked))
        
        def dfs(sx, sy, tx, ty): 
            """Return True if (x, y) is not looped from (tx, ty)."""
            seen = {(sx, sy)}
            stack = [(sx, sy)]
            while stack: 
                x, y = stack.pop()
                if abs(x - sx) + abs(y - sy) > 200 or (x, y) == (tx, ty): return True 
                for xx, yy in (x-1, y), (x, y-1), (x, y+1), (x+1, y): 
                    if 0 <= xx < 1e6 and 0 <= yy < 1e6 and (xx, yy) not in blocked and (xx, yy) not in seen: 
                        seen.add((xx, yy))
                        stack.append((xx, yy))
            return False 
        
        return dfs(*source, *target) and dfs(*target, *source)


    """1038. Binary Search Tree to Greater Sum Tree (Medium)
	Given the root of a Binary Search Tree (BST), convert it to a Greater Tree 
	such that every key of the original BST is changed to the original key plus 
	sum of all keys greater than the original key in BST. As a reminder, a 
	binary search tree is a tree that satisfies these constraints:
	* The left subtree of a node contains only nodes with keys less than the node's key.
	* The right subtree of a node contains only nodes with keys greater than the node's key.
	* Both the left and right subtrees must also be binary search trees.
	Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/

	Example 1:
	Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
	Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

	Example 2:
	Input: root = [0,null,1]
	Output: [1,null,1]

	Example 3:
	Input: root = [1,0,2]
	Output: [3,3,2]

	Example 4:
	Input: root = [3,2,4,1]
	Output: [7,9,4,10]

	Constraints:
	* The number of nodes in the tree is in the range [1, 100].
	* 0 <= Node.val <= 100
	* All the values in the tree are unique.
	* root is guaranteed to be a valid binary search tree."""

    def bstToGst(self, root: TreeNode) -> TreeNode:
        val = 0
        node = root
        stack = []
        while stack or node: 
            if node: 
                stack.append(node)
                node = node.right 
            else: 
                node = stack.pop()
                node.val = val = node.val + val 
                node = node.left 
        return root 


    """1040. Moving Stones Until Consecutive II (Medium)
	On an infinite number line, the position of the i-th stone is given by 
	stones[i]. Call a stone an endpoint stone if it has the smallest or largest 
	position. Each turn, you pick up an endpoint stone and move it to an 
	unoccupied position so that it is no longer an endpoint stone. In particular, 
	if the stones are at say, stones = [1,2,5], you cannot move the endpoint 
	stone at position 5, since moving it to any position (such as 0, or 3) will 
	still keep that stone as an endpoint stone. The game ends when you cannot 
	make any more moves, ie. the stones are in consecutive positions. When the 
	game ends, what is the minimum and maximum number of moves that you could 
	have made?  Return the answer as an length 2 array: 
	answer = [minimum_moves, maximum_moves]

	Example 1:
	Input: [7,4,9]
	Output: [1,2]
	Explanation: We can move 4 -> 8 for one move to finish the game. Or, we can 
	             move 9 -> 5, 4 -> 6 for two moves to finish the game.
	
	Example 2:
	Input: [6,5,4,3,10]
	Output: [2,3]
	Explanation: We can move 3 -> 8 then 10 -> 7 to finish the game. Or, we can 
	             move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game. Notice we 
	             cannot move 10 -> 2 to finish the game, because that would be 
	             an illegal move.
	
	Example 3:
	Input: [100,101,104,102,103]
	Output: [0,0]

	Note:
	* 3 <= stones.length <= 10^4
	* 1 <= stones[i] <= 10^9
	* stones[i] have distinct values."""

    def numMovesStonesII(self, stones: List[int]) -> List[int]:
        stones.sort()
        high = max(stones[-1] - stones[1], stones[-2] - stones[0]) - (len(stones) - 2)
        
        ii, low = 0, inf
        for i in range(len(stones)): 
            while stones[i] - stones[ii] >= len(stones): ii += 1
            if i - ii + 1 == stones[i] - stones[ii] + 1 == len(stones) - 1: low = min(low, 2)
            else: low = min(low, len(stones) - (i - ii + 1))
        return [low, high]


    """1041. Robot Bounded In Circle (Medium)
	On an infinite plane, a robot initially stands at (0, 0) and faces north.  
	The robot can receive one of three instructions:
	* "G": go straight 1 unit;
	* "L": turn 90 degrees to the left;
	* "R": turn 90 degress to the right.
	The robot performs the instructions given in order, and repeats them 
	forever. Return true if and only if there exists a circle in the plane such 
	that the robot never leaves the circle.

	Example 1:
	Input: "GGLLGG"
	Output: true
	Explanation: The robot moves from (0,0) to (0,2), turns 180 degrees, and 
	             then returns to (0,0). When repeating these instructions, the 
	             robot remains in the circle of radius 2 centered at the origin.

	Example 2:
	Input: "GG"
	Output: false
	Explanation: The robot moves north indefinitely.
	
	Example 3:
	Input: "GL"
	Output: true
	Explanation: The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...

	Note:
	* 1 <= instructions.length <= 100
	* instructions[i] is in {'G', 'L', 'R'}"""

    def isRobotBounded(self, instructions: str) -> bool:
        x = y = 0
        dx, dy = 0, 1
        for instruction in instructions: 
            if instruction == "G": x, y = x+dx, y+dy
            elif instruction == "L": dx, dy = -dy, dx
            else: dx, dy = dy, -dx
        return (x, y) == (0, 0) or (dx, dy) != (0, 1)


    """1042. Flower Planting With No Adjacent (Medium)
	You have n gardens, labeled from 1 to n, and an array paths where 
	paths[i] = [xi, yi] describes a bidirectional path between garden xi to 
	garden yi. In each garden, you want to plant one of 4 types of flowers. All 
	gardens have at most 3 paths coming into or leaving it. Your task is to 
	choose a flower type for each garden such that, for any two gardens 
	connected by a path, they have different types of flowers. Return any such 
	a choice as an array answer, where answer[i] is the type of flower planted 
	in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is 
	guaranteed an answer exists.

	Example 1:
	Input: n = 3, paths = [[1,2],[2,3],[3,1]]
	Output: [1,2,3]
	Explanation:
	Gardens 1 and 2 have different types.
	Gardens 2 and 3 have different types.
	Gardens 3 and 1 have different types.
	Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].

	Example 2:
	Input: n = 4, paths = [[1,2],[3,4]]
	Output: [1,2,1,2]

	Example 3:
	Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
	Output: [1,2,3,4]

	Constraints:
	* 1 <= n <= 104
	* 0 <= paths.length <= 2 * 104
	* paths[i].length == 2
	* 1 <= xi, yi <= n
	* xi != yi
	* Every garden has at most 3 paths coming into or leaving it."""

    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:
        graph = {} # graph as adjacency list 
        for u, v in paths: 
            graph.setdefault(u-1, []).append(v-1)
            graph.setdefault(v-1, []).append(u-1)
            
        ans = [0]*n
        for i in range(n): 
            ans[i] = ({1,2,3,4} - {ans[ii] for ii in graph.get(i, [])}).pop()
        return ans 


    """1043. Partition Array for Maximum Sum (Medium)
	Given an integer array arr, you should partition the array into (contiguous) 
	subarrays of length at most k. After partitioning, each subarray has their 
	values changed to become the maximum value of that subarray. Return the 
	largest sum of the given array after partitioning.

	Example 1:
	Input: arr = [1,15,7,9,2,5,10], k = 3
	Output: 84
	Explanation: arr becomes [15,15,15,9,10,10,10]

	Example 2:
	Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
	Output: 83

	Example 3:
	Input: arr = [1], k = 1
	Output: 1

	Constraints:
	* 1 <= arr.length <= 500
	* 0 <= arr[i] <= 109
	* 1 <= k <= arr.length"""

    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        
        @cache
        def fn(i):
            """Return maximum sum of arr[:i]."""
            if i == 0: return 0 # boundary condition 
            ans = 0
            for kk in range(1, min(i, k)+1): 
                ans = max(ans, fn(i-kk) + max(arr[ii] for ii in range(i-kk, i)) * kk)
            return ans 
        
        return fn(len(arr))


    """1044. Longest Duplicate Substring (Hard)
	Given a string s, consider all duplicated substrings: (contiguous) 
	substrings of s that occur 2 or more times. The occurrences may overlap.
	Return any duplicated substring that has the longest possible length. If s 
	does not have a duplicated substring, the answer is "".

	Example 1:
	Input: s = "banana"
	Output: "ana"

	Example 2:
	Input: s = "abcd"
	Output: ""

	Constraints:
	* 2 <= s.length <= 3 * 10^4
	* s consists of lowercase English letters."""

    def longestDupSubstring(self, s: str) -> str:
        mod = 1_000_000_007
        
        def fn(k): 
            """Return duplicated substring of length k."""
            p = pow(26, k, mod)
            hs = 0
            seen = {}
            for i, ch in enumerate(s): 
                hs = (26*hs + ord(ch) - 97) % mod
                if i >= k: hs = (hs - (ord(s[i-k])-97)*p) % mod # rolling hash 
                if i+1 >= k:
                    if hs in seen and s[i+1-k:i+1] in seen[hs]: return s[i+1-k:i+1] # resolve hash collision
                    seen.setdefault(hs, set()).add(s[i+1-k:i+1])
            return ""
        
        lo, hi = 0, len(s)-1
        while lo < hi: 
            mid = lo + hi + 1 >> 1
            if fn(mid): lo = mid
            else: hi = mid - 1
        return fn(lo)


    """1047. Remove All Adjacent Duplicates In String (Easy)
	You are given a string s consisting of lowercase English letters. A 
	duplicate removal consists of choosing two adjacent and equal letters and 
	removing them. We repeatedly make duplicate removals on s until we no 
	longer can. Return the final string after all such duplicate removals have 
	been made. It can be proven that the answer is unique.

	Example 1:
	Input: s = "abbaca"
	Output: "ca"
	Explanation: For example, in "abbaca" we could remove "bb" since the 
	             letters are adjacent and equal, and this is the only possible 
	             move.  The result of this move is that the string is "aaca", 
	             of which only "aa" is possible, so the final string is "ca".
	
	Example 2:
	Input: s = "azxxzy"
	Output: "ay"

	Constraints:
	* 1 <= s.length <= 10^5
	* s consists of lowercase English letters."""

    def removeDuplicates(self, s: str) -> str:
        stack = []
        for ch in s: 
            if stack and stack[-1] == ch: stack.pop()
            else: stack.append(ch)
        return "".join(stack)


    """1048. Longest String Chain (Medium)
	Given a list of words, each word consists of English lowercase letters. 
	Let's say word1 is a predecessor of word2 if and only if we can add exactly 
	one letter anywhere in word1 to make it equal to word2.  For example, "abc" 
	is a predecessor of "abac". A word chain is a sequence of words 
	[word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of 
	word_2, word_2 is a predecessor of word_3, and so on. Return the longest 
	possible length of a word chain with words chosen from the given list of 
	words.

	Example 1:
	Input: words = ["a","b","ba","bca","bda","bdca"]
	Output: 4
	Explanation: One of the longest word chain is "a","ba","bda","bdca".

	Example 2:
	Input: words = ["xbc","pcxbcf","xb","cxbc","pcxbc"]
	Output: 5

	Constraints:
	* 1 <= words.length <= 1000
	* 1 <= words[i].length <= 16
	* words[i] only consists of English lowercase letters."""

    def longestStrChain(self, words: List[str]) -> int:
        seen = {}
        for word in sorted(words, key=len): 
            seen[word] = 1
            for i in range(len(word)): 
                key = word[:i] + word[i+1:]
                if key in seen: 
                    seen[word] = max(seen[word], 1 + seen[key])
        return max(seen.values())


    """1052. Grumpy Bookstore Owner (Medium)
	Today, the bookstore owner has a store open for customers.length minutes. 
	Every minute, some number of customers (customers[i]) enter the store, and 
	all those customers leave after the end of that minute. On some minutes, 
	the bookstore owner is grumpy.  If the bookstore owner is grumpy on the 
	i-th minute, grumpy[i] = 1, otherwise grumpy[i] = 0.  When the bookstore 
	owner is grumpy, the customers of that minute are not satisfied, otherwise 
	they are satisfied. The bookstore owner knows a secret technique to keep 
	themselves not grumpy for X minutes straight, but can only use it once. 
	Return the maximum number of customers that can be satisfied throughout the 
	day.

	Example 1:
	Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3
	Output: 16
	Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. 
	The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.

	Note:
	* 1 <= X <= customers.length == grumpy.length <= 20000
	* 0 <= customers[i] <= 1000
	* 0 <= grumpy[i] <= 1"""

    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:
        ans = val = ii = mx = 0
        for i in range(len(customers)): 
            if not grumpy[i]: ans += customers[i]
            else: 
                val += customers[i]
                while ii <= i-X: 
                    if grumpy[ii]: val -= customers[ii]
                    ii += 1
                mx = max(mx, val)
        return ans + mx 


    """1054. Distant Barcodes (Medium)
	In a warehouse, there is a row of barcodes, where the ith barcode is 
	barcodes[i]. Rearrange the barcodes so that no two adjacent barcodes are 
	equal. You may return any answer, and it is guaranteed an answer exists.

	Example 1:
	Input: barcodes = [1,1,1,2,2,2]
	Output: [2,1,2,1,2,1]

	Example 2:
	Input: barcodes = [1,1,1,1,2,2,3,3]
	Output: [1,3,1,3,1,2,1,2]

	Constraints:
	* 1 <= barcodes.length <= 10000
	* 1 <= barcodes[i] <= 10000"""

    def rearrangeBarcodes(self, barcodes: List[int]) -> List[int]:
        freq = {}
        for x in barcodes: freq[x] = 1 + freq.get(x, 0)
            
        ans, i = [None] * len(barcodes), 0
        for k, v in sorted(freq.items(), key=lambda x: x[1], reverse=True): 
            for _ in range(v): 
                ans[i] = k 
                i = i+2 if i+2 < len(ans) else 1
        return ans 


    """1055. Shortest Way to Form String (Medium)
	A subsequence of a string is a new string that is formed from the original 
	string by deleting some (can be none) of the characters without disturbing 
	the relative positions of the remaining characters. (i.e., "ace" is a 
	subsequence of "abcde" while "aec" is not). Given two strings source and 
	target, return the minimum number of subsequences of source such that their 
	concatenation equals target. If the task is impossible, return -1.

	Example 1:
	Input: source = "abc", target = "abcbc"
	Output: 2
	Explanation: The target "abcbc" can be formed by "abc" and "bc", which are 
	             subsequences of source "abc".
	
	Example 2:
	Input: source = "abc", target = "acdbc"
	Output: -1
	Explanation: The target string cannot be constructed from the subsequences 
	             of source string due to the character "d" in target string.
	
	Example 3:
	Input: source = "xyz", target = "xzyxz"
	Output: 3
	Explanation: The target string can be constructed as follows 
	             "xz" + "y" + "xz".

	Constraints:
	* 1 <= source.length, target.length <= 1000
	* source and target consist of lowercase English letters."""

    def shortestWay(self, source: str, target: str) -> int:
        locs = {}
        for i, x in enumerate(source): 
            locs.setdefault(x, []).append(i)
        
        ans = i = 0
        for x in target: 
            if x not in locs: return -1 
            k = bisect_left(locs[x], i) 
            if k == len(locs[x]): 
                k = 0
                ans += 1
            i = locs[x][k] + 1
        return ans + 1


    """1056. Confusing Number (Easy)
	Given a number N, return true if and only if it is a confusing number, 
	which satisfies the following condition:
	We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 
	are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 
	4, 5 and 7 are rotated 180 degrees, they become invalid. A confusing number 
	is a number that when rotated 180 degrees becomes a different number with 
	each digit valid.

	Example 1:
	Input: 6
	Output: true
	Explanation: We get 9 after rotating 6, 9 is a valid number and 9!=6.
	
	Example 2:
	Input: 89
	Output: true
	Explanation: We get 68 after rotating 89, 86 is a valid number and 86!=89.
	
	Example 3:
	Input: 11
	Output: false
	Explanation: We get 11 after rotating 11, 11 is a valid number but the 
	             value remains the same, thus 11 is not a confusing number.
	
	Example 4:
	Input: 25
	Output: false
	Explanation: We get an invalid number after rotating 25.

	Note:
	* 0 <= N <= 10^9
	* After the rotation we can ignore leading zeros, for example if after 
	  rotation we have 0008 then this number is considered as just 8."""

    def confusingNumber(self, N: int) -> bool:
        mp = {0:0, 1:1, 6:9, 8:8, 9:6}
        n, nn = N, 0
        while n: 
            n, r = divmod(n, 10)
            if r not in mp: return False
            nn = 10*nn + mp[r]
        return nn != N


    """1057. Campus Bikes (Medium)
	On a campus represented on the X-Y plane, there are n workers and m bikes, 
	with n <= m. You are given an array workers of length n where 
	workers[i] = [xi, yi] is the position of the ith worker. You are also given 
	an array bikes of length m where bikes[j] = [xj, yj] is the position of the 
	jth bike. All the given positions are unique. Assign a bike to each worker. 
	Among the available bikes and workers, we choose the (workeri, bikej) pair 
	with the shortest Manhattan distance between each other and assign the bike 
	to that worker. If there are multiple (workeri, bikej) pairs with the same 
	shortest Manhattan distance, we choose the pair with the smallest worker 
	index. If there are multiple ways to do that, we choose the pair with the 
	smallest bike index. Repeat this process until there are no available 
	workers. Return an array answer of length n, where answer[i] is the index 
	(0-indexed) of the bike that the ith worker is assigned to. The Manhattan 
	distance between two points p1 and p2 is 
	Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.

	Example 1:
	Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
	Output: [1,0]
	Explanation: Worker 1 grabs Bike 0 as they are closest (without ties), and 
	             Worker 0 is assigned Bike 1. So the output is [1, 0].
	
	Example 2:
	Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
	Output: [0,2,1]
	Explanation: Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share 
	             the same distance to Bike 2, thus Worker 1 is assigned to Bike 
	             2, and Worker 2 will take Bike 1. So the output is [0,2,1].

	Constraints:
	* n == workers.length
	* m == bikes.length
	* 1 <= n <= m <= 1000
	* workers[i].length == bikes[j].length == 2
	* 0 <= xi, yi < 1000
	* 0 <= xj, yj < 1000
	* All worker and bike locations are unique."""

    def assignBikes(self, workers: List[List[int]], bikes: List[List[int]]) -> List[int]:
        vals = [] 
        for i, (x, y) in enumerate(workers): 
            for j, (xx, yy) in enumerate(bikes): 
                vals.append((abs(x - xx) + abs(y - yy), i, j))
        
        ans = [-1] * len(workers)
        seen = [False] * len(bikes)
        for _, i, j in sorted(vals): 
            if ans[i] == -1 and not seen[j]: 
                ans[i] = j 
                seen[j] = True 
        return ans 


    """1058. Minimize Rounding Error to Meet Target (Medium)
	Given an array of prices [p1,p2...,pn] and a target, round each price pi to 
	Roundi(pi) so that the rounded array [Round1(p1),Round2(p2)...,Roundn(pn)] 
	sums to the given target. Each operation Roundi(pi) could be either 
	Floor(pi) or Ceil(pi). Return the string "-1" if the rounded array is 
	impossible to sum to target. Otherwise, return the smallest rounding error, 
	which is defined as Σ |Roundi(pi) - (pi)| for i from 1 to n, as a string 
	with three places after the decimal.

	Example 1:
	Input: prices = ["0.700","2.800","4.900"], target = 8
	Output: "1.000"
	Explanation: Use Floor, Ceil and Ceil operations to get 
	             (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .
	
	Example 2:
	Input: prices = ["1.500","2.500","3.500"], target = 10
	Output: "-1"
	Explanation: It is impossible to meet the target.

	Example 3:
	Input: prices = ["1.500","2.500","3.500"], target = 9
	Output: "1.500"

	Constraints:
	* 1 <= prices.length <= 500
	* Each string prices[i] represents a real number in the range [0.0, 1000.0] 
	  and has exactly 3 decimal places.
	* 0 <= target <= 10^6"""

    def minimizeError(self, prices: List[str], target: int) -> str:
        err = []
        lo = hi = 0 
        for x in prices: 
            x = float(x)
            lo += floor(x)
            hi += ceil(x)
            if floor(x) < x < ceil(x): err.append(x - floor(x))
        if not lo <= target <= hi: return "-1" # impossible 
        
        err.sort()
        k = hi - target 
        return f"{len(err)-k+sum(err[:k])-sum(err[k:]):.3f}"


    """1059. All Paths from Source Lead to Destination (Medium)
	Given the edges of a directed graph where edges[i] = [ai, bi] indicates 
	there is an edge between nodes ai and bi, and two nodes source and 
	destination of this graph, determine whether or not all paths starting from 
	source eventually, end at destination, that is:
	* At least one path exists from the source node to the destination node
	* If a path exists from the source node to a node with no outgoing edges, 
	  then that node is equal to destination.
	* The number of possible paths from source to destination is a finite number.
	Return true if and only if all roads from source lead to destination.

	Example 1:
	Input: n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2
	Output: false
	Explanation: It is possible to reach and get stuck on both node 1 and node 2.

	Example 2:
	Input: n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3
	Output: false
	Explanation: We have two possibilities: to end at node 3, or to loop over 
	             node 1 and node 2 indefinitely.
	
	Example 3:
	Input: n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3
	Output: true

	Example 4:
	Input: n = 3, edges = [[0,1],[1,1],[1,2]], source = 0, destination = 2
	Output: false
	Explanation: All paths from the source node end at the destination node, 
	             but there are an infinite number of paths, such as 0-1-2, 
	             0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on.
	
	Example 5:
	Input: n = 2, edges = [[0,1],[1,1]], source = 0, destination = 1
	Output: false
	Explanation: There is infinite self-loop at destination node.

	Constraints:
	* 1 <= n <= 10^4
	* 0 <= edges.length <= 10^4
	* edges.length == 2
	* 0 <= ai, bi <= n - 1
	* 0 <= source <= n - 1
	* 0 <= destination <= n - 1
	* The given graph may have self-loops and parallel edges."""

    def leadsToDestination(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        graph = {}
        for u, v in edges: graph.setdefault(u, []).append(v)
        
        def fn(x): 
            """Return True if all paths starting from x lead to destination."""
            if x not in graph: return x == destination
            if color[x]: return color[x] == 1
            color[x] = -1 
            for xx in graph[x]: 
                if not fn(xx): return False 
            color[x] = 1
            return True 
        
        color = [0] * n 
        return fn(source)


    """1060. Missing Element in Sorted Array (Medium)
	Given an integer array nums which is sorted in ascending order and all of 
	its elements are unique and given also an integer k, return the kth missing 
	number starting from the leftmost number of the array.

	Example 1:
	Input: nums = [4,7,9,10], k = 1
	Output: 5
	Explanation: The first missing number is 5.

	Example 2:
	Input: nums = [4,7,9,10], k = 3
	Output: 8
	Explanation: The missing numbers are [5,6,8,...], hence the third missing 
	             number is 8.

	Example 3:
	Input: nums = [1,2,4], k = 3
	Output: 6
	Explanation: The missing numbers are [3,5,6,7,...], hence the third missing 
	             number is 6.

	Constraints:
	* 1 <= nums.length <= 5 * 104
	* 1 <= nums[i] <= 107
	* nums is sorted in ascending order, and all the elements are unique.
	* 1 <= k <= 108

	Follow up: Can you find a logarithmic time complexity (i.e., O(log(n))) 
	           solution?"""

    def missingElement(self, nums: List[int], k: int) -> int:
        lo, hi = 0, len(nums)
        while lo < hi: 
            mid = lo + hi >> 1
            if nums[mid] - nums[0] - mid < k: lo = mid + 1
            else: hi = mid 
        return nums[0] + k + lo - 1


    """1061. Lexicographically Smallest Equivalent String (Medium)
	You are given two strings of the same length s1 and s2 and a string baseStr.
	We say s1[i] and s2[i] are equivalent characters.
	* For example, if s1 = "abc" and s2 = "cde", then we have 'a' == 'c', 
	  'b' == 'd', and 'c' == 'e'.
	Equivalent characters follow the usual rules of any equivalence relation:
	* Reflexivity: 'a' == 'a'.
	* Symmetry: 'a' == 'b' implies 'b' == 'a'.
	* Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.
	For example, given the equivalency information from s1 = "abc" and 
	s2 = "cde", "acd" and "aab" are equivalent strings of baseStr = "eed", and 
	"aab" is the lexicographically smallest equivalent string of baseStr. 
	Return the lexicographically smallest equivalent string of baseStr by using 
	the equivalency information from s1 and s2.

	Example 1:
	Input: s1 = "parker", s2 = "morris", baseStr = "parser"
	Output: "makkek"
	Explanation: Based on the equivalency information in s1 and s2, we can 
	             group their characters as [m,p], [a,o], [k,r,s], [e,i]. The 
	             characters in each group are equivalent and sorted in 
	             lexicographical order. So the answer is "makkek".
	
	Example 2:
	Input: s1 = "hello", s2 = "world", baseStr = "hold"
	Output: "hdld"
	Explanation: Based on the equivalency information in s1 and s2, we can 
	             group their characters as [h,w], [d,e,o], [l,r]. So only the 
	             second letter 'o' in baseStr is changed to 'd', the answer is 
	             "hdld".
	
	Example 3:
	Input: s1 = "leetcode", s2 = "programs", baseStr = "sourcecode"
	Output: "aauaaaaada"
	Explanation: We group the equivalent characters in s1 and s2 as 
	             [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in 
	             baseStr except 'u' and 'd' are transformed to 'a', the answer 
	             is "aauaaaaada".

	Constraints:
	* 1 <= s1.length, s2.length, baseStr <= 1000
	* s1.length == s2.length
	* s1, s2, and baseStr consist of lowercase English letters.

class UnionFind: 
    def __init__(self): 
        self.parent = dict(zip(ascii_lowercase, ascii_lowercase))
        
    def find(self, p): 
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q): 
        prt, qrt = self.find(p), self.find(q)
        if prt < qrt: prt, qrt = qrt, prt
        self.parent[prt] = qrt"""
        
    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        uf = UnionFind()
        for c1, c2 in zip(s1, s2): uf.union(c1, c2)
        return "".join(uf.find(ch) for ch in baseStr)


    """1062. Longest Repeating Substring (Medium)
	Given a string s, find out the length of the longest repeating substring(s). 
	Return 0 if no repeating substring exists.

	Example 1:
	Input: s = "abcd"
	Output: 0
	Explanation: There is no repeating substring.

	Example 2:
	Input: s = "abbaba"
	Output: 2
	Explanation: The longest repeating substrings are "ab" and "ba", each of 
	             which occurs twice.
	
	Example 3:
	Input: s = "aabcaabdaab"
	Output: 3
	Explanation: The longest repeating substring is "aab", which occurs 3 times.
	
	Example 4:
	Input: s = "aaaaa"
	Output: 4
	Explanation: The longest repeating substring is "aaaa", which occurs twice.

	Constraints:
	* The string s consists of only lowercase English letters from 'a' - 'z'.
	* 1 <= s.length <= 1500"""

    def longestRepeatingSubstring(self, s: str) -> int:
        MOD = 1_000_000_007
        
        fac = [1]
        prefix = [0]
        for ch in s: 
            fac.append((fac[-1] * 26 % MOD))
            prefix.append((prefix[-1]*26 + ord(ch) - 97) % MOD)
            
        def fn(k): 
            """Return True if a repeating substring of length k is found."""
            seen = set()
            for i in range(len(s)-k+1): 
                val = (prefix[i+k] - prefix[i]*fac[k]) % MOD 
                if val in seen: return True # rolling hash (ver. Monte Carlo)
                seen.add(val)
            return False 
        
        # last-true binary search 
        lo, hi = -1, len(s)-1
        while lo < hi:
            mid = lo + hi + 1 >> 1
            if fn(mid): lo = mid
            else: hi = mid - 1
        return lo


    """1064. Fixed Point (Easy)
	Given an array of distinct integers arr, where arr is sorted in ascending 
	order, return the smallest index i that satisfies arr[i] == i. If there is 
	no such index, return -1.

	Example 1:
	Input: arr = [-10,-5,0,3,7]
	Output: 3
	Explanation: For the given array, arr[0] = -10, arr[1] = -5, arr[2] = 0, 
	             arr[3] = 3, thus the output is 3.

	Example 2:
	Input: arr = [0,2,5,8,17]
	Output: 0
	Explanation: arr[0] = 0, thus the output is 0.

	Example 3:
	Input: arr = [-10,-5,3,4,7,9]
	Output: -1
	Explanation: There is no such i that arr[i] == i, thus the output is -1.

	Constraints:
	* 1 <= arr.length < 104
	* -109 <= arr[i] <= 109

	Follow up: The O(n) solution is very straightforward. Can we do better?"""

    def fixedPoint(self, arr: List[int]) -> int:
        lo, hi = 0, len(arr)-1
        while lo < hi: 
            mid = lo + hi >> 1
            if arr[mid] - mid < 0: lo = mid + 1
            else: hi = mid
        return lo if arr[lo] == lo else -1


    """1065. Index Pairs of a String (Easy)
	Given a text string and words (a list of strings), return all index pairs 
	[i, j] so that the substring text[i]...text[j] is in the list of words.

	Example 1:
	Input: text = "thestoryofleetcodeandme", words = ["story","fleet","leetcode"]
	Output: [[3,7],[9,13],[10,17]]

	Example 2:
	Input: text = "ababa", words = ["aba","ab"]
	Output: [[0,1],[0,2],[2,3],[2,4]]
	Explanation: Notice that matches can overlap, see "aba" is found in [0,2] 
	             and [2,4].

	Note:
	* All strings contains only lowercase English letters.
	* It's guaranteed that all strings in words are different.
	* 1 <= text.length <= 100
	* 1 <= words.length <= 20
	* 1 <= words[i].length <= 50
	* Return the pairs [i,j] in sorted order (i.e. sort them by their first 
	  coordinate in case of ties sort them by their second coordinate)."""

    def indexPairs(self, text: str, words: List[str]) -> List[List[int]]:
        ans = []
        for word in words: 
            k = -1
            while True: 
                k = text.find(word, k+1)
                if k == -1: break 
                ans.append([k, k+len(word)-1])
        return sorted(ans)


    """1066. Campus Bikes II (Medium)
	On a campus represented as a 2D grid, there are n workers and m bikes, with 
	n <= m. Each worker and bike is a 2D coordinate on this grid. We assign one 
	unique bike to each worker so that the sum of the Manhattan distances 
	between each worker and their assigned bike is minimized. Return the 
	minimum possible sum of Manhattan distances between each worker and their 
	assigned bike. The Manhattan distance between two points p1 and p2 is 
	Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.

	Example 1:
	Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
	Output: 6
	Explanation: We assign bike 0 to worker 0, bike 1 to worker 1. The 
	             Manhattan distance of both assignments is 3, so the output is 
	             6.
	
	Example 2:
	Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
	Output: 4
	Explanation: We first assign bike 0 to worker 0, then assign bike 1 to 
	             worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both 
	             assignments lead to sum of the Manhattan distances as 4.
	
	Example 3:
	Input: workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], 
	       bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]
	Output: 4995

	Constraints:
	* n == workers.length
	* m == bikes.length
	* 1 <= n <= m <= 10
	* workers[i].length == 2
	* bikes[i].length == 2
	* 0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000
	* All the workers and the bikes locations are unique."""

    def assignBikes(self, workers: List[List[int]], bikes: List[List[int]]) -> int:
        n, m = len(workers), len(bikes)
        
        @cache
        def fn(i, mask):
            """Return min Manhattan distance of assigning workers[i:] to available bikes."""
            if i == n: return 0 
            ans = inf 
            for j in range(m): 
                if not mask & (1<<j): 
                    ans = min(ans, abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1]) + fn(i+1, mask ^ (1<<j)))
            return ans 
        
        return fn(0, 0)


    """1072. Flip Columns For Maximum Number of Equal Rows (Medium)
	Given a matrix consisting of 0s and 1s, we may choose any number of columns 
	in the matrix and flip every cell in that column.  Flipping a cell changes 
	the value of that cell from 0 to 1 or from 1 to 0. Return the maximum 
	number of rows that have all values equal after some number of flips.

	Example 1:
	Input: [[0,1],[1,1]]
	Output: 1
	Explanation: After flipping no values, 1 row has all values equal.

	Example 2:
	Input: [[0,1],[1,0]]
	Output: 2
	Explanation: After flipping values in the first column, both rows have 
	             equal values.

	Example 3:
	Input: [[0,0,0],[0,0,1],[1,1,0]]
	Output: 2
	Explanation: After flipping values in the first two columns, the last two 
	             rows have equal values.

	Note:
	* 1 <= matrix.length <= 300
	* 1 <= matrix[i].length <= 300
	* All matrix[i].length's are equal
	* matrix[i][j] is 0 or 1"""

    def maxEqualRowsAfterFlips(self, matrix: List[List[int]]) -> int:
        m, n = len(matrix), len(matrix[0]) # dimensions 
        score = [0]*m
        
        for j in range(1, n): 
            for i in range(m):
                score[i] *= 2
                if matrix[i][0] != matrix[i][j]: score[i] += 1
                    
        freq = {}
        for x in score: freq[x] = 1 + freq.get(x, 0)
        return max(freq.values())


    """1073. Adding Two Negabinary Numbers (Medium)
	Given two numbers arr1 and arr2 in base -2, return the result of adding 
	them together. Each number is given in array format:  as an array of 0s and 
	1s, from most significant bit to least significant bit.  For example, 
	arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3.  A 
	number arr in array, format is also guaranteed to have no leading zeros: 
	either arr == [0] or arr[0] == 1. Return the result of adding arr1 and arr2
	in the same format: as an array of 0s and 1s with no leading zeros.

	Example 1:
	Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]
	Output: [1,0,0,0,0]
	Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.

	Example 2:
	Input: arr1 = [0], arr2 = [0]
	Output: [0]

	Example 3:
	Input: arr1 = [0], arr2 = [1]
	Output: [1]

	Constraints:
	* 1 <= arr1.length, arr2.length <= 1000
	* arr1[i] and arr2[i] are 0 or 1
	* arr1 and arr2 have no leading zeros"""

    def addNegabinary(self, arr1: List[int], arr2: List[int]) -> List[int]:
        ans = []
        carry, i1, i2 = 0, len(arr1), len(arr2)
        while i1 or i2 or carry: 
            if i1: carry += arr1[(i1 := i1 - 1)]
            if i2: carry += arr2[(i2 := i2 - 1)]
            ans.append(carry & 1)
            carry = -(carry >> 1)
        while ans and not ans[-1]: ans.pop()
        return ans[::-1] or [0]


    """1074. Number of Submatrices That Sum to Target (Hard)
	Given a matrix and a target, return the number of non-empty submatrices 
	that sum to target. A submatrix x1, y1, x2, y2 is the set of all cells 
	matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2. Two submatrices 
	(x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some 
	coordinate that is different: for example, if x1 != x1'.

	Example 1:
	Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
	Output: 4
	Explanation: The four 1x1 submatrices that only contain 0.

	Example 2:
	Input: matrix = [[1,-1],[-1,1]], target = 0
	Output: 5
	Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.

	Example 3:
	Input: matrix = [[904]], target = 0
	Output: 0

	Constraints:
	* 1 <= matrix.length <= 100
	* 1 <= matrix[0].length <= 100
	* -1000 <= matrix[i] <= 1000
	* -10^8 <= target <= 10^8"""

    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        ans = 0 
        m, n = len(matrix), len(matrix[0]) # dimensions 
        prefix = [[0]*(n+1) for _ in range(m+1)]
        
        for i in range(m): 
            for j in range(n): 
                prefix[i+1][j+1] = matrix[i][j] + prefix[i+1][j] + prefix[i][j+1] - prefix[i][j]
                
            for ii in range(i+1):
                freq = {0: 1}
                for j in range(n): 
                    diff = prefix[i+1][j+1] - prefix[ii][j+1] 
                    ans += freq.get(diff - target, 0)
                    freq[diff] = 1 + freq.get(diff, 0)
        return ans 


    """1080. Insufficient Nodes in Root to Leaf Paths (Medium)
	Given the root of a binary tree, consider all root to leaf paths: paths 
	from the root to any leaf.  (A leaf is a node with no children.) A node is 
	insufficient if every such root to leaf path intersecting this node has sum 
	strictly less than limit. Delete all insufficient nodes simultaneously, and 
	return the root of the resulting binary tree.

	Example 1:
	Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1
	Output: [1,2,3,4,null,null,7,8,9,null,14]

	Example 2:
	Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22
	Output: [5,4,8,11,null,17,4,7,null,null,null,5]

	Example 3:
	Input: root = [1,2,-3,-5,null,4,null], limit = -1
	Output: [1,null,-3,4]

	Note:
	* The given tree will have between 1 and 5000 nodes.
	* -10^5 <= node.val <= 10^5
	* -10^9 <= limit <= 10^9"""

    def sufficientSubset(self, root: TreeNode, limit: int) -> TreeNode:
        
        def fn(node, x): 
            """Return updated node."""
            if not node: return 
            x -= node.val
            if node.left is node.right: return None if x > 0 else node # leaf 
            node.left = fn(node.left, x)
            node.right = fn(node.right, x)
            return node if node.left or node.right else None
        
        return fn(root, limit)


    """1081. Smallest Subsequence of Distinct Characters (Medium)
	Return the lexicographically smallest subsequence of s that contains all 
	the distinct characters of s exactly once. Note: This question is the same 
	as 316: https://leetcode.com/problems/remove-duplicate-letters/

	Example 1:
	Input: s = "bcabc"
	Output: "abc"

	Example 2:
	Input: s = "cbacdcbc"
	Output: "acdb"

	Constraints:
	* 1 <= s.length <= 1000
	* s consists of lowercase English letters."""

    def smallestSubsequence(self, s: str) -> str:
        loc = {x: i for i, x in enumerate(s)}
        stack = []
        for i, x in enumerate(s): 
            if x not in stack: 
                while stack and x < stack[-1] and i < loc[stack[-1]]: stack.pop()
                stack.append(x)
        return "".join(stack)


    """1085. Sum of Digits in the Minimum Number (Easy)
	Given an array A of positive integers, let S be the sum of the digits of 
	the minimal element of A. Return 0 if S is odd, otherwise return 1.

	Example 1:
	Input: [34,23,1,24,75,33,54,8]
	Output: 0
	Explanation: The minimal element is 1, and the sum of those digits is S = 1 
	             which is odd, so the answer is 0.
	
	Example 2:
	Input: [99,77,33,66,55]
	Output: 1
	Explanation: The minimal element is 33, and the sum of those digits is 
	             S = 3 + 3 = 6 which is even, so the answer is 1.

	Constraints:
	* 1 <= A.length <= 100
	* 1 <= A[i] <= 100"""

    def sumOfDigits(self, A: List[int]) -> int:
        return 1 ^ 1&sum(int(x) for x in str(min(A)))


    """1086. High Five (Easy)
	Given a list of the scores of different students, items, where 
	items[i] = [IDi, scorei] represents one score from a student with IDi, 
	calculate each student's top five average. Return the answer as an array of 
	pairs result, where result[j] = [IDj, topFiveAveragej] represents the 
	student with IDj and their top five average. Sort result by IDj in 
	increasing order. A student's top five average is calculated by taking the 
	sum of their top five scores and dividing it by 5 using integer division.

	Example 1:
	Input: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]
	Output: [[1,87],[2,88]]
	Explanation: 
	The student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.
	The student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88.

	Example 2:
	Input: items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]
	Output: [[1,100],[7,100]]

	Constraints:
	* 1 <= items.length <= 1000
	* items[i].length == 2
	* 1 <= IDi <= 1000
	* 0 <= scorei <= 100
	* For each IDi, there will be at least five scores."""

    def highFive(self, items: List[List[int]]) -> List[List[int]]:
        mp = {}
        for x, score in items: 
            mp.setdefault(x, []).append(score)
        
        ans = []
        for x in mp: 
            ans.append([x, sum(sorted(mp[x])[-5:])//5])
        return sorted(ans)


    """1087. Brace Expansion (Medium)
	You are given a string s representing a list of words. Each letter in the 
	word has one or more options.
	* If there is one option, the letter is represented as is.
	* If there is more than one option, then curly braces delimit the options. 
	  For example, "{a,b,c}" represents options ["a", "b", "c"].
	For example, if s = "a{b,c}", the first character is always 'a', but the 
	second character can be 'b' or 'c'. The original list is ["ab", "ac"]. 
	Return all words that can be formed in this manner, sorted in 
	lexicographical order.

	Example 1:
	Input: s = "{a,b}c{d,e}f"
	Output: ["acdf","acef","bcdf","bcef"]

	Example 2:
	Input: s = "abcd"
	Output: ["abcd"]

	Constraints:
	* 1 <= s.length <= 50
	* s consists of curly brackets '{}', commas ',', and lowercase English 
	  letters.
	* s is guaranteed to be a valid input.
	* There are no nested curly brackets.
	* All characters inside a pair of consecutive opening and ending curly 
	  brackets are different."""

    def expand(self, s: str) -> List[str]:
        ans = [""]
        i = 0
        while i < len(s): 
            if s[i] == "{": 
                ii = i+1 
                while s[ii] != "}": ii += 1
                ans = [xx + x for xx in ans for x in s[i+1:ii].split(",")]
                i = ii + 1
            else: 
                ans = [x + s[i] for x in ans]
                i += 1
        return sorted(ans)


    """1089. Duplicate Zeros (Easy)
	Given a fixed length array arr of integers, duplicate each occurrence of 
	zero, shifting the remaining elements to the right. Note that elements 
	beyond the length of the original array are not written. Do the above 
	modifications to the input array in place, do not return anything from your 
	function.

	Example 1:
	Input: [1,0,2,3,0,4,5,0]
	Output: null
	Explanation: After calling your function, the input array is modified to: 
	             [1,0,0,2,3,0,0,4]

	Example 2:
	Input: [1,2,3]
	Output: null
	Explanation: After calling your function, the input array is modified to: 
	             [1,2,3]

	Note:
	* 1 <= arr.length <= 10000
	* 0 <= arr[i] <= 9"""

    def duplicateZeros(self, arr: List[int]) -> None:
        """
        Do not return anything, modify arr in-place instead.
        """
        zeros = arr.count(0)
        for i in reversed(range(len(arr))): 
            if i + zeros < len(arr): 
                arr[i+zeros] = arr[i]
            if arr[i] == 0: 
                zeros -= 1
                if i + zeros < len(arr): 
                    arr[i+zeros] = arr[i]


    """1090. Largest Values From Labels (Medium)
	We have a set of items: the i-th item has value values[i] and label labels[i]. 
	Then, we choose a subset S of these items, such that:
	* |S| <= num_wanted
	* For every label L, the number of items in S with label L is <= use_limit.
	Return the largest possible sum of the subset S.

	Example 1:
	Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1
	Output: 9
	Explanation: The subset chosen is the first, third, and fifth item.

	Example 2:
	Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2
	Output: 12
	Explanation: The subset chosen is the first, second, and third item.

	Example 3:
	Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1
	Output: 16
	Explanation: The subset chosen is the first and fourth item.

	Example 4:
	Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2
	Output: 24
	Explanation: The subset chosen is the first, second, and fourth item.

	Note:
	* 1 <= values.length == labels.length <= 20000
	* 0 <= values[i], labels[i] <= 20000
	* 1 <= num_wanted, use_limit <= values.length"""

    def largestValsFromLabels(self, values: List[int], labels: List[int], num_wanted: int, use_limit: int) -> int:
        ans = 0
        freq = {}
        for value, label in sorted(zip(values, labels), reverse=True):
            if freq.get(label, 0) < use_limit: 
                ans += value
                num_wanted -= 1
                if not num_wanted: break 
                freq[label] = 1 + freq.get(label, 0)
        return ans 


    """1091. Shortest Path in Binary Matrix (Medium)
	In an N by N square grid, each cell is either empty (0) or blocked (1). A 
	clear path from top-left to bottom-right has length k if and only if it is 
	composed of cells C_1, C_2, ..., C_k such that:
	* Adjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they 
	  are different and share an edge or corner)
	* C_1 is at location (0, 0) (ie. has value grid[0][0])
	* C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])
	* If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).
	Return the length of the shortest such clear path from top-left to bottom-
	right.  If such a path does not exist, return -1.

	Example 1:
	Input: [[0,1],[1,0]]
	Output: 2

	Example 2:
	Input: [[0,0,0],[1,1,0],[1,1,0]]
	Output: 4

	Note:
	* 1 <= grid.length == grid[0].length <= 100
	* grid[r][c] is 0 or 1"""

    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        n = len(grid)
        if grid[0][0] == 0: 
            ans = 0 
            grid[0][0] = 1
            queue = deque([(0, 0)])
            while queue: 
                ans += 1
                for _ in range(len(queue)): 
                    i, j = queue.popleft()
                    if i == j == n-1: return ans
                    for ii in range(i-1, i+2): 
                        for jj in range(j-1, j+2): 
                            if 0 <= ii < n and 0 <= jj < n and grid[ii][jj] == 0: 
                                grid[ii][jj] = 1
                                queue.append((ii, jj))
        return -1 


    """1092. Shortest Common Supersequence (Hard)
	Given two strings str1 and str2, return the shortest string that has both 
	str1 and str2 as subsequences.  If multiple answers exist, you may return 
	any of them. (A string S is a subsequence of string T if deleting some 
	number of characters from T (possibly 0, and the characters are chosen 
	anywhere from T) results in the string S.)

	Example 1:
	Input: str1 = "abac", str2 = "cab"
	Output: "cabac"
	Explanation: 
	str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
	str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
	The answer provided is the shortest such string that satisfies these properties.

	Note:
	* 1 <= str1.length, str2.length <= 1000
	* str1 and str2 consist of lowercase English letters."""

    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        
        @cache
        def fn(i, j): 
            """Return min length of common supersequence of str1[i:] and str2[j:]."""
            if i == len(str1): return len(str2)-j
            if j == len(str2): return len(str1)-i
            if str1[i] == str2[j]: return 1 + fn(i+1, j+1)
            return 1 + min(fn(i+1, j), fn(i, j+1))
        
        ans = []
        i = j = 0 
        while i < len(str1) and j < len(str2): 
            if str1[i] == str2[j]: 
                ans.append(str1[i])
                i += 1
                j += 1
            elif fn(i+1, j) < fn(i, j+1): 
                ans.append(str1[i])
                i += 1
            else: 
                ans.append(str2[j])
                j += 1
        return "".join(ans) + str1[i:] + str2[j:]


    """1095. Find in Mountain Array (Hard)
	(This problem is an interactive problem.)
	You may recall that an array A is a mountain array if and only if:
	* A.length >= 3
	* There exists some i with 0 < i < A.length - 1 such that:
	  * A[0] < A[1] < ... A[i-1] < A[i]
	  * A[i] > A[i+1] > ... > A[A.length - 1]
	Given a mountain array mountainArr, return the minimum index such that 
	mountainArr.get(index) == target.  If such an index doesn't exist, return 
	-1. You can't access the mountain array directly.  You may only access the 
	array using a MountainArray interface:
	* MountainArray.get(k) returns the element of the array at index k (0-
	  indexed).
	* MountainArray.length() returns the length of the array.
	Submissions making more than 100 calls to MountainArray.get will be judged 
	Wrong Answer.  Also, any solutions that attempt to circumvent the judge 
	will result in disqualification.

	Example 1:
	Input: array = [1,2,3,4,5,3,1], target = 3
	Output: 2
	Explanation: 3 exists in the array, at index=2 and index=5. Return the 
	             minimum index, which is 2.
	
	Example 2:
	Input: array = [0,1,2,4,2,1], target = 3
	Output: -1
	Explanation: 3 does not exist in the array, so we return -1.

	Constraints:
	* 3 <= mountain_arr.length() <= 10000
	* 0 <= target <= 10^9
	* 0 <= mountain_arr.get(index) <= 10^9"""

    def findInMountainArray(self, target: int, mountain_arr: 'MountainArray') -> int:
        
        def fn(lo, hi, mult): 
            """Return index of target between lo (inclusive) and hi (exlusive)."""
            while lo < hi: 
                mid = lo + hi >> 1
                if mountain_arr.get(mid) == target: return mid 
                elif mountain_arr.get(mid)*mult < target*mult: lo = mid + 1
                else: hi = mid 
            return -1 
        
        lo, hi = 0, mountain_arr.length()
        while lo < hi: 
            mid = lo + hi >> 1
            if mid and mountain_arr.get(mid-1) < mountain_arr.get(mid): lo = mid + 1
            else: hi = mid 
        if (x := fn(0, lo, 1)) != -1: return x 
        if (x := fn(lo, mountain_arr.length(), -1)) != -1: return x 
        return -1 

    
    """1096. Brace Expansion II (Hard)
	Under a grammar given below, strings can represent a set of lowercase words.  
	Let's use R(expr) to denote the set of words the expression represents. 
	Grammar can best be understood through simple examples:
	* Single letters represent a singleton set containing that word.
	  + R("a") = {"a"}
	  + R("w") = {"w"}
	* When we take a comma delimited list of 2 or more expressions, we take the 
	  union of possibilities.
	  + R("{a,b,c}") = {"a","b","c"}
	  + R("{{a,b},{b,c}}") = {"a","b","c"} (notice the final set only contains 
	    each word at most once)
	* When we concatenate two expressions, we take the set of possible 
	  concatenations between two words where the first word comes from the 
	  first expression and the second word comes from the second expression.
	  + R("{a,b}{c,d}") = {"ac","ad","bc","bd"}
	  + R("a{b,c}{d,e}f{g,h}") = {"abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"}
	Formally, the 3 rules for our grammar:
	* For every lowercase letter x, we have R(x) = {x}
	* For expressions e_1, e_2, ... , e_k with k >= 2, we have 
	  R({e_1,e_2,...}) = R(e_1) ∪ R(e_2) ∪ ...
	* For expressions e_1 and e_2, we have R(e_1 + e_2) = {a + b for (a, b) in R(e_1) × R(e_2)}, 
	  where + denotes concatenation, and × denotes the cartesian product.
	Given an expression representing a set of words under the given grammar, 
	return the sorted list of words that the expression represents.

	Example 1:
	Input: "{a,b}{c,{d,e}}"
	Output: ["ac","ad","ae","bc","bd","be"]

	Example 2:
	Input: "{{a,z},a{b,c},{ab,z}}"
	Output: ["a","ab","ac","z"]
	Explanation: Each distinct word is written only once in the final answer.

	Constraints:
	* 1 <= expression.length <= 60
	* expression[i] consists of '{', '}', ','or lowercase English letters.
	* The given expression represents a set of words based on the grammar given 
	  in the description."""

    def braceExpansionII(self, expression: str) -> List[str]:
        mp, stack = {}, []
        for i, x in enumerate(expression): 
            if x == "{": stack.append(i)
            elif x == "}": mp[stack.pop()] = i 
        
        def fn(lo, hi): 
            """Return expanded outcome of expression[lo:hi]."""
            ans = [[""]]
            if lo+1 < hi: 
                i = lo
                while i < hi: 
                    if expression[i] == ",": ans.append([""])
                    else: 
                        if expression[i] == "{": 
                            y = fn(i+1, mp[i])
                            i = mp[i]
                        else: y = expression[i]
                        ans.append([xx+yy for xx in ans.pop() for yy in y])
                    i += 1
            return sorted({xx for x in ans for xx in x}) 
        
        return fn(0, len(expression))


    """1099. Two Sum Less Than K (Easy)
	Given an array nums of integers and integer k, return the maximum sum such 
	that there exists i < j with nums[i] + nums[j] = sum and sum < k. If no i, 
	j exist satisfying this equation, return -1.

	Example 1:
	Input: nums = [34,23,1,24,75,33,54,8], k = 60
	Output: 58
	Explanation: We can use 34 and 24 to sum 58 which is less than 60.

	Example 2:
	Input: nums = [10,20,30], k = 15
	Output: -1
	Explanation: In this case it is not possible to get a pair sum less that 15.

	Constraints:
	* 1 <= nums.length <= 100
	* 1 <= nums[i] <= 1000
	* 1 <= k <= 2000"""

    def twoSumLessThanK(self, nums: List[int], k: int) -> int:
        nums.sort()
        ans = -1
        lo, hi = 0, len(nums)-1
        while lo < hi: 
            val = nums[lo] + nums[hi]
            if val >= k: hi -= 1
            else: 
                ans = max(ans, val)
                lo += 1
        return ans


    """1100. Find K-Length Substrings With No Repeated Characters (Medium)
	Given a string s and an integer k, return the number of substrings in s of 
	length k with no repeated characters.

	Example 1:
	Input: s = "havefunonleetcode", k = 5
	Output: 6
	Explanation: There are 6 substrings they are: 'havef','avefu','vefun',
	             'efuno','etcod','tcode'.
	
	Example 2:
	Input: s = "home", k = 5
	Output: 0
	Explanation: Notice k can be larger than the length of s. In this case, it 
	             is not possible to find any substring.

	Constraints:
	* 1 <= s.length <= 10^4
	* s consists of lowercase English letters.
	* 1 <= k <= 10^4"""

    def numKLenSubstrNoRepeats(self, s: str, k: int) -> int:
        ans = 0 
        freq = {}
        for i, c in enumerate(s): 
            freq[c] = 1 + freq.get(c, 0)
            if i >= k: 
                freq[s[i-k]] -= 1
                if freq[s[i-k]] == 0: freq.pop(s[i-k])
            if i+1 >= k and len(freq) == k: ans += 1
        return ans 


    """1101. The Earliest Moment When Everyone Become Friends (Medium)
	There are n people in a social group labeled from 0 to n - 1. You are given 
	an array logs where logs[i] = [timestampi, xi, yi] indicates that xi and yi 
	will be friends at the time timestampi. Friendship is symmetric. That means 
	if a is friends with b, then b is friends with a. Also, person a is 
	acquainted with a person b if a is friends with b, or a is a friend of 
	someone acquainted with b. Return the earliest time for which every person 
	became acquainted with every other person. If there is no such earliest 
	time, return -1.

	Example 1:
	Input: logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],
	               [20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], 
	               n = 6
	Output: 20190301
	Explanation: 
	The first event occurs at timestamp = 20190101 and after 0 and 1 become friends we have the following friendship groups [0,1], [2], [3], [4], [5].
	The second event occurs at timestamp = 20190104 and after 3 and 4 become friends we have the following friendship groups [0,1], [2], [3,4], [5].
	The third event occurs at timestamp = 20190107 and after 2 and 3 become friends we have the following friendship groups [0,1], [2,3,4], [5].
	The fourth event occurs at timestamp = 20190211 and after 1 and 5 become friends we have the following friendship groups [0,1,5], [2,3,4].
	The fifth event occurs at timestamp = 20190224 and as 2 and 4 are already friends anything happens.
	The sixth event occurs at timestamp = 20190301 and after 0 and 3 become friends we have that all become friends.
	
	Example 2:
	Input: logs = [[0,2,0],[1,0,1],[3,0,3],[4,1,2],[7,3,1]], n = 4
	Output: 3

	Constraints:
	* 2 <= n <= 100
	* 1 <= logs.length <= 10^4
	* logs[i].length == 3
	* 0 <= timestampi <= 10^9
	* 0 <= xi, yi <= n - 1
	* xi != yi
	* All the values timestampi are unique.
	* All the pairs (xi, yi) occur at most one time in the input.

class UnionFind: 
    
    def __init__(self, n): 
        self.parent = list(range(n))
        self.rank = [1] * n
        
    def find(self, p): 
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    
    def union(self, p, q): 
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True"""
        
    def earliestAcq(self, logs: List[List[int]], n: int) -> int:
        uf = UnionFind(n)
        for t, u, v in sorted(logs): 
            if uf.union(u, v): n -= 1
            if n == 1: return t
        return -1 


    """1102. Path With Maximum Minimum Value (Medium)
	Given an m x n integer matrix grid, return the maximum score of a path 
	starting at (0, 0) and ending at (m - 1, n - 1) moving in the 4 cardinal 
	directions. The score of a path is the minimum value in that path. For 
	example, the score of the path 8 → 4 → 5 → 9 is 4.

	Example 1:
	Input: grid = [[5,4,5],
	               [1,2,6],
	               [7,4,6]]
	Output: 4
	Explanation: The path with the maximum score is highlighted in yellow. 

	Example 2:
	Input: grid = [[2,2,1,2,2,2],
	               [1,2,2,2,1,2]]
	Output: 2

	Example 3:
	Input: grid = [[3,4,6,3,4],
	               [0,2,1,1,7],
	               [8,8,3,2,7],
	               [3,2,4,9,8],
	               [4,1,2,0,0],
	               [4,6,5,4,3]]
	Output: 3

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 100
	* 0 <= grid[i][j] <= 10^9"""

    def maximumMinimumPath(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        pq = [(-grid[0][0], 0, 0)]
        grid[0][0] = -1 # mark as visited 
        while pq: 
            v, i, j = heappop(pq)
            if i == m-1 and j == n-1: return -v
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < m and 0 <= jj < n and 0 <= grid[ii][jj]: 
                    vv = min(-v, grid[ii][jj])
                    heappush(pq, (-vv, ii, jj))
                    grid[ii][jj] = -1


    """1103. Distribute Candies to People (Easy)
	We distribute some number of candies, to a row of n = num_people people in 
	the following way: 
	We then give 1 candy to the first person, 2 candies to the second person, 
	and so on until we give n candies to the last person. Then, we go back to 
	the start of the row, giving n + 1 candies to the first person, n + 2 
	candies to the second person, and so on until we give 2 * n candies to the 
	last person. This process repeats (with us giving one more candy each time, 
	and moving to the start of the row after we reach the end) until we run out 
	of candies.  The last person will receive all of our remaining candies (not 
	necessarily one more than the previous gift). Return an array (of length 
	num_people and sum candies) that represents the final distribution of 
	candies.

	Example 1:
	Input: candies = 7, num_people = 4
	Output: [1,2,3,1]
	Explanation:
	On the first turn, ans[0] += 1, and the array is [1,0,0,0].
	On the second turn, ans[1] += 2, and the array is [1,2,0,0].
	On the third turn, ans[2] += 3, and the array is [1,2,3,0].
	On the fourth turn, ans[3] += 1 (because there is only one candy left), and 
	the final array is [1,2,3,1].

	Example 2:
	Input: candies = 10, num_people = 3
	Output: [5,2,3]
	Explanation: 
	On the first turn, ans[0] += 1, and the array is [1,0,0].
	On the second turn, ans[1] += 2, and the array is [1,2,0].
	On the third turn, ans[2] += 3, and the array is [1,2,3].
	On the fourth turn, ans[0] += 4, and the final array is [5,2,3].

	Constraints:
	* 1 <= candies <= 10^9
	* 1 <= num_people <= 1000"""

    def distributeCandies(self, candies: int, num_people: int) -> List[int]:
        ans = [0]*num_people
        i = 0
        while candies > 0: 
            i += 1
            ans[(i-1)%num_people] += min(i, candies)
            candies -= i
        return ans 


    """1104. Path In Zigzag Labelled Binary Tree (Medium)
	In an infinite binary tree where every node has two children, the nodes are 
	labelled in row order. In the odd numbered rows (ie., the first, third, 
	fifth,...), the labelling is left to right, while in the even numbered rows 
	(second, fourth, sixth,...), the labelling is right to left. Given the 
	label of a node in this tree, return the labels in the path from the root 
	of the tree to the node with that label.

	Example 1:
	Input: label = 14
	Output: [1,3,4,14]

	Example 2:
	Input: label = 26
	Output: [1,2,6,10,26]

	Constraints: 1 <= label <= 10^6"""

    def pathInZigZagTree(self, label: int) -> List[int]:
        level = int(log2(label))
        compl = 3*2**level - 1 - label # complement 
        
        ans = []
        while label: 
            ans.append(label)
            label //= 2
            compl //= 2
            label, compl = compl, label
        return ans[::-1]


    """1105. Filling Bookcase Shelves (Medium)
	We have a sequence of books: the i-th book has thickness books[i][0] and 
	height books[i][1]. We want to place these books in order onto bookcase 
	shelves that have total width shelf_width. We choose some of the books to 
	place on this shelf (such that the sum of their thickness is <= shelf_width), 
	then build another level of shelf of the bookcase so that the total height 
	of the bookcase has increased by the maximum height of the books we just 
	put down.  We repeat this process until there are no more books to place. 
	Note again that at each step of the above process, the order of the books 
	we place is the same order as the given sequence of books.  For example, if 
	we have an ordered list of 5 books, we might place the first and second 
	book onto the first shelf, the third book on the second shelf, and the 
	fourth and fifth book on the last shelf. Return the minimum possible height 
	that the total bookshelf can be after placing shelves in this manner.

	Example 1:
	Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4
	Output: 6
	Explanation: The sum of the heights of the 3 shelves are 1 + 3 + 2 = 6.
	             Notice that book number 2 does not have to be on the first 
	             shelf.

	Constraints:
	* 1 <= books.length <= 1000
	* 1 <= books[i][0] <= shelf_width <= 1000
	* 1 <= books[i][1] <= 1000"""

    def minHeightShelves(self, books: List[List[int]], shelf_width: int) -> int:
        
        @cache
        def fn(i):
            """Return minimum height of stacking books[i:]."""
            if i == len(books): return 0
            ans = inf
            w = h = 0
            for j in range(i, len(books)):
                if (w := w+books[j][0]) > shelf_width: return ans 
                h = max(h, books[j][1])
                ans = min(ans, h + fn(j+1))
            return ans 
            
        return fn(0)


    """1106. Parsing A Boolean Expression (Hard)
	Return the result of evaluating a given boolean expression, represented as 
	a string. An expression can either be:
	* "t", evaluating to True;
	* "f", evaluating to False;
	* "!(expr)", evaluating to the logical NOT of the inner expression expr;
	* "&(expr1,expr2,...)", evaluating to the logical AND of 2 or more inner expressions expr1, expr2, ...;
	* "|(expr1,expr2,...)", evaluating to the logical OR of 2 or more inner expressions expr1, expr2, ...

	Example 1:
	Input: expression = "!(f)"
	Output: true

	Example 2:
	Input: expression = "|(f,t)"
	Output: true

	Example 3:
	Input: expression = "&(t,f)"
	Output: false

	Example 4:
	Input: expression = "|(&(t,f,t),!(t))"
	Output: false

	Constraints:
	* 1 <= expression.length <= 20000
	* expression[i] consists of characters in {'(', ')', '&', '|', '!', 't', 'f', ','}.
	* expression is a valid expression representing a boolean, as given in the description."""

    def parseBoolExpr(self, expression: str) -> bool:
        t = f = 0 
        operators, operands = [], []
        for x in expression: 
            if x in "!&|": # operator 
                operators.append(x)
                operands.append([t, f])
                t = f = 0 
            elif x == "t": t += 1
            elif x == "f": f += 1
            elif x == ")": 
                op = operators.pop()
                if op == "!" and t or op == "&" and f or op == "|" and not t: t, f = 0, 1
                else: t, f = 1, 0
                tt, ff = operands.pop()
                t, f = t+tt, f+ff
        return t


    """1111. Maximum Nesting Depth of Two Valid Parentheses Strings (Medium)
	A string is a valid parentheses string (denoted VPS) if and only if it 
	consists of "(" and ")" characters only, and:
	* It is the empty string, or
	* It can be written as AB (A concatenated with B), where A and B are VPS's, 
	  or
	* It can be written as (A), where A is a VPS.
	We can similarly define the nesting depth depth(S) of any VPS S as follows:
	* depth("") = 0
	* depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's
	* depth("(" + A + ")") = 1 + depth(A), where A is a VPS.
	For example,  "", "()()", and "()(()())" are VPS's (with nesting depths 0, 
	1, and 2), and ")(" and "(()" are not VPS's. Given a VPS seq, split it into 
	two disjoint subsequences A and B, such that A and B are VPS's (and 
	A.length + B.length = seq.length). Now choose any such A and B such that 
	max(depth(A), depth(B)) is the minimum possible value. Return an answer 
	array (of length seq.length) that encodes such a choice of A and B:  
	answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.  Note that even 
	though multiple answers may exist, you may return any of them.

	Example 1:
	Input: seq = "(()())"
	Output: [0,1,1,1,1,0]

	Example 2:
	Input: seq = "()(())()"
	Output: [0,0,0,1,1,0,1,1]

	Constraints: 1 <= seq.size <= 10000"""

    def maxDepthAfterSplit(self, seq: str) -> List[int]:
        ans, depth = [], 0
        for i, x in enumerate(seq): 
            if x == "(": depth += 1
            ans.append(depth & 1)
            if x == ")": depth -= 1
        return ans 


    """1118. Number of Days in a Month (Easy)
	Given a year Y and a month M, return how many days there are in that month.

	Example 1:
	Input: Y = 1992, M = 7
	Output: 31

	Example 2:
	Input: Y = 2000, M = 2
	Output: 29

	Example 3:
	Input: Y = 1900, M = 2
	Output: 28

	Note:
	* 1583 <= Y <= 2100
	* 1 <= M <= 12"""

    def numberOfDays(self, Y: int, M: int) -> int:
        days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        return days[M-1] + (M == 2 and (Y%4 == 0 and Y%100 != 0 or Y%400 == 0))


    """1119. Remove Vowels from a String (Easy)
	Given a string s, remove the vowels 'a', 'e', 'i', 'o', and 'u' from it, 
	and return the new string.

	Example 1:
	Input: s = "leetcodeisacommunityforcoders"
	Output: "ltcdscmmntyfrcdrs"

	Example 2:
	Input: s = "aeiou"
	Output: ""

	Constraints:
	* 1 <= s.length <= 1000
	* s consists of only lowercase English letters."""

    def removeVowels(self, S: str) -> str:
        return "".join(c for c in S if c not in "aeiou")


    """1120. Maximum Average Subtree (Medium)
	Given the root of a binary tree, find the maximum average value of any 
	subtree of that tree. (A subtree of a tree is any node of that tree plus 
	all its descendants. The average value of a tree is the sum of its values, 
	divided by the number of nodes.)

	Example 1:
	Input: [5,6,1]
	Output: 6.00000
	Explanation: 
	For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.
	For the node with value = 6 we have an average of 6 / 1 = 6.
	For the node with value = 1 we have an average of 1 / 1 = 1.
	So the answer is 6 which is the maximum.

	Note:
	* The number of nodes in the tree is between 1 and 5000.
	* Each node will have a value between 0 and 100000.
	* Answers will be accepted as correct if they are within 10^-5 of the 
	  correct answer."""

    def maximumAverageSubtree(self, root: Optional[TreeNode]) -> float:
        ans = 0 
        sm, cnt = {None: 0}, {None: 0}
        node, stack = root, []
        prev = None
        while node or stack: 
            if node: 
                stack.append(node)
                node = node.left
            else: 
                node = stack[-1]
                if node.right and node.right != prev: node = node.right
                else: 
                    sm[node] = node.val + sm[node.left] + sm[node.right]
                    cnt[node] = 1 + cnt[node.left] + cnt[node.right]
                    ans = max(ans, sm[node]/cnt[node])
                    stack.pop()
                    prev = node 
                    node = None
        return ans 


    """1125. Smallest Sufficient Team (Hard)
	In a project, you have a list of required skills req_skills, and a list of 
	people. The ith person people[i] contains a list of skills that the person 
	has. Consider a sufficient team: a set of people such that for every 
	required skill in req_skills, there is at least one person in the team who 
	has that skill. We can represent these teams by the index of each person. 
	For example, team = [0, 1, 3] represents the people with skills people[0], 
	people[1], and people[3]. Return any sufficient team of the smallest 
	possible size, represented by the index of each person. You may return the 
	answer in any order. It is guaranteed an answer exists.

	Example 1:
	Input: req_skills = ["java","nodejs","reactjs"], 
	       people = [["java"],["nodejs"],["nodejs","reactjs"]]
	Output: [0,2]

	Example 2:
	Input: req_skills = ["algorithms","math","java","reactjs","csharp","aws"], 
	       people = [["algorithms","math","java"],
	                 ["algorithms","math","reactjs"],
	                 ["java","csharp","aws"],
	                 ["reactjs","csharp"],
	                 ["csharp","math"],
	                 ["aws","java"]]
	Output: [1,2]

	Constraints:
	* 1 <= req_skills.length <= 16
	* 1 <= req_skills[i].length <= 16
	* req_skills[i] consists of lowercase English letters.
	* All the strings of req_skills are unique.
	* 1 <= people.length <= 60
	* 0 <= people[i].length <= 16
	* 1 <= people[i][j].length <= 16
	* people[i][j] consists of lowercase English letters.
	* All the strings of people[i] are unique.
	* Every skill in people[i] is a skill in req_skills.
	* It is guaranteed a sufficient team exists."""

    def smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -> List[int]:
        mp = {skill : i for i, skill in enumerate(req_skills)} # digitized skills
        
        cand = []
        for skills in people: 
            val = 0
            for skill in skills: 
                val |= 1 << mp[skill] # digitized skill
            cand.append(val)
        
        @cache
        def fn(i, mask): 
            """Return smallest sufficient team of people[i:] for skills in mask."""
            if mask == 0: return []
            if i == len(people): return [0]*100 # impossible
            if not (mask & cand[i]): return fn(i+1, mask)
            return min(fn(i+1, mask), [i] + fn(i+1, mask & ~cand[i]), key=len)
        
        return fn(0, (1 << len(req_skills)) - 1)


    """1128. Number of Equivalent Domino Pairs (Easy)
	Given a list of dominoes, dominoes[i] = [a, b] is equivalent to 
	dominoes[j] = [c, d] if and only if either (a==c and b==d), or 
	(a==d and b==c) - that is, one domino can be rotated to be equal to another 
	domino. Return the number of pairs (i, j) for which 
	0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].

	Example 1:
	Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
	Output: 1

	Constraints:
	* 1 <= dominoes.length <= 40000
	* 1 <= dominoes[i][j] <= 9"""

    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        ans = 0 
        freq = defaultdict(int)
        for x, y in dominoes: 
            ans += freq[x, y]
            if x != y: ans += freq[y, x]
            freq[x, y] += 1
        return ans 


    """1129. Shortest Path with Alternating Colors (Medium)
	Consider a directed graph, with nodes labelled 0, 1, ..., n-1. In this 
	graph, each edge is either red or blue, and there could be self-edges or 
	parallel edges. Each [i, j] in red_edges denotes a red directed edge from 
	node i to node j.  Similarly, each [i, j] in blue_edges denotes a blue 
	directed edge from node i to node j. Return an array answer of length n, 
	where each answer[X] is the length of the shortest path from node 0 to node 
	X such that the edge colors alternate along the path (or -1 if such a path 
	doesn't exist).

	Example 1:
	Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
	Output: [0,1,-1]

	Example 2:
	Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
	Output: [0,1,-1]

	Example 3:
	Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
	Output: [0,-1,-1]

	Example 4:
	Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
	Output: [0,1,2]

	Example 5:
	Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
	Output: [0,1,1]

	Constraints:
	* 1 <= n <= 100
	* red_edges.length <= 400
	* blue_edges.length <= 400
	* red_edges[i].length == blue_edges[i].length == 2
	* 0 <= red_edges[i][j], blue_edges[i][j] < n"""

    def shortestAlternatingPaths(self, n: int, red_edges: List[List[int]], blue_edges: List[List[int]]) -> List[int]:
        graph = {}
        for u, v in red_edges: graph.setdefault(u, []).append((v, 0))
        for u, v in blue_edges: graph.setdefault(u, []).append((v, 1))
        
        queue = [(0, -1)]
        dist = [[inf]*2 for _ in range(n)]
        k = 0 
        while queue: 
            newq = []
            for n, c in queue: 
                if dist[n][c] > k: 
                    dist[n][c] = k 
                    for nn, cc in graph.get(n, []): 
                        if cc != c: newq.append((nn, cc))
            queue = newq 
            k += 1
        return [x if x < inf else -1 for x in map(min, dist)]


    """1130. Minimum Cost Tree From Leaf Values (Medium)
	Given an array arr of positive integers, consider all binary trees such 
	that:
	* Each node has either 0 or 2 children;
	* The values of arr correspond to the values of each leaf in an in-order 
	  traversal of the tree.  (Recall that a node is a leaf if and only if it 
	  has 0 children.)
	* The value of each non-leaf node is equal to the product of the largest 
	  leaf value in its left and right subtree respectively.
	Among all possible binary trees considered, return the smallest possible 
	sum of the values of each non-leaf node.  It is guaranteed this sum fits 
	into a 32-bit integer.

	Example 1:
	Input: arr = [6,2,4]
	Output: 32
	Explanation: There are two possible trees. The first has non-leaf node sum 
	             36, and the second has non-leaf node sum 32.

	    24            24
	   /  \          /  \
	  12   4        6    8
	 /  \               / \
	6    2             2   4

	Constraints:
	* 2 <= arr.length <= 40
	* 1 <= arr[i] <= 15
	* It is guaranteed that the answer fits into a 32-bit signed integer (ie. 
	  it is less than 2^31)."""

    def mctFromLeafValues(self, arr: List[int]) -> int:
        ans = 0 
        stack = []
        for x in arr: 
            while stack and stack[-1] <= x: 
                val = stack.pop()
                ans += val * min(stack[-1] if stack else inf, x)
            stack.append(x)
        return ans + sum(stack[i-1]*stack[i] for i in range(1, len(stack)))


    """1131. Maximum of Absolute Value Expression (Medium)
	Given two arrays of integers with equal lengths, return the maximum value 
	of:
	|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|
	where the maximum is taken over all 0 <= i, j < arr1.length.

	Example 1:
	Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]
	Output: 13

	Example 2:
	Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]
	Output: 20

	Constraints:
	* 2 <= arr1.length == arr2.length <= 40000
	* -10^6 <= arr1[i], arr2[i] <= 10^6"""

    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:
        ans = 0
        for p, q in (1, 1), (1, -1), (-1, 1), (-1, -1): 
            val = low = inf 
            for i, (x, y) in enumerate(zip(arr1, arr2)): 
                ans = max(ans, p*x + q*y + i - low)
                low = min(low, p*x + q*y + i)
        return ans 


    """1133. Largest Unique Number (Easy)
	Given an array of integers A, return the largest integer that only occurs 
	once. If no integer occurs once, return -1.

	Example 1:
	Input: [5,7,3,9,4,9,8,3,1]
	Output: 8
	Explanation: The maximum integer in the array is 9 but it is repeated. The 
	             number 8 occurs only once, so it's the answer.
	
	Example 2:
	Input: [9,9,8,8]
	Output: -1
	Explanation: There is no number that occurs only once.

	Note:
	* 1 <= A.length <= 2000
	* 0 <= A[i] <= 1000"""

    def largestUniqueNumber(self, A: List[int]) -> int:
        freq = {}
        for x in A: freq[x] = 1 + freq.get(x, 0)
        return max((x for x, v in freq.items() if v == 1), default=-1)


    """1134. Armstrong Number (Easy)
	The k-digit number N is an Armstrong number if and only if the k-th power 
	of each digit sums to N. Given a positive integer N, return true if and 
	only if it is an Armstrong number.

	Example 1:
	Input: 153
	Output: true
	Explanation: 153 is a 3-digit number, and 153 = 1^3 + 5^3 + 3^3.
	
	Example 2:
	Input: 123
	Output: false
	Explanation: 123 is a 3-digit number, and 123 != 1^3 + 2^3 + 3^3 = 36.

	Note: 1 <= N <= 10^8"""

    def isArmstrong(self, N: int) -> bool:
        s = str(N)
        return sum(int(x)**len(s) for x in s) == N


    """1135. Connecting Cities With Minimum Cost (Medium)
	There are n cities labeled from 1 to n. You are given the integer n and an 
	array connections where connections[i] = [xi, yi, costi] indicates that the 
	cost of connecting city xi and city yi (bidirectional connection) is costi.
	Return the minimum cost to connect all the n cities such that there is at 
	least one path between each pair of cities. If it is impossible to connect 
	all the n cities, return -1, The cost is the sum of the connections' costs 
	used.

	Example 1:
	Input: n = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
	Output: 6
	Explanation: Choosing any 2 edges will connect all cities so we choose the 
	             minimum 2.

	Example 2:
	Input: n = 4, connections = [[1,2,3],[3,4,4]]
	Output: -1
	Explanation: There is no way to connect all cities even if all edges are 
	             used.

	Constraints:
	* 1 <= n <= 10^4
	* 1 <= connections.length <= 10^4
	* connections[i].length == 3
	* 1 <= xi, yi <= n
	* xi != yi
	* 0 <= costi <= 10^5

class UnionFind: 
    
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1] * n
        
    def find(self, p): 
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q): 
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True"""

    def minimumCost(self, n: int, connections: List[List[int]]) -> int:
        ans = 0 
        uf = UnionFind(n)
        for x, y, cost in sorted(connections, key=lambda x: x[2]): 
            if uf.union(x-1, y-1): 
                ans += cost
                n -= 1
            if n == 1: break
        return ans if n == 1 else -1 


    """1136. Parallel Courses (Medium)
	You are given an integer n, which indicates that there are n courses 
	labeled from 1 to n. You are also given an array relations where 
	relations[i] = [prevCoursei, nextCoursei], representing a prerequisite 
	relationship between course prevCoursei and course nextCoursei: course 
	prevCoursei has to be taken before course nextCoursei. In one semester, you 
	can take any number of courses as long as you have taken all the 
	prerequisites in the previous semester for the courses you are taking.
	Return the minimum number of semesters needed to take all courses. If there 
	is no way to take all the courses, return -1.

	Example 1:
	Input: n = 3, relations = [[1,3],[2,3]]
	Output: 2
	Explanation: The figure above represents the given graph. In the first 
	             semester, you can take courses 1 and 2. In the second semester, 
	             you can take course 3.
	
	Example 2:
	Input: n = 3, relations = [[1,2],[2,3],[3,1]]
	Output: -1
	Explanation: No course can be studied because they are prerequisites of 
	             each other.

	Constraints:
	* 1 <= n <= 5000
	* 1 <= relations.length <= 5000
	* relations[i].length == 2
	* 1 <= prevCoursei, nextCoursei <= n
	* prevCoursei != nextCoursei
	* All the pairs [prevCoursei, nextCoursei] are unique."""

    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:
        graph = {}
        indeg = [0]*n
        for u, v in relations: 
            graph.setdefault(u-1, []).append(v-1)
            indeg[v-1] += 1
        
        ans = 0
        queue = [x for x in range(n) if not indeg[x]]
        while queue: 
            ans += 1
            newq = []
            for x in queue: 
                for xx in graph.get(x, []): 
                    indeg[xx] -= 1
                    if not indeg[xx]: newq.append(xx)
            queue = newq
        return -1 if any(indeg) else ans


    """1137. N-th Tribonacci Number (Easy)
	The Tribonacci sequence Tn is defined as follows: 
	* T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.
	Given n, return the value of Tn.

	Example 1:
	Input: n = 4
	Output: 4
	Explanation: T_3 = 0 + 1 + 1 = 2
	             T_4 = 1 + 1 + 2 = 4

	Example 2:
	Input: n = 25
	Output: 1389537

	Constraints:
	* 0 <= n <= 37
	* The answer is guaranteed to fit within a 32-bit integer, ie. 
	  answer <= 2^31 - 1."""

    def tribonacci(self, n: int) -> int:
        t0, t1, t2 = 0, 1, 1
        for i in range(n): 
            t0, t1, t2 = t1, t2, t0+t1+t2
        return t0


    """1138. Alphabet Board Path (Medium)
	On an alphabet board, we start at position (0, 0), corresponding to 
	character board[0][0]. Here, 
	board = ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"], as shown in the 
	diagram below. We may make the following moves:
	* 'U' moves our position up one row, if the position exists on the board;
	* 'D' moves our position down one row, if the position exists on the board;
	* 'L' moves our position left one column, if the position exists on the board;
	* 'R' moves our position right one column, if the position exists on the board;
	* '!' adds the character board[r][c] at our current position (r, c) to the answer.
	(Here, the only positions that exist on the board are positions with letters on them.)
	Return a sequence of moves that makes our answer equal to target in the 
	minimum number of moves.  You may return any path that does so.

	Example 1:
	Input: target = "leet"
	Output: "DDR!UURRR!!DDD!"

	Example 2:
	Input: target = "code"
	Output: "RR!DDRR!UUL!R!"

	Constraints:
	* 1 <= target.length <= 100
	* target consists only of English lowercase letters."""

    def alphabetBoardPath(self, target: str) -> str:
        ans = []
        x = y = 0
        for c in target:
            xx, yy = divmod(ord(c)-97, 5)
            if x > xx: ans.append((x-xx)*"U")
            if y > yy: ans.append((y-yy)*"L")
            if x < xx: ans.append((xx-x)*"D")
            if y < yy: ans.append((yy-y)*"R")
            ans.append("!")
            x, y = xx, yy
        return "".join(ans)


    """1139. Largest 1-Bordered Square (Medium)
	Given a 2D grid of 0s and 1s, return the number of elements in the largest 
	square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't 
	exist in the grid.

	Example 1:
	Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
	Output: 9

	Example 2:
	Input: grid = [[1,1,0,0]]
	Output: 1

	Constraints:
	* 1 <= grid.length <= 100
	* 1 <= grid[0].length <= 100
	* grid[i][j] is 0 or 1"""

    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0]) # dimensions 
        
        hori = deepcopy(grid)
        vert = deepcopy(grid)
        for i in range(m):
            for j in range(n): 
                if grid[i][j]: 
                    if j: hori[i][j] += hori[i][j-1] # horizontal precipitation
                    if i: vert[i][j] += vert[i-1][j] # vertical precipitation 
        
        ans = 0
        for i in reversed(range(m)):
            for j in reversed(range(n)): 
                val = min(hori[i][j], vert[i][j])
                while val > ans: 
                    if vert[i][j-val+1] >= val and hori[i-val+1][j] >= val: 
                        ans = val 
                    val -= 1
        return ans*ans


    """1140. Stone Game II (Medium)
	Alice and Bob continue their games with piles of stones. There are a number 
	of piles arranged in a row, and each pile has a positive integer number of 
	stones piles[i].  The objective of the game is to end with the most stones. 
	Alice and Bob take turns, with Alice starting first.  Initially, M = 1. On 
	each player's turn, that player can take all the stones in the first X 
	remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X). The game 
	continues until all the stones have been taken. Assuming Alice and Bob play 
	optimally, return the maximum number of stones Alice can get.

	Example 1:
	Input: piles = [2,7,9,4,4]
	Output: 10
	Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, 
	              then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 
	              piles in total. If Alice takes two piles at the beginning, 
	              then Bob can take all three piles left. In this case, Alice 
	              get 2 + 7 = 9 piles in total. So we return 10 since it's 
	              larger. 

	Example 2:
	Input: piles = [1,2,3,4,5,100]
	Output: 104

	Constraints:
	* 1 <= piles.length <= 100
	* 1 <= piles[i] <= 10^4"""

    def stoneGameII(self, piles: List[int]) -> int:
        prefix = [0]
        for x in piles: prefix.append(prefix[-1] + x)
            
        @cache
        def fn(i, m):
            """Return the net stones one could get at position i with m."""
            if i + 2*m >= len(piles): return prefix[-1] - prefix[i]
            ans = -inf 
            for ii in range(1, 2*m+1): 
                if i+ii < len(prefix): 
                    ans = max(ans, prefix[i+ii] - prefix[i] - fn(i+ii, max(m, ii)))
            return ans 
        
        return (fn(0, 1) + sum(piles))//2


    """1143. Longest Common Subsequence (Medium)
	Given two strings text1 and text2, return the length of their longest 
	common subsequence. If there is no common subsequence, return 0. A 
	subsequence of a string is a new string generated from the original string 
	with some characters (can be none) deleted without changing the relative 
	order of the remaining characters. For example, "ace" is a subsequence of 
	"abcde". A common subsequence of two strings is a subsequence that is 
	common to both strings.

	Example 1:
	Input: text1 = "abcde", text2 = "ace" 
	Output: 3  
	Explanation: The longest common subsequence is "ace" and its length is 3.

	Example 2:
	Input: text1 = "abc", text2 = "abc"
	Output: 3
	Explanation: The longest common subsequence is "abc" and its length is 3.

	Example 3:
	Input: text1 = "abc", text2 = "def"
	Output: 0
	Explanation: There is no such common subsequence, so the result is 0.

	Constraints:
	* 1 <= text1.length, text2.length <= 1000
	* text1 and text2 consist of only lowercase English characters."""

    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m, n = len(text1), len(text2)
        dp = [0]*(n+1)
        for i in reversed(range(m)):
            prev = curr = 0
            for j in reversed(range(n)):
                curr = dp[j]
                if text1[i] == text2[j]: dp[j] = 1 + prev
                else: dp[j] = max(dp[j], dp[j+1])
                prev = curr 
        return dp[0]


    """1144. Decrease Elements To Make Array Zigzag (Medium)
	Given an array nums of integers, a move consists of choosing any element 
	and decreasing it by 1. An array A is a zigzag array if either:
	* Every even-indexed element is greater than adjacent elements, ie. 
	  A[0] > A[1] < A[2] > A[3] < A[4] > ...
	* OR, every odd-indexed element is greater than adjacent elements, ie. 
	  A[0] < A[1] > A[2] < A[3] > A[4] < ...
	Return the minimum number of moves to transform the given array nums into a 
	zigzag array.

	Example 1:
	Input: nums = [1,2,3]
	Output: 2
	Explanation: We can decrease 2 to 0 or 3 to 1.

	Example 2:
	Input: nums = [9,6,1,6,2]
	Output: 4

	Constraints:
	* 1 <= nums.length <= 1000
	* 1 <= nums[i] <= 1000"""

    def movesToMakeZigzag(self, nums: List[int]) -> int:
        ans = [0, 0] 
        for i in range(len(nums)): 
            val = 0 
            if i: val = max(val, nums[i] - nums[i-1] + 1)
            if i+1 < len(nums): val = max(val, nums[i] - nums[i+1] + 1)
            ans[i&1] += val
        return min(ans)


    """1145. Binary Tree Coloring Game (Medium)
	Two players play a turn based game on a binary tree.  We are given the root 
	of this binary tree, and the number of nodes n in the tree.  n is odd, and 
	each node has a distinct value from 1 to n. Initially, the first player 
	names a value x with 1 <= x <= n, and the second player names a value y 
	with 1 <= y <= n and y != x.  The first player colors the node with value x 
	red, and the second player colors the node with value y blue. Then, the 
	players take turns starting with the first player.  In each turn, that 
	player chooses a node of their color (red if player 1, blue if player 2) 
	and colors an uncolored neighbor of the chosen node (either the left child, 
	right child, or parent of the chosen node.) If (and only if) a player 
	cannot choose such a node in this way, they must pass their turn.  If both 
	players pass their turn, the game ends, and the winner is the player that 
	colored more nodes. You are the second player.  If it is possible to choose 
	such a y to ensure you win the game, return true.  If it is not possible, 
	return false.

	Example 1:
	Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3
	Output: true
	Explanation: The second player can choose the node with value 2.

	Constraints:
	* root is the root of a binary tree with n nodes and distinct node values 
	  from 1 to n.
	* n is odd.
	* 1 <= x <= n <= 100"""

    def btreeGameWinningMove(self, root: TreeNode, n: int, x: int) -> bool:
        
        def fn(node): 
            """Return size of subtree rooted at node."""
            if not node: return 0 
            left, right = fn(node.left), fn(node.right)
            if node.val == x: 
                cnt[0], cnt[1] = left, right
            return 1 + left + right
        
        cnt = [0, 0]
        fn(root)
        return max(max(cnt), n-1-sum(cnt)) > n//2


    """1147. Longest Chunked Palindrome Decomposition (Hard)
	You are given a string text. You should split it to k substrings 
	(subtext1, subtext2, ..., subtextk) such that:
	* subtexti is a non-empty string.
	* The concatenation of all the substrings is equal to text (i.e., 
	  subtext1 + subtext2 + ... + subtextk == text).
	* subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).
	Return the largest possible value of k.

	Example 1:
	Input: text = "ghiabcdefhelloadamhelloabcdefghi"
	Output: 7
	Explanation: We can split the string on "(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)".

	Example 2:
	Input: text = "merchant"
	Output: 1
	Explanation: We can split the string on "(merchant)".

	Example 3:
	Input: text = "antaprezatepzapreanta"
	Output: 11
	Explanation: We can split the string on "(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)".

	Example 4:
	Input: text = "aaa"
	Output: 3
	Explanation: We can split the string on "(a)(a)(a)".

	Constraints:
	* 1 <= text.length <= 1000
	* text consists only of lowercase English characters."""

    def longestDecomposition(self, text: str) -> int:
        ii = i = ans = 0
        jj = j = len(text)-1
        while i < j: 
            if text[ii:i+1] == text[j:jj+1]: 
                ans += 2
                ii, jj = i+1, j-1 # reset anchor ptr
            i, j = i+1, j-1 
        return ans + int(ii <= jj)


    """1150. Check If a Number Is Majority Element in a Sorted Array (Easy)
	Given an array nums sorted in non-decreasing order, and a number target, 
	return True if and only if target is a majority element. A majority element 
	is an element that appears more than N/2 times in an array of length N.

	Example 1:
	Input: nums = [2,4,5,5,5,5,5,6,6], target = 5
	Output: true
	Explanation: The value 5 appears 5 times and the length of the array is 9. 
	             Thus, 5 is a majority element because 5 > 9/2 is true.
	
	Example 2:
	Input: nums = [10,100,101,101], target = 101
	Output: false
	Explanation: The value 101 appears 2 times and the length of the array is 4. 
	             Thus, 101 is not a majority element because 2 > 4/2 is false.

	Constraints:
	* 1 <= nums.length <= 1000
	* 1 <= nums[i] <= 10^9
	* 1 <= target <= 10^9"""

    def isMajorityElement(self, nums: List[int], target: int) -> bool:
        if nums[(len(nums)-1)//2] != target: return False
        k = bisect_left(nums, target, 0, len(nums)//2)
        return nums[k + len(nums)//2] == target 


    """1151. Minimum Swaps to Group All 1's Together (Medium)
	Given a binary array data, return the minimum number of swaps required to 
	group all 1’s present in the array together in any place in the array.

	Example 1:
	Input: data = [1,0,1,0,1]
	Output: 1
	Explanation: There are 3 ways to group all 1's together:
	             [1,1,1,0,0] using 1 swap.
	             [0,1,1,1,0] using 2 swaps.
	             [0,0,1,1,1] using 1 swap.
	             The minimum is 1.
	
	Example 2:
	Input: data = [0,0,0,1,0]
	Output: 0
	Explanation: Since there is only one 1 in the array, no swaps needed.
	
	Example 3:
	Input: data = [1,0,1,0,1,0,0,1,1,0,1]
	Output: 3
	Explanation: One possible solution that uses 3 swaps is 
	             [0,0,0,0,0,1,1,1,1,1,1].
	
	Example 4:
	Input: data = [1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1]
	Output: 8

	Constraints:
	* 1 <= data.length <= 10^5
	* data[i] is 0 or 1."""

    def minSwaps(self, data: List[int]) -> int:
        k = sum(data) # window size 
        ans = val = 0 
        for i, x in enumerate(data): 
            val += x
            if i >= k: val -= data[i-k]
            if i+1 >= k: ans = max(ans, val)
        return k - ans


    """1152. Analyze User Website Visit Pattern (Medium)
	You are given two string arrays username and website and an integer array 
	timestamp. All the given arrays are of the same length and the tuple 
	[username[i], website[i], timestamp[i]] indicates that the user username[i] 
	visited the website website[i] at time timestamp[i]. A pattern is a list of 
	three websites (not necessarily distinct).

	* For example, ["home", "away", "love"], ["leetcode", "love", "leetcode"], 
	  and ["luffy", "luffy", "luffy"] are all patterns.
	The score of a pattern is the number of users that visited all the websites 
	in the pattern in the same order they appeared in the pattern.
	* For example, if the pattern is ["home", "away", "love"], the score is the 
	  number of users x such that x visited "home" then visited "away" and 
	  visited "love" after that.
	* Similarly, if the pattern is ["leetcode", "love", "leetcode"], the score 
	  is the number of users x such that x visited "leetcode" then visited 
	  "love" and visited "leetcode" one more time after that.
	* Also, if the pattern is ["luffy", "luffy", "luffy"], the score is the 
	  number of users x such that x visited "luffy" three different times at 
	  different timestamps.
	Return the pattern with the largest score. If there is more than one 
	pattern with the same largest score, return the lexicographically smallest 
	such pattern.

	Example 1:
	Input: username = ["joe","joe","joe","james","james","james","james","mary","mary","mary"], 
	       timestamp = [1,2,3,4,5,6,7,8,9,10], 
	       website = ["home","about","career","home","cart","maps","home","home","about","career"]
	Output: ["home","about","career"]
	Explanation: The tuples in this example are:
	["joe","home",1],["joe","about",2],["joe","career",3],["james","home",4],["james","cart",5],["james","maps",6],["james","home",7],["mary","home",8],["mary","about",9], and ["mary","career",10].
	The pattern ("home", "about", "career") has score 2 (joe and mary).
	The pattern ("home", "cart", "maps") has score 1 (james).
	The pattern ("home", "cart", "home") has score 1 (james).
	The pattern ("home", "maps", "home") has score 1 (james).
	The pattern ("cart", "maps", "home") has score 1 (james).
	The pattern ("home", "home", "home") has score 0 (no user visited home 3 times).
	
	Example 2:
	Input: username = ["ua","ua","ua","ub","ub","ub"], 
	       timestamp = [1,2,3,4,5,6], 
	       website = ["a","b","a","a","b","c"]
	Output: ["a","b","a"]

	Constraints:
	* 3 <= username.length <= 50
	* 1 <= username[i].length <= 10
	* timestamp.length == username.length
	* 1 <= timestamp[i] <= 109
	* website.length == username.length
	* 1 <= website[i].length <= 10
	* username[i] and website[i] consist of lowercase English letters.
	* It is guaranteed that there is at least one user who visited at least three websites.
	* All the tuples [username[i], timestamp[i], website[i]] are unique."""

    def mostVisitedPattern(self, username: List[str], timestamp: List[int], website: List[str]) -> List[str]:
        mp = {}
        for t, u, w in sorted(zip(timestamp, username, website)): 
            mp.setdefault(u, []).append(w)
        
        freq = defaultdict(int)
        for key, val in mp.items(): 
            seen = set()
            for i in range(len(val)):
                for j in range(i+1, len(val)):
                    for k in range(j+1, len(val)): 
                        seen.add((val[i], val[j], val[k]))
            for x in seen: freq[x] += 1
        
        return min(freq, key=lambda x: (-freq[x], x))


    """1160. Find Words That Can Be Formed by Characters (Easy)
	You are given an array of strings words and a string chars. A string is 
	good if it can be formed by characters from chars (each character can only 
	be used once). Return the sum of lengths of all good strings in words.

	Example 1:
	Input: words = ["cat","bt","hat","tree"], chars = "atach"
	Output: 6
	Explanation: The strings that can be formed are "cat" and "hat" so the 
	             answer is 3 + 3 = 6.

	Example 2:
	Input: words = ["hello","world","leetcode"], chars = "welldonehoneyr"
	Output: 10
	Explanation: The strings that can be formed are "hello" and "world" so the 
	             answer is 5 + 5 = 10.

	Note:
	* 1 <= words.length <= 1000
	* 1 <= words[i].length, chars.length <= 100
	* All strings contain lowercase English letters only."""

    def countCharacters(self, words: List[str], chars: str) -> int:
        fc = {}
        for c in chars: fc[c] = 1 + fc.get(c, 0)
        
        ans = 0
        for word in words: 
            fw = {}
            for c in word: fw[c] = 1 + fw.get(c, 0)
            if all(fw[c] <= fc.get(c, 0) for c in fw): ans += len(word)
        return ans 


    """1161. Maximum Level Sum of a Binary Tree (Medium)
	Given the root of a binary tree, the level of its root is 1, the level of 
	its children is 2, and so on. Return the smallest level x such that the sum 
	of all the values of nodes at level x is maximal.

	Example 1:
	Input: root = [1,7,0,7,-8,null,null]
	Output: 2
	Explanation: 
	Level 1 sum = 1.
	Level 2 sum = 7 + 0 = 7.
	Level 3 sum = 7 + -8 = -1.
	So we return the level with the maximum sum which is level 2.
	
	Example 2:
	Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]
	Output: 2

	Constraints:
	* The number of nodes in the tree is in the range [1, 10^4].
	* -10^5 <= Node.val <= 10^5"""

    def maxLevelSum(self, root: TreeNode) -> int:
        ans = level = 0
        val = -inf
        queue = [root]
        while queue: 
            level += 1
            newq = []
            tmp = 0
            for node in queue: 
                tmp += node.val
                if node.left: newq.append(node.left)
                if node.right: newq.append(node.right)
            if tmp > val: ans, val = level, tmp
            queue = newq
        return ans 


    """1162. As Far from Land as Possible (Medium)
	Given an n x n grid containing only values 0 and 1, where 0 represents 
	water and 1 represents land, find a water cell such that its distance to 
	the nearest land cell is maximized, and return the distance. If no land or 
	water exists in the grid, return -1. The distance used in this problem is 
	the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) 
	is |x0 - x1| + |y0 - y1|.

	Example 1:
	Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
	Output: 2
	Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.

	Example 2:
	Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
	Output: 4
	Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.

	Constraints:
	* n == grid.length
	* n == grid[i].length
	* 1 <= n <= 100
	* grid[i][j] is 0 or 1"""

    def maxDistance(self, grid: List[List[int]]) -> int:
        n = len(grid) # dimension
        
        ans = -1
        queue = [(i, j) for i in range(n) for j in range(n) if grid[i][j]]
        while queue: 
            newq = []
            for i, j in queue: 
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j):
                    if 0 <= ii < n and 0 <= jj < n and not grid[ii][jj]: 
                        newq.append((ii, jj))
                        grid[ii][jj] = 1 # mark as visited 
            queue = newq
            ans += 1
        return ans or -1


    """1163. Last Substring in Lexicographical Order (Hard)
	Given a string s, return the last substring of s in lexicographical order.

	Example 1:
	Input: s = "abab"
	Output: "bab"
	Explanation: The substrings are ["a", "ab", "aba", "abab", "b", "ba", "bab"]. 
	             The lexicographically maximum substring is "bab".

	Example 2:
	Input: s = "leetcode"
	Output: "tcode"

	Constraints:
	* 1 <= s.length <= 4 * 10^5
	* s contains only lowercase English letters."""

    def lastSubstring(self, s: str) -> str:
        ii = k = 0 # anchor
        i = 1 # pointer 
        while i + k < len(s): 
            if s[ii+k] == s[i+k]: k += 1
            else: 
                if s[ii+k] > s[i+k]: i += k+1
                else: 
                    ii = max(ii+k+1, i)
                    i = ii+1
                k = 0
        return s[ii:]


    """1165. Single-Row Keyboard (Easy)
	There is a special keyboard with all keys in a single row. Given a string 
	keyboard of length 26 indicating the layout of the keyboard (indexed from 
	0 to 25), initially your finger is at index 0. To type a character, you 
	have to move your finger to the index of the desired character. The time 
	taken to move your finger from index i to index j is |i - j|. You want to 
	type a string word. Write a function to calculate how much time it takes to 
	type it with one finger.

	Example 1:
	Input: keyboard = "abcdefghijklmnopqrstuvwxyz", word = "cba"
	Output: 4
	Explanation: The index moves from 0 to 2 to write 'c' then to 1 to write 
	             'b' then to 0 again to write 'a'. Total time = 2 + 1 + 1 = 4. 
	
	Example 2:
	Input: keyboard = "pqrstuvwxyzabcdefghijklmno", word = "leetcode"
	Output: 73

	Constraints:
	* keyboard.length == 26
	* keyboard contains each English lowercase letter exactly once in some order.
	* 1 <= word.length <= 10^4
	* word[i] is an English lowercase letter."""

    def calculateTime(self, keyboard: str, word: str) -> int:
        loc = {c: i for i, c in enumerate(keyboard)}
        ans = prev = 0
        for c in word: 
            ans += abs(loc[c] - prev)
            prev = loc[c]
        return ans 


    """1167. Minimum Cost to Connect Sticks (Medium)
	You have some number of sticks with positive integer lengths. These lengths 
	are given as an array sticks, where sticks[i] is the length of the ith 
	stick. You can connect any two sticks of lengths x and y into one stick by 
	paying a cost of x + y. You must connect all the sticks until there is only 
	one stick remaining. Return the minimum cost of connecting all the given 
	sticks into one stick in this way.

	Example 1:
	Input: sticks = [2,4,3]
	Output: 14
	Explanation: You start with sticks = [2,4,3].
	1. Combine sticks 2 and 3 for a cost of 2 + 3 = 5. Now you have sticks = [5,4].
	2. Combine sticks 5 and 4 for a cost of 5 + 4 = 9. Now you have sticks = [9].
	There is only one stick left, so you are done. The total cost is 5 + 9 = 14.

	Example 2:
	Input: sticks = [1,8,3,5]
	Output: 30
	Explanation: You start with sticks = [1,8,3,5].
	1. Combine sticks 1 and 3 for a cost of 1 + 3 = 4. Now you have sticks = [4,8,5].
	2. Combine sticks 4 and 5 for a cost of 4 + 5 = 9. Now you have sticks = [9,8].
	3. Combine sticks 9 and 8 for a cost of 9 + 8 = 17. Now you have sticks = [17].
	There is only one stick left, so you are done. The total cost is 4 + 9 + 17 = 30.

	Example 3:
	Input: sticks = [5]
	Output: 0
	Explanation: There is only one stick, so you don't need to do anything. The total cost is 0.

	Constraints:
	* 1 <= sticks.length <= 104
	* 1 <= sticks[i] <= 104"""

    def connectSticks(self, sticks: List[int]) -> int:
        heapify(sticks)
        ans = 0 
        while len(sticks) > 1: 
            x = heappop(sticks)
            y = heappop(sticks)
            heappush(sticks, x + y)
            ans += x + y 
        return ans 


    """1168. Optimize Water Distribution in a Village (Hard)
	There are n houses in a village. We want to supply water for all the houses 
	by building wells and laying pipes. For each house i, we can either build a 
	well inside it directly with cost wells[i - 1] (note the -1 due to 0-
	indexing), or pipe in water from another well to it. The costs to lay pipes 
	between houses are given by the array pipes, where each 
	pipes[j] = [house1j, house2j, costj] represents the cost to connect house1j 
	and house2j together using a pipe. Connections are bidirectional. Return 
	the minimum total cost to supply water to all houses.

	Example 1:
	Input: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]
	Output: 3
	Explanation: The image shows the costs of connecting houses using pipes. 
	             The best strategy is to build a well in the first house with 
	             cost 1 and connect the other houses to it with cost 2 so the 
	             total cost is 3.
	
	Example 2:
	Input: n = 2, wells = [1,1], pipes = [[1,2,1]]
	Output: 2

	Constraints:
	* 2 <= n <= 10^4
	* wells.length == n
	* 0 <= wells[i] <= 10^5
	* 1 <= pipes.length <= 10^4
	* pipes[j].length == 3
	* 1 <= house1j, house2j <= n
	* 0 <= costj <= 10^5
	* house1j != house2j"""

    def minCostToSupplyWater(self, n: int, wells: List[int], pipes: List[List[int]]) -> int:
        pq = [(cost, p-1, q-1) for p, q, cost in pipes] # min-heap 
        heapify(pq)
        
        parent = list(range(n))
        
        def find(p): 
            if p != parent[p]: parent[p] = find(parent[p])
            return parent[p]

        def union(p, q, cost):
            prt, qrt = find(p), find(q)
            if wells[prt] < wells[qrt]: prt, qrt = qrt, prt
            if prt == qrt or cost >= wells[prt]: return False 
            parent[prt] = qrt
            return True 
        
        ans = 0
        while pq: 
            cost, p, q = heappop(pq)
            if union(p, q, cost): ans += cost
        return ans + sum(wells[i] for i in set(map(find, range(n))))


    """1176. Diet Plan Performance (Easy)
	A dieter consumes calories[i] calories on the i-th day. Given an integer k, 
	for every consecutive sequence of k days (calories[i], calories[i+1], ..., 
	calories[i+k-1] for all 0 <= i <= n-k), they look at T, the total calories 
	consumed during that sequence of k days (calories[i] + calories[i+1] + ... 
	+ calories[i+k-1]):
	* If T < lower, they performed poorly on their diet and lose 1 point; 
	* If T > upper, they performed well on their diet and gain 1 point;
	* Otherwise, they performed normally and there is no change in points.
	Initially, the dieter has zero points. Return the total number of points 
	the dieter has after dieting for calories.length days. Note that the total 
	points can be negative.

	Example 1:
	Input: calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3
	Output: 0
	Explanation: Since k = 1, we consider each element of the array separately and compare it to lower and upper.
	calories[0] and calories[1] are less than lower so 2 points are lost.
	calories[3] and calories[4] are greater than upper so 2 points are gained.

	Example 2:
	Input: calories = [3,2], k = 2, lower = 0, upper = 1
	Output: 1
	Explanation: Since k = 2, we consider subarrays of length 2.
	calories[0] + calories[1] > upper so 1 point is gained.

	Example 3:
	Input: calories = [6,5,0,0], k = 2, lower = 1, upper = 5
	Output: 0
	Explanation:
	calories[0] + calories[1] > upper so 1 point is gained.
	lower <= calories[1] + calories[2] <= upper so no change in points.
	calories[2] + calories[3] < lower so 1 point is lost.

	Constraints:
	* 1 <= k <= calories.length <= 10^5
	* 0 <= calories[i] <= 20000
	* 0 <= lower <= upper"""

    def dietPlanPerformance(self, calories: List[int], k: int, lower: int, upper: int) -> int:
        ans = val = 0
        for i, x in enumerate(calories): 
            val += x
            if i+1 >= k: 
                if val < lower: ans -= 1
                elif val > upper: ans += 1
                val -= calories[i-k+1]
        return ans 


    """1177. Can Make Palindrome from Substring (Medium)
	Given a string s, we make queries on substrings of s. For each query 
	queries[i] = [left, right, k], we may rearrange the substring s[left], ..., 
	s[right], and then choose up to k of them to replace with any lowercase 
	English letter. If the substring is possible to be a palindrome string 
	after the operations above, the result of the query is true. Otherwise, 
	the result is false. Return an array answer[], where answer[i] is the 
	result of the i-th query queries[i]. Note that: Each letter is counted 
	individually for replacement so if for example s[left..right] = "aaa", 
	and k = 2, we can only replace two of the letters.  (Also, note that the 
	initial string s is never modified by any query.)

	Example :
	Input: s = "abcda", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
	Output: [true,false,false,true,true]
	Explanation:
	queries[0] : substring = "d", is palidrome.
	queries[1] : substring = "bc", is not palidrome.
	queries[2] : substring = "abcd", is not palidrome after replacing only 1 character.
	queries[3] : substring = "abcd", could be changed to "abba" which is palidrome. Also this can be changed to "baab" first rearrange it "bacd" then replace "cd" with "ab".
	queries[4] : substring = "abcda", could be changed to "abcba" which is palidrome.

	Constraints:
	* 1 <= s.length, queries.length <= 10^5
	* 0 <= queries[i][0] <= queries[i][1] < s.length
	* 0 <= queries[i][2] <= s.length
	* s only contains lowercase English letters."""

    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:
        prefix = [0]
        for c in s: 
            prefix.append(prefix[-1] ^ (1 << (ord(c)-97)))
        
        ans = []
        for left, right, k in queries: 
            cnt = bin(prefix[right+1] ^ prefix[left]).count("1")
            ans.append(cnt <= 2*k+1)
        return ans 


    """1178. Number of Valid Words for Each Puzzle (Hard)
	With respect to a given puzzle string, a word is valid if both the 
	following conditions are satisfied:
	* word contains the first letter of puzzle.
	* For each letter in word, that letter is in puzzle. For example, if the 
	  puzzle is "abcdefg", then valid words are "faced", "cabbage", and 
	  "baggage"; while invalid words are "beefed" (doesn't include "a") and 
	  "based" (includes "s" which isn't in the puzzle).
	Return an array answer, where answer[i] is the number of words in the given 
	word list words that are valid with respect to the puzzle puzzles[i].

	Example :
	Input: words = ["aaaa","asas","able","ability","actt","actor","access"], 
	       puzzles = ["aboveyz","abrodyz","abslute","absoryz","actresz","gaswxyz"]
	Output: [1,1,3,2,4,0]
	Explanation:
	1 valid word for "aboveyz" : "aaaa" 
	1 valid word for "abrodyz" : "aaaa"
	3 valid words for "abslute" : "aaaa", "asas", "able"
	2 valid words for "absoryz" : "aaaa", "asas"
	4 valid words for "actresz" : "aaaa", "asas", "actt", "access"
	There're no valid words for "gaswxyz" cause none of the words in the list 
	contains letter 'g'.

	Constraints:
	* 1 <= words.length <= 10^5
	* 4 <= words[i].length <= 50
	* 1 <= puzzles.length <= 10^4
	* puzzles[i].length == 7
	* words[i][j], puzzles[i][j] are English lowercase letters.
	* Each puzzles[i] doesn't contain repeated characters."""

    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:
        freq = defaultdict(int)
        for word in words: 
            mask = 0
            for c in word: mask |= 1 << (ord(c) - 97)
            freq[mask] += 1
            
        ans = []
        for puzzle in puzzles: 
            mask = val = 0 
            for c in puzzle: mask |= 1 << (ord(c) - 97)
            mask0 = mask # loop through sub-masks
            while mask: 
                if mask & (1 << ord(puzzle[0])-97): val += freq[mask]
                mask = mask0 & (mask - 1)
            ans.append(val)
        return ans 


    """1180. Count Substrings with Only One Distinct Letter (Easy)
	Given a string S, return the number of substrings that have only one 
	distinct letter.

	Example 1:
	Input: S = "aaaba"
	Output: 8
	Explanation: The substrings with one distinct letter are "aaa", "aa", "a", "b".
	             "aaa" occurs 1 time.
	             "aa" occurs 2 times.
	             "a" occurs 4 times.
	             "b" occurs 1 time.
	             So the answer is 1 + 2 + 4 + 1 = 8.

	Example 2:
	Input: S = "aaaaaaaaaa"
	Output: 55

	Constraints:
	* 1 <= S.length <= 1000
	* S[i] consists of only lowercase English letters."""

    def countLetters(self, S: str) -> int:
        ans = ii = 0
        for i in range(len(S)):
            if S[ii] != S[i]: ii = i 
            ans += i - ii + 1
        return ans 


    """1181. Before and After Puzzle (Medium)
	Given a list of phrases, generate a list of Before and After puzzles. A 
	phrase is a string that consists of lowercase English letters and spaces 
	only. No space appears in the start or the end of a phrase. There are no 
	consecutive spaces in a phrase. Before and After puzzles are phrases that 
	are formed by merging two phrases where the last word of the first phrase 
	is the same as the first word of the second phrase. Return the Before and 
	After puzzles that can be formed by every two phrases phrases[i] and 
	phrases[j] where i != j. Note that the order of matching two phrases 
	matters, we want to consider both orders. You should return a list of 
	distinct strings sorted lexicographically.

	Example 1:
	Input: phrases = ["writing code","code rocks"]
	Output: ["writing code rocks"]

	Example 2:
	Input: phrases = ["mission statement",
	                  "a quick bite to eat",
	                  "a chip off the old block",
	                  "chocolate bar",
	                  "mission impossible",
	                  "a man on a mission",
	                  "block party",
	                  "eat my words",
	                  "bar of soap"]
	Output: ["a chip off the old block party",
	         "a man on a mission impossible",
	         "a man on a mission statement",
	         "a quick bite to eat my words",
	         "chocolate bar of soap"]

	Example 3:
	Input: phrases = ["a","b","a"]
	Output: ["a"]

	Constraints:
	* 1 <= phrases.length <= 100
	* 1 <= phrases[i].length <= 100"""

    def beforeAndAfterPuzzles(self, phrases: List[str]) -> List[str]:
        ans = set()
        prefix = {}
        suffix = {}
        for i, x in enumerate(phrases): 
            words = x.split()
            for j in prefix.get(words[-1], []): 
                ans.add(x[:-len(words[-1])] + phrases[j])
            for j in suffix.get(words[0], []): 
                ans.add(phrases[j] + x[len(words[0]):])
            prefix.setdefault(words[0], []).append(i)
            suffix.setdefault(words[-1], []).append(i)
        return sorted(ans)


    """1182. Shortest Distance to Target Color (Medium)
	You are given an array colors, in which there are three colors: 1, 2 and 3.
	You are also given some queries. Each query consists of two integers i and 
	c, return the shortest distance between the given index i and the target 
	color c. If there is no solution return -1.

	Example 1:
	Input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
	Output: [3,0,3]
	Explanation: The nearest 3 from index 1 is at index 4 (3 steps away).
	             The nearest 2 from index 2 is at index 2 itself (0 steps away).
	             The nearest 1 from index 6 is at index 3 (3 steps away).
	
	Example 2:
	Input: colors = [1,2], queries = [[0,3]]
	Output: [-1]
	Explanation: There is no 3 in the array.

	Constraints:
	* 1 <= colors.length <= 5*10^4
	* 1 <= colors[i] <= 3
	* 1 <= queries.length <= 5*10^4
	* queries[i].length == 2
	* 0 <= queries[i][0] < colors.length
	* 1 <= queries[i][1] <= 3"""

    def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:
        locs = defaultdict(list)
        for i, x in enumerate(colors): locs[x].append(i)
        
        ans = []
        for i, c in queries: 
            k = bisect_left(locs[c], i)
            val = inf 
            if k < len(locs[c]): val = locs[c][k] - i
            if k: val = min(val, i - locs[c][k-1])
            ans.append(val if val < inf else -1)
        return ans 


    """1184. Distance Between Bus Stops (Easy)
	A bus has n stops numbered from 0 to n - 1 that form a circle. We know the 
	distance between all pairs of neighboring stops where distance[i] is the 
	distance between the stops number i and (i + 1) % n. The bus goes along 
	both directions i.e. clockwise and counterclockwise. Return the shortest 
	distance between the given start and destination stops.

	Example 1:
	Input: distance = [1,2,3,4], start = 0, destination = 1
	Output: 1
	Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1.

	Example 2:
	Input: distance = [1,2,3,4], start = 0, destination = 2
	Output: 3
	Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.

	Example 3:
	Input: distance = [1,2,3,4], start = 0, destination = 3
	Output: 4
	Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4.

	Constraints:
	* 1 <= n <= 10^4
	* distance.length == n
	* 0 <= start, destination < n
	* 0 <= distance[i] <= 10^4"""

    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:
        ans = 0
        i = start
        while i != destination: 
            ans += distance[i]
            i = (i+1) % len(distance)
        return min(ans, sum(distance) - ans)


    """1185. Day of the Week (Easy)
	Given a date, return the corresponding day of the week for that date. The 
	input is given as three integers representing the day, month and year 
	respectively. Return the answer as one of the following values 
	{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}.
	 
	Example 1:
	Input: day = 31, month = 8, year = 2019
	Output: "Saturday"

	Example 2:
	Input: day = 18, month = 7, year = 1999
	Output: "Sunday"

	Example 3:
	Input: day = 15, month = 8, year = 1993
	Output: "Sunday"

	Constraints: The given dates are valid dates between the years 1971 and 2100."""

    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:
        
        def fn(y, m, d): 
            """Return year-month-day in number format."""
            if m < 3: 
                y -= 1
                m += 12
            return 365*y + y//4 + y//400 - y//100 + (153*m + 8)//5 + d
        
        weekday = ("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
        return weekday[(fn(year, month, day) - fn(2021, 4, 11)) % 7]


    """1186. Maximum Subarray Sum with One Deletion (Medium)
	Given an array of integers, return the maximum sum for a non-empty subarray 
	(contiguous elements) with at most one element deletion. In other words, 
	you want to choose a subarray and optionally delete one element from it so 
	that there is still at least one element left and the sum of the remaining 
	elements is maximum possible. Note that the subarray needs to be non-empty 
	after deleting one element.

	Example 1:
	Input: arr = [1,-2,0,3]
	Output: 4
	Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the 
	             subarray [1, 0, 3] becomes the maximum value.
	
	Example 2:
	Input: arr = [1,-2,-2,3]
	Output: 3
	Explanation: We just choose [3] and it's the maximum sum.

	Example 3:
	Input: arr = [-1,-1,-1,-1]
	Output: -1
	Explanation: The final subarray needs to be non-empty. You can't choose [-1] 
	             and delete -1 from it, then get an empty subarray to make the 
	             sum equals to 0.

	Constraints:
	* 1 <= arr.length <= 10^5
	* -10^4 <= arr[i] <= 10^4"""

    def maximumSum(self, arr: List[int]) -> int:
        ans = d0 = d1 = -inf 
        for x in arr:
            d0, d1 = max(x, x + d0), max(d0, x + d1)
            ans = max(ans, d0, d1)
        return ans 


    """1187. Make Array Strictly Increasing (Hard)
	Given two integer arrays arr1 and arr2, return the minimum number of 
	operations (possibly zero) needed to make arr1 strictly increasing. In one 
	operation, you can choose two indices 0 <= i < arr1.length and 
	0 <= j < arr2.length and do the assignment arr1[i] = arr2[j]. If there is 
	no way to make arr1 strictly increasing, return -1.

	Example 1:
	Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
	Output: 1
	Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].

	Example 2:
	Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
	Output: 2
	Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].

	Example 3:
	Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
	Output: -1
	Explanation: You can't make arr1 strictly increasing.

	Constraints:
	* 1 <= arr1.length, arr2.length <= 2000
	* 0 <= arr1[i], arr2[i] <= 10^9"""

    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:
        arr2.sort()
        
        @cache
        def fn(i, prev): 
            """Return min ops to make arr1[i:] increasing w/ given previous element."""
            if i == len(arr1): return 0 
            ans = inf 
            if (prev < arr1[i]): ans = fn(i+1, arr1[i])
            k = bisect_right(arr2, prev)
            if k < len(arr2): ans = min(ans, 1 + fn(i+1, arr2[k]))
            return ans 
        
        ans = fn(0, -inf)
        return ans if ans < inf else -1 


    """1189. Maximum Number of Balloons (Easy)
	Given a string text, you want to use the characters of text to form as many 
	instances of the word "balloon" as possible. You can use each character in 
	text at most once. Return the maximum number of instances that can be formed.

	Example 1:
	Input: text = "nlaebolko"
	Output: 1

	Example 2:
	Input: text = "loonbalxballpoon"
	Output: 2

	Example 3:
	Input: text = "leetcode"
	Output: 0

	Constraints:
	* 1 <= text.length <= 10^4
	* text consists of lower case English letters only."""

    def maxNumberOfBalloons(self, text: str) -> int:
        ref = {"a":1, "b":1, "l":2, "n":1, "o":2}
        freq = defaultdict(int)
        for c in text: 
            if c in "balloon": freq[c] += 1
        return min(freq[c]//ref[c] for c in ref)


    """1190. Reverse Substrings Between Each Pair of Parentheses (Medium)
	You are given a string s that consists of lower case English letters and 
	brackets. Reverse the strings in each pair of matching parentheses, 
	starting from the innermost one. Your result should not contain any 
	brackets.

	Example 1:
	Input: s = "(abcd)"
	Output: "dcba"

	Example 2:
	Input: s = "(u(love)i)"
	Output: "iloveu"
	Explanation: The substring "love" is reversed first, then the whole string 
	             is reversed.

	Example 3:
	Input: s = "(ed(et(oc))el)"
	Output: "leetcode"
	Explanation: First, we reverse the substring "oc", then "etco", and finally, 
	             the whole string.

	Example 4:
	Input: s = "a(bcdefghijkl(mno)p)q"
	Output: "apmnolkjihgfedcbq"

	Constraints:
	* 0 <= s.length <= 2000
	* s only contains lower case English characters and parentheses.
	* It's guaranteed that all parentheses are balanced."""

    def reverseParentheses(self, s: str) -> str:
        stack = []
        mp = {}
        for i, c in enumerate(s): 
            if c == "(": stack.append(i)
            elif c == ")": 
                k = stack.pop()
                mp[i], mp[k] = k, i
        
        ans = []
        i, ii = 0, 1
        while i < len(s):
            if s[i] in "()": 
                i = mp[i]
                ii *= -1 
            else: ans.append(s[i])
            i += ii 
        return "".join(ans)


    """1191. K-Concatenation Maximum Sum (Medium)
	Given an integer array arr and an integer k, modify the array by repeating 
	it k times. For example, if arr = [1, 2] and k = 3 then the modified array 
	will be [1, 2, 1, 2, 1, 2]. Return the maximum sub-array sum in the 
	modified array. Note that the length of the sub-array can be 0 and its sum 
	in that case is 0. As the answer can be very large, return the answer 
	modulo 10^9 + 7.

	Example 1:
	Input: arr = [1,2], k = 3
	Output: 9

	Example 2:
	Input: arr = [1,-2,1], k = 5
	Output: 2

	Example 3:
	Input: arr = [-1,-2], k = 7
	Output: 0

	Constraints:
	* 1 <= arr.length <= 10^5
	* 1 <= k <= 10^5
	* -104 <= arr[i] <= 10^4"""

    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:
        rsm = val = 0 
        sm = sum(arr)
        if k > 1: arr *= 2
        for x in arr: 
            val = max(0, val + x)
            rsm = max(rsm, val)
        return max(rsm, rsm + max(0, k-2)*sm) % 1_000_000_007


    """1192. Critical Connections in a Network (Hard)
	There are n servers numbered from 0 to n-1 connected by undirected server-
	to-server connections forming a network where connections[i] = [a, b] 
	represents a connection between servers a and b. Any server can reach any 
	other server directly or indirectly through the network. A critical 
	connection is a connection that, if removed, will make some server unable 
	to reach some other server. Return all critical connections in the network 
	in any order.

	Example 1:
	Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
	Output: [[1,3]]
	Explanation: [[3,1]] is also accepted.

	Constraints:
	* 1 <= n <= 10^5
	* n-1 <= connections.length <= 10^5
	* connections[i][0] != connections[i][1]
	* There are no repeated connections."""

    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        graph = {} # graph as adjacency list 
        for u, v in connections: 
            graph.setdefault(u, []).append(v)
            graph.setdefault(v, []).append(u)
        
        def dfs(x, p, step): 
            """Traverse the graph and collect bridges using Tarjan's algo."""
            disc[x] = low[x] = step
            for xx in graph.get(x, []): 
                if disc[xx] == inf: 
                    step += 1
                    dfs(xx, x, step)
                    low[x] = min(low[x], low[xx])
                    if low[xx] > disc[x]: ans.append([x, xx]) # bridge
                elif xx != p: low[x] = min(low[x], disc[xx])
        
        ans = []
        low = [inf]*n
        disc = [inf]*n
        
        dfs(0, -1, 0)
        return ans 


    """1196. How Many Apples Can You Put into the Basket (Easy)
	You have some apples, where arr[i] is the weight of the i-th apple. You 
	also have a basket that can carry up to 5000 units of weight. Return the 
	maximum number of apples you can put in the basket.

	Example 1:
	Input: arr = [100,200,150,1000]
	Output: 4
	Explanation: All 4 apples can be carried by the basket since their sum of 
	             weights is 1450.

	Example 2:
	Input: arr = [900,950,800,1000,700,800]
	Output: 5
	Explanation: The sum of weights of the 6 apples exceeds 5000 so we choose 
	             any 5 of them.

	Constraints:
	* 1 <= arr.length <= 10^3
	* 1 <= arr[i] <= 10^3"""

    def maxNumberOfApples(self, arr: List[int]) -> int:
        ans = wt = 0
        for x in sorted(arr): 
            wt += x
            if wt <= 5000: ans += 1
        return ans 


    """1197. Minimum Knight Moves (Medium)
	In an infinite chess board with coordinates from -infinity to +infinity, 
	you have a knight at square [0, 0]. A knight has 8 possible moves it can 
	make, as illustrated below. Each move is two squares in a cardinal 
	direction, then one square in an orthogonal direction. Return the minimum 
	number of steps needed to move the knight to the square [x, y].  It is 
	guaranteed the answer exists.

	Example 1:
	Input: x = 2, y = 1
	Output: 1
	Explanation: [0, 0] → [2, 1]

	Example 2:
	Input: x = 5, y = 5
	Output: 4
	Explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]

	Constraints: |x| + |y| <= 300"""

    def minKnightMoves(self, x: int, y: int) -> int:
        
        @cache
        def fn(x, y): 
            """Return minimum moves from (x, y) to (0, 0)."""
            x, y = abs(x), abs(y) # symmetry 
            if x == y == 0: return 0 
            if x + y == 2: return 2
            return 1 + min(fn(x-2, y-1), fn(x-1, y-2))
        
        return fn(x, y)


    """1198. Find Smallest Common Element in All Rows (Medium)
	Given a matrix mat where every row is sorted in strictly increasing order, 
	return the smallest common element in all rows. If there is no common 
	element, return -1.

	Example 1:
	Input: mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]
	Output: 5

	Constraints:
	* 1 <= mat.length, mat[i].length <= 500
	* 1 <= mat[i][j] <= 10^4
	* mat[i] is sorted in strictly increasing order."""

    def smallestCommonElement(self, mat: List[List[int]]) -> int:
        m, n = len(mat), len(mat[0]) # dimensions
        freq = {}
        for j in range(n):
            for i in range(m): 
                freq[mat[i][j]] = 1 + freq.get(mat[i][j], 0)
                if freq[mat[i][j]] == m: return mat[i][j]
        return -1 


    """1200. Minimum Absolute Difference (Easy)
	Given an array of distinct integers arr, find all pairs of elements with 
	the minimum absolute difference of any two elements. Return a list of pairs 
	in ascending order(with respect to pairs), each pair [a, b] follows
	* a, b are from arr
	* a < b
	* b - a equals to the minimum absolute difference of any two elements in arr

	Example 1:
	Input: arr = [4,2,1,3]
	Output: [[1,2],[2,3],[3,4]]
	Explanation: The minimum absolute difference is 1. List all pairs with 
	             difference equal to 1 in ascending order.
	
	Example 2:
	Input: arr = [1,3,6,10,15]
	Output: [[1,3]]

	Example 3:
	Input: arr = [3,8,-10,23,19,-4,-14,27]
	Output: [[-14,-10],[19,23],[23,27]]

	Constraints:
	* 2 <= arr.length <= 10^5
	* -10^6 <= arr[i] <= 10^6"""

    def minimumAbsDifference(self, arr: List[int]) -> List[List[int]]:
        arr.sort()
        ans, mn = [], inf
        for i in range(1, len(arr)): 
            if arr[i] - arr[i-1] <= mn: 
                if arr[i] - arr[i-1] < mn: 
                    mn = arr[i] - arr[i-1]
                    ans = []
                ans.append([arr[i-1], arr[i]])
        return ans


    """1201. Ugly Number III (Medium)
	Given four integers n, a, b, and c, return the nth ugly number. Ugly 
	numbers are positive integers that are divisible by a, b, or c.

	Example 1:
	Input: n = 3, a = 2, b = 3, c = 5
	Output: 4
	Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.

	Example 2:
	Input: n = 4, a = 2, b = 3, c = 4
	Output: 6
	Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.

	Example 3:
	Input: n = 5, a = 2, b = 11, c = 13
	Output: 10
	Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.

	Example 4:
	Input: n = 1000000000, a = 2, b = 217983653, c = 336916467
	Output: 1999999984

	Constraints:
	* 1 <= n, a, b, c <= 109
	* 1 <= a * b * c <= 1018
	* It is guaranteed that the result will be in range [1, 2 * 109]."""

    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:
        # inclusion-exclusion principle
        ab = a*b//gcd(a, b)
        bc = b*c//gcd(b, c)
        ca = c*a//gcd(c, a)
        abc = ab*c//gcd(ab, c)
        
        lo, hi = 1, n*min(a, b, c)
        while lo < hi: 
            mid = lo + hi >> 1
            if mid//a + mid//b + mid//c - mid//ab - mid//bc - mid//ca + mid//abc < n: lo = mid + 1
            else: hi = mid 
        return lo 


    """1202. Smallest String With Swaps (Medium)
	You are given a string s, and an array of pairs of indices in the string 
	pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.
	You can swap the characters at any pair of indices in the given pairs any 
	number of times. Return the lexicographically smallest string that s can be 
	changed to after using the swaps.

	Example 1:
	Input: s = "dcab", pairs = [[0,3],[1,2]]
	Output: "bacd"
	Explaination: 
	Swap s[0] and s[3], s = "bcad"
	Swap s[1] and s[2], s = "bacd"

	Example 2:
	Input: s = "dcab", pairs = [[0,3],[1,2],[0,2]]
	Output: "abcd"
	Explaination: 
	Swap s[0] and s[3], s = "bcad"
	Swap s[0] and s[2], s = "acbd"
	Swap s[1] and s[2], s = "abcd"

	Example 3:
	Input: s = "cba", pairs = [[0,1],[1,2]]
	Output: "abc"
	Explaination: 
	Swap s[0] and s[1], s = "bca"
	Swap s[1] and s[2], s = "bac"
	Swap s[0] and s[1], s = "abc"

	Constraints:
	* 1 <= s.length <= 10^5
	* 0 <= pairs.length <= 10^5
	* 0 <= pairs[i][0], pairs[i][1] < s.length
	* s only contains lower case English letters."""

"""
class UnionFind:
    def __init__(self, n): 
        self.parent = list(range(n))
        self.rank = [1]*n
    
    def find(self, p): 
        if self.parent[p] != p: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q):
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False # already connected 
        if prt > qrt: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True
"""

    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:
        s = list(s)
        
        uf = UnionFind(len(s))
        for u, v in pairs: 
            uf.union(u, v)
        
        mp = {}
        for n in range(len(s)):
            mp.setdefault(uf.find(n), []).append(n)
        
        for v in mp.values(): 
            vals = [s[vv] for vv in v]
            for vv, xx in zip(v, sorted(vals)):
                s[vv] = xx
        return "".join(s)


    """1203. Sort Items by Groups Respecting Dependencies (Hard)
	There are n items each belonging to zero or one of m groups where group[i] 
	is the group that the i-th item belongs to and it's equal to -1 if the i-th 
	item belongs to no group. The items and the groups are zero indexed. A 
	group can have no item belonging to it. Return a sorted list of the items 
	such that:
	* The items that belong to the same group are next to each other in the 
	  sorted list.
	* There are some relations between these items where beforeItems[i] is a 
	  list containing all the items that should come before the i-th item in 
	  the sorted array (to the left of the i-th item).
	Return any solution if there is more than one solution and return an empty 
	list if there is no solution.

	Example 1:
	Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]
	Output: [6,3,4,1,5,2,0,7]

	Example 2:
	Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]
	Output: []
	Explanation: This is the same as example 1 except that 4 needs to be before 6 in the sorted list.

	Constraints:
	* 1 <= m <= n <= 3 * 10^4
	* group.length == beforeItems.length == n
	* -1 <= group[i] <= m - 1
	* 0 <= beforeItems[i].length <= n - 1
	* 0 <= beforeItems[i][j] <= n - 1
	* i != beforeItems[i][j]
	* beforeItems[i] does not contain duplicates elements."""

    def sortItems(self, n: int, m: int, group: List[int], beforeItems: List[List[int]]) -> List[int]:
        for i in range(n): 
            if group[i] == -1: group[i] = i + m # re-group 
        
        graph0 = {} # digraph of groups 
        indeg0 = [0]*(m+n) # indegree of groups 
        
        graph1 = {} # digrpah of items 
        indeg1 = [0]*n # indegree of items
        
        for i, x in enumerate(beforeItems): 
            for xx in x: 
                if group[xx] != group[i]: 
                    graph0.setdefault(group[xx], []).append(group[i])
                    indeg0[group[i]] += 1
                graph1.setdefault(xx, []).append(i)
                indeg1[i] += 1
        
        def fn(graph, indeg): 
            """Return topological sort of graph using Kahn's algo."""
            ans = []
            stack = [k for k in range(len(indeg)) if indeg[k] == 0]
            while stack: 
                n = stack.pop()
                ans.append(n)
                for nn in graph.get(n, []):
                    indeg[nn] -= 1
                    if indeg[nn] == 0: stack.append(nn)
            return ans 
        
        tp0 = fn(graph0, indeg0) 
        if len(tp0) != len(indeg0): return [] 
        
        tp1 = fn(graph1, indeg1)
        if len(tp1) != len(indeg1): return []
        
        mp0 = {x: i for i, x in enumerate(tp0)}
        mp1 = {x: i for i, x in enumerate(tp1)}
        
        return sorted(range(n), key=lambda x: (mp0[group[x]], mp1[x]))


    """1207. Unique Number of Occurrences (Easy)
	Given an array of integers arr, write a function that returns true if and 
	only if the number of occurrences of each value in the array is unique.

	Example 1:
	Input: arr = [1,2,2,1,1,3]
	Output: true
	Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two 
	             values have the same number of occurrences.

	Example 2:
	Input: arr = [1,2]
	Output: false
	
	Example 3:
	Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
	Output: true

	Constraints:
	* 1 <= arr.length <= 1000
	* -1000 <= arr[i] <= 1000"""

    def uniqueOccurrences(self, arr: List[int]) -> bool:
        freq = {}
        for x in arr: 
            freq[x] = 1 + freq.get(x, 0)
        return len(freq) == len(set(freq.values()))


    """1208. Get Equal Substrings Within Budget (Medium)
	You are given two strings s and t of the same length. You want to change s 
	to t. Changing the i-th character of s to i-th character of t costs 
	|s[i] - t[i]| that is, the absolute difference between the ASCII values of 
	the characters. You are also given an integer maxCost. Return the maximum 
	length of a substring of s that can be changed to be the same as the 
	corresponding substring of twith a cost less than or equal to maxCost. If 
	there is no substring from s that can be changed to its corresponding 
	substring from t, return 0.

	Example 1:
	Input: s = "abcd", t = "bcdf", maxCost = 3
	Output: 3
	Explanation: "abc" of s can change to "bcd". That costs 3, so the maximum 
	             length is 3.

	Example 2:
	Input: s = "abcd", t = "cdef", maxCost = 3
	Output: 1
	Explanation: Each character in s costs 2 to change to charactor in t, so 
	             the maximum length is 1.

	Example 3:
	Input: s = "abcd", t = "acde", maxCost = 0
	Output: 1
	Explanation: You can't make any change, so the maximum length is 1.

	Constraints:
	* 1 <= s.length, t.length <= 10^5
	* 0 <= maxCost <= 10^6
	* s and t only contain lower case English letters."""

    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:
        ans = ii = val = 0 
        for i in range(len(s)): 
            val += abs(ord(s[i]) - ord(t[i]))
            while ii <= i and val > maxCost: 
                val -= abs(ord(s[ii]) - ord(t[ii]))
                ii += 1
            ans = max(ans, i - ii + 1)
        return ans 


    """1209. Remove All Adjacent Duplicates in String II (Medium)
	Given a string s, a k duplicate removal consists of choosing k adjacent and 
	equal letters from s and removing them causing the left and the right side 
	of the deleted substring to concatenate together. We repeatedly make k 
	duplicate removals on s until we no longer can. Return the final string 
	after all such duplicate removals have been made. It is guaranteed that the 
	answer is unique.

	Example 1:
	Input: s = "abcd", k = 2
	Output: "abcd"
	Explanation: There's nothing to delete.

	Example 2:
	Input: s = "deeedbbcccbdaa", k = 3
	Output: "aa"
	Explanation: First delete "eee" and "ccc", get "ddbbbdaa"
	             Then delete "bbb", get "dddaa"
	             Finally delete "ddd", get "aa"

	Example 3:
	Input: s = "pbbcggttciiippooaais", k = 2
	Output: "ps"

	Constraints:
	* 1 <= s.length <= 10^5
	* 2 <= k <= 10^4
	* s only contains lower case English letters."""

    def removeDuplicates(self, s: str, k: int) -> str:
        stack = []
        for i, c in enumerate(s): 
            if stack and stack[-1][0] == c: 
                stack[-1][1] += 1
            else: stack.append([c, 1])
            if stack[-1][1] == k: stack.pop()
        return "".join(c*x for c, x in stack) 


    """1210. Minimum Moves to Reach Target with Rotations
	In an n*n grid, there is a snake that spans 2 cells and starts moving from 
	the top left corner at (0, 0) and (0, 1). The grid has empty cells 
	represented by zeros and blocked cells represented by ones. The snake wants 
	to reach the lower right corner at (n-1, n-2) and (n-1, n-1). In one move 
	the snake can:
	* Move one cell to the right if there are no blocked cells there. This move 
	  keeps the horizontal/vertical position of the snake as it is.
	* Move down one cell if there are no blocked cells there. This move keeps 
	  the horizontal/vertical position of the snake as it is.
	* Rotate clockwise if it's in a horizontal position and the two cells under 
	  it are both empty. In that case the snake moves from (r, c) and (r, c+1) 
	  to (r, c) and (r+1, c).
	* Rotate counterclockwise if it's in a vertical position and the two cells 
	  to its right are both empty. In that case the snake moves from (r, c) and 
	  (r+1, c) to (r, c) and (r, c+1).
	Return the minimum number of moves to reach the target. If there is no way 
	to reach the target, return -1.

	Example 1:
	Input: grid = [[0,0,0,0,0,1],
	               [1,1,0,0,1,0],
	               [0,0,0,0,1,1],
	               [0,0,1,0,1,0],
	               [0,1,1,0,0,0],
	               [0,1,1,0,0,0]]
	Output: 11
	Explanation: One possible solution is [right, right, rotate clockwise, 
	             right, down, down, down, down, rotate counterclockwise, right, 
	             down].
	
	Example 2:
	Input: grid = [[0,0,1,1,1,1],
	               [0,0,0,0,1,1],
	               [1,1,0,0,0,1],
	               [1,1,1,0,0,1],
	               [1,1,1,0,0,1],
	               [1,1,1,0,0,0]]
	Output: 9

	Constraints:
	* 2 <= n <= 100
	* 0 <= grid[i][j] <= 1
	* It is guaranteed that the snake starts at empty cells."""

    def minimumMoves(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dist = {(0, 0, 0, 1): 0}
        pq = [(0, 0, 0, 0, 1)]
        while pq: 
            x, i, j, ii, jj = heappop(pq)
            if i == n-1 and j == n-2 and ii == n-1 and jj == n-1: return x
            if ii+1 < n and grid[i+1][j] == grid[ii+1][jj] == 0 and x+1 < dist.get((i+1, j, ii+1, jj), inf): 
                heappush(pq, (x+1, i+1, j, ii+1, jj))
                dist[i+1, j, ii+1, jj] = x + 1
            if jj+1 < n and grid[i][j+1] == grid[ii][jj+1] == 0 and x+1 < dist.get((i, j+1, ii, jj+1), inf): 
                heappush(pq, (x+1, i, j+1, ii, jj+1))
                dist[i, j+1, ii, jj+1] = x + 1
            if i == ii and ii+1 < n and grid[i+1][j] == grid[i+1][jj] == 0 and x+1 < dist.get((i, j, i+1, j), inf): 
                heappush(pq, (x+1, i, j, i+1, j))
                dist[i, j, i+1, j] = x + 1
            if j == jj and jj+1 < n and grid[i][j+1] == grid[ii][j+1] == 0 and x+1 < dist.get((i, j, i, j+1), inf): 
                heappush(pq, (x+1, i, j, i, j+1))
                dist[i, j, i, j+1] = x + 1
        return -1 


    """1213. Intersection of Three Sorted Arrays (Easy)
	Given three integer arrays arr1, arr2 and arr3 sorted in strictly 
	increasing order, return a sorted array of only the integers that 
	appeared in all three arrays.

	Example 1:
	Input: arr1 = [1,2,3,4,5], 
	       arr2 = [1,2,5,7,9], 
	       arr3 = [1,3,4,5,8]
	Output: [1,5]
	Explanation: Only 1 and 5 appeared in the three arrays.

	Example 2:
	Input: arr1 = [197,418,523,876,1356], 
	       arr2 = [501,880,1593,1710,1870], 
	       arr3 = [521,682,1337,1395,1764]
	Output: []

	Constraints:
	* 1 <= arr1.length, arr2.length, arr3.length <= 1000
	* 1 <= arr1[i], arr2[i], arr3[i] <= 2000"""

    def arraysIntersection(self, arr1: List[int], arr2: List[int], arr3: List[int]) -> List[int]:
        ans = []
        i1 = i2 = i3 = 0
        while i1 < len(arr1) and i2 < len(arr2) and i3 < len(arr3): 
            if arr1[i1] == arr2[i2] == arr3[i3]: ans.append(arr1[i1])
            mn = min(arr1[i1], arr2[i2], arr3[i3])
            if arr1[i1] == mn: i1 += 1
            if arr2[i2] == mn: i2 += 1
            if arr3[i3] == mn: i3 += 1
        return ans 


    """1214. Two Sum BSTs (Medium)
	Given the roots of two binary search trees, root1 and root2, return true if 
	and only if there is a node in the first tree and a node in the second tree 
	whose values sum up to a given integer target.

	Example 1:
	Input: root1 = [2,1,4], root2 = [1,0,3], target = 5
	Output: true
	Explanation: 2 and 3 sum up to 5.

	Example 2:
	Input: root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18
	Output: false

	Constraints:
	* The number of nodes in each tree is in the range [1, 5000].
	* -10^9 <= Node.val, target <= 10^9"""

    def twoSumBSTs(self, root1: TreeNode, root2: TreeNode, target: int) -> bool:
        
        def fn(node): 
            """Return inorder traversal of binary tree."""
            ans, stack = [], []
            while stack or node: 
                if node: 
                    stack.append(node)
                    node = node.left
                else: 
                    node = stack.pop()
                    ans.append(node.val)
                    node = node.right 
            return ans 
        
        val1, val2 = fn(root1), fn(root2)
        lo, hi = 0, len(val2)-1
        while lo < len(val1) and 0 <= hi:
            if val1[lo] + val2[hi] < target: lo += 1
            elif val1[lo] + val2[hi] == target: return True 
            else: hi -= 1
        return False 


    """1215. Stepping Numbers (Medium)
	A stepping number is an integer such that all of its adjacent digits have 
	an absolute difference of exactly 1. For example, 321 is a stepping number 
	while 421 is not. Given two integers low and high, return a sorted list of 
	all the stepping numbers in the inclusive range [low, high].
	 
	Example 1:
	Input: low = 0, high = 21
	Output: [0,1,2,3,4,5,6,7,8,9,10,12,21]

	Example 2:
	Input: low = 10, high = 15
	Output: [10,12]

	Constraints: 0 <= low <= high <= 2 * 10^9"""

    def countSteppingNumbers(self, low: int, high: int) -> List[int]:
        ans = [0]
        queue = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])
        while queue: 
            x = queue.popleft()
            if x <= high: 
                ans.append(x)
                for dd in x%10-1, x%10+1: 
                    if 0 <= dd < 10: queue.append(10*x+dd)
        return [x for x in ans if low <= x]


    """1217. Minimum Cost to Move Chips to The Same Position (Easy)
	We have n chips, where the position of the ith chip is position[i]. We need 
	to move all the chips to the same position. In one step, we can change the 
	position of the ith chip from position[i] to:
	* position[i] + 2 or position[i] - 2 with cost = 0.
	* position[i] + 1 or position[i] - 1 with cost = 1.
	Return the minimum cost needed to move all the chips to the same position.

	Example 1:
	Input: position = [1,2,3]
	Output: 1
	Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.
          	     Second step: Move the chip at position 2 to position 1 with cost = 1.
	             Total cost is 1.

	Example 2:
	Input: position = [2,2,2,3,3]
	Output: 2
	Explanation: We can move the two chips at position  3 to position 2. Each 
	             move has cost = 1. The total cost = 2.
	
	Example 3:
	Input: position = [1,1000000000]
	Output: 1

	Constraints:
	* 1 <= position.length <= 100
	* 1 <= position[i] <= 10^9"""

    def minCostToMoveChips(self, position: List[int]) -> int:
        odd = even = 0
        for x in position: 
            if x&1: odd += 1
            else: even += 1
        return min(odd, even)


    """1218. Longest Arithmetic Subsequence of Given Difference (Medium)
	Given an integer array arr and an integer difference, return the length of 
	the longest subsequence in arr which is an arithmetic sequence such that 
	the difference between adjacent elements in the subsequence equals 
	difference. A subsequence is a sequence that can be derived from arr by 
	deleting some or no elements without changing the order of the remaining 
	elements.

	Example 1:
	Input: arr = [1,2,3,4], difference = 1
	Output: 4
	Explanation: The longest arithmetic subsequence is [1,2,3,4].

	Example 2:
	Input: arr = [1,3,5,7], difference = 1
	Output: 1
	Explanation: The longest arithmetic subsequence is any single element.

	Example 3:
	Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
	Output: 4
	Explanation: The longest arithmetic subsequence is [7,5,3,1].

	Constraints:
	* 1 <= arr.length <= 10^5
	* -10^4 <= arr[i], difference <= 10^4"""

    def longestSubsequence(self, arr: List[int], difference: int) -> int:
        ans = 0 
        seen = {}
        for x in arr: 
            seen[x] = 1 + seen.get(x-difference, 0)
            ans = max(ans, seen[x])
        return ans 


    """1219. Path with Maximum Gold (Medium)
	In a gold mine grid of size m * n, each cell in this mine has an integer 
	representing the amount of gold in that cell, 0 if it is empty. Return the 
	maximum amount of gold you can collect under the conditions:
	* Every time you are located in a cell you will collect all the gold in 
	  that cell.
	* From your position you can walk one step to the left, right, up or down.
	* You can't visit the same cell more than once.
	* Never visit a cell with 0 gold.
	* You can start and stop collecting gold from any position in the grid that 
	  has some gold.

	Example 1:
	Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
	Output: 24
	Explanation:
	[[0,6,0],
	 [5,8,7],
	 [0,9,0]]
	Path to get the maximum gold, 9 -> 8 -> 7.

	Example 2:
	Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
	Output: 28
	Explanation:
	[[1,0,7],
	 [2,0,6],
	 [3,4,5],
	 [0,3,0],
	 [9,0,20]]
	Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.

	Constraints:
	* 1 <= grid.length, grid[i].length <= 15
	* 0 <= grid[i][j] <= 100
	* There are at most 25 cells containing gold."""

    def getMaximumGold(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        
        def fn(i, j): 
            """Collect maximum gold from (i, j) via backtracking."""
            if grid[i][j] <= 0: return 0
            grid[i][j] *= -1 # mark as visited 
            ans = 0
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < m and 0 <= jj < n: 
                    ans = max(ans, fn(ii, jj) - grid[i][j])
            grid[i][j] *= -1 # backtracking 
            return ans 
        
        return max(fn(i, j) for i in range(m) for j in range(n) if grid[i][j])


    """1220. Count Vowels Permutation (Hard)
	Given an integer n, your task is to count how many strings of length n can 
	be formed under the following rules:
	* Each character is a lower case vowel ('a', 'e', 'i', 'o', 'u')
	* Each vowel 'a' may only be followed by an 'e'.
	* Each vowel 'e' may only be followed by an 'a' or an 'i'.
	* Each vowel 'i' may not be followed by another 'i'.
	* Each vowel 'o' may only be followed by an 'i' or a 'u'.
	* Each vowel 'u' may only be followed by an 'a'.
	Since the answer may be too large, return it modulo 10^9 + 7.

	Example 1:
	Input: n = 1
	Output: 5
	Explanation: All possible strings are: "a", "e", "i" , "o" and "u".

	Example 2:
	Input: n = 2
	Output: 10
	Explanation: All possible strings are: "ae", "ea", "ei", "ia", "ie", "io", "iu", "oi", "ou" and "ua".

	Example 3: 
	Input: n = 5
	Output: 68

	Constraints: 1 <= n <= 2 * 10^4"""

    def countVowelPermutation(self, n: int) -> int:
        a = e = i = o = u = 1
        for _ in range(n-1): 
            a, e, i, o, u = e, a+i, a+e+o+u, i+u, a
        return (a+e+i+o+u) % 1_000_000_007


    """1221. Split a String in Balanced Strings (Easy)
	Balanced strings are those that have an equal quantity of 'L' and 'R' 
	characters. Given a balanced string s, split it in the maximum amount of 
	balanced strings. Return the maximum amount of split balanced strings.

	Example 1:
	Input: s = "RLRRLLRLRL"
	Output: 4
	Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring 
	             contains same number of 'L' and 'R'.

	Example 2:
	Input: s = "RLLLLRRRLR"
	Output: 3
	Explanation: s can be split into "RL", "LLLRRR", "LR", each substring 
	             contains same number of 'L' and 'R'.
	
	Example 3:
	Input: s = "LLLLRRRR"
	Output: 1
	Explanation: s can be split into "LLLLRRRR".

	Example 4:
	Input: s = "RLRRRLLRLL"
	Output: 2
	Explanation: s can be split into "RL", "RRRLLRLL", since each substring 
	             contains an equal number of 'L' and 'R'

	Constraints:
	* 1 <= s.length <= 1000
	* s[i] is either 'L' or 'R'.
	* s is a balanced string."""

    def balancedStringSplit(self, s: str) -> int:
        ans = prefix = 0
        for c in s: 
            prefix += 1 if c == "R" else -1
            if not prefix: ans += 1
        return ans 


    """1221. Split a String in Balanced Strings (Easy)
	Balanced strings are those that have an equal quantity of 'L' and 'R' 
	characters. Given a balanced string s, split it in the maximum amount of 
	balanced strings. Return the maximum amount of split balanced strings.

	Example 1:
	Input: s = "RLRRLLRLRL"
	Output: 4
	Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring 
	             contains same number of 'L' and 'R'.

	Example 2:
	Input: s = "RLLLLRRRLR"
	Output: 3
	Explanation: s can be split into "RL", "LLLRRR", "LR", each substring 
	             contains same number of 'L' and 'R'.
	
	Example 3:
	Input: s = "LLLLRRRR"
	Output: 1
	Explanation: s can be split into "LLLLRRRR".

	Example 4:
	Input: s = "RLRRRLLRLL"
	Output: 2
	Explanation: s can be split into "RL", "RRRLLRLL", since each substring 
	             contains an equal number of 'L' and 'R'

	Constraints:
	* 1 <= s.length <= 1000
	* s[i] is either 'L' or 'R'.
	* s is a balanced string."""

    def balancedStringSplit(self, s: str) -> int:
        ans = prefix = 0
        for c in s: 
            prefix += 1 if c == "R" else -1
            if not prefix: ans += 1
        return ans 


    """1222. Queens That Can Attack the King (Medium)
	On an 8x8 chessboard, there can be multiple Black Queens and one White King. 
	Given an array of integer coordinates queens that represents the positions 
	of the Black Queens, and a pair of coordinates king that represent the 
	position of the White King, return the coordinates of all the queens (in any 
	order) that can attack the King.

	Example 1:
	Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
	Output: [[0,1],[1,0],[3,3]]
	Explanation:  
	The queen at [0,1] can attack the king cause they're in the same row. 
	The queen at [1,0] can attack the king cause they're in the same column. 
	The queen at [3,3] can attack the king cause they're in the same diagnal. 
	The queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1]. 
	The queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0]. 
	The queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king.

	Example 2:
	Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
	Output: [[2,2],[3,4],[4,4]]

	Example 3:
	Input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],
	                 [1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],
	                 [2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],
	                 [2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]
	Output: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]

	Constraints:
	* 1 <= queens.length <= 63
	* queens[i].length == 2
	* 0 <= queens[i][j] < 8
	* king.length == 2
	* 0 <= king[0], king[1] < 8
	* At most one piece is allowed in a cell."""

    def queensAttacktheKing(self, queens: List[List[int]], king: List[int]) -> List[List[int]]:
        ans = []
        x, y = king
        queens = {(x, y) for x, y in queens}
        for dx in (-1, 0, 1):
            for dy in (-1, 0, 1):
                for k in range(1, 8):
                    xx, yy = x+k*dx, y+k*dy
                    if (xx, yy) in queens: 
                        ans.append([xx, yy])
                        break 
        return ans 


    """1223. Dice Roll Simulation (Hard)
	A die simulator generates a random number from 1 to 6 for each roll. You 
	introduced a constraint to the generator such that it cannot roll the 
	number i more than rollMax[i] (1-indexed) consecutive times.  Given an 
	array of integers rollMax and an integer n, return the number of distinct 
	sequences that can be obtained with exact n rolls. Two sequences are 
	considered different if at least one element differs from each other. Since 
	the answer may be too large, return it modulo 10^9 + 7.

	Example 1:
	Input: n = 2, rollMax = [1,1,2,2,2,3]
	Output: 34
	Explanation: There will be 2 rolls of die, if there are no constraints on 
	             the die, there are 6 * 6 = 36 possible combinations. In this 
	             case, looking at rollMax array, the numbers 1 and 2 appear at 
	             most once consecutively, therefore sequences (1,1) and (2,2) 
	             cannot occur, so the final answer is 36-2 = 34.

	Example 2:
	Input: n = 2, rollMax = [1,1,1,1,1,1]
	Output: 30
	
	Example 3:
	Input: n = 3, rollMax = [1,1,1,2,2,3]
	Output: 181

	Constraints:
	* 1 <= n <= 5000
	* rollMax.length == 6
	* 1 <= rollMax[i] <= 15"""

    def dieSimulator(self, n: int, rollMax: List[int]) -> int:
        
        @cache
        def fn(n, x, r):
            """Return number of sequences with n rolls left with r occurrences of x."""
            if n == 0: return 1
            ans = 0
            for xx in range(6): 
                if xx != x: ans += fn(n-1, xx, 1)
                elif xx == x and r < rollMax[x]: ans += fn(n-1, x, r+1)
            return ans 
        
        return sum(fn(n-1, x, 1) for x in range(6)) % 1_000_000_007


    """1224. Maximum Equal Frequency (Hard)
	Given an array nums of positive integers, return the longest possible 
	length of an array prefix of nums, such that it is possible to remove 
	exactly one element from this prefix so that every number that has appeared 
	in it will have the same number of occurrences. If after removing one 
	element there are no remaining elements, it's still considered that every 
	appeared number has the same number of ocurrences (0).

	Example 1:
	Input: nums = [2,2,1,1,5,3,3,5]
	Output: 7
	Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove 
	             nums[4]=5, we will get [2,2,1,1,3,3], so that each number 
	             will appear exactly twice.

	Example 2:
	Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]
	Output: 13

	Example 3:
	Input: nums = [1,1,1,2,2,2]
	Output: 5

	Example 4:
	Input: nums = [10,2,8,9,3,8,1,5,2,3,7,6]
	Output: 8

	Constraints:
	* 2 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^5"""

    def maxEqualFreq(self, nums: List[int]) -> int:
        ans = most = 0
        cnt = defaultdict(int)
        freq = defaultdict(int)
        for i, x in enumerate(nums):
            cnt[x] += 1
            freq[cnt[x]-1] -= 1
            freq[cnt[x]] += 1
            most = max(most, cnt[x])
            if most == 1 or most * freq[most] == i or (most-1)*freq[most-1] + most == i+1: ans = i+1
        return ans 


    """1228. Missing Number In Arithmetic Progression (Easy)
	In some array arr, the values were in arithmetic progression: the values 
	arr[i+1] - arr[i] are all equal for every 0 <= i < arr.length - 1. Then, a 
	value from arr was removed that was not the first or last value in the 
	array. Return the removed value.

	Example 1:
	Input: arr = [5,7,11,13]
	Output: 9
	Explanation: The previous array was [5,7,9,11,13].

	Example 2:
	Input: arr = [15,13,12]
	Output: 14
	Explanation: The previous array was [15,14,13,12].

	Constraints:
	* 3 <= arr.length <= 1000
	* 0 <= arr[i] <= 10^5"""

    def missingNumber(self, arr: List[int]) -> int:
        chg = (arr[-1] - arr[0])//len(arr)
        lo, hi = 0, len(arr)
        while lo < hi: 
            mid = lo + hi >> 1
            if arr[mid] == arr[0] + mid * chg: lo = mid + 1
            else: hi = mid
        return arr[0] + lo * chg


    """1229. Meeting Scheduler (Medium)
	Given the availability time slots arrays slots1 and slots2 of two people 
	and a meeting duration duration, return the earliest time slot that works 
	for both of them and is of duration duration. If there is no common time 
	slot that satisfies the requirements, return an empty array. The format of 
	a time slot is an array of two elements [start, end] representing an 
	inclusive time range from start to end. It is guaranteed that no two 
	availability slots of the same person intersect with each other. That is, 
	for any two time slots [start1, end1] and [start2, end2] of the same person, 
	either start1 > end2 or start2 > end1.

	Example 1:
	Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8
	Output: [60,68]

	Example 2:
	Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12
	Output: []

	Constraints:
	* 1 <= slots1.length, slots2.length <= 10^4
	* slots1[i].length, slots2[i].length == 2
	* slots1[i][0] < slots1[i][1]
	* slots2[i][0] < slots2[i][1]
	* 0 <= slots1[i][j], slots2[i][j] <= 10^9
	* 1 <= duration <= 10^6"""

    def minAvailableDuration(self, slots1: List[List[int]], slots2: List[List[int]], duration: int) -> List[int]:
        slots1.sort()
        slots2.sort()
        i = j = 0 
        while i < len(slots1) and j < len(slots2): 
            start = max(slots1[i][0], slots2[j][0])
            end = min(slots1[i][1], slots2[j][1])
            if start + duration <= end: return [start, start + duration]
            if slots1[i][1] <= slots2[j][1]: i += 1
            else: j += 1
        return []


    """1230. Toss Strange Coins (Medium)
	You have some coins. The i-th coin has a probability prob[i] of facing 
	heads when tossed. Return the probability that the number of coins facing 
	heads equals target if you toss every coin exactly once.

	Example 1:
	Input: prob = [0.4], target = 1
	Output: 0.40000

	Example 2:
	Input: prob = [0.5,0.5,0.5,0.5,0.5], target = 0
	Output: 0.03125

	Constraints:
	* 1 <= prob.length <= 1000
	* 0 <= prob[i] <= 1
	* 0 <= target <= prob.length
	* Answers will be accepted as correct if they are within 10^-5 of the 
	  correct answer."""

    def probabilityOfHeads(self, prob: List[float], target: int) -> float:
        dp = [[0]*(1 + target) for _ in range(1 + len(prob))]
        dp[-1][0] = 1
        for i in reversed(range(len(prob))): 
            for j in range(target+1): 
                if j: dp[i][j] = prob[i]*dp[i+1][j-1]
                dp[i][j] += (1-prob[i])*dp[i+1][j]
        return dp[0][-1]


    """1232. Check If It Is a Straight Line (Easy)
	You are given an array coordinates, coordinates[i] = [x, y], where [x, y] 
	represents the coordinate of a point. Check if these points make a straight 
	line in the XY plane.

	Example 1:
	Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
	Output: true

	Example 2:
	Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
	Output: false

	Constraints:
	* 2 <= coordinates.length <= 1000
	* coordinates[i].length == 2
	* -10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4
	* coordinates contains no duplicate point."""

    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:
        x0, y0 = coordinates[0]
        x1, y1 = coordinates[1]
        for x, y in coordinates[2:]: 
            if (y1-y0)*(x-x0) != (y-y0)*(x1-x0): return False 
        return True 


    """1233. Remove Sub-Folders from the Filesystem (Medium)
	Given a list of folders, remove all sub-folders in those folders and return 
	in any order the folders after removing. If a folder[i] is located within 
	another folder[j], it is called a sub-folder of it. The format of a path is 
	one or more concatenated strings of the form: / followed by one or more 
	lowercase English letters. For example, /leetcode and /leetcode/problems 
	are valid paths while an empty string and / are not.

	Example 1:
	Input: folder = ["/a","/a/b","/c/d","/c/d/e","/c/f"]
	Output: ["/a","/c/d","/c/f"]
	Explanation: Folders "/a/b/" is a subfolder of "/a" and "/c/d/e" is inside 
	             of folder "/c/d" in our filesystem.

	Example 2:
	Input: folder = ["/a","/a/b/c","/a/b/d"]
	Output: ["/a"]
	Explanation: Folders "/a/b/c" and "/a/b/d/" will be removed because they 
	             are subfolders of "/a".
	
	Example 3:
	Input: folder = ["/a/b/c","/a/b/ca","/a/b/d"]
	Output: ["/a/b/c","/a/b/ca","/a/b/d"]

	Constraints:
	* 1 <= folder.length <= 4 * 10^4
	* 2 <= folder[i].length <= 100
	* folder[i] contains only lowercase letters and '/'
	* folder[i] always starts with character '/'
	* Each folder name is unique."""

    def removeSubfolders(self, folder: List[str]) -> List[str]:
        ans = []
        for x in sorted(folder): 
            if not ans or not x.startswith(ans[-1]+"/"): 
                ans.append(x)
        return ans 


    """1234. Replace the Substring for Balanced String (Medium)
	You are given a string containing only 4 kinds of characters 'Q', 'W', 'E' 
	and 'R'. A string is said to be balanced if each of its characters appears 
	n/4 times where n is the length of the string. Return the minimum length of 
	the substring that can be replaced with any other string of the same length 
	to make the original string s balanced. Return 0 if the string is already 
	balanced.

	Example 1:
	Input: s = "QWER"
	Output: 0
	Explanation: s is already balanced.

	Example 2:
	Input: s = "QQWE"
	Output: 1
	Explanation: We need to replace a 'Q' to 'R', so that "RQWE" (or "QRWE") is balanced.

	Example 3:
	Input: s = "QQQW"
	Output: 2
	Explanation: We can replace the first "QQ" to "ER". 

	Example 4:
	Input: s = "QQQQ"
	Output: 3
	Explanation: We can replace the last 3 'Q' to make s = "QWER".

	Constraints:
	* 1 <= s.length <= 10^5
	* s.length is a multiple of 4
	* s contains only 'Q', 'W', 'E' and 'R'."""

    def balancedString(self, s: str) -> int:
        freq = {}
        for c in s: freq[c] = 1 + freq.get(c, 0)
            
        ans = len(s)
        ii = 0
        for i, c in enumerate(s): 
            freq[c] -= 1
            while ii < len(s) and all(freq[x] <= len(s)//4 for x in freq): 
                ans = min(ans, i-ii+1)
                freq[s[ii]] += 1
                ii += 1
        return ans 


    """1235. Maximum Profit in Job Scheduling (Hard)
	We have n jobs, where every job is scheduled to be done from startTime[i] 
	to endTime[i], obtaining a profit of profit[i]. You're given the startTime, 
	endTime and profit arrays, return the maximum profit you can take such that 
	there are no two jobs in the subset with overlapping time range. If you 
	choose a job that ends at time X you will be able to start another job that 
	starts at time X.

	Example 1:
	Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
	Output: 120
	Explanation: The subset chosen is the first and fourth job. Time range 
	             [1-3]+[3-6] , we get profit of 120 = 50 + 70.

	Example 2:
	Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
	Output: 150
	Explanation: The subset chosen is the first, fourth and fifth job. Profit 
	             obtained 150 = 20 + 70 + 60.
	
	Example 3:
	Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
	Output: 6

	Constraints:
	* 1 <= startTime.length == endTime.length == profit.length <= 5 * 10^4
	* 1 <= startTime[i] < endTime[i] <= 10^9
	* 1 <= profit[i] <= 10^4"""

    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        startTime, endTime, profit = zip(*sorted(zip(startTime, endTime, profit)))
        
        @cache
        def fn(i): 
            """Return max profit starting from index i."""
            if i == len(startTime): return 0 
            ii = bisect_left(startTime, endTime[i])
            return max(fn(i+1), profit[i] + fn(ii))
        
        return fn(0)


    """1236. Web Crawler (Medium)
	Given a url startUrl and an interface HtmlParser, implement a web crawler 
	to crawl all links that are under the same hostname as startUrl. Return all 
	urls obtained by your web crawler in any order. Your crawler should:
	* Start from the page: startUrl
	* Call HtmlParser.getUrls(url) to get all urls from a webpage of given url.
	* Do not crawl the same link twice.
	* Explore only the links that are under the same hostname as startUrl.

	As shown in the example url above, the hostname is example.org. For 
	simplicity sake, you may assume all urls use http protocol without any port 
	specified. For example, the urls http://leetcode.com/problems and 
	http://leetcode.com/contest are under the same hostname, while urls 
	http://example.org/test and http://example.com/abc are not under the same 
	hostname.

	The HtmlParser interface is defined as such: 
	interface HtmlParser {
	  // Return a list of all urls from a webpage of given url.
	  public List<String> getUrls(String url);
	}
	Below are two examples explaining the functionality of the problem, for 
	custom testing purposes you'll have three variables urls, edges and 
	startUrl. Notice that you will only have access to startUrl in your code, 
	while urls and edges are not directly accessible to you in code.

	Example 1:
	Input:
	urls = [
	  "http://news.yahoo.com",
	  "http://news.yahoo.com/news",
	  "http://news.yahoo.com/news/topics/",
	  "http://news.google.com",
	  "http://news.yahoo.com/us"
	]
	edges = [[2,0],[2,1],[3,2],[3,1],[0,4]]
	startUrl = "http://news.yahoo.com/news/topics/"
	Output: [
	  "http://news.yahoo.com",
	  "http://news.yahoo.com/news",
	  "http://news.yahoo.com/news/topics/",
	  "http://news.yahoo.com/us"
	]

	Example 2:
	Input: 
	urls = [
	  "http://news.yahoo.com",
	  "http://news.yahoo.com/news",
	  "http://news.yahoo.com/news/topics/",
	  "http://news.google.com"
	]
	edges = [[0,2],[2,1],[3,2],[3,1],[3,0]]
	startUrl = "http://news.google.com"
	Output: ["http://news.google.com"]
	Explanation: The startUrl links to all other pages that do not share the 
	             same hostname.

	Constraints:
	* 1 <= urls.length <= 1000
	* 1 <= urls[i].length <= 300
	* startUrl is one of the urls.
	* Hostname label must be from 1 to 63 characters long, including the dots, 
	  may contain only the ASCII letters from 'a' to 'z', digits  from '0' to 
	  '9' and the hyphen-minus character ('-').
	* The hostname may not start or end with the hyphen-minus character ('-'). 
	* See: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
	* You may assume there're no duplicates in url library."""

    def crawl(self, startUrl: str, htmlParser: 'HtmlParser') -> List[str]:
        hostname = startUrl.split("/")[2]
        queue = [startUrl]
        seen = {startUrl}
        
        for url in queue: 
            urls = htmlParser.getUrls(url)
            for x in urls: 
                if x.split("/")[2] == hostname and x not in seen: 
                    queue.append(x)
                    seen.add(x)
        return queue


    """1239. Maximum Length of a Concatenated String with Unique Characters (Medium)
	Given an array of strings arr. String s is a concatenation of a sub-
	sequence of arr which have unique characters. Return the maximum possible 
	length of s.

	Example 1:
	Input: arr = ["un","iq","ue"]
	Output: 4
	Explanation: All possible concatenations are "","un","iq","ue","uniq" and 
	             "ique". Maximum length is 4.
	
	Example 2:
	Input: arr = ["cha","r","act","ers"]
	Output: 6
	Explanation: Possible solutions are "chaers" and "acters".

	Example 3:
	Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
	Output: 26

	Constraints:
	* 1 <= arr.length <= 16
	* 1 <= arr[i].length <= 26
	* arr[i] contains only lower case English letters."""

    def maxLength(self, arr: List[str]) -> int:
        ans = [""]
        for x in arr: 
            for i in range(len(ans)):
                xx = x + ans[i]
                if len(xx) == len(set(xx)): ans.append(xx)
        return max(len(x) for x in ans)


    """1240. Tiling a Rectangle with the Fewest Squares (Hard)
	Given a rectangle of size n x m, find the minimum number of integer-sided 
	squares that tile the rectangle.

	Example 1:
	Input: n = 2, m = 3
	Output: 3
	Explanation: 3 squares are necessary to cover the rectangle.
	             2 (squares of 1x1)
	             1 (square of 2x2)

	Example 2:
	Input: n = 5, m = 8
	Output: 5

	Example 3:
	Input: n = 11, m = 13
	Output: 6

	Constraints:
	* 1 <= n <= 13
	* 1 <= m <= 13"""

    def tilingRectangle(self, n: int, m: int) -> int:
        if n == m: return 1
        depth = [0]*m
        
        def fn(x): 
            """Explore tiling rectangle area via backtracking."""
            nonlocal ans 
            if x < ans: 
                if min(depth) == n: ans = x # all tiled
                else: 
                    i = min(depth)
                    j = jj = depth.index(i) # (i, j)
                    while jj < m and depth[jj] == depth[j]: jj += 1
                    k = min(n - i, jj - j)
                    for kk in reversed(range(1, k+1)): 
                        for jj in range(j, j+kk): depth[jj] += kk
                        fn(x+1)
                        for jj in range(j, j+kk): depth[jj] -= kk
                            
        ans = max(n, m)
        fn(0)
        return ans 


    """1243. Array Transformation (Easy)
	Given an initial array arr, every day you produce a new array using the 
	array of the previous day. On the i-th day, you do the following operations 
	on the array of day i-1 to produce the array of day i:
	* If an element is smaller than both its left neighbor and its right 
	  neighbor, then this element is incremented.
	* If an element is bigger than both its left neighbor and its right 
	  neighbor, then this element is decremented.
	* The first and last elements never change.
	After some days, the array does not change. Return that final array.

	Example 1:
	Input: arr = [6,2,3,4]
	Output: [6,3,3,4]
	Explanation: On the first day, the array is changed from [6,2,3,4] to 
	             [6,3,3,4]. No more operations can be done to this array.
	
	Example 2:
	Input: arr = [1,6,3,4,3,5]
	Output: [1,4,4,4,4,5]
	Explanation: 
	On the first day, the array is changed from [1,6,3,4,3,5] to [1,5,4,3,4,5].
	On the second day, the array is changed from [1,5,4,3,4,5] to [1,4,4,4,4,5].
	No more operations can be done to this array.

	Constraints:
	* 3 <= arr.length <= 100
	* 1 <= arr[i] <= 100"""

    def transformArray(self, arr: List[int]) -> List[int]:
        prev = [0]*len(arr)
        while prev != arr: 
            prev = arr[:]
            for i in range(1, len(arr)-1): 
                if prev[i-1] < prev[i] > prev[i+1]: arr[i] -= 1
                elif prev[i-1] > prev[i] < prev[i+1]: arr[i] += 1
        return arr


    """1249. Minimum Remove to Make Valid Parentheses (Medium)
	Given a string s of '(' , ')' and lowercase English characters. Your task 
	is to remove the minimum number of parentheses ( '(' or ')', in any 
	positions ) so that the resulting parentheses string is valid and return 
	any valid string. Formally, a parentheses string is valid if and only if:
	* It is the empty string, contains only lowercase characters, or
	* It can be written as AB (A concatenated with B), where A and B are valid strings, or
	* It can be written as (A), where A is a valid string.

	Example 1:
	Input: s = "lee(t(c)o)de)"
	Output: "lee(t(c)o)de"
	Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

	Example 2:
	Input: s = "a)b(c)d"
	Output: "ab(c)d"

	Example 3:
	Input: s = "))(("
	Output: ""
	Explanation: An empty string is also valid.

	Example 4:
	Input: s = "(a(b(c)d)"
	Output: "a(b(c)d)"

	Constraints:
	* 1 <= s.length <= 10^5
	* s[i] is one of  '(' , ')' and lowercase English letters."""

    def minRemoveToMakeValid(self, s: str) -> str:
        s = list(s)
        stack = []
        for i, c in enumerate(s): 
            if c == "(": stack.append(i)
            elif c == ")": 
                if stack: stack.pop() # matching 
                else: s[i] = "" # extra 
        while stack: s[stack.pop()] = ""
        return "".join(s)


    """1268. Search Suggestions System (Medium)
	Given an array of strings products and a string searchWord. We want to 
	design a system that suggests at most three product names from products 
	after each character of searchWord is typed. Suggested products should have 
	common prefix with the searchWord. If there are more than three products 
	with a common prefix return the three lexicographically minimums products.
	Return list of lists of the suggested products after each character of 
	searchWord is typed. 

	Example 1:
	Input: products = ["mobile","mouse","moneypot","monitor","mousepad"], 
	       searchWord = "mouse"
	Output: [["mobile","moneypot","monitor"],
	         ["mobile","moneypot","monitor"],
	         ["mouse","mousepad"],
	         ["mouse","mousepad"],
	         ["mouse","mousepad"]]
	Explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"]
	             After typing m and mo all products match and we show user ["mobile","moneypot","monitor"]
	             After typing mou, mous and mouse the system suggests ["mouse","mousepad"]
	
	Example 2:
	Input: products = ["havana"], 
	       searchWord = "havana"
	Output: [["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]

	Example 3:
	Input: products = ["bags","baggage","banner","box","cloths"], 
	       searchWord = "bags"
	Output: [["baggage","bags","banner"],
	         ["baggage","bags","banner"],
	         ["baggage","bags"],
	         ["bags"]]

	Example 4:
	Input: products = ["havana"], searchWord = "tatiana"
	Output: [[],[],[],[],[],[],[]]

	Constraints:
	* 1 <= products.length <= 1000
	* There are no repeated elements in products.
	* 1 <= Σ products[i].length <= 2 * 10^4
	* All characters of products[i] are lower-case English letters.
	* 1 <= searchWord.length <= 1000
	* All characters of searchWord are lower-case English letters."""

    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        products.sort()
        ans = []
        lo, hi = 0, len(products)-1
        for i, ch in enumerate(searchWord):
            while lo < len(products) and (len(products[lo]) <= i or products[lo][i] < ch): lo += 1
            while hi >= 0 and (len(products[hi]) <= i or ch < products[hi][i]): hi -= 1
            ans.append(products[lo: min(lo+3, hi+1)])
        return ans


    """1271. Hexspeak (Easy)
	A decimal number can be converted to its Hexspeak representation by first 
	converting it to an uppercase hexadecimal string, then replacing all 
	occurrences of the digit 0 with the letter O, and the digit 1 with the 
	letter I.  Such a representation is valid if and only if it consists only 
	of the letters in the set {"A", "B", "C", "D", "E", "F", "I", "O"}. Given 
	a string num representing a decimal integer N, return the Hexspeak 
	representation of N if it is valid, otherwise return "ERROR".

	Example 1:
	Input: num = "257"
	Output: "IOI"
	Explanation:  257 is 101 in hexadecimal.

	Example 2:
	Input: num = "3"
	Output: "ERROR"

	Constraints:
	* 1 <= N <= 10^12
	* There are no leading zeros in the given string.
	* All answers must be in uppercase letters."""

    def toHexspeak(self, num: str) -> str:
        s = hex(int(num))[2:].upper().translate(str.maketrans("01", "OI"))
        return s if all(c.isalpha() for c in s) else "ERROR"


    """1272. Remove Interval (Medium)
	A set of real numbers can be represented as the union of several disjoint 
	intervals, where each interval is in the form [a, b). A real number x is in 
	the set if one of its intervals [a, b) contains x (i.e. a <= x < b). You 
	are given a sorted list of disjoint intervals intervals representing a set 
	of real numbers as described above, where intervals[i] = [ai, bi] represents 
	the interval [ai, bi). You are also given another interval toBeRemoved. 
	Return the set of real numbers with the interval toBeRemoved removed from 
	intervals. In other words, return the set of real numbers such that every x 
	in the set is in intervals but not in toBeRemoved. Your answer should be a 
	sorted list of disjoint intervals as described above.

	Example 1:
	Input: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]
	Output: [[0,1],[6,7]]

	Example 2:
	Input: intervals = [[0,5]], toBeRemoved = [2,3]
	Output: [[0,2],[3,5]]

	Example 3:
	Input: intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]
	Output: [[-5,-4],[-3,-2],[4,5],[8,9]]

	Constraints:
	* 1 <= intervals.length <= 10^4
	* -10^9 <= ai < bi <= 10^9"""

    def removeInterval(self, intervals: List[List[int]], toBeRemoved: List[int]) -> List[List[int]]:
        ans = []
        for x, y in intervals: 
            if x < toBeRemoved[0]: ans.append([x, min(toBeRemoved[0], y)])
            if toBeRemoved[1] < y: ans.append([max(x, toBeRemoved[1]), y])
        return ans 


    """1273. Delete Tree Nodes (Medium)
	A tree rooted at node 0 is given as follows:
	* The number of nodes is nodes;
	* The value of the i-th node is value[i];
	* The parent of the i-th node is parent[i].
	Remove every subtree whose sum of values of nodes is zero. After doing so, 
	return the number of nodes remaining in the tree.

	Example 1:
	Input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]
	Output: 2

	Example 2:
	Input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-2]
	Output: 6

	Example 3:
	Input: nodes = 5, parent = [-1,0,1,0,0], value = [-672,441,18,728,378]
	Output: 5

	Example 4:
	Input: nodes = 5, parent = [-1,0,0,1,1], value = [-686,-842,616,-739,-746]
	Output: 5

	Constraints:
	* 1 <= nodes <= 10^4
	* parent.length == nodes
	* 0 <= parent[i] <= nodes - 1
	* parent[0] == -1 which indicates that 0 is the root.
	* value.length == nodes
	* -10^5 <= value[i] <= 10^5
	* The given input is guaranteed to represent a valid tree."""

    def deleteTreeNodes(self, nodes: int, parent: List[int], value: List[int]) -> int:
        tree = {} # tree as adjacency list 
        for i, x in enumerate(parent): 
            tree.setdefault(x, []).append(i)
        
        def fn(n): 
            """Return sum and count of sub-tree rooted at n."""
            s, c = value[n], 1
            for nn in tree.get(n, []): 
                ss, cc = fn(nn)
                s += ss
                c += cc 
            return (s, c) if s != 0 else (0, 0)
        
        return fn(0)[1]


    """1275. Find Winner on a Tic Tac Toe Game (Easy)
	Tic-tac-toe is played by two players A and B on a 3 x 3 grid. Here are the 
	rules of Tic-Tac-Toe:
	* Players take turns placing characters into empty squares (" ").
	* The first player A always places "X" characters, while the second player 
	  B always places "O" characters.
	* "X" and "O" characters are always placed into empty squares, never on 
	  filled ones.
	* The game ends when there are 3 of the same (non-empty) character filling 
	  any row, column, or diagonal.
	* The game also ends if all squares are non-empty.
	* No more moves can be played if the game is over.
	Given an array moves where each element is another array of size 2 
	corresponding to the row and column of the grid where they mark their 
	respective character in the order in which A and B play. Return the winner 
	of the game if it exists (A or B), in case the game ends in a draw return 
	"Draw", if there are still movements to play return "Pending". You can 
	assume that moves is valid (It follows the rules of Tic-Tac-Toe), the grid 
	is initially empty and A will play first.

	Example 1:
	Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
	Output: "A"
	Explanation: "A" wins, he always plays first.
	             "X  "    "X  "    "X  "    "X  "    "X  "
	             "   " -> "   " -> " X " -> " X " -> " X "
	             "   "    "O  "    "O  "    "OO "    "OOX"
	
	Example 2:
	Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
	Output: "B"
	Explanation: "B" wins.
	             "X  "    "X  "    "XX "    "XXO"    "XXO"    "XXO"
	             "   " -> " O " -> " O " -> " O " -> "XO " -> "XO " 
	             "   "    "   "    "   "    "   "    "   "    "O  "
	
	Example 3:
	Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
	Output: "Draw"
	Explanation: The game ends in a draw since there are no moves to make.
	             "XXO"
	             "OOX"
	             "XOX"
	
	Example 4:
	Input: moves = [[0,0],[1,1]]
	Output: "Pending"
	Explanation: The game has not finished yet.
	             "X  "
	             " O "
	             "   "

	Constraints:
	* 1 <= moves.length <= 9
	* moves[i].length == 2
	* 0 <= moves[i][j] <= 2
	* There are no repeated elements on moves.
	* moves follow the rules of tic tac toe."""

    def tictactoe(self, moves: List[List[int]]) -> str:
        score = [[0]*8 for _ in range(2)]
        
        for p, (i, j) in enumerate(moves):
            p %= 2
            score[p][i] += 1
            score[p][3+j] += 1
            if i == j: score[p][6] += 1
            if i+j == 2: score[p][7] += 1
            if any(x == 3 for x in score[p]): return "AB"[p]
            
        return "Pending" if len(moves) < 9 else "Draw"


    """1307. Verbal Arithmetic Puzzle (Hard)
	Given an equation, represented by words on left side and the result on 
	right side. You need to check if the equation is solvable under the 
	following rules:
	* Each character is decoded as one digit (0 - 9).
	* Every pair of different characters they must map to different digits.
	* Each words[i] and result are decoded as one number without leading zeros.
	* Sum of numbers on left side (words) will equal to the number on right 
	  side (result). 
	Return True if the equation is solvable otherwise return False.

	Example 1:
	Input: words = ["SEND","MORE"], result = "MONEY"
	Output: true
	Explanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'
	             Such that: "SEND" + "MORE" = "MONEY" ,  9567 + 1085 = 10652

	Example 2:
	Input: words = ["SIX","SEVEN","SEVEN"], result = "TWENTY"
	Output: true
	Explanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4
	             Such that: "SIX" + "SEVEN" + "SEVEN" = "TWENTY" ,  650 + 68782 + 68782 = 138214
	
	Example 3:
	Input: words = ["THIS","IS","TOO"], result = "FUNNY"
	Output: true

	Example 4:
	Input: words = ["LEET","CODE"], result = "POINT"
	Output: false

	Constraints:
	* 2 <= words.length <= 5
	* 1 <= words[i].length, result.length <= 7
	* words[i], result contain only uppercase English letters.
	* The number of different characters used in the expression is at most 10."""

    def isSolvable(self, words: List[str], result: str) -> bool:
        if max(map(len, words)) > len(result): return False # edge case 
        
        words.append(result)
        digits = [0]*10 
        mp = {} # mapping from letter to digit 
        
        def fn(i, j, val): 
            """Find proper mapping for words[i][~j] and result[~j] via backtracking."""
            if j == len(result): return val == 0 # base condition 
            if i == len(words): return val % 10 == 0 and fn(0, j+1, val//10)
            
            if j >= len(words[i]): return fn(i+1, j, val)
            if words[i][~j] in mp: 
                if j and j+1 == len(words[i]) and mp[words[i][~j]] == 0: return # backtrack (no leading 0 unless single digit)
                if i+1 == len(words): return fn(i+1, j, val - mp[words[i][~j]])
                else: return fn(i+1, j, val + mp[words[i][~j]])
            else: 
                for k, x in enumerate(digits): 
                    if not x and (k or j == 0 or j+1 < len(words[i])): # (no leading 0 unless single digit)
                        mp[words[i][~j]] = k
                        digits[k] = 1
                        if i+1 == len(words) and fn(i+1, j, val-k): return True 
                        if i+1 < len(words) and fn(i+1, j, val+k): return True 
                        digits[k] = 0
                        mp.pop(words[i][~j])
        
        return fn(0, 0, 0)


    """1314. Matrix Block Sum (Medium)
	Given a m x n matrix mat and an integer k, return a matrix answer where 
	each answer[i][j] is the sum of all elements mat[r][c] for:
	* i - k <= r <= i + k,
	* j - k <= c <= j + k, and
	* (r, c) is a valid position in the matrix.

	Example 1:
	Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
	Output: [[12,21,16],[27,45,33],[24,39,28]]

	Example 2:
	Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
	Output: [[45,45,45],[45,45,45],[45,45,45]]

	Constraints:
	* m == mat.length
	* n == mat[i].length
	* 1 <= m, n, k <= 100
	* 1 <= mat[i][j] <= 100"""

    def matrixBlockSum(self, mat: List[List[int]], k: int) -> List[List[int]]:
        m, n = len(mat), len(mat[0])
        prefix = [[0]*(n+1) for _ in range(m+1)]
        for i in range(m):
            for j in range(n): 
                prefix[i+1][j+1] = mat[i][j] + prefix[i][j+1] + prefix[i+1][j] - prefix[i][j]
        ans = [[0]*n for _ in range(m)]
        for i in range(m):
            for j in range(n): 
                r0, r1 = max(0, i-k), min(m-1, i+k)
                c0, c1 = max(0, j-k), min(n-1, j+k)
                ans[i][j] = prefix[r1+1][c1+1] - prefix[r0][c1+1] - prefix[r1+1][c0] + prefix[r0][c0]
        return ans 


    """1317. Convert Integer to the Sum of Two No-Zero Integers (Easy)
	Given an integer n. No-Zero integer is a positive integer which doesn't 
	contain any 0 in its decimal representation. Return a list of two integers 
	[A, B] where:
	* A and B are No-Zero integers.
	* A + B = n
	It's guarateed that there is at least one valid solution. If there are many 
	valid solutions you can return any of them.

	Example 1:
	Input: n = 2
	Output: [1,1]
	Explanation: A = 1, B = 1. A + B = n and both A and B don't contain any 0 
	             in their decimal representation.

	Example 2:
	Input: n = 11
	Output: [2,9]
	
	Example 3:
	Input: n = 10000
	Output: [1,9999]

	Example 4:
	Input: n = 69
	Output: [1,68]

	Example 5:
	Input: n = 1010
	Output: [11,999]

	Constraints: 2 <= n <= 10^4"""

    def getNoZeroIntegers(self, n: int) -> List[int]:
        for x in range(1, n//2+1): 
            if "0" not in str(x) and "0" not in str(n-x): 
                return [x, n-x]


    """1318. Minimum Flips to Make a OR b Equal to c (Medium)
	Given 3 positives numbers a, b and c. Return the minimum flips required in 
	some bits of a and b to make ( a OR b == c ). (bitwise OR operation). Flip 
	operation consists of change any single bit 1 to 0 or change the bit 0 to 1 
	in their binary representation.

	Example 1:
	Input: a = 2, b = 6, c = 5
	Output: 3
	Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)

	Example 2:
	Input: a = 4, b = 2, c = 7
	Output: 1

	Example 3:
	Input: a = 1, b = 2, c = 3
	Output: 0

	Constraints:
	* 1 <= a <= 10^9
	* 1 <= b <= 10^9
	* 1 <= c <= 10^9"""

    def minFlips(self, a: int, b: int, c: int) -> int:
        return bin((a | b) ^ c).count("1") + bin(a & b & ((a | b) ^ c)).count("1")


	"""1319. Number of Operations to Make Network Connected (Medium)
	There are n computers numbered from 0 to n-1 connected by ethernet cables 
	connections forming a network where connections[i] = [a, b] represents a 
	connection between computers a and b. Any computer can reach any other 
	computer directly or indirectly through the network. Given an initial 
	computer network connections. You can extract certain cables between two 
	directly connected computers, and place them between any pair of 
	disconnected computers to make them directly connected. Return the minimum 
	number of times you need to do this in order to make all the computers 
	connected. If it's not possible, return -1. 

	Example 1:
	Input: n = 4, connections = [[0,1],[0,2],[1,2]]
	Output: 1
	Explanation: Remove cable between computer 1 and 2 and place between 
	             computers 1 and 3.

	Example 2:
	Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
	Output: 2
	
	Example 3:
	Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]
	Output: -1
	Explanation: There are not enough cables.

	Example 4:
	Input: n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]
	Output: 0

	Constraints:
	* 1 <= n <= 10^5
	* 1 <= connections.length <= min(n*(n-1)/2, 10^5)
	* connections[i].length == 2
	* 0 <= connections[i][0], connections[i][1] < n
	* connections[i][0] != connections[i][1]
	* There are no repeated connections.
	* No two computers are connected by more than one cable.

	class UnionFind:
	    def __init__(self, n):
	        self.parent = list(range(n))
	        self.rank = [1] * n
	    
	    def find(self, p):
	        if p != self.parent[p]: 
	            self.parent[p] = self.find(self.parent[p])
	        return self.parent[p]
	    
	    def union(self, p, q): 
	        prt, qrt = self.find(p), self.find(q) 
	        if prt == qrt: return False # already connected 
	        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
	        self.parent[prt] = qrt
	        self.rank[qrt] += self.rank[prt]
	        return True"""

    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        if len(connections) < n-1: return -1 # not enough cables 
        uf = UnionFind(n)
        for u, v in connections: 
        	uf.union(u, v)
        grp = {uf.find(i) for i in range(n)}
        return len(grp) - 1


    """1320. Minimum Distance to Type a Word Using Two Fingers (Hard)
	You have a keyboard layout as shown above in the XY plane, where each 
	English uppercase letter is located at some coordinate, for example, the 
	letter A is located at coordinate (0,0), the letter B is located at 
	coordinate (0,1), the letter P is located at coordinate (2,3) and the 
	letter Z is located at coordinate (4,1). Given the string word, return the 
	minimum total distance to type such string using only two fingers. The 
	distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. 
	Note that the initial positions of your two fingers are considered free so 
	don't count towards your total distance, also your two fingers do not have 
	to start at the first letter or the first two letters.

	Example 1:
	Input: word = "CAKE"
	Output: 3
	Explanation: 
	Using two fingers, one optimal way to type "CAKE" is: 
	Finger 1 on letter 'C' -> cost = 0 
	Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 
	Finger 2 on letter 'K' -> cost = 0 
	Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 
	Total distance = 3

	Example 2:
	Input: word = "HAPPY"
	Output: 6
	Explanation: 
	Using two fingers, one optimal way to type "HAPPY" is:
	Finger 1 on letter 'H' -> cost = 0
	Finger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2
	Finger 2 on letter 'P' -> cost = 0
	Finger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0
	Finger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4
	Total distance = 6

	Example 3:
	Input: word = "NEW"
	Output: 3

	Example 4:
	Input: word = "YEAR"
	Output: 7

	Constraints:
	* 2 <= word.length <= 300
	* Each word[i] is an English uppercase letter."""

    def minimumDistance(self, word: str) -> int:
        word = [ord(c)-65 for c in word]
        dist = lambda x, y: 0 if -1 in (x, y) else abs(x//6-y//6) + abs(x%6-y%6)
        
        @cache
        def fn(i, f1=-1, f2=-1): 
            """Return minimum distance to type word[i:] with fingers at f1 and f2."""
            if i == len(word): return 0 
            return min(dist(f1, word[i]) + fn(i+1, word[i], f2), dist(f2, word[i]) + fn(i+1, f1, word[i]))
        
        return fn(0)


    """1328. Break a Palindrome (Medium)
	Given a palindromic string of lowercase English letters palindrome, replace 
	exactly one character with any lowercase English letter so that the 
	resulting string is not a palindrome and that it is the lexicographically 
	smallest one possible. Return the resulting string. If there is no way to 
	replace a character to make it not a palindrome, return an empty string. A 
	string a is lexicographically smaller than a string b (of the same length) 
	if in the first position where a and b differ, a has a character strictly 
	smaller than the corresponding character in b. For example, "abcc" is 
	lexicographically smaller than "abcd" because the first position they 
	differ is at the fourth character, and 'c' is smaller than 'd'.

	Example 1:
	Input: palindrome = "abccba"
	Output: "aaccba"
	Explanation: There are many ways to make "abccba" not a palindrome, such as 
	             "zbccba", "aaccba", and "abacba". Of all the ways, "aaccba" is 
	             the lexicographically smallest.
	
	Example 2:
	Input: palindrome = "a"
	Output: ""
	Explanation: There is no way to replace a single character to make "a" not 
	             a palindrome, so return an empty string.
	
	Example 3:
	Input: palindrome = "aa"
	Output: "ab"

	Example 4:
	Input: palindrome = "aba"
	Output: "abb"

	Constraints:
	* 1 <= palindrome.length <= 1000
	* palindrome consists of only lowercase English letters."""

    def breakPalindrome(self, palindrome: str) -> str:
        if len(palindrome) == 1: return "" # edge case 
        palindrome = list(palindrome)
        for i in range(len(palindrome)//2): 
            if palindrome[i] != "a": 
                palindrome[i] = "a"
                break
        else: palindrome[-1] = "b"
        return "".join(palindrome)


    """1329. Sort the Matrix Diagonally (Medium)
	A matrix diagonal is a diagonal line of cells starting from some cell in 
	either the topmost row or leftmost column and going in the bottom-right 
	direction until reaching the matrix's end. For example, the matrix diagonal 
	starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells 
	mat[2][0], mat[3][1], and mat[4][2]. Given an m x n matrix mat of integers, 
	sort each matrix diagonal in ascending order and return the resulting matrix.

	Example 1:
	Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
	Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]

	Constraints:
	* m == mat.length
	* n == mat[i].length
	* 1 <= m, n <= 100
	* 1 <= mat[i][j] <= 100"""

    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:
        m, n = len(mat), len(mat[0]) # dimensions 
        
        for k in range(-m+1, n): 
            i, j = (-k, 0) if k < 0 else (0, k)
            vals = []
            while i < m and j < n: 
                vals.append(mat[i][j])
                i, j = i+1, j+1
            vals.sort()
            while vals:
                i, j = i-1, j-1
                mat[i][j] = vals.pop()
        return mat


    """1338. Reduce Array Size to The Half (Medium)
	Given an array arr.  You can choose a set of integers and remove all the 
	occurrences of these integers in the array. Return the minimum size of the 
	set so that at least half of the integers of the array are removed.

	Example 1:
	Input: arr = [3,3,3,3,5,5,5,2,2,7]
	Output: 2
	Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has 
	             size 5 (i.e equal to half of the size of the old array). 
	             Possible sets of size 2 are {3,5},{3,2},{5,2}. Choosing set 
	             {2,7} is not possible as it will make the new array 
	             [3,3,3,3,5,5,5] which has size greater than half of the size 
	             of the old array.
	
	Example 2:
	Input: arr = [7,7,7,7,7,7]
	Output: 1
	Explanation: The only possible set you can choose is {7}. This will make 
	             the new array empty.
	
	Example 3:
	Input: arr = [1,9]
	Output: 1

	Example 4:
	Input: arr = [1000,1000,3,7]
	Output: 1

	Example 5:
	Input: arr = [1,2,3,4,5,6,7,8,9,10]
	Output: 5

	Constraints:
	* 1 <= arr.length <= 10^5
	* arr.length is even.
	* 1 <= arr[i] <= 10^5"""

    def minSetSize(self, arr: List[int]) -> int:
        freq = {}
        for x in arr: freq[x] = 1 + freq.get(x, 0)
        
        ans = 0
        for i, x in enumerate(sorted(freq.values(), reverse=True)): 
            ans += x
            if ans >= len(arr)//2: return i + 1


    """1339. Maximum Product of Splitted Binary Tree (Medium)
	Given the root of a binary tree, split the binary tree into two subtrees by 
	removing one edge such that the product of the sums of the subtrees is 
	maximized. Return the maximum product of the sums of the two subtrees. 
	Since the answer may be too large, return it modulo 10^9 + 7. Note that you 
	need to maximize the answer before taking the mod and not after taking it.

	Example 1:
	Input: root = [1,2,3,4,5,6]
	Output: 110
	Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. 
	             Their product is 110 (11*10)
	
	Example 2:
	Input: root = [1,null,2,3,4,null,null,5,6]
	Output: 90
	Explanation: Remove the red edge and get 2 binary trees with sum 15 and 6.
	             Their product is 90 (15*6)
	
	Example 3:
	Input: root = [2,3,9,10,7,8,6,5,4,11,1]
	Output: 1025

	Example 4:
	Input: root = [1,1]
	Output: 1

	Constraints:
	* The number of nodes in the tree is in the range [2, 5 * 10^4].
	* 1 <= Node.val <= 10^4"""

    def maxProduct(self, root: Optional[TreeNode]) -> int:
        vals = []
        
        def fn(node): 
            """Return sum of sub-tree."""
            if not node: return 0 
            ans = node.val + fn(node.left) + fn(node.right)
            vals.append(ans)
            return ans
        
        total = fn(root)
        return max((total-x)*x for x in vals) % 1_000_000_007


    """1349. Maximum Students Taking Exam (Hard)
	Given a m * n matrix seats  that represent seats distributions in a 
	classroom. If a seat is broken, it is denoted by '#' character otherwise it 
	is denoted by a '.' character. Students can see the answers of those sitting 
	next to the left, right, upper left and upper right, but he cannot see the 
	answers of the student sitting directly in front or behind him. Return the 
	maximum number of students that can take the exam together without any 
	cheating being possible. Students must be placed in seats in good condition.

	Example 1:
	Input: seats = [["#",".","#","#",".","#"],
	                [".","#","#","#","#","."],
	                ["#",".","#","#",".","#"]]
	Output: 4
	Explanation: Teacher can place 4 students in available seats so they don't 
	             cheat on the exam. 

	Example 2:
	Input: seats = [[".","#"],
	                ["#","#"],
	                ["#","."],
	                ["#","#"],
	                [".","#"]]
	Output: 3
	Explanation: Place all students in available seats. 

	Example 3:
	Input: seats = [["#",".",".",".","#"],
	                [".","#",".","#","."],
	                [".",".","#",".","."],
	                [".","#",".","#","."],
	                ["#",".",".",".","#"]]
	Output: 10
	Explanation: Place students in available seats in column 1, 3 and 5.

	Constraints:
	* seats contains only characters '.' and'#'.
	* m == seats.length
	* n == seats[i].length
	* 1 <= m <= 8
	* 1 <= n <= 8"""

    def maxStudents(self, seats: List[List[str]]) -> int:
        m, n = len(seats), len(seats[0]) # dimensions 
        
        valid = []
        for i in range(m): 
            val = 0
            for j in range(n): 
                if seats[i][j] == ".": val |= 1 << j 
            valid.append(val)
        
        @cache
        def fn(i, mask): 
            """Return max students taking seats[i:] given previous row as mask."""
            if i == len(seats): return 0 
            ans = fn(i+1, 0)
            for x in range(1 << n): 
                if x & valid[i] == x and (x >> 1) & x == 0 and (mask >> 1) & x == 0 and (mask << 1) & x == 0: 
                    ans = max(ans, bin(x).count("1") + fn(i+1, x))
            return ans 
        
        return fn(0, 0)


    """1354. Construct Target Array With Multiple Sums (Hard)
	Given an array of integers target. From a starting array, A consisting of 
	all 1's, you may perform the following procedure :
	* let x be the sum of all elements currently in your array.
	* choose index i, such that 0 <= i < target.size and set the value of A at 
	  index i to x.
	* You may repeat this procedure as many times as needed.
	Return True if it is possible to construct the target array from A 
	otherwise return False.

	Example 1:
	Input: target = [9,3,5]
	Output: true
	Explanation: Start with [1, 1, 1] 
	[1, 1, 1], sum = 3 choose index 1
	[1, 3, 1], sum = 5 choose index 2
	[1, 3, 5], sum = 9 choose index 0
	[9, 3, 5] Done

	Example 2:
	Input: target = [1,1,1,2]
	Output: false
	Explanation: Impossible to create target array from [1,1,1,1].

	Example 3:
	Input: target = [8,5]
	Output: true

	Constraints:
	* N == target.length
	* 1 <= target.length <= 5 * 10^4
	* 1 <= target[i] <= 10^9"""

    def isPossible(self, target: List[int]) -> bool:
        if len(target) == 1: return target[0] == 1 # edge case 
        
        total = sum(target)
        pq = [-x for x in target] # max heap 
        heapify(pq)
        
        while -pq[0] > 1: 
            x = -heappop(pq)
            total -= x
            if x <= total: return False 
            x = (x-1) % total + 1
            heappush(pq, -x)
            total += x
        return True


    """1356. Sort Integers by The Number of 1 Bits (Easy)
	Given an integer array arr. You have to sort the integers in the array in 
	ascending order by the number of 1's in their binary representation and in 
	case of two or more integers have the same number of 1's you have to sort 
	them in ascending order. Return the sorted array.

	Example 1:
	Input: arr = [0,1,2,3,4,5,6,7,8]
	Output: [0,1,2,4,8,3,5,6,7]
	Explantion: [0] is the only integer with 0 bits.
	[1,2,4,8] all have 1 bit.
	[3,5,6] have 2 bits.
	[7] has 3 bits.
	The sorted array by bits is [0,1,2,4,8,3,5,6,7]

	Example 2:
	Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]
	Output: [1,2,4,8,16,32,64,128,256,512,1024]
	Explantion: All integers have 1 bit in the binary representation, you should 
	            just sort them in ascending order.

	Example 3:
	Input: arr = [10000,10000]
	Output: [10000,10000]
	
	Example 4:
	Input: arr = [2,3,5,7,11,13,17,19]
	Output: [2,3,5,17,7,11,13,19]

	Example 5:
	Input: arr = [10,100,1000,10000]
	Output: [10,100,10000,1000]

	Constraints:
	* 1 <= arr.length <= 500
	* 0 <= arr[i] <= 10^4"""

    def sortByBits(self, arr: List[int]) -> List[int]:
        return sorted(arr, key=lambda x: (bin(x).count("1"), x))


    """1358. Number of Substrings Containing All Three Characters (Medium)
	Given a string s consisting only of characters a, b and c. Return the 
	number of substrings containing at least one occurrence of all these 
	characters a, b and c.

	Example 1:
	Input: s = "abcabc"
	Output: 10
	Explanation: The substrings containing at least one occurrence of the 
	             characters a, b and c are "abc", "abca", "abcab", "abcabc", 
	             "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 

	Example 2:
	Input: s = "aaacb"
	Output: 3
	Explanation: The substrings containing at least one occurrence of the 
	             characters a, b and c are "aaacb", "aacb" and "acb". 
	
	Example 3:
	Input: s = "abc"
	Output: 1

	Constraints:
	* 3 <= s.length <= 5 x 10^4
	* s only consists of a, b or c characters."""

    def numberOfSubstrings(self, s: str) -> int:
        ans = 0
        loc = [-1]*3
        for i, c in enumerate(s): 
            loc[ord(c)-97] = i 
            ans += max(0, min(loc)+1)
        return ans 


    """1359. Count All Valid Pickup and Delivery Options (Hard)
	Given n orders, each order consist in pickup and delivery services. Count 
	all valid pickup/delivery possible sequences such that delivery(i) is 
	always after of pickup(i). Since the answer may be too large, return it 
	modulo 10^9 + 7.

	Example 1:
	Input: n = 1
	Output: 1
	Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.

	Example 2:
	Input: n = 2
	Output: 6
	Explanation: All possible orders: 
	(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).
	This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.

	Example 3:
	Input: n = 3
	Output: 90

	Constraints: 1 <= n <= 500"""

    def countOrders(self, n: int) -> int:
        ans = 1
        for x in range(2, n+1): 
            ans = (ans*x*(2*x-1)) % 1_000_000_007
        return ans 


    """1373. Maximum Sum BST in Binary Tree (Hard)
	Given a binary tree root, the task is to return the maximum sum of all keys 
	of any sub-tree which is also a Binary Search Tree (BST). Assume a BST is 
	defined as follows:
	* The left subtree of a node contains only nodes with keys less than the node's key.
	* The right subtree of a node contains only nodes with keys greater than the node's key.
	* Both the left and right subtrees must also be binary search trees.

	Example 1:
	Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
	Output: 20
	Explanation: Maximum sum in a valid Binary search tree is obtained in root 
	             node with key equal to 3.

	Example 2:
	Input: root = [4,3,null,1,2]
	Output: 2
	Explanation: Maximum sum in a valid Binary search tree is obtained in a 
	             single root node with key equal to 2.

	Example 3:
	Input: root = [-4,-2,-5]
	Output: 0
	Explanation: All values are negatives. Return an empty BST.

	Example 4:
	Input: root = [2,1,3]
	Output: 6

	Example 5:
	Input: root = [5,4,8,3,null,6,3]
	Output: 7

	Constraints:
	* The given binary tree will have between 1 and 40000 nodes.
	* Each node's value is between [-4 * 10^4 , 4 * 10^4]."""

    def maxSumBST(self, root: TreeNode) -> int:
        
        def fn(node): 
            """Collect info while traversing the tree in post-order."""
            if not node: return True, inf, -inf, 0, 0 # bst flag | min | max | sum
            ltf, lmn, lmx, lsm, lval = fn(node.left)
            rtf, rmn, rmx, rsm, rval = fn(node.right)
            lmn = min(lmn, node.val)
            rmx = max(rmx, node.val)
            sm = lsm + rsm + node.val 
            if ltf and rtf and lmx < node.val < rmn: 
                return True, lmn, rmx, sm, max(lval, rval, sm)
            return False, lmn, rmx, sm, max(lval, rval)
        
        return fn(root)[-1]


    """1383. Maximum Performance of a Team (Hard)
	You are given two integers n and k and two integer arrays speed and 
	efficiency both of length n. There are n engineers numbered from 1 to n. 
	speed[i] and efficiency[i] represent the speed and efficiency of the ith 
	engineer respectively. Choose at most k different engineers out of the n 
	engineers to form a team with the maximum performance. The performance of 
	a team is the sum of their engineers' speeds multiplied by the minimum 
	efficiency among their engineers. Return the maximum performance of this 
	team. Since the answer can be a huge number, return it modulo 10^9 + 7.

	Example 1:
	Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2
	Output: 60
	Explanation: We have the maximum performance of the team by selecting 
	             engineer 2 (with speed=10 and efficiency=4) and engineer 5 
	             (with speed=5 and efficiency=7). That is, 
	             performance = (10 + 5) * min(4, 7) = 60.

	Example 2:
	Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3
	Output: 68
	Explanation: This is the same example as the first but k = 3. We can select 
	             engineer 1, engineer 2 and engineer 5 to get the maximum 
	             performance of the team. That is, 
	             performance = (2 + 10 + 5) * min(5, 4, 7) = 68.
	
	Example 3:
	Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4
	Output: 72

	Constraints:
	* 1 <= <= k <= n <= 10^5
	* speed.length == n
	* efficiency.length == n
	* 1 <= speed[i] <= 10^5
	* 1 <= efficiency[i] <= 10^8"""

    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:
        ans = rsm = 0 
        pq = []
        for x, y in sorted(zip(efficiency, speed), reverse=True): 
            rsm += y
            heappush(pq, y)
            if len(pq) > k: rsm -= heappop(pq) 
            ans = max(ans, rsm * x)
        return ans % 1_000_000_007


    """1385. Find the Distance Value Between Two Arrays (Easy)
	Given two integer arrays arr1 and arr2, and the integer d, return the 
	distance value between the two arrays. The distance value is defined as the 
	number of elements arr1[i] such that there is not any element arr2[j] where 
	|arr1[i]-arr2[j]| <= d.

	Example 1:
	Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2
	Output: 2
	Explanation: For arr1[0]=4 we have: 
	             |4-10|=6 > d=2 
	             |4-9|=5 > d=2 
	             |4-1|=3 > d=2 
	             |4-8|=4 > d=2 
	             For arr1[1]=5 we have: 
	             |5-10|=5 > d=2 
	             |5-9|=4 > d=2 
	             |5-1|=4 > d=2 
	             |5-8|=3 > d=2
	             For arr1[2]=8 we have:
	             |8-10|=2 <= d=2
	             |8-9|=1 <= d=2
	             |8-1|=7 > d=2
	             |8-8|=0 <= d=2
	
	Example 2:
	Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3
	Output: 2

	Example 3:
	Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6
	Output: 1

	Constraints:
	* 1 <= arr1.length, arr2.length <= 500
	* -10^3 <= arr1[i], arr2[j] <= 10^3
	* 0 <= d <= 100"""

    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:
        arr2.sort()
        ans = 0
        for x in arr1: 
            lo = bisect_left(arr2, x - d)
            hi = bisect_right(arr2, x + d)
            if lo == hi: ans += 1
        return ans 


    """1386. Cinema Seat Allocation (Medium)
	A cinema has n rows of seats, numbered from 1 to n and there are ten seats 
	in each row, labelled from 1 to 10 as shown in the figure above. Given the 
	array reservedSeats containing the numbers of seats already reserved, for 
	example, reservedSeats[i] = [3,8] means the seat located in row 3 and 
	labelled with 8 is already reserved. Return the maximum number of four-
	person groups you can assign on the cinema seats. A four-person group 
	occupies four adjacent seats in one single row. Seats across an aisle (such 
	as [3,3] and [3,4]) are not considered to be adjacent, but there is an 
	exceptional case on which an aisle split a four-person group, in that case, 
	the aisle split a four-person group in the middle, which means to have two 
	people on each side.

	Example 1:
	Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
	Output: 4
	Explanation: The figure above shows the optimal allocation for four groups, 
	             where seats mark with blue are already reserved and contiguous 
	             seats mark with orange are for one group.

	Example 2:
	Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]
	Output: 2
	
	Example 3:
	Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
	Output: 4

	Constraints:
	* 1 <= n <= 10^9
	* 1 <= reservedSeats.length <= min(10*n, 10^4)
	* reservedSeats[i].length == 2
	* 1 <= reservedSeats[i][0] <= n
	* 1 <= reservedSeats[i][1] <= 10
	* All reservedSeats[i] are distinct."""

    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:
        seats = {}
        for i, j in reservedSeats: 
            if i not in seats: seats[i] = 0
            seats[i] |= 1 << j-1
        
        ans = 2 * (n - len(seats))
        for v in seats.values(): 
            if not int("0111111110", 2) & v: ans += 2
            elif not int("0111100000", 2) & v: ans += 1
            elif not int("0001111000", 2) & v: ans += 1
            elif not int("0000011110", 2) & v: ans += 1
        return ans 


    """1387. Sort Integers by The Power Value (Medium)
	The power of an integer x is defined as the number of steps needed to 
	transform x into 1 using the following steps:
	* if x is even then x = x / 2
	* if x is odd then x = 3 * x + 1
	For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 
	(3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1). Given three integers lo, 
	hi and k. The task is to sort all integers in the interval [lo, hi] by the 
	power value in ascending order, if two or more integers have the same power 
	value sort them by ascending order. Return the k-th integer in the range 
	[lo, hi] sorted by the power value. Notice that for any integer x 
	(lo <= x <= hi) it is guaranteed that x will transform into 1 using these 
	steps and that the power of x is will fit in 32 bit signed integer.

	Example 1:
	Input: lo = 12, hi = 15, k = 2
	Output: 13
	Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)
	             The power of 13 is 9
	             The power of 14 is 17
	             The power of 15 is 17
	             The interval sorted by the power value [12,13,14,15]. For 
	             k = 2 answer is the second element which is 13. Notice that 12 
	             and 13 have the same power value and we sorted them in 
	             ascending order. Same for 14 and 15.

	Example 2:
	Input: lo = 1, hi = 1, k = 1
	Output: 1
	
	Example 3:
	Input: lo = 7, hi = 11, k = 4
	Output: 7
	Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] 
	             is [16, 3, 19, 6, 14]. The interval sorted by power is 
	             [8, 10, 11, 7, 9]. The fourth number in the sorted array is 7.
	
	Example 4:
	Input: lo = 10, hi = 20, k = 5
	Output: 13

	Example 5:
	Input: lo = 1, hi = 1000, k = 777
	Output: 570

	Constraints:
	* 1 <= lo <= hi <= 1000
	* 1 <= k <= hi - lo + 1"""

    def getKth(self, lo: int, hi: int, k: int) -> int:
        pq = [] # min heap (size hi - lo - k + 2)
        for x in range(lo, hi+1): 
            cnt, xx = 0, x
            while xx > 1: 
                xx = 3*xx + 1 if xx&1 else xx//2
                cnt += 1
            heappush(pq, (cnt, x))
            if len(pq) > hi - lo - k + 2: heappop(pq)
        return pq[0][1]


    """1388. Pizza With 3n Slices (Hard)
	There is a pizza with 3n slices of varying size, you and your friends will 
	take slices of pizza as follows:
	* You will pick any pizza slice.
	* Your friend Alice will pick next slice in anti clockwise direction of 
	  your pick. 
	* Your friend Bob will pick next slice in clockwise direction of your pick.
	* Repeat until there are no more slices of pizzas.
	Sizes of Pizza slices is represented by circular array slices in clockwise 
	direction. Return the maximum possible sum of slice sizes which you can 
	have.

	Example 1:
	Input: slices = [1,2,3,4,5,6]
	Output: 10
	Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices 
	             with size 3 and 5 respectively. Then Pick slices with size 6, 
	             finally Alice and Bob will pick slice of size 2 and 1 
	             respectively. Total = 4 + 6.

	Example 2:
	Input: slices = [8,9,8,6,1,1]
	Output: 16
	Output: Pick pizza slice of size 8 in each turn. If you pick slice with 
	        size 9 your partners will pick slices of size 8.

	Example 3:
	Input: slices = [4,1,2,5,8,3,1,9,7]
	Output: 21
	
	Example 4:
	Input: slices = [3,1,2]
	Output: 3

	Constraints:
	* 1 <= slices.length <= 500
	* slices.length % 3 == 0
	* 1 <= slices[i] <= 1000"""

    def maxSizeSlices(self, slices: List[int]) -> int:
        
        @cache
        def fn(i, k, first): 
            """Return max sum of k pieces from slices[i:]."""
            if k == 0: return 0 
            if i >= len(slices) or first and i == len(slices)-1: return -inf 
            if i == 0: return max(fn(i+1, k, False), slices[i] + fn(i+2, k-1, True))
            return max(fn(i+1, k, first), slices[i] + fn(i+2, k-1, first))
        
        return fn(0, len(slices)//3, None)


    """1394. Find Lucky Integer in an Array (Easy)
	Given an array of integers arr, a lucky integer is an integer which has a 
	frequency in the array equal to its value. Return a lucky integer in the 
	array. If there are multiple lucky integers return the largest of them. If 
	there is no lucky integer return -1.

	Example 1:
	Input: arr = [2,2,3,4]
	Output: 2
	Explanation: The only lucky number in the array is 2 because frequency[2] == 2.

	Example 2:
	Input: arr = [1,2,2,3,3,3]
	Output: 3
	Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.

	Example 3:
	Input: arr = [2,2,2,3,3]
	Output: -1
	Explanation: There are no lucky numbers in the array.

	Example 4:
	Input: arr = [5]
	Output: -1

	Example 5:
	Input: arr = [7,7,7,7,7,7,7]
	Output: 7

	Constraints:
	* 1 <= arr.length <= 500
	* 1 <= arr[i] <= 500"""

    def findLucky(self, arr: List[int]) -> int:
        freq = {}
        for x in arr: 
		    freq[x] = 1 + freq.get(x, 0)
        return max((x for x in arr if x == freq[x]), default=-1)


    """1395. Count Number of Teams (Medium)
	There are n soldiers standing in a line. Each soldier is assigned a unique 
	rating value. You have to form a team of 3 soldiers amongst them under the 
	following rules:
	* Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
	* A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
	Return the number of teams you can form given the conditions. (soldiers can 
	be part of multiple teams).

	Example 1:
	Input: rating = [2,5,3,4,1]
	Output: 3
	Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 

	Example 2:
	Input: rating = [2,1,3]
	Output: 0
	Explanation: We can't form any team given the conditions.

	Example 3:
	Input: rating = [1,2,3,4]
	Output: 4

	Constraints:
	* n == rating.length
	* 3 <= n <= 1000
	* 1 <= rating[i] <= 10^5
	* All the integers in rating are unique."""

    def numTeams(self, rating: List[int]) -> int:
        ans = 0
        seen = [[0]*2 for _ in rating]
        for i in range(len(rating)): 
            for ii in range(i): 
                if rating[ii] < rating[i]: 
                    ans += seen[ii][0]
                    seen[i][0] += 1
                elif rating[ii] > rating[i]: 
                    ans += seen[ii][1]
                    seen[i][1] += 1
        return ans 


    """1397. Find All Good Strings (Hard)
	Given the strings s1 and s2 of size n, and the string evil. Return the 
	number of good strings. A good string has size n, it is alphabetically 
	greater than or equal to s1, it is alphabetically smaller than or equal to 
	s2, and it does not contain the string evil as a substring. Since the 
	answer can be a huge number, return this modulo 10^9 + 7.

	Example 1:
	Input: n = 2, s1 = "aa", s2 = "da", evil = "b"
	Output: 51 
	Explanation: There are 25 good strings starting with 'a': "aa","ac","ad",
	             ...,"az". Then there are 25 good strings starting with 'c': 
	             "ca","cc","cd",...,"cz" and finally there is one good string 
	             starting with 'd': "da". 
	
	Example 2:
	Input: n = 8, s1 = "leetcode", s2 = "leetgoes", evil = "leet"
	Output: 0 
	Explanation: All strings greater than or equal to s1 and smaller than or 
	             equal to s2 start with the prefix "leet", therefore, there is 
	             not any good string.
	
	Example 3:
	Input: n = 2, s1 = "gx", s2 = "gz", evil = "x"
	Output: 2

	Constraints:
	* s1.length == n
	* s2.length == n
	* s1 <= s2
	* 1 <= n <= 500
	* 1 <= evil.length <= 50
	* All strings consist of lowercase English letters."""

    def findGoodStrings(self, n: int, s1: str, s2: str, evil: str) -> int:
        lps = [0]
        k = 0 
        for i in range(1, len(evil)): 
            while k and evil[k] != evil[i]: k = lps[k-1]
            if evil[k] == evil[i]: k += 1
            lps.append(k)
        
        @cache
        def fn(i, k, lower, upper): 
            """Return number of good strings at position i and k prefix match."""
            if k == len(evil): return 0 # boundary condition 
            if i == n: return 1 
            lo = ascii_lowercase.index(s1[i]) if lower else 0
            hi = ascii_lowercase.index(s2[i]) if upper else 25
            
            ans = 0
            for x in range(lo, hi+1): 
                kk = k 
                while kk and evil[kk] != ascii_lowercase[x]: 
                    kk = lps[kk-1]
                if evil[kk] == ascii_lowercase[x]: kk += 1
                ans += fn(i+1, kk, lower and x == lo, upper and x == hi)
            return ans 
        
        return fn(0, 0, True, True) % 1_000_000_007


    """1399. Count Largest Group (Easy)
	Given an integer n. Each number from 1 to n is grouped according to the sum 
	of its digits. Return how many groups have the largest size.

	Example 1:
	Input: n = 13
	Output: 4
	Explanation: There are 9 groups in total, they are grouped according sum of 
	             its digits of numbers from 1 to 13: [1,10], [2,11], [3,12], 
	             [4,13], [5], [6], [7], [8], [9]. There are 4 groups with 
	             largest size.

	Example 2:
	Input: n = 2
	Output: 2
	Explanation: There are 2 groups [1], [2] of size 1.
	
	Example 3:
	Input: n = 15
	Output: 6

	Example 4:
	Input: n = 24
	Output: 5

	Constraints: 1 <= n <= 10^4"""

    def countLargestGroup(self, n: int) -> int:
        freq = {}
        for x in range(1, n+1): 
            key = sum(int(d) for d in str(x))
            freq[key] = 1 + freq.get(key, 0)
        vals = list(freq.values())
        return vals.count(max(vals))


    """1400. Construct K Palindrome Strings (Medium)
	Given a string s and an integer k. You should construct k non-empty 
	palindrome strings using all the characters in s. Return True if you can 
	use all the characters in s to construct k palindrome strings or False 
	otherwise.

	Example 1:
	Input: s = "annabelle", k = 2
	Output: true
	Explanation: You can construct two palindromes using all characters in s. 
	             Some possible constructions "anna" + "elble", "anbna" + "elle", 
	             "anellena" + "b"

	Example 2:
	Input: s = "leetcode", k = 3
	Output: false
	Explanation: It is impossible to construct 3 palindromes using all the 
	             characters of s.
	
	Example 3:
	Input: s = "true", k = 4
	Output: true
	Explanation: The only possible solution is to put each character in a 
	             separate string.
	
	Example 4:
	Input: s = "yzyzyzyzyzyzyzy", k = 2
	Output: true
	Explanation: Simply you can put all z's in one string and all y's in the 
	             other string. Both strings will be palindrome.
	
	Example 5:
	Input: s = "cr", k = 7
	Output: false
	Explanation: We don't have enough characters in s to construct 7 palindromes.

	Constraints:
	* 1 <= s.length <= 10^5
	* All characters in s are lower-case English letters.
	* 1 <= k <= 10^5"""

    def canConstruct(self, s: str, k: int) -> bool:
        freq = {}
        for c in s: freq[c] = 1 + freq.get(c, 0)
        return sum(freq[c]&1 for c in freq) <= k <= len(s)


    """1401. Circle and Rectangle Overlapping (Medium)
	Given a circle represented as (radius, x_center, y_center) and an axis-
	aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the 
	coordinates of the bottom-left corner, and (x2, y2) are the coordinates of 
	the top-right corner of the rectangle. Return True if the circle and 
	rectangle are overlapped otherwise return False. In other words, check if 
	there are any point (xi, yi) such that belongs to the circle and the 
	rectangle at the same time.

	Example 1:
	Input: radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1
	Output: true
	Explanation: Circle and rectangle share the point (1,0) 

	Example 2:
	Input: radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1
	Output: true

	Example 3:
	Input: radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3
	Output: true

	Example 4:
	Input: radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1
	Output: false

	Constraints:
	* 1 <= radius <= 2000
	* -10^4 <= x_center, y_center, x1, y1, x2, y2 <= 10^4
	* x1 < x2
	* y1 < y2"""

    def checkOverlap(self, radius: int, x_center: int, y_center: int, x1: int, y1: int, x2: int, y2: int) -> bool:
        if x1 <= x_center <= x2 and y1 <= y_center <= y2: return True # circle inside rectangle
        
        for x, y in (x1, y1), (x1, y2), (x2, y1), (x2, y2): 
            if (x - x_center)**2 + (y - y_center)**2 <= radius**2: return True 
        
        # check edge 
        for x in [x1, x2]: 
            if x_center - radius <= x <= x_center + radius and y1 <= y_center <= y2: return True
            
        for y in [y1, y2]:
            if y_center - radius <= y <= y_center + radius and x1 <= x_center <= x2: return True 
        
        return False 


    """1402. Reducing Dishes (Hard)
	A chef has collected data on the satisfaction level of his n dishes. Chef 
	can cook any dish in 1 unit of time. Like-time coefficient of a dish is 
	defined as the time taken to cook that dish including previous dishes 
	multiplied by its satisfaction level i.e. time[i]*satisfaction[i]. Return 
	the maximum sum of Like-time coefficient that the chef can obtain after 
	dishes preparation. Dishes can be prepared in any order and the chef can 
	discard some dishes to get this maximum value.

	Example 1:
	Input: satisfaction = [-1,-8,0,5,-9]
	Output: 14
	Explanation: After Removing the second and last dish, the maximum total 
	             Like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). 
	             Each dish is prepared in one unit of time.

	Example 2:
	Input: satisfaction = [4,3,2]
	Output: 20
	Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)
	
	Example 3:
	Input: satisfaction = [-1,-4,-5]
	Output: 0
	Explanation: People don't like the dishes. No dish is prepared.

	Example 4:
	Input: satisfaction = [-2,5,-1,0,3,-3]
	Output: 35

	Constraints:
	* n == satisfaction.length
	* 1 <= n <= 500
	* -10^3 <= satisfaction[i] <= 10^3"""

    def maxSatisfaction(self, satisfaction: List[int]) -> int:
        satisfaction.sort() # ascending order 
        
        @cache
        def fn(i, k): 
            """Return max sum of like-time coefficient of satisfation[i:]."""
            if i == len(satisfaction): return 0 
            return max(satisfaction[i]*k + fn(i+1, k+1), fn(i+1, k))
        
        return fn(0, 1)


    """1403. Minimum Subsequence in Non-Increasing Order (Easy)
	Given the array nums, obtain a subsequence of the array whose sum of 
	elements is strictly greater than the sum of the non included elements in 
	such subsequence.  If there are multiple solutions, return the subsequence 
	with minimum size and if there still exist multiple solutions, return the 
	subsequence with the maximum total sum of all its elements. A subsequence 
	of an array can be obtained by erasing some (possibly zero) elements from 
	the array. Note that the solution with the given constraints is guaranteed 
	to be unique. Also return the answer sorted in non-increasing order.

	Example 1:
	Input: nums = [4,3,10,9,8]
	Output: [10,9] 
	Explanation: The subsequences [10,9] and [10,8] are minimal such that the 
	             sum of their elements is strictly greater than the sum of 
	             elements not included, however, the subsequence [10,9] has 
	             the maximum total sum of its elements. 

	Example 2:
	Input: nums = [4,4,7,6,7]
	Output: [7,7,6] 
	Explanation: The subsequence [7,7] has the sum of its elements equal to 14 
	             which is not strictly greater than the sum of elements not 
	             included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] 
	             is the minimal satisfying the conditions. Note the subsequence 
	             has to returned in non-decreasing order.  
	
	Example 3:
	Input: nums = [6]
	Output: [6]

	Constraints:
	* 1 <= nums.length <= 500
	* 1 <= nums[i] <= 100"""

    def minSubsequence(self, nums: List[int]) -> List[int]:
        ans = []
        total, sm = sum(nums), 0
        for x in sorted(nums, reverse=True):
            ans.append(x)
            sm += x
            if sm > total - sm: return ans 


    """1404. Number of Steps to Reduce a Number in Binary Representation to One(Medium)
	Given a number s in their binary representation. Return the number of steps 
	to reduce it to 1 under the following rules:
	* If the current number is even, you have to divide it by 2.
	* If the current number is odd, you have to add 1 to it.
	It's guaranteed that you can always reach to one for all testcases.

	Example 1:
	Input: s = "1101"
	Output: 6
	Explanation: "1101" corressponds to number 13 in their decimal representation.
	Step 1) 13 is odd, add 1 and obtain 14. 
	Step 2) 14 is even, divide by 2 and obtain 7.
	Step 3) 7 is odd, add 1 and obtain 8.
	Step 4) 8 is even, divide by 2 and obtain 4.  
	Step 5) 4 is even, divide by 2 and obtain 2. 
	Step 6) 2 is even, divide by 2 and obtain 1.  

	Example 2:
	Input: s = "10"
	Output: 1
	Explanation: "10" corressponds to number 2 in their decimal representation.
	Step 1) 2 is even, divide by 2 and obtain 1.  

	Example 3:
	Input: s = "1"
	Output: 0

	Constraints:
	* 1 <= s.length <= 500
	* s consists of characters '0' or '1'
	* s[0] == '1'"""

    def numSteps(self, s: str) -> int:
        n = int(s, 2)
        ans = 0
        while n > 1: 
            ans += 1
            if n&1: n += 1
            else: n //= 2
        return ans 


    """1405. Longest Happy String (Medium)
	A string is called happy if it does not have any of the strings 'aaa', 'bbb' 
	or 'ccc' as a substring. Given three integers a, b and c, return any string 
	s, which satisfies following conditions:
	* s is happy and longest possible.
	* s contains at most a occurrences of the letter 'a', at most b occurrences 
	  of the letter 'b' and at most c occurrences of the letter 'c'.
	* s will only contain 'a', 'b' and 'c' letters.
	If there is no such string s return the empty string "".

	Example 1:
	Input: a = 1, b = 1, c = 7
	Output: "ccaccbcc"
	Explanation: "ccbccacc" would also be a correct answer.

	Example 2:
	Input: a = 2, b = 2, c = 1
	Output: "aabbc"

	Example 3:
	Input: a = 7, b = 1, c = 0
	Output: "aabaa"
	Explanation: It's the only correct answer in this case.

	Constraints:
	* 0 <= a, b, c <= 100
	* a + b + c > 0"""

    def longestDiverseString(self, a: int, b: int, c: int) -> str:
        pq = [] # max-heap 
        for x, c in zip((a, b, c), "abc"): 
            if x: heappush(pq, (-x, c))
        
        ans = []
        while pq: 
            n, x = heappop(pq)
            if ans[-2:] != [x, x]: 
                ans.append(x)
                if n+1: heappush(pq, (n+1, x))
            else: 
                if not pq: break 
                nn, xx = heappop(pq)
                ans.append(xx)
                if nn+1: heappush(pq, (nn+1, xx))
                heappush(pq, (n, x))
        return "".join(ans)


    """1406. Stone Game III (Hard)
	Alice and Bob continue their games with piles of stones. There are several 
	stones arranged in a row, and each stone has an associated value which is 
	an integer given in the array stoneValue. Alice and Bob take turns, with 
	Alice starting first. On each player's turn, that player can take 1, 2 or 3 
	stones from the first remaining stones in the row. The score of each player 
	is the sum of values of the stones taken. The score of each player is 0 
	initially. The objective of the game is to end with the highest score, and 
	the winner is the player with the highest score and there could be a tie. 
	The game continues until all the stones have been taken. Assume Alice and 
	Bob play optimally. Return "Alice" if Alice will win, "Bob" if Bob will win 
	or "Tie" if they end the game with the same score.

	Example 1:
	Input: values = [1,2,3,7]
	Output: "Bob"
	Explanation: Alice will always lose. Her best move will be to take three 
	             piles and the score become 6. Now the score of Bob is 7 and 
	             Bob wins.

	Example 2:
	Input: values = [1,2,3,-9]
	Output: "Alice"
	Explanation: Alice must choose all the three piles at the first move to win 
	             and leave Bob with negative score. If Alice chooses one pile 
	             her score will be 1 and the next move Bob's score becomes 5. 
	             The next move Alice will take the pile with value = -9 and 
	             lose. If Alice chooses two piles her score will be 3 and the 
	             next move Bob's score becomes 3. The next move Alice will take 
	             the pile with value = -9 and also lose. Remember that both 
	             play optimally so here Alice will choose the scenario that 
	             makes her win.
	
	Example 3:
	Input: values = [1,2,3,6]
	Output: "Tie"
	Explanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.

	Example 4:
	Input: values = [1,2,3,-1,-2,-3,7]
	Output: "Alice"

	Example 5:
	Input: values = [-1,-2,-3]
	Output: "Tie"

	Constraints:
	* 1 <= values.length <= 50000
	* -1000 <= values[i] <= 1000"""

    def stoneGameIII(self, stoneValue: List[int]) -> str:
        
        @cache
        def fn(i): 
            """Return max value obtained from stoneValue[i:]."""
            if i >= len(stoneValue): return 0 
            ans = -inf
            for ii in range(i, i+3): 
                ans = max(ans, sum(stoneValue[i:ii+1]) - fn(ii+1))
            return ans 
        
        ans = fn(0)
        if ans > 0: return "Alice"
        if ans == 0: return "Tie"
        return "Bob"


    """1413. Minimum Value to Get Positive Step by Step Sum (Easy)
	Given an array of integers nums, you start with an initial positive value 
	startValue. In each iteration, you calculate the step by step sum of 
	startValue plus elements in nums (from left to right). Return the minimum 
	positive value of startValue such that the step by step sum is never less 
	than 1.

	Example 1:
	Input: nums = [-3,2,-3,4,2]
	Output: 5
	Explanation: If you choose startValue = 4, in the third iteration your step 
	             by step sum is less than 1.
                 step by step sum
                 startValue = 4 | startValue = 5 | nums
                   (4 -3 ) = 1  | (5 -3 ) = 2    |  -3
                   (1 +2 ) = 3  | (2 +2 ) = 4    |   2
                   (3 -3 ) = 0  | (4 -3 ) = 1    |  -3
                   (0 +4 ) = 4  | (1 +4 ) = 5    |   4
                   (4 +2 ) = 6  | (5 +2 ) = 7    |   2

	Example 2:
	Input: nums = [1,2]
	Output: 1
	Explanation: Minimum start value should be positive. 
	
	Example 3:
	Input: nums = [1,-2,-3]
	Output: 5

	Constraints:
	* 1 <= nums.length <= 100
	* -100 <= nums[i] <= 100"""

    def minStartValue(self, nums: List[int]) -> int:
        ans = prefix = 0
        for x in nums: 
            prefix += x
            ans = min(ans, prefix)
        return 1 - ans


    """1414. Find the Minimum Number of Fibonacci Numbers Whose Sum Is K (Medium)
	Given an integer k, return the minimum number of Fibonacci numbers whose 
	sum is equal to k. The same Fibonacci number can be used multiple times. 
	The Fibonacci numbers are defined as:
	F1 = 1
	F2 = 1
	Fn = Fn-1 + Fn-2 for n > 2.
	It is guaranteed that for the given constraints we can always find such 
	Fibonacci numbers that sum up to k.

	Example 1:
	Input: k = 7
	Output: 2 
	Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... For k = 7 
	             we can use 2 + 5 = 7.

	Example 2:
	Input: k = 10
	Output: 2 
	Explanation: For k = 10 we can use 2 + 8 = 10.
	
	Example 3:
	Input: k = 19
	Output: 3 
	Explanation: For k = 19 we can use 1 + 5 + 13 = 19.

	Constraints: 1 <= k <= 10^9"""

    def findMinFibonacciNumbers(self, k: int) -> int:
        fibo = [1]
        f0 = f1 = 1
        while f1 < k: 
            f0, f1 = f1, f0+f1
            fibo.append(f1)
        
        ans = 0
        while k: 
            ans += 1
            i = bisect_right(fibo, k) - 1
            k -= fibo[i]
        return ans 


    """1415. The k-th Lexicographical String of All Happy Strings of Length n (Medium)
	A happy string is a string that:
	* consists only of letters of the set ['a', 'b', 'c'].
	* s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
	For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings 
	and strings "aa", "baa" and "ababbc" are not happy strings. Given two 
	integers n and k, consider a list of all happy strings of length n sorted 
	in lexicographical order. Return the kth string of this list or return an 
	empty string if there are less than k happy strings of length n.

	Example 1:
	Input: n = 1, k = 3
	Output: "c"
	Explanation: The list ["a", "b", "c"] contains all happy strings of length 
	             1. The third string is "c".

	Example 2:
	Input: n = 1, k = 4
	Output: ""
	Explanation: There are only 3 happy strings of length 1.
	
	Example 3:
	Input: n = 3, k = 9
	Output: "cab"
	Explanation: There are 12 different happy string of length 3 
	             ["aba", "abc", "aca", "acb", "bab", "bac", 
	              "bca", "bcb", "cab", "cac", "cba", "cbc"]. 
	              You will find the 9th string = "cab"

	Example 4:
	Input: n = 2, k = 7
	Output: ""
	
	Example 5:
	Input: n = 10, k = 100
	Output: "abacbabacb"
	 
	Constraints:
	* 1 <= n <= 10
	* 1 <= k <= 100"""

    def getHappyString(self, n: int, k: int) -> str:
        k -= 1
        if 3*2**(n-1) <= k: return "" # impossible
        
        mp = {"": "abc", "a": "bc", "b": "ac", "c": "ab"}
        ans = [""]
        for i in range(n): 
            q, k = divmod(k, 2**(n-i-1))
            ans.append(mp[ans[-1]][q])
        return "".join(ans)


    """1416. Restore The Array (Hard)
	A program was supposed to print an array of integers. The program forgot to 
	print whitespaces and the array is printed as a string of digits and all we 
	know is that all integers in the array were in the range [1, k] and there 
	are no leading zeros in the array. Given the string s and the integer k. 
	There can be multiple ways to restore the array. Return the number of 
	possible array that can be printed as a string s using the mentioned 
	program. The number of ways could be very large so return it modulo 
	10^9 + 7.

	Example 1:
	Input: s = "1000", k = 10000
	Output: 1
	Explanation: The only possible array is [1000]

	Example 2:
	Input: s = "1000", k = 10
	Output: 0
	Explanation: There cannot be an array that was printed this way and has all 
	             integer >= 1 and <= 10.

	Example 3:
	Input: s = "1317", k = 2000
	Output: 8
	Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]
	
	Example 4:
	Input: s = "2020", k = 30
	Output: 1
	Explanation: The only possible array is [20,20]. [2020] is invalid because 
	             2020 > 30. [2,020] is ivalid because 020 contains leading zeros.
	
	Example 5:
	Input: s = "1234567890", k = 90
	Output: 34

	Constraints:
	* 1 <= s.length <= 10^5.
	* s consists of only digits and doesn't contain leading zeros.
	* 1 <= k <= 10^9."""

    def numberOfArrays(self, s: str, k: int) -> int:
        dp = [0]*(len(s)+1)
        dp[-1] = sm = 1 
        
        ii = len(s)
        for i in reversed(range(len(s))): 
            if s[i] != "0": 
                while ii - i - 1 > log10(k) or int(s[i:ii]) > k: 
                    sm = (sm - dp[ii]) % 1_000_000_007
                    ii -= 1
                dp[i] = sm
                sm = (sm + dp[i]) % 1_000_000_007
        return dp[0]


    """1417. Reformat The String (Easy)
	Given alphanumeric string s. (Alphanumeric string is a string consisting of 
	lowercase English letters and digits). You have to find a permutation of 
	the string where no letter is followed by another letter and no digit is 
	followed by another digit. That is, no two adjacent characters have the 
	same type. Return the reformatted string or return an empty string if it is 
	impossible to reformat the string.

	Example 1:
	Input: s = "a0b1c2"
	Output: "0a1b2c"
	Explanation: No two adjacent characters have the same type in "0a1b2c". 
	             "a0b1c2", "0a1b2c", "0c2a1b" are also valid permutations.

	Example 2:
	Input: s = "leetcode"
	Output: ""
	Explanation: "leetcode" has only characters so we cannot separate them by 
	             digits.
	
	Example 3:
	Input: s = "1229857369"
	Output: ""
	Explanation: "1229857369" has only digits so we cannot separate them by 
	             characters.
	
	Example 4:
	Input: s = "covid2019" 
	Output: "c2o0v1i9d"
	
	Example 5:
	Input: s = "ab123"
	Output: "1a2b3"

	Constraints:
	* 1 <= s.length <= 500
	* s consists of only lowercase English letters and/or digits."""

    def reformat(self, s: str) -> str:
        alpha, digit = [], []
        for c in s:
            if c.isalpha(): alpha.append(c)
            else: digit.append(c)
        if len(alpha) < len(digit): alpha, digit = digit, alpha
        if len(alpha) - len(digit) > 1: return "" # impossible
        return "".join(x+y for x, y in zip_longest(alpha, digit, fillvalue=""))


    """1418. Display Table of Food Orders in a Restaurant (Medium)
	Given the array orders, which represents the orders that customers have 
	done in a restaurant. More specifically 
	orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the 
	name of the customer, tableNumberi is the table customer sit at, and 
	foodItemi is the item customer orders. Return the restaurant's “display 
	table”. The “display table” is a table whose row entries denote how many of 
	each food item each table ordered. The first column is the table number and 
	the remaining columns correspond to each food item in alphabetical order. 
	The first row should be a header whose first column is “Table”, followed by 
	the names of the food items. Note that the customer names are not part of 
	the table. Additionally, the rows should be sorted in numerically 
	increasing order.

	Example 1:
	Input: orders = [["David", "3", "Ceviche"      ],
	                 ["Corina","10","Beef Burrito" ],
	                 ["David", "3", "Fried Chicken"],
	                 ["Carla", "5", "Water"        ],
	                 ["Carla", "5", "Ceviche"      ],
	                 ["Rous",  "3", "Ceviche"      ]]
	Output: [["Table","Beef Burrito","Ceviche","Fried Chicken","Water"],["3","0","2","1","0"],["5","0","1","0","1"],["10","1","0","0","0"]] 
	Explanation:
	The displaying table looks like:
	Table,Beef Burrito,Ceviche,Fried Chicken,Water
	3    ,0           ,2      ,1            ,0
	5    ,0           ,1      ,0            ,1
	10   ,1           ,0      ,0            ,0
	For the table 3: David orders "Ceviche" and "Fried Chicken", and Rous orders "Ceviche".
	For the table 5: Carla orders "Water" and "Ceviche".
	For the table 10: Corina orders "Beef Burrito". 

	Example 2:
	Input: orders = [["James",  "12","Fried Chicken"   ],
	                 ["Ratesh", "12","Fried Chicken"   ],
	                 ["Amadeus","12","Fried Chicken"   ],
	                 ["Adam",   "1", "Canadian Waffles"],
	                 ["Brianna","1", "Canadian Waffles"]]
	Output: [["Table","Canadian Waffles","Fried Chicken"],["1","2","0"],["12","0","3"]] 
	Explanation: 
	For the table 1: Adam and Brianna order "Canadian Waffles".
	For the table 12: James, Ratesh and Amadeus order "Fried Chicken".

	Example 3:
	Input: orders = [["Laura",  "2","Bean Burrito"],
	                 ["Jhon",   "2","Beef Burrito"],
	                 ["Melissa","2","Soda"        ]]
	Output: [["Table","Bean Burrito","Beef Burrito","Soda"],["2","1","1","1"]]

	Constraints:
	* 1 <= orders.length <= 5 * 10^4
	* orders[i].length == 3
	* 1 <= customerNamei.length, foodItemi.length <= 20
	* customerNamei and foodItemi consist of lowercase and uppercase English letters and the space character.
	* tableNumberi is a valid integer between 1 and 500."""

    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:
        freq = {} 
        foods = set()
        
        for _, table, food in orders: 
            freq.setdefault(table, defaultdict(int))[food] += 1
            foods.add(food)
        
        foods = sorted(foods)
        ans = [["Table"] + foods]
        for k in sorted(freq, key=int): 
            row = [k]
            for food in foods: 
                row.append(str(freq[k][food]))
            ans.append(row)
        return ans 


    """1419. Minimum Number of Frogs Croaking (Medium)
	Given the string croakOfFrogs, which represents a combination of the string 
	"croak" from different frogs, that is, multiple frogs can croak at the same 
	time, so multiple “croak” are mixed. Return the minimum number of different 
	frogs to finish all the croak in the given string. A valid "croak" means a 
	frog is printing 5 letters ‘c’, ’r’, ’o’, ’a’, ’k’ sequentially. The frogs 
	have to print all five letters to finish a croak. If the given string is 
	not a combination of valid "croak" return -1.

	Example 1:
	Input: croakOfFrogs = "croakcroak"
	Output: 1 
	Explanation: One frog yelling "croak" twice.

	Example 2:
	Input: croakOfFrogs = "crcoakroak"
	Output: 2 
	Explanation: The minimum number of frogs is two. The first frog could yell 
	             "crcoakroak". The second frog could yell later "crcoakroak".

	Example 3:
	Input: croakOfFrogs = "croakcrook"
	Output: -1
	Explanation: The given string is an invalid combination of "croak" from 
	             different frogs.
	
	Example 4:
	Input: croakOfFrogs = "croakcroa"
	Output: -1

	Constraints:
	* 1 <= croakOfFrogs.length <= 10^5
	* All characters in the string are: 'c', 'r', 'o', 'a' or 'k'."""

    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:
        ans = 0
        freq = [0]*5 # freq array 
        for c in croakOfFrogs: 
            i = "croak".index(c)
            freq[i] += 1 
            if i and freq[i-1] < freq[i]: return -1 
            if c == "k": 
                ans = max(ans, freq[0])
                for i in range(5): freq[i] -= 1
        if max(freq) == 0: return ans
        return -1


    """1420. Build Array Where You Can Find The Maximum Exactly K Comparisons (Hard)
	Given three integers n, m and k. Consider the following algorithm to find 
	the maximum element of an array of positive integers:
	
	maximum_value = -1
	maximum_index = -1
	seach_cost = 0
	n = arr.length
	for (i = 0; i < n; i++) {
		if (maximum_value < arr[i]) {
			maximum_value = arr[i]
			maximum_index = i
			search_cost = search_cost + 1
		}
	}
	return search_cost

	You should build the array arr which has the following properties:
	* arr has exactly n integers.
	* 1 <= arr[i] <= m where (0 <= i < n).
	* After applying the mentioned algorithm to arr, the value search_cost is 
	  equal to k.
	Return the number of ways to build the array arr under the mentioned 
	conditions. As the answer may grow large, the answer must be computed 
	modulo 10^9 + 7.

	Example 1:
	Input: n = 2, m = 3, k = 1
	Output: 6
	Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]

	Example 2:
	Input: n = 5, m = 2, k = 3
	Output: 0
	Explanation: There are no possible arrays that satisify the mentioned conditions.

	Example 3:
	Input: n = 9, m = 1, k = 1
	Output: 1
	Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]

	Example 4:
	Input: n = 50, m = 100, k = 25
	Output: 34549172
	Explanation: Don't forget to compute the answer modulo 1000000007

	Example 5:
	Input: n = 37, m = 17, k = 7
	Output: 418930126

	Constraints:
	* 1 <= n <= 50
	* 1 <= m <= 100
	* 0 <= k <= n"""

    def numOfArrays(self, n: int, m: int, k: int) -> int:
        
        @cache
        def fn(i, x, k): 
            """Return number of ways to build arr[i:] with current max at x and remaining cost at k."""
            if n - i < k: return 0 # impossible 
            if m - x < k: return 0 # impossible 
            if k == 0: return x**(n-i)
            return x*fn(i+1, x, k) + fn(i+1, x+1, k-1) + fn(i, x+1, k) - (x+1)*fn(i+1, x+1, k)
        
        return fn(0, 0, k) % 1_000_000_007


    """1423. Maximum Points You Can Obtain from Cards (Medium)
	There are several cards arranged in a row, and each card has an associated 
	number of points The points are given in the integer array cardPoints. In 
	one step, you can take one card from the beginning or from the end of the 
	row. You have to take exactly k cards. Your score is the sum of the points 
	of the cards you have taken. Given the integer array cardPoints and the 
	integer k, return the maximum score you can obtain.

	Example 1:
	Input: cardPoints = [1,2,3,4,5,6,1], k = 3
	Output: 12
	Explanation: After the first step, your score will always be 1. However, 
	             choosing the rightmost card first will maximize your total 
	             score. The optimal strategy is to take the three cards on the 
	             right, giving a final score of 1 + 6 + 5 = 12.
	
	Example 2:
	Input: cardPoints = [2,2,2], k = 2
	Output: 4
	Explanation: Regardless of which two cards you take, your score will always 
	             be 4.

	Example 3:
	Input: cardPoints = [9,7,7,9,7,7,9], k = 7
	Output: 55
	Explanation: You have to take all the cards. Your score is the sum of 
	             points of all cards.

	Example 4:
	Input: cardPoints = [1,1000,1], k = 1
	Output: 1
	Explanation: You cannot take the card in the middle. Your best score is 1. 
	
	Example 5:
	Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3
	Output: 202

	Constraints:
	* 1 <= cardPoints.length <= 10^5
	* 1 <= cardPoints[i] <= 10^4
	* 1 <= k <= cardPoints.length"""

    def maxScore(self, cardPoints: List[int], k: int) -> int:
        ans = val = sum(cardPoints[:k])
        for i in range(k):
            val += cardPoints[~i] - cardPoints[k-i-1]
            ans = max(ans, val)
        return ans 


    """1426. Counting Elements (Easy)
	Given an integer array arr, count how many elements x there are, such that 
	x + 1 is also in arr. If there're duplicates in arr, count them seperately.

	Example 1:
	Input: arr = [1,2,3]
	Output: 2
	Explanation: 1 and 2 are counted cause 2 and 3 are in arr.

	Example 2:
	Input: arr = [1,1,3,3,5,5,7,7]
	Output: 0
	Explanation: No numbers are counted, cause there's no 2, 4, 6, or 8 in arr.

	Example 3:
	Input: arr = [1,3,2,3,5,0]
	Output: 3
	Explanation: 0, 1 and 2 are counted cause 1, 2 and 3 are in arr.

	Example 4:
	Input: arr = [1,1,2,2]
	Output: 2
	Explanation: Two 1s are counted cause 2 is in arr.

	Example 5:
	Input: arr = [1,1,2]
	Output: 2
	Explanation: Both 1s are counted because 2 is in the array.

	Constraints:
	* 1 <= arr.length <= 1000
	* 0 <= arr[i] <= 1000"""

    def countElements(self, arr: List[int]) -> int:
        freq = {}
        for x in arr: freq[x] = freq.get(x, 0) + 1
        return sum(v for k, v in freq.items() if k + 1 in freq) 


    """1427. Perform String Shifts (Easy)
	You are given a string s containing lowercase English letters, and a matrix 
	shift, where shift[i] = [direction, amount]:
	* direction can be 0 (for left shift) or 1 (for right shift). 
	* amount is the amount by which string s is to be shifted.
	* A left shift by 1 means remove the first character of s and append it to 
	  the end.
	* Similarly, a right shift by 1 means remove the last character of s and 
	  add it to the beginning.
	Return the final string after all operations.

	Example 1:
	Input: s = "abc", shift = [[0,1],[1,2]]
	Output: "cab"
	Explanation: [0,1] means shift to left by 1. "abc" -> "bca"
	             [1,2] means shift to right by 2. "bca" -> "cab"
	
	Example 2:
	Input: s = "abcdefg", shift = [[1,1],[1,1],[0,2],[1,3]]
	Output: "efgabcd"
	Explanation: [1,1] means shift to right by 1. "abcdefg" -> "gabcdef"
	             [1,1] means shift to right by 1. "gabcdef" -> "fgabcde"
	             [0,2] means shift to left by 2. "fgabcde" -> "abcdefg"
	             [1,3] means shift to right by 3. "abcdefg" -> "efgabcd"
	 
	Constraints:
	* 1 <= s.length <= 100
	* s only contains lower case English letters.
	* 1 <= shift.length <= 100
	* shift[i].length == 2
	* 0 <= shift[i][0] <= 1
	* 0 <= shift[i][1] <= 100"""

    def stringShift(self, s: str, shift: List[List[int]]) -> str:
        amount = 0
        for d, x in shift: 
            amount += x if d == 0 else -x
        amount %= len(s)
        return s[amount:] + s[:amount]


    """1444. Number of Ways of Cutting a Pizza (Hard)
	Given a rectangular pizza represented as a rows x cols matrix containing 
	the following characters: 'A' (an apple) and '.' (empty cell) and given the 
	integer k. You have to cut the pizza into k pieces using k-1 cuts. For each 
	cut you choose the direction: vertical or horizontal, then you choose a cut 
	position at the cell boundary and cut the pizza into two pieces. If you cut 
	the pizza vertically, give the left part of the pizza to a person. If you 
	cut the pizza horizontally, give the upper part of the pizza to a person. 
	Give the last piece of pizza to the last person. Return the number of ways 
	of cutting the pizza such that each piece contains at least one apple. 
	Since the answer can be a huge number, return this modulo 10^9 + 7.

	Example 1:
	Input: pizza = ["A..","AAA","..."], k = 3
	Output: 3 
	Explanation: The figure above shows the three ways to cut the pizza. Note 
	             that pieces must contain at least one apple.

	Example 2:
	Input: pizza = ["A..","AA.","..."], k = 3
	Output: 1
	
	Example 3:
	Input: pizza = ["A..","A..","..."], k = 1
	Output: 1

	Constraints:
	* 1 <= rows, cols <= 50
	* rows == pizza.length
	* cols == pizza[i].length
	* 1 <= k <= 10
	* pizza consists of characters 'A' and '.' only."""

    def ways(self, pizza: List[str], k: int) -> int:
        m, n = len(pizza), len(pizza[0])
        
        prefix = [[0]*(n+1) for _ in range(m+1)] # prefix array 
        for i in range(m):
            for j in range(n): 
                prefix[i+1][j+1] = prefix[i][j+1] + prefix[i+1][j] - prefix[i][j]
                if pizza[i][j] == "A": prefix[i+1][j+1] += 1
                
        @cache
        def fn(i, j, k):
            """Return number of ways of cutting pizza[i:][j:] for k people."""
            if i == m or j == n: return 0 # out of pizza 
            apples = prefix[-1][-1] - prefix[-1][j] - prefix[i][-1] + prefix[i][j]
            if apples < k+1: return 0 # not enough apple 
            if k == 0: return 1
            
            ans = 0 
            for ii in range(i, m): 
                if prefix[ii+1][-1] - prefix[ii+1][j] - prefix[i][-1] + prefix[i][j]: 
                    ans += fn(ii+1, j, k-1)
            for jj in range(j, n): 
                if prefix[-1][jj+1] - prefix[-1][j] - prefix[i][jj+1] + prefix[i][j]: 
                    ans += fn(i, jj+1, k-1)
            return ans % 1_000_000_007
        
        return fn(0, 0, k-1)


    """1446. Consecutive Characters (Easy)
	Given a string s, the power of the string is the maximum length of a non-
	empty substring that contains only one unique character. Return the power 
	of the string.

	Example 1:
	Input: s = "leetcode"
	Output: 2
	Explanation: The substring "ee" is of length 2 with the character 'e' only.

	Example 2:
	Input: s = "abbcccddddeeeeedcba"
	Output: 5
	Explanation: The substring "eeeee" is of length 5 with the character 'e' only.

	Example 3:
	Input: s = "triplepillooooow"
	Output: 5

	Example 4:
	Input: s = "hooraaaaaaaaaaay"
	Output: 11

	Example 5:
	Input: s = "tourist"
	Output: 1

	Constraints:
	* 1 <= s.length <= 500
	* s contains only lowercase English letters."""

    def maxPower(self, s: str) -> int:
        ans = 0
        for i in range(len(s)):
            if not i or s[i-1] != s[i]: cnt = 0
            cnt += 1
            ans = max(ans, cnt)
        return ans 


    """1447. Simplified Fractions (Medium)
	Given an integer n, return a list of all simplified fractions between 0 and 
	1 (exclusive) such that the denominator is less-than-or-equal-to n. The 
	fractions can be in any order.

	Example 1:
	Input: n = 2
	Output: ["1/2"]
	Explanation: "1/2" is the only unique fraction with a denominator less-than-
	             or-equal-to 2.

	Example 2:
	Input: n = 3
	Output: ["1/2","1/3","2/3"]
	
	Example 3:
	Input: n = 4
	Output: ["1/2","1/3","1/4","2/3","3/4"]
	Explanation: "2/4" is not a simplified fraction because it can be 
	             simplified to "1/2".

	Example 4:
	Input: n = 1
	Output: []

	Constraints: 1 <= n <= 100"""

    def simplifiedFractions(self, n: int) -> List[str]:
        ans = []
        for d in range(2, n+1): 
            for n in range(1, d):
                if gcd(d, n) == 1: ans.append(str(n) + "/" + str(d))
        return ans 


    """1448. Count Good Nodes in Binary Tree (Medium)
	Given a binary tree root, a node X in the tree is named good if in the path 
	from root to X there are no nodes with a value greater than X. Return the 
	number of good nodes in the binary tree.

	Example 1:
	Input: root = [3,1,4,3,null,1,5]
	Output: 4
	Explanation: Nodes in blue are good.
	Root Node (3) is always a good node.
	Node 4 -> (3,4) is the maximum value in the path starting from the root.
	Node 5 -> (3,4,5) is the maximum value in the path
	Node 3 -> (3,1,3) is the maximum value in the path.

	Example 2:
	Input: root = [3,3,null,4,2]
	Output: 3
	Explanation: Node 2 -> (3, 3, 2) is not good, because "3" is higher than it.

	Example 3:
	Input: root = [1]
	Output: 1
	Explanation: Root is considered as good.

	Constraints:
	* The number of nodes in the binary tree is in the range [1, 10^5].
	* Each node's value is between [-10^4, 10^4]."""

    def goodNodes(self, root: TreeNode) -> int:
        ans = 0 
        stack = [(root, -inf)]
        while stack: 
            node, val = stack.pop()
            if node: 
                if node.val >= val: ans += 1
                val = max(val, node.val)
                stack.append((node.left, val))
                stack.append((node.right, val))
        return ans 


    """1449. Form Largest Integer With Digits That Add up to Target (Hard)
	Given an array of integers cost and an integer target. Return the maximum 
	integer you can paint under the following rules:
	* The cost of painting a digit (i+1) is given by cost[i] (0 indexed).
	* The total cost used must be equal to target.
	* Integer does not have digits 0.
	Since the answer may be too large, return it as string. If there is no way 
	to paint any integer given the condition, return "0".

	Example 1:
	Input: cost = [4,3,2,5,6,7,2,5,5], target = 9
	Output: "7772"
	Explanation:  The cost to paint the digit '7' is 2, and the digit '2' is 3. 
	              Then cost("7772") = 2*3+ 3*1 = 9. You could also paint "977", 
	              but "7772" is the largest number.
	Digit    cost
	  1  ->   4
	  2  ->   3
	  3  ->   2
	  4  ->   5
	  5  ->   6
	  6  ->   7
	  7  ->   2
	  8  ->   5
	  9  ->   5
	
	Example 2:
	Input: cost = [7,6,5,5,5,6,8,7,8], target = 12
	Output: "85"
	Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. 
	             Then cost("85") = 7 + 5 = 12.

	Example 3:
	Input: cost = [2,4,6,2,4,6,4,4,4], target = 5
	Output: "0"
	Explanation: It's not possible to paint any integer with total cost equal to target.
	
	Example 4:
	Input: cost = [6,10,15,40,40,40,40,40,40], target = 47
	Output: "32211"
	 
	Constraints:
	* cost.length == 9
	* 1 <= cost[i] <= 5000
	* 1 <= target <= 5000"""

    def largestNumber(self, cost: List[int], target: int) -> str:
        
        @cache
        def fn(x): 
            """Return max integer given target x."""
            if x == 0: return 0
            if x < 0: return -inf 
            return max(fn(x - c) * 10 + i + 1 for i, c in enumerate(cost))
        
        return str(max(0, fn(target)))


    """1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence (Easy)
	Given a sentence that consists of some words separated by a single space, 
	and a searchWord. You have to check if searchWord is a prefix of any word 
	in sentence. Return the index of the word in sentence where searchWord is a 
	prefix of this word (1-indexed). If searchWord is a prefix of more than one 
	word, return the index of the first word (minimum index). If there is no 
	such word return -1. A prefix of a string S is any leading contiguous 
	substring of S.

	Example 1:
	Input: sentence = "i love eating burger", searchWord = "burg"
	Output: 4
	Explanation: "burg" is prefix of "burger" which is the 4th word in the sentence.

	Example 2:
	Input: sentence = "this problem is an easy problem", searchWord = "pro"
	Output: 2
	Explanation: "pro" is prefix of "problem" which is the 2nd and the 6th word 
	             in the sentence, but we return 2 as it's the minimal index.
	
	Example 3:
	Input: sentence = "i am tired", searchWord = "you"
	Output: -1
	Explanation: "you" is not a prefix of any word in the sentence.
	
	Example 4:
	Input: sentence = "i use triple pillow", searchWord = "pill"
	Output: 4

	Example 5:
	Input: sentence = "hello from the other side", searchWord = "they"
	Output: -1

	Constraints:
	* 1 <= sentence.length <= 100
	* 1 <= searchWord.length <= 10
	* sentence consists of lowercase English letters and spaces.
	* searchWord consists of lowercase English letters."""

    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:
        for i, word in enumerate(sentence.split()):
            if word.startswith(searchWord): return i+1
        return -1 


    """1456. Maximum Number of Vowels in a Substring of Given Length (Medium)
	Given a string s and an integer k. Return the maximum number of vowel 
	letters in any substring of s with length k. Vowel letters in English are 
	(a, e, i, o, u).

	Example 1:
	Input: s = "abciiidef", k = 3
	Output: 3
	Explanation: The substring "iii" contains 3 vowel letters.

	Example 2:
	Input: s = "aeiou", k = 2
	Output: 2
	Explanation: Any substring of length 2 contains 2 vowels.

	Example 3:
	Input: s = "leetcode", k = 3
	Output: 2
	Explanation: "lee", "eet" and "ode" contain 2 vowels.

	Example 4:
	Input: s = "rhythms", k = 4
	Output: 0
	Explanation: We can see that s doesn't have any vowel letters.

	Example 5:
	Input: s = "tryhard", k = 4
	Output: 1

	Constraints:
	* 1 <= s.length <= 10^5
	* s consists of lowercase English letters.
	* 1 <= k <= s.length"""

    def maxVowels(self, s: str, k: int) -> int:
        ans = cnt = 0
        for i in range(len(s)): 
            if s[i] in "aeiou": cnt += 1
            if i >= k and s[i-k] in "aeiou": cnt -= 1
            ans = max(ans, cnt)
        return ans 


    """1457. Pseudo-Palindromic Paths in a Binary Tree (Medium)
	Given a binary tree where node values are digits from 1 to 9. A path in the 
	binary tree is said to be pseudo-palindromic if at least one permutation of 
	the node values in the path is a palindrome. Return the number of pseudo-
	palindromic paths going from the root node to leaf nodes.

	Example 1:
	Input: root = [2,3,1,3,1,null,1]
	Output: 2 
	Explanation: The figure above represents the given binary tree. There are 
	             three paths going from the root node to leaf nodes: the red 
	             path [2,3,3], the green path [2,1,1], and the path [2,3,1]. 
	             Among these paths only red path and green path are pseudo-
	             palindromic paths since the red path [2,3,3] can be rearranged 
	             in [3,2,3] (palindrome) and the green path [2,1,1] can be 
	             rearranged in [1,2,1] (palindrome).

	Example 2:
	Input: root = [2,1,1,1,3,null,null,null,null,null,1]
	Output: 1 
	Explanation: The figure above represents the given binary tree. There are 
	             three paths going from the root node to leaf nodes: the green 
	             path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among 
	             these paths only the green path is pseudo-palindromic since 
	             [2,1,1] can be rearranged in [1,2,1] (palindrome).
	
	Example 3:
	Input: root = [9]
	Output: 1

	Constraints:
	* The number of nodes in the tree is in the range [1, 10^5].
	* 1 <= Node.val <= 9"""

    def pseudoPalindromicPaths (self, root: TreeNode) -> int:
        
        def fn(node, mask): 
            """Post-order traverse the tree and update ans."""
            if not node: return 0 
            mask ^= 1 << node.val
            if not node.left and not node.right: # leaf node 
                return 1 if mask & (mask-1) == 0 else 0
            return fn(node.left, mask) + fn(node.right, mask)
        
        return fn(root, 0)


    """1458. Max Dot Product of Two Subsequences (Hard)
	Given two arrays nums1 and nums2. Return the maximum dot product between 
	non-empty subsequences of nums1 and nums2 with the same length. A 
	subsequence of a array is a new array which is formed from the original 
	array by deleting some (can be none) of the characters without disturbing 
	the relative positions of the remaining characters. (ie, [2,3,5] is a 
	subsequence of [1,2,3,4,5] while [1,5,3] is not).

	Example 1:
	Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]
	Output: 18
	Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from 
	             nums2. Their dot product is (2*3 + (-2)*(-6)) = 18.

	Example 2:
	Input: nums1 = [3,-2], nums2 = [2,-6,7]
	Output: 21
	Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.
	             Their dot product is (3*7) = 21.
	
	Example 3:
	Input: nums1 = [-1,-1], nums2 = [1,1]
	Output: -1
 	Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.
 	             Their dot product is -1.

	Constraints:
	* 1 <= nums1.length, nums2.length <= 500
	* -1000 <= nums1[i], nums2[i] <= 1000"""

    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:
        
        @cache
        def fn(i, j): 
            """Return max dot product of nums1[i:] and nums2[j:]."""
            if i == len(nums1) or j == len(nums2): return -inf
            return max(nums1[i]*nums2[j] + fn(i+1, j+1), nums1[i]*nums2[j], fn(i+1, j), fn(i, j+1))
        
        return fn(0, 0)


    """1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts (Medium)
	Given a rectangular cake with height h and width w, and two arrays of 
	integers horizontalCuts and verticalCuts where horizontalCuts[i] is the 
	distance from the top of the rectangular cake to the ith horizontal cut and 
	similarly, verticalCuts[j] is the distance from the left of the rectangular 
	cake to the jth vertical cut. Return the maximum area of a piece of cake 
	after you cut at each horizontal and vertical position provided in the 
	arrays horizontalCuts and verticalCuts. Since the answer can be a huge 
	number, return this modulo 10^9 + 7.

	Example 1:
	Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
	Output: 4 
	Explanation: The figure above represents the given rectangular cake. Red 
	             lines are the horizontal and vertical cuts. After you cut the 
	             cake, the green piece of cake has the maximum area.
	
	Example 2:
	Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
	Output: 6
	Explanation: The figure above represents the given rectangular cake. Red 
	             lines are the horizontal and vertical cuts. After you cut the 
	             cake, the green and yellow pieces of cake have the maximum 
	             area.
	
	Example 3:
	Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
	Output: 9

	Constraints:
	* 2 <= h, w <= 10^9
	* 1 <= horizontalCuts.length < min(h, 10^5)
	* 1 <= verticalCuts.length < min(w, 10^5)
	* 1 <= horizontalCuts[i] < h
	* 1 <= verticalCuts[i] < w
	* It is guaranteed that all elements in horizontalCuts are distinct.
	* It is guaranteed that all elements in verticalCuts are distinct."""

    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:
        horizontalCuts = [0] + sorted(horizontalCuts) + [h]
        verticalCuts = [0] + sorted(verticalCuts) + [w]
        m = max(horizontalCuts[i] - horizontalCuts[i-1] for i in range(1, len(horizontalCuts)))
        n = max(verticalCuts[j] - verticalCuts[j-1] for j in range(1, len(verticalCuts)))
        return m*n % 1_000_000_007

    
    """1467. Probability of a Two Boxes Having The Same Number of Distinct Balls (Hard)
	Given 2n balls of k distinct colors. You will be given an integer array 
	balls of size k where balls[i] is the number of balls of color i. All the 
	balls will be shuffled uniformly at random, then we will distribute the 
	first n balls to the first box and the remaining n balls to the other box 
	(Please read the explanation of the second example carefully). Please note 
	that the two boxes are considered different. For example, if we have two 
	balls of colors a and b, and two boxes [] and (), then the distribution 
	[a] (b) is considered different than the distribution [b] (a) (Please read 
	the explanation of the first example carefully). We want to calculate the 
	probability that the two boxes have the same number of distinct balls.

	Example 1:
	Input: balls = [1,1]
	Output: 1.00000
	Explanation: Only 2 ways to divide the balls equally:
	- A ball of color 1 to box 1 and a ball of color 2 to box 2
	- A ball of color 2 to box 1 and a ball of color 1 to box 2
	In both ways, the number of distinct colors in each box is equal. The 
	probability is 2/2 = 1

	Example 2:
	Input: balls = [2,1,1]
	Output: 0.66667
	Explanation: We have the set of balls [1, 1, 2, 3]. This set of balls will 
	             be shuffled randomly and we may have one of the 12 distinct 
	             shuffles with equale probability (i.e. 1/12):
	             [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], 
	             [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]
	             After that we add the first two balls to the first box and the 
	             second two balls to the second box. We can see that 8 of these 
	             12 possible random distributions have the same number of 
	             distinct colors of balls in each box. Probability is 8/12 = 0.66667
	
	Example 3:
	Input: balls = [1,2,1,2]
	Output: 0.60000
	Explanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display 
	             all the 180 possible random shuffles of this set but it is 
	             easy to check that 108 of them will have the same number of 
	             distinct colors in each box. Probability = 108 / 180 = 0.6.
	
	Example 4:
	Input: balls = [3,2,1]
	Output: 0.30000
	Explanation: The set of balls is [1, 1, 1, 2, 2, 3]. It is hard to display 
	             all the 60 possible random shuffles of this set but it is easy 
	             to check that 18 of them will have the same number of distinct 
	             colors in each box. Probability = 18 / 60 = 0.3.
	
	Example 5:
	Input: balls = [6,6,6,6,6,6]
	Output: 0.90327

	Constraints:
	* 1 <= balls.length <= 8
	* 1 <= balls[i] <= 6
	* sum(balls) is even.
	* Answers within 10^-5 of the actual value will be accepted as correct."""

    def getProbability(self, balls: List[int]) -> float:
        n = sum(balls)//2
        
        @cache 
        def fn(i, s0, s1, c0, c1):
            """Return number of ways to distribute boxes successfully (w/o considering relative order)."""
            if s0 > n or s1 > n: return 0 # impossible 
            if i == len(balls): return int(c0 == c1)
            ans = 0 
            for x in range(balls[i]+1): 
                ans += fn(i+1, s0+x, s1+balls[i]-x, c0+(x > 0), c1+(x < balls[i])) * comb(balls[i], x)
            return ans
        
        return fn(0, 0, 0, 0, 0) / comb(2*n, n)


    """1469. Find All The Lonely Nodes (Easy)
	In a binary tree, a lonely node is a node that is the only child of its 
	parent node. The root of the tree is not lonely because it does not have a 
	parent node. Given the root of a binary tree, return an array containing 
	the values of all lonely nodes in the tree. Return the list in any order.

	Example 1:
	Input: root = [1,2,3,null,4]
	Output: [4]
	Explanation: Light blue node is the only lonely node. Node 1 is the root 
	             and is not lonely. Nodes 2 and 3 have the same parent and are 
	             not lonely.

	Example 2:
	Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2]
	Output: [6,2]
	Explanation: Light blue nodes are lonely nodes. Please remember that order 
	             doesn't matter, [2,6] is also an acceptable answer.

	Example 3:
	Input: root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]
	Output: [77,55,33,66,44,22]
	Explanation: Nodes 99 and 88 share the same parent. Node 11 is the root. 
	             All other nodes are lonely.

	Example 4:
	Input: root = [197]
	Output: []

	Example 5:
	Input: root = [31,null,78,null,28]
	Output: [78,28]

	Constraints:
	* The number of nodes in the tree is in the range [1, 1000].
	* Each node's value is between [1, 10^6]."""

    def getLonelyNodes(self, root: TreeNode) -> List[int]:
        ans = []
        stack = [root]
        while stack: 
            node = stack.pop()
            if node.left: 
                stack.append(node.left)
                if not node.right: ans.append(node.left.val)
            if node.right: 
                stack.append(node.right)
                if not node.left: ans.append(node.right.val)
        return ans 


    """1474. Delete N Nodes After M Nodes of a Linked List (Easy)
	Given the head of a linked list and two integers m and n. Traverse the 
	linked list and remove some nodes in the following way:
	* Start with the head as the current node.
	* Keep the first m nodes starting with the current node.
	* Remove the next n nodes
	* Keep repeating steps 2 and 3 until you reach the end of the list.
	Return the head of the modified list after removing the mentioned nodes. 
	Follow up question: How can you solve this problem by modifying the list 
	in-place?

	Example 1:
	Input: head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3
	Output: [1,2,6,7,11,12]
	Explanation: Keep the first (m = 2) nodes starting from the head of the 
	             linked List  (1 ->2) show in black nodes. Delete the next 
	             (n = 3) nodes (3 -> 4 -> 5) show in read nodes. Continue with 
	             the same procedure until reaching the tail of the Linked List. 
	             Head of linked list after removing nodes is returned.

	Example 2:
	Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3
	Output: [1,5,9]
	Explanation: Head of linked list after removing nodes is returned.

	Example 3:
	Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 3, n = 1
	Output: [1,2,3,5,6,7,9,10,11]
	
	Example 4:
	Input: head = [9,3,7,7,9,10,8,2], m = 1, n = 2
	Output: [9,7,8]

	Constraints:
	* The given linked list will contain between 1 and 10^4 nodes.
	* The value of each node in the linked list will be in the range [1, 10^6].
	* 1 <= m,n <= 1000"""

    def deleteNodes(self, head: ListNode, m: int, n: int) -> ListNode:
        prev, node, i = None, head, 0
        while node: 
            if i%(m+n) < m: prev = node
            else: prev.next = node.next 
            node, i = node.next, i+1
        return head 


    """1475. Final Prices With a Special Discount in a Shop (Easy)
	Given the array prices where prices[i] is the price of the ith item in a 
	shop. There is a special discount for items in the shop, if you buy the ith 
	item, then you will receive a discount equivalent to prices[j] where j is 
	the minimum index such that j > i and prices[j] <= prices[i], otherwise, 
	you will not receive any discount at all. Return an array where the ith 
	element is the final price you will pay for the ith item of the shop 
	considering the special discount.

	Example 1:
	Input: prices = [8,4,6,2,3]
	Output: [4,2,4,2,3]
	Explanation: 
	For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. 
	For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. 
	For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. 
	For items 3 and 4 you will not receive any discount at all.

	Example 2:
	Input: prices = [1,2,3,4,5]
	Output: [1,2,3,4,5]
	Explanation: In this case, for all items, you will not receive any discount 
	             at all.

	Example 3:
	Input: prices = [10,1,1,6]
	Output: [9,0,1,6]

	Constraints:
	* 1 <= prices.length <= 500
	* 1 <= prices[i] <= 10^3"""

    def finalPrices(self, prices: List[int]) -> List[int]:
        stack = []
        for i, x in enumerate(prices): 
            while stack and prices[stack[-1]] >= x: 
                prices[stack.pop()] -= x
            stack.append(i)
        return prices


    """1477. Find Two Non-overlapping Sub-arrays Each With Target Sum (Medium)
	Given an array of integers arr and an integer target. You have to find two 
	non-overlapping sub-arrays of arr each with sum equal target. There can be 
	multiple answers so you have to find an answer where the sum of the lengths 
	of the two sub-arrays is minimum. Return the minimum sum of the lengths of 
	the two required sub-arrays, or return -1 if you cannot find such two sub-
	arrays.

	Example 1:
	Input: arr = [3,2,2,4,3], target = 3
	Output: 2
	Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of 
	             their lengths is 2.

	Example 2:
	Input: arr = [7,3,4,7], target = 7
	Output: 2
	Explanation: Although we have three non-overlapping sub-arrays of 
	             sum = 7 ([7], [3,4] and [7]), but we will choose the first and 
	             third sub-arrays as the sum of their lengths is 2.
	
	Example 3:
	Input: arr = [4,3,2,6,2,3,4], target = 6
	Output: -1
	Explanation: We have only one sub-array of sum = 6.

	Example 4:
	Input: arr = [5,5,4,4,5], target = 3
	Output: -1
	Explanation: We cannot find a sub-array of sum = 3.

	Example 5:
	Input: arr = [3,1,1,1,5,1,2,1], target = 3
	Output: 3
	Explanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer 
	             because they overlap.

	Constraints:
	* 1 <= arr.length <= 10^5
	* 1 <= arr[i] <= 1000
	* 1 <= target <= 10^8"""

    def minSumOfLengths(self, arr: List[int], target: int) -> int:
        ans = inf 
        best = [inf]*len(arr) # shortest subarray ending at i
        prefix = 0
        latest = {0: -1}
        for i, x in enumerate(arr): 
            prefix += x
            if prefix - target in latest: 
                ii = latest[prefix - target]
                if ii >= 0: 
                    ans = min(ans, i - ii + best[ii])
                best[i] = i - ii
            if i: best[i] = min(best[i-1], best[i])
            latest[prefix] = i 
        return ans if ans < inf else -1


    """1478. Allocate Mailboxes (Hard)
	Given the array houses and an integer k. where houses[i] is the location of 
	the ith house along a street, your task is to allocate k mailboxes in the 
	street. Return the minimum total distance between each house and its 
	nearest mailbox. The answer is guaranteed to fit in a 32-bit signed integer.

	Example 1:
	Input: houses = [1,4,8,10,20], k = 3
	Output: 5
	Explanation: Allocate mailboxes in position 3, 9 and 20. Minimum total 
	             distance from each houses to nearest mailboxes is 
	             |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 

	Example 2:
	Input: houses = [2,3,5,12,18], k = 2
	Output: 9
	Explanation: Allocate mailboxes in position 3 and 14. Minimum total 
	             distance from each houses to nearest mailboxes is 
	             |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.
	
	Example 3:
	Input: houses = [7,4,6,1], k = 1
	Output: 8

	Example 4:
	Input: houses = [3,6,14,10], k = 4
	Output: 0

	Constraints:
	* n == houses.length
	* 1 <= n <= 100
	* 1 <= houses[i] <= 10^4
	* 1 <= k <= n
	* Array houses contain unique integers."""

    def minDistance(self, houses: List[int], k: int) -> int:
        houses.sort() # ascending order 
        n = len(houses)
        
        mdist = [[0]*n for _ in range(n)] # mdist[i][j] median distance of houses[i:j+1]
        for i in range(n):
            for j in range(i+1, n): 
                mdist[i][j] = mdist[i][j-1] + houses[j] - houses[i+j >> 1]
        
        @cache
        def fn(n, k):
            """Return min distance of allocating k mailboxes to n houses."""
            if n <= k: return 0 # one mailbox for each house
            if k == 1: return mdist[0][n-1]
            ans = inf 
            for nn in range(k-1, n): 
                ans = min(ans, fn(nn, k-1) + mdist[nn][n-1])
            return ans 
        
        return fn(n, k)


    """1485. Clone Binary Tree With Random Pointer (Medium)
	A binary tree is given such that each node contains an additional random 
	pointer which could point to any node in the tree or null. Return a deep 
	copy of the tree. The tree is represented in the same input/output way as 
	normal binary trees where each node is represented as a pair of 
	[val, random_index] where:
	* val: an integer representing Node.val
	* random_index: the index of the node (in the input) where the random 
	  pointer points to, or null if it does not point to any node.
	You will be given the tree in class Node and you should return the cloned 
	tree in class NodeCopy. NodeCopy class is just a clone of Node class with 
	the same attributes and constructors.

	Example 1:
	Input: root = [[1,null],null,[4,3],[7,0]]
	Output: [[1,null],null,[4,3],[7,0]]
	Explanation: The original binary tree is [1,null,4,7]. The random pointer 
	             of node one is null, so it is represented as [1, null]. The 
	             random pointer of node 4 is node 7, so it is represented as 
	             [4, 3] where 3 is the index of node 7 in the array 
	             representing the tree. The random pointer of node 7 is node 1, 
	             so it is represented as [7, 0] where 0 is the index of node 1 
	             in the array representing the tree.

	Example 2:
	Input: root = [[1,4],null,[1,0],null,[1,5],[1,5]]
	Output: [[1,4],null,[1,0],null,[1,5],[1,5]]
	Explanation: The random pointer of a node can be the node itself.

	Example 3:
	Input: root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]
	Output: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]

	Example 4:
	Input: root = []
	Output: []

	Example 5:
	Input: root = [[1,null],null,[2,null],null,[1,null]]
	Output: [[1,null],null,[2,null],null,[1,null]]

	Constraints:
	* The number of nodes in the tree is in the range [0, 1000].
	* Each node's value is between [1, 10^6]."""

    def copyRandomBinaryTree(self, root: 'Node') -> 'NodeCopy':
        if not root: return 
        mp = defaultdict(NodeCopy)
        stack = [root]
        while stack: 
            node = stack.pop()
            mp[node].val = node.val
            if node.left: 
                mp[node].left = mp[node.left]
                stack.append(node.left)
            if node.right: 
                mp[node].right = mp[node.right]
                stack.append(node.right)
            if node.random: mp[node].random = mp[node.random]
        return mp[root]


    """1490. Clone N-ary Tree (Medium)
	Given a root of an N-ary tree, return a deep copy (clone) of the tree. Each 
	node in the n-ary tree contains a val (int) and a list (List[Node]) of its 
	children.

	class Node {
	    public int val;
	    public List<Node> children;
	}
	
	Nary-Tree input serialization is represented in their level order traversal, 
	each group of children is separated by the null value (See examples).

	Example 1:
	Input: root = [1,null,3,2,4,null,5,6]
	Output: [1,null,3,2,4,null,5,6]

	Example 2:
	Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
	Output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]

	Constraints:
	* The depth of the n-ary tree is less than or equal to 1000.
	* The total number of nodes is between [0, 104].

	Follow up: Can your solution work for the graph problem?"""

    def cloneTree(self, root: 'Node') -> 'Node':
        if not root: return 
        return Node(root.val, [self.cloneTree(x) for x in root.children])

    
    """1491. Average Salary Excluding the Minimum and Maximum Salary (Easy)
	Given an array of unique integers salary where salary[i] is the salary of 
	the employee i. Return the average salary of employees excluding the 
	minimum and maximum salary.

	Example 1:
	Input: salary = [4000,3000,1000,2000]
	Output: 2500.00000
	Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.
	Average salary excluding minimum and maximum salary is (2000+3000)/2= 2500

	Example 2:
	Input: salary = [1000,2000,3000]
	Output: 2000.00000
	Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively.
	Average salary excluding minimum and maximum salary is (2000)/1= 2000

	Example 3:
	Input: salary = [6000,5000,4000,3000,2000,1000]
	Output: 3500.00000

	Example 4:
	Input: salary = [8000,9000,2000,3000,6000,1000]
	Output: 4750.00000

	Constraints:
	* 3 <= salary.length <= 100
	* 10^3 <= salary[i] <= 10^6
	* salary[i] is unique.
	* Answers within 10^-5 of the actual value will be accepted as correct."""

    def average(self, salary: List[int]) -> float:
        return (sum(salary)-max(salary)-min(salary)) / (len(salary)-2)


    """1492. The kth Factor of n (Medium)
	Given two positive integers n and k. A factor of an integer n is defined as 
	an integer i where n % i == 0. Consider a list of all factors of n sorted 
	in ascending order, return the kth factor in this list or return -1 if n 
	has less than k factors.

	Example 1:
	Input: n = 12, k = 3
	Output: 3
	Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.

	Example 2:
	Input: n = 7, k = 2
	Output: 7
	Explanation: Factors list is [1, 7], the 2nd factor is 7.

	Example 3:
	Input: n = 4, k = 4
	Output: -1
	Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.

	Example 4:
	Input: n = 1, k = 1
	Output: 1
	Explanation: Factors list is [1], the 1st factor is 1.

	Example 5:
	Input: n = 1000, k = 3
	Output: 4
	Explanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].

	Constraints: 1 <= k <= n <= 1000"""

    def kthFactor(self, n: int, k: int) -> int:
        for i in range(1, int(sqrt(n))+1): # forward pass 
            if not n%i: k -= 1
            if not k: return i 
        
        while i > 0: # backward pass 
            if i * i < n: 
                if not n%i: k -= 1
                if not k: return n//i
            i -= 1
        
        return -1 


    """1493. Longest Subarray of 1's After Deleting One Element (Medium)
	Given a binary array nums, you should delete one element from it. Return 
	the size of the longest non-empty subarray containing only 1's in the 
	resulting array. Return 0 if there is no such subarray.

	Example 1:
	Input: nums = [1,1,0,1]
	Output: 3
	Explanation: After deleting the number in position 2, [1,1,1] contains 3 
	             numbers with value of 1's.

	Example 2:
	Input: nums = [0,1,1,1,0,1,1,0,1]
	Output: 5
	Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] 
	             longest subarray with value of 1's is [1,1,1,1,1].
	
	Example 3:
	Input: nums = [1,1,1]
	Output: 2
	Explanation: You must delete one element.
	
	Example 4:
	Input: nums = [1,1,0,0,1,1,1,0,1]
	Output: 4

	Example 5:
	Input: nums = [0,0,0]
	Output: 0

	Constraints:
	* 1 <= nums.length <= 10^5
	* nums[i] is either 0 or 1."""

    def longestSubarray(self, nums: List[int]) -> int:
        ans = 0 
        queue = deque([-1])
        for i, x in enumerate(nums): 
            if not x: queue.append(i)
            if len(queue) > 2: queue.popleft()
            ans = max(ans, i - queue[0] - 1)
        return ans 


    """1494. Parallel Courses II (Hard)
	Given the integer n representing the number of courses at some university 
	labeled from 1 to n, and the array dependencies where 
	dependencies[i] = [xi, yi] represents a prerequisite relationship, that is, 
	the course xi must be taken before the course yi. Also, you are given the 
	integer k. In one semester you can take at most k courses as long as you 
	have taken all the prerequisites for the courses you are taking. Return the 
	minimum number of semesters to take all courses. It is guaranteed that you 
	can take all courses in some way.

	Example 1:
	Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2
	Output: 3 
	Explanation: The figure above represents the given graph. In this case we 
	             can take courses 2 and 3 in the first semester, then take 
	             course 1 in the second semester and finally take course 4 in 
	             the third semester.

	Example 2:
	Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2
	Output: 4 
	Explanation: The figure above represents the given graph. In this case one 
	             optimal way to take all courses is: take courses 2 and 3 in 
	             the first semester and take course 4 in the second semester, 
	             then take course 1 in the third semester and finally take 
	             course 5 in the fourth semester.
	
	Example 3:
	Input: n = 11, dependencies = [], k = 2
	Output: 6

	Constraints:
	* 1 <= n <= 15
	* 1 <= k <= n
	* 0 <= dependencies.length <= n * (n-1) / 2
	* dependencies[i].length == 2
	* 1 <= xi, yi <= n
	* xi != yi
	* All prerequisite relationships are distinct, that is, dependencies[i] != dependencies[j].
	* The given graph is a directed acyclic graph."""

    def minNumberOfSemesters(self, n: int, dependencies: List[List[int]], k: int) -> int:
        pre = [0]*n # prerequisites 
        for u, v in dependencies: 
            pre[v-1] |= 1 << (u-1) 
            
        @cache
        def fn(mask): 
            """Return min semesters to take remaining courses."""
            if mask == (1 << n) - 1: return 0 # all courses taken 
            can = [] # available courses 
            for i in range(n): 
                if not mask & 1 << i and mask & pre[i] == pre[i]: 
                    can.append(i)
            
            ans = inf
            for courses in combinations(can, min(k, len(can))): 
                temp = mask 
                for c in courses: 
                    temp |= 1 << c
                ans = min(ans, 1 + fn(temp))
            return ans 
        
        return fn(0)


    """1506. Find Root of N-Ary Tree (Medium)
	You are given all the nodes of an N-ary tree as an array of Node objects, 
	where each node has a unique value. Return the root of the N-ary tree.

	Custom testing: An N-ary tree can be serialized as represented in its level 
	order traversal where each group of children is separated by the null value 
	(see examples). For example, the above tree is serialized as 
	[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].

	The testing will be done in the following way:
	* The input data should be provided as a serialization of the tree.
	* The driver code will construct the tree from the serialized input data 
	  and put each Node object into an array in an arbitrary order.
	* The driver code will pass the array to findRoot, and your function should 
	  find and return the root Node object in the array.
	* The driver code will take the returned Node object and serialize it. If 
	  the serialized value and the input data are the same, the test passes.

	Example 1:
	Input: tree = [1,null,3,2,4,null,5,6]
	Output: [1,null,3,2,4,null,5,6]
	Explanation: The tree from the input data is shown above. The driver code 
	             creates the tree and gives findRoot the Node objects in an 
	             arbitrary order. For example, the passed array could be 
	             [Node(5),Node(4),Node(3),Node(6),Node(2),Node(1)] or 
	             [Node(2),Node(6),Node(1),Node(3),Node(5),Node(4)]. The 
	             findRoot function should return the root Node(1), and the 
	             driver code will serialize it and compare with the input data.
	             The input data and serialized Node(1) are the same, so the 
	             test passes.
	
	Example 2:
	Input: tree = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
	Output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]

	Constraints:
	* The total number of nodes is between [1, 5 * 10^4].
	* Each node has a unique value.

	Follow up: Could you solve this problem in constant space complexity with a 
	           linear time algorithm?"""

    def findRoot(self, tree: List['Node']) -> 'Node':
        val = 0 
        for node in tree: 
            val ^= node.val
            for child in node.children: 
                val ^= child.val 
        return next(node for node in tree if node.val == val)


    """1520. Maximum Number of Non-Overlapping Substrings (Hard)
	Given a string s of lowercase letters, you need to find the maximum number 
	of non-empty substrings of s that meet the following conditions:
	* The substrings do not overlap, that is for any two substrings s[i..j] and 
	  s[k..l], either j < k or i > l is true.
	* A substring that contains a certain character c must also contain all 
	  occurrences of c.
	Find the maximum number of substrings that meet the above conditions. If 
	there are multiple solutions with the same number of substrings, return the 
	one with minimum total length. It can be shown that there exists a unique 
	solution of minimum total length. Notice that you can return the substrings 
	in any order.

	Example 1:
	Input: s = "adefaddaccc"
	Output: ["e","f","ccc"]
	Explanation: The following are all the possible substrings that meet the 
	             conditions: ["adefaddaccc"
	                          "adefadda",
	                          "ef",
	                          "e",
	                          "f",
	                          "ccc",]
	             If we choose the first string, we cannot choose anything else 
	             and we'd get only 1. If we choose "adefadda", we are left with 
	             "ccc" which is the only one that doesn't overlap, thus 
	             obtaining 2 substrings. Notice also, that it's not optimal to 
	             choose "ef" since it can be split into two. Therefore, the 
	             optimal way is to choose ["e","f","ccc"] which gives us 3 
	             substrings. No other solution of the same number of substrings 
	             exist.
	
	Example 2:
	Input: s = "abbaccd"
	Output: ["d","bb","cc"]
	Explanation: Notice that while the set of substrings ["d","abba","cc"] also 
	             has length 3, it's considered incorrect since it has larger 
	             total length.

	Constraints:
	* 1 <= s.length <= 10^5
	* s contains only lowercase English letters."""

    def maxNumOfSubstrings(self, s: str) -> List[str]:
        locs = {}
        for i, x in enumerate(s): 
            locs.setdefault(x, []).append(i)
        
        def fn(lo, hi): 
            """Return expanded range covering all chars in s[lo:hi+1]."""
            for xx in locs: 
                k0 = bisect_left(locs[xx], lo)
                k1 = bisect_left(locs[xx], hi)
                if k0 < k1 and (locs[xx][0] < lo or hi < locs[xx][-1]): 
                    lo = min(lo, locs[xx][0])
                    hi = max(hi, locs[xx][-1])
                    lo, hi = fn(lo, hi)
            return lo, hi
        
        group = set()
        for x in locs: 
            group.add(fn(locs[x][0], locs[x][-1]))
        
        ans = [] # ISMP (interval scheduling maximization problem)
        prev = -1 
        for lo, hi in sorted(group, key=lambda x: x[1]): 
            if prev < lo: 
                ans.append(s[lo:hi+1])
                prev = hi 
        return ans 


    """1522. Diameter of N-Ary Tree (Medium)
	Given a root of an N-ary tree, you need to compute the length of the 
	diameter of the tree. The diameter of an N-ary tree is the length of the 
	longest path between any two nodes in the tree. This path may or may not 
	pass through the root. (Nary-Tree input serialization is represented in 
	their level order traversal, each group of children is separated by the 
	null value.)

	Example 1:
	Input: root = [1,null,3,2,4,null,5,6]
	Output: 3
	Explanation: Diameter is shown in red color.

	Example 2:
	Input: root = [1,null,2,null,3,4,null,5,null,6]
	Output: 4

	Example 3:
	Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,
	               null,12,null,13,null,null,14]
	Output: 7

	Constraints:
	* The depth of the n-ary tree is less than or equal to 1000.
	* The total number of nodes is between [1, 10^4]."""

    def diameter(self, root: 'Node') -> int:
        
        def fn(node): 
            """Return node's height."""
            nonlocal ans 
            if not node: return 0 
            mx1 = mx2 = 0 
            for child in node.children: 
                val = fn(child)
                if val >= mx1: mx1, mx2 = val, mx1
                elif val > mx2: mx2 = val 
            ans = max(ans, mx1 + mx2)
            return mx1 + 1
        
        ans = 0
        fn(root)
        return ans 


    """1523. Count Odd Numbers in an Interval Range (Easy)
	Given two non-negative integers low and high. Return the count of odd 
	numbers between low and high (inclusive).

	Example 1:
	Input: low = 3, high = 7
	Output: 3
	Explanation: The odd numbers between 3 and 7 are [3,5,7].

	Example 2:
	Input: low = 8, high = 10
	Output: 1
	Explanation: The odd numbers between 8 and 10 are [9].

	Constraints: 0 <= low <= high <= 10^9"""

    def countOdds(self, low: int, high: int) -> int:
        return (high+1)//2 - low//2


    """1524. Number of Sub-arrays With Odd Sum (Medium)
	Given an array of integers arr. Return the number of sub-arrays with odd 
	sum. As the answer may grow large, the answer must be computed modulo 
	10^9 + 7.

	Example 1:
	Input: arr = [1,3,5]
	Output: 4
	Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
	All sub-arrays sum are [1,4,9,3,8,5].
	Odd sums are [1,9,3,5] so the answer is 4.

	Example 2:
	Input: arr = [2,4,6]
	Output: 0
	Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
	All sub-arrays sum are [2,6,12,4,10,6].
	All sub-arrays have even sum and the answer is 0.

	Example 3:
	Input: arr = [1,2,3,4,5,6,7]
	Output: 16

	Example 4:
	Input: arr = [100,100,99,99]
	Output: 4

	Example 5:
	Input: arr = [7]
	Output: 1

	Constraints:
	* 1 <= arr.length <= 10^5
	* 1 <= arr[i] <= 100"""

    def numOfSubarrays(self, arr: List[int]) -> int:
        freq = [1, 0]
        ans = prefix = 0
        for x in arr: 
            prefix += x 
            ans += freq[1 ^ prefix&1]
            freq[prefix&1] += 1
        return ans % 1_000_000_007


    """1525. Number of Good Ways to Split a String (Medium)
	You are given a string s, a split is called good if you can split s into 2 
	non-empty strings p and q where its concatenation is equal to s and the 
	number of distinct letters in p and q are the same. Return the number of 
	good splits you can make in s.

	Example 1:
	Input: s = "aacaba"
	Output: 2
	Explanation: There are 5 ways to split "aacaba" and 2 of them are good. 
	("a", "acaba") Left string and right string contains 1 and 3 different letters respectively.
	("aa", "caba") Left string and right string contains 1 and 3 different letters respectively.
	("aac", "aba") Left string and right string contains 2 and 2 different letters respectively (good split).
	("aaca", "ba") Left string and right string contains 2 and 2 different letters respectively (good split).
	("aacab", "a") Left string and right string contains 3 and 1 different letters respectively.

	Example 2:
	Input: s = "abcd"
	Output: 1
	Explanation: Split the string as follows ("ab", "cd").

	Example 3:
	Input: s = "aaaaa"
	Output: 4
	Explanation: All possible splits are good.

	Example 4:
	Input: s = "acbadbaada"
	Output: 2

	Constraints:
	* s contains only lowercase English letters.
	* 1 <= s.length <= 10^5"""

    def numSplits(self, s: str) -> int:
        freq = {}
        for c in s: freq[c] = 1 + freq.get(c, 0)
        
        ans = 0
        seen = set()
        for i, c in enumerate(s):
            seen.add(c)
            freq[c] -= 1
            if not freq[c]: freq.pop(c)
            if len(seen) == len(freq): ans += 1
        return ans 


    """1526. Minimum Number of Increments on Subarrays to Form a Target Array (Hard)
	Given an array of positive integers target and an array initial of same 
	size with all zeros. Return the minimum number of operations to form a 
	target array from initial if you are allowed to do the following operation:
	* Choose any subarray from initial and increment each value by one.
	The answer is guaranteed to fit within the range of a 32-bit signed integer.

	Example 1:
	Input: target = [1,2,3,2,1]
	Output: 3
	Explanation: We need at least 3 operations to form the target array from the initial array.
	[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).
	[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).
	[1,2,2,2,1] increment 1 at index 2.
	[1,2,3,2,1] target array is formed.

	Example 2:
	Input: target = [3,1,1,2]
	Output: 4
	Explanation: (initial)[0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] (target).

	Example 3:
	Input: target = [3,1,5,4,2]
	Output: 7
	Explanation: (initial)[0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] 
	                                  -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2] (target).

	Example 4:
	Input: target = [1,1,1,1]
	Output: 1

	Constraints:
	* 1 <= target.length <= 10^5
	* 1 <= target[i] <= 10^5"""

    def minNumberOperations(self, target: List[int]) -> int:
        ans = prev = 0
        for x in target: 
            ans += max(x - prev, 0)
            prev = x
        return ans 


    """1528. Shuffle String (Easy)
	Given a string s and an integer array indices of the same length. The 
	string s will be shuffled such that the character at the ith position moves 
	to indices[i] in the shuffled string. Return the shuffled string.

	Example 1:
	Input: s = "codeleet", indices = [4,5,6,7,0,2,1,3]
	Output: "leetcode"
	Explanation: As shown, "codeleet" becomes "leetcode" after shuffling.

	Example 2:
	Input: s = "abc", indices = [0,1,2]
	Output: "abc"
	Explanation: After shuffling, each character remains in its position.

	Example 3:
	Input: s = "aiohn", indices = [3,1,4,2,0]
	Output: "nihao"

	Example 4:
	Input: s = "aaiougrt", indices = [4,0,2,6,7,3,1,5]
	Output: "arigatou"

	Example 5:
	Input: s = "art", indices = [1,0,2]
	Output: "rat"

	Constraints:
	* s.length == indices.length == n
	* 1 <= n <= 100
	* s contains only lower-case English letters.
	* 0 <= indices[i] < n
	* All values of indices are unique (i.e. indices is a permutation of the integers from 0 to n - 1)."""

    def restoreString(self, s: str, indices: List[int]) -> str:
        ans = [""]*len(s)
        for i, x in zip(indices, s):
            ans[i] = x
        return "".join(ans)


    """1529. Bulb Switcher IV (Medium)
	There is a room with n bulbs, numbered from 0 to n - 1, arranged in a row 
	from left to right. Initially, all the bulbs are turned off. Your task is 
	to obtain the configuration represented by target where target[i] is '1' 
	if the ith bulb is turned on and is '0' if it is turned off. You have a 
	switch to flip the state of the bulb, a flip operation is defined as 
	follows:
	* Choose any bulb (index i) of your current configuration.
	* Flip each bulb from index i to index n - 1.
	When any bulb is flipped it means that if it is '0' it changes to '1' and 
	if it is '1' it changes to '0'. Return the minimum number of flips 
	required to form target.

	Example 1:
	Input: target = "10111"
	Output: 3
	Explanation: Initial configuration "00000".
	flip from the third bulb:  "00000" -> "00111"
	flip from the first bulb:  "00111" -> "11000"
	flip from the second bulb:  "11000" -> "10111"
	We need at least 3 flip operations to form target.

	Example 2:
	Input: target = "101"
	Output: 3
	Explanation: "000" -> "111" -> "100" -> "101".

	Example 3:
	Input: target = "00000"
	Output: 0

	Example 4:
	Input: target = "001011101"
	Output: 5

	Constraints:
	* 1 <= target.length <= 10^5
	* target[i] is either '0' or '1'."""

    def minFlips(self, target: str) -> int:
        ans, prev = 0,"0"
        for c in target: 
            if prev != c: ans += 1
            prev = c
        return ans 


    """1530. Number of Good Leaf Nodes Pairs (Medium)
	Given the root of a binary tree and an integer distance. A pair of two 
	different leaf nodes of a binary tree is said to be good if the length of 
	the shortest path between them is less than or equal to distance. Return 
	the number of good leaf node pairs in the tree.

	Example 1:
	Input: root = [1,2,3,null,4], distance = 3
	Output: 1
	Explanation: The leaf nodes of the tree are 3 and 4 and the length of the 
	             shortest path between them is 3. This is the only good pair.

	Example 2:
	Input: root = [1,2,3,4,5,6,7], distance = 3
	Output: 2
	Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The 
	             pair [4,6] is not good because the length of ther shortest path 
	             between them is 4.
	
	Example 3:
	Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3
	Output: 1
	Explanation: The only good pair is [2,5].

	Example 4:
	Input: root = [100], distance = 1
	Output: 0

	Example 5:
	Input: root = [1,1,1], distance = 2
	Output: 1

	Constraints:
	* The number of nodes in the tree is in the range [1, 2^10].
	* Each node's value is between [1, 100].
	* 1 <= distance <= 10"""

    def countPairs(self, root: TreeNode, distance: int) -> int:
        
        def dfs(node):
            """Return (a list of) distances to leaves of sub-tree rooted at node."""
            nonlocal ans
            if not node: return []
            if node.left is node.right is None: return [0]
            left,right = dfs(node.left), dfs(node.right)
            ans += sum(2 + x + y <= distance for x in left for y in right)
            return [1 + x for x in left + right]
        
        ans = 0
        dfs(root)
        return ans 


    """1531. String Compression II (Hard)
	Run-length encoding is a string compression method that works by replacing 
	consecutive identical characters (repeated 2 or more times) with the 
	concatenation of the character and the number marking the count of the 
	characters (length of the run). For example, to compress the string 
	"aabccc" we replace "aa" by "a2" and replace "ccc" by "c3". Thus the 
	compressed string becomes "a2bc3". Notice that in this problem, we are not 
	adding '1' after single characters. Given a string s and an integer k. You 
	need to delete at most k characters from s such that the run-length encoded 
	version of s has minimum length. Find the minimum length of the run-length 
	encoded version of s after deleting at most k characters.

	Example 1:
	Input: s = "aaabcccd", k = 2
	Output: 4
	Explanation: Compressing s without deleting anything will give us "a3bc3d" 
	             of length 6. Deleting any of the characters 'a' or 'c' would 
	             at most decrease the length of the compressed string to 5, for 
	             instance delete 2 'a' then we will have s = "abcccd" which 
	             compressed is abc3d. Therefore, the optimal way is to delete 
	             'b' and 'd', then the compressed version of s will be "a3c3" 
	             of length 4.

	Example 2:
	Input: s = "aabbaa", k = 2
	Output: 2
	Explanation: If we delete both 'b' characters, the resulting compressed 
	             string would be "a4" of length 2.
	
	Example 3:
	Input: s = "aaaaaaaaaaa", k = 0
	Output: 3
	Explanation: Since k is zero, we cannot delete anything. The compressed 
	             string is "a11" of length 3.

	Constraints:
	* 1 <= s.length <= 100
	* 0 <= k <= s.length
	* s contains only lowercase English letters."""

    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:
        rle = lambda x: x if x <= 1 else int(log10(x)) + 2 # rle length of a char repeated x times
        
        @cache 
        def fn(i, k, prev, cnt):
            """Return length of rle of s[i:] with k chars to be deleted."""
            if k < 0: return inf 
            if i == len(s): return 0 
            ans = fn(i+1, k-1, prev, cnt) # delete current character 
            if prev == s[i]: 
                ans = min(ans, fn(i+1, k, s[i], cnt+1) + rle(cnt+1) - rle(cnt))
            else: 
                ans = min(ans, fn(i+1, k, s[i], 1) + 1)
            return ans 
        
        return fn(0, k, "", 0)


    """1533. Find the Index of the Large Integer (Medium)
	We have an integer array arr, where all the integers in arr are equal 
	except for one integer which is larger than the rest of the integers. You 
	will not be given direct access to the array, instead, you will have an API 
	ArrayReader which have the following functions:
	* int compareSub(int l, int r, int x, int y): where 
	  0 <= l, r, x, y < ArrayReader.length(), l <= r and x <= y. The function 
	  compares the sum of sub-array arr[l..r] with the sum of the sub-array 
	  arr[x..y] and returns:
	  - 1 if arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y].
	  - 0 if arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y].
	  - -1 if arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y].
	* int length(): Returns the size of the array.
	You are allowed to call compareSub() 20 times at most. You can assume both 
	functions work in O(1) time. Return the index of the array arr which has 
	the largest integer.

	Follow-up:
	* What if there are two numbers in arr that are bigger than all other 
	  numbers?
	* What if there is one number that is bigger than other numbers and one 
	  number that is smaller than other numbers?

	Example 1:
	Input: arr = [7,7,7,7,10,7,7,7]
	Output: 4
	Explanation: The following calls to the API
	reader.compareSub(0, 0, 1, 1) // returns 0 this is a query comparing the 
	                              // sub-array (0, 0) with the sub array (1, 1), 
	                              // (i.e. compares arr[0] with arr[1]).
	Thus we know that arr[0] and arr[1] doesn't contain the largest element.
	reader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3].
	reader.compareSub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is the 
	                              // largest element in the array.
	Notice that we made only 3 calls, so the answer is valid.

	Example 2:
	Input: nums = [6,6,12]
	Output: 2

	Constraints:
	* 2 <= arr.length <= 5 * 10^5
	* 1 <= arr[i] <= 100
	* All elements of arr are equal except for one element which is larger than 
	  all other elements."""

    def getIndex(self, reader: 'ArrayReader') -> int:
        lo, hi = 0, reader.length()-1
        while lo <= hi: 
            mid = lo + hi >> 1
            if (hi - lo) & 1: 
                res = reader.compareSub(lo, mid, mid+1, hi)
                if res == 1: hi = mid
                else: lo = mid + 1
            else: 
                res = reader.compareSub(lo, mid, mid, hi)
                if res == 1: hi = mid-1
                elif res == 0: return mid 
                else: lo = mid+1


    """1554. Strings Differ by One Character (Medium)
	Given a list of strings dict where all the strings are of the same length.
	Return True if there are 2 strings that only differ by 1 character in the 
	same index, otherwise return False. 

	Follow up: Could you solve this problem in O(n*m) where n is the length of 
	           dict and m is the length of each string.

	Example 1:
	Input: dict = ["abcd","acbd", "aacd"]
	Output: true
	Explanation: Strings "abcd" and "aacd" differ only by one character in the 
	             index 1.

	Example 2:
	Input: dict = ["ab","cd","yz"]
	Output: false
	
	Example 3:
	Input: dict = ["abcd","cccc","abyd","abab"]
	Output: true

	Constraints:
	* Number of characters in dict <= 10^5
	* dict[i].length == dict[j].length
	* dict[i] should be unique.
	* dict[i] contains only lowercase English letters."""

    def differByOne(self, dict: List[str]) -> bool:
        MOD = 1_000_000_007
        hs = []
        for word in dict: 
            val = 0
            for ch in word: val = (26*val + ord(ch) - 97) % MOD
            hs.append(val)
        
        mult = 1
        for j in reversed(range(len(dict[0]))): 
            seen = {}
            for i, w in enumerate(dict): 
                val = (hs[i] - (ord(w[j]) - 97) * mult) % MOD
                if val in seen: 
                    for ww in seen[val]: 
                        if sum(x != xx for x, xx in zip(w, ww)) == 1: return True 
                seen.setdefault(val, []).append(w)
            mult = 26 * mult % MOD
        return False


    """1557. Minimum Number of Vertices to Reach All Nodes (Medium)
	Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and 
	an array edges where edges[i] = [fromi, toi] represents a directed edge 
	from node fromi to node toi. Find the smallest set of vertices from which 
	all nodes in the graph are reachable. It's guaranteed that a unique 
	solution exists. Notice that you can return the vertices in any order.

	Example 1:
	Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
	Output: [0,3]
	Explanation: It's not possible to reach all the nodes from a single vertex. 
	             From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. 
	             So we output [0,3].
	
	Example 2:
	Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]
	Output: [0,2,3]
	Explanation: Notice that vertices 0, 3 and 2 are not reachable from any 
	             other node, so we must include them. Also any of these 
	             vertices can reach nodes 1 and 4.

	Constraints:
	* 2 <= n <= 10^5
	* 1 <= edges.length <= min(10^5, n * (n - 1) / 2)
	* edges[i].length == 2
	* 0 <= fromi, toi < n
	* All pairs (fromi, toi) are distinct."""

    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:
        indeg = [0]*n
        for _, v in edges: indeg[v] += 1
        return [i for i, x in enumerate(indeg) if x == 0]


    """1564. Put Boxes Into the Warehouse I (Medium)
	You are given two arrays of positive integers, boxes and warehouse, 
	representing the heights of some boxes of unit width and the heights of n 
	rooms in a warehouse respectively. The warehouse's rooms are labelled from 
	0 to n - 1 from left to right where warehouse[i] (0-indexed) is the height 
	of the ith room. Boxes are put into the warehouse by the following rules:
	* Boxes cannot be stacked.
	* You can rearrange the insertion order of the boxes.
	* Boxes can only be pushed into the warehouse from left to right only.
	* If the height of some room in the warehouse is less than the height of a 
	  box, then that box and all other boxes behind it will be stopped before 
	  that room.
	Return the maximum number of boxes you can put into the warehouse.

	Example 1:
	Input: boxes = [4,3,4,1], warehouse = [5,3,3,4,1]
	Output: 3
	Explanation: We can first put the box of height 1 in room 4. Then we can 
	             put the box of height 3 in either of the 3 rooms 1, 2, or 3. 
	             Lastly, we can put one box of height 4 in room 0. There is no 
	             way we can fit all 4 boxes in the warehouse.

	Example 2:
	Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]
	Output: 3
	Explanation: Notice that it's not possible to put the box of height 4 into 
	             the warehouse since it cannot pass the first room of height 3. 
	             Also, for the last two rooms, 2 and 3, only boxes of height 1 
	             can fit. We can fit 3 boxes maximum as shown above. The yellow 
	             box can also be put in room 2 instead. Swapping the orange and 
	             green boxes is also valid, or swapping one of them with the 
	             red box.
	
	Example 3:
	Input: boxes = [1,2,3], warehouse = [1,2,3,4]
	Output: 1
	Explanation: Since the first room in the warehouse is of height 1, we can only put boxes of height 1.

	Example 4:
	Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]
	Output: 0

	Constraints:
	* n == warehouse.length
	* 1 <= boxes.length, warehouse.length <= 10^5
	* 1 <= boxes[i], warehouse[i] <= 10^9"""

    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:
        k = 0
        for box in sorted(boxes, reverse=True): 
            if k < len(warehouse) and box <= warehouse[k]: 
                k += 1
        return k 


    """1567. Maximum Length of Subarray With Positive Product (Medium)
	Given an array of integers nums, find the maximum length of a subarray 
	where the product of all its elements is positive. A subarray of an array 
	is a consecutive sequence of zero or more values taken out of that array.
	Return the maximum length of a subarray with positive product.

	Example 1:
	Input: nums = [1,-2,-3,4]
	Output: 4
	Explanation: The array nums already has a positive product of 24.

	Example 2:
	Input: nums = [0,1,-2,-3,-4]
	Output: 3
	Explanation: The longest subarray with positive product is [1,-2,-3] which 
	             has a product of 6. Notice that we cannot include 0 in the 
	             subarray since that'll make the product 0 which is not 
	             positive.
	
	Example 3:
	Input: nums = [-1,-2,-3,0,1]
	Output: 2
	Explanation: The longest subarray with positive product is [-1,-2] or 
	             [-2,-3].
	
	Example 4:
	Input: nums = [-1,2]
	Output: 1

	Example 5:
	Input: nums = [1,2,3,5,-6,4,0,10]
	Output: 4

	Constraints:
	* 1 <= nums.length <= 10^5
	* -10^9 <= nums[i] <= 10^9"""

    def getMaxLen(self, nums: List[int]) -> int:
        ans = pos = neg = 0
        for x in nums: 
            if x > 0: pos, neg = 1 + pos, 1 + neg if neg else 0
            elif x < 0: pos, neg = 1 + neg if neg else 0, 1 + pos
            else: pos = neg = 0 # reset 
            ans = max(ans, pos)
        return ans 


    """1580. Put Boxes Into the Warehouse II (Medium)
	You are given two arrays of positive integers, boxes and warehouse, 
	representing the heights of some boxes of unit width and the heights of n 
	rooms in a warehouse respectively. The warehouse's rooms are labeled from 
	0 to n - 1 from left to right where warehouse[i] (0-indexed) is the height 
	of the ith room. Boxes are put into the warehouse by the following rules:
	* Boxes cannot be stacked.
	* You can rearrange the insertion order of the boxes.
	* Boxes can be pushed into the warehouse from either side (left or right)
	* If the height of some room in the warehouse is less than the height of a 
	  box, then that box and all other boxes behind it will be stopped before 
	  that room.
	Return the maximum number of boxes you can put into the warehouse.

	Example 1:
	Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]
	Output: 4
	Explanation:
	We can store the boxes in the following order:
	1- Put the yellow box in room 2 from either the left or right side.
	2- Put the orange box in room 3 from the right side.
	3- Put the green box in room 1 from the left side.
	4- Put the red box in room 0 from the left side.
	Notice that there are other valid ways to put 4 boxes such as swapping the 
	red and green boxes or the red and orange boxes.

	Example 2:
	Input: boxes = [3,5,5,2], warehouse = [2,1,3,4,5]
	Output: 3
	Explanation: It's not possible to put the two boxes of height 5 in the 
	             warehouse since there's only 1 room of height >= 5. Other 
	             valid solutions are to put the green box in room 2 or to put 
	             the orange box first in room 2 before putting the green and 
	             red boxes.

	Example 3:
	Input: boxes = [1,2,3], warehouse = [1,2,3,4]
	Output: 3
	
	Example 4:
	Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]
	Output: 0

	Constraints:
	* n == warehouse.length
	* 1 <= boxes.length, warehouse.length <= 10^5
	* 1 <= boxes[i], warehouse[i] <= 10^9"""

    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:
        ans = lo = 0
        hi = len(warehouse) - 1
        for box in sorted(boxes, reverse=True): 
            if lo <= hi: 
                if box <= warehouse[lo]: 
                    ans += 1
                    lo += 1
                elif box <= warehouse[hi]:
                    ans += 1
                    hi -= 1
        return ans 


    """1588. Sum of All Odd Length Subarrays (Easy)
	Given an array of positive integers arr, calculate the sum of all possible 
	odd-length subarrays. A subarray is a contiguous subsequence of the array. 
	Return the sum of all odd-length subarrays of arr.

	Example 1:
	Input: arr = [1,4,2,5,3]
	Output: 58
	Explanation: The odd-length subarrays of arr and their sums are:
	[1] = 1
	[4] = 4
	[2] = 2
	[5] = 5
	[3] = 3
	[1,4,2] = 7
	[4,2,5] = 11
	[2,5,3] = 10
	[1,4,2,5,3] = 15
	If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58

	Example 2:
	Input: arr = [1,2]
	Output: 3
	Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.

	Example 3:
	Input: arr = [10,11,12]
	Output: 66

	Constraints:
	* 1 <= arr.length <= 100
	* 1 <= arr[i] <= 1000"""

    def sumOddLengthSubarrays(self, arr: List[int]) -> int:
        return sum(((i+1)*(len(arr)-i) + 1)//2 * x for i, x in enumerate(arr))


    """1589. Maximum Sum Obtained of Any Permutation (Medium)
	We have an array of integers, nums, and an array of requests where 
	requests[i] = [starti, endi]. The ith request asks for the sum of 
	nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both 
	starti and endi are 0-indexed. Return the maximum total sum of all requests 
	among all permutations of nums. Since the answer may be too large, return 
	it modulo 10^9 + 7.

	Example 1:
	Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]
	Output: 19
	Explanation: One permutation of nums is [2,1,3,4,5] with the following result: 
	requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
	requests[1] -> nums[0] + nums[1] = 2 + 1 = 3
	Total sum: 8 + 3 = 11.
	A permutation with a higher total sum is [3,5,4,2,1] with the following result:
	requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
	requests[1] -> nums[0] + nums[1] = 3 + 5  = 8
	Total sum: 11 + 8 = 19, which is the best that you can do.

	Example 2:
	Input: nums = [1,2,3,4,5,6], requests = [[0,1]]
	Output: 11
	Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].

	Example 3:
	Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]
	Output: 47
	Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].

	Constraints:
	* n == nums.length
	* 1 <= n <= 10^5
	* 0 <= nums[i] <= 10^5
	* 1 <= requests.length <= 10^5
	* requests[i].length == 2
	* 0 <= starti <= endi < n"""

    def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:
        chg = [0]*len(nums) # change 
        for i, j in requests: 
            chg[i] += 1
            if j+1 < len(nums): chg[j+1] -= 1
        for i in range(1, len(nums)): chg[i] += chg[i-1] # cumulated change
        return sum(n*c for n, c in zip(sorted(nums), sorted(chg))) % 1_000_000_007


    """1590. Make Sum Divisible by P (Medium)
	Given an array of positive integers nums, remove the smallest subarray 
	(possibly empty) such that the sum of the remaining elements is divisible 
	by p. It is not allowed to remove the whole array. Return the length of the 
	smallest subarray that you need to remove, or -1 if it's impossible. A 
	subarray is defined as a contiguous block of elements in the array.

	Example 1:
	Input: nums = [3,1,4,2], p = 6
	Output: 1
	Explanation: The sum of the elements in nums is 10, which is not divisible 
	             by 6. We can remove the subarray [4], and the sum of the 
	             remaining elements is 6, which is divisible by 6.

	Example 2:
	Input: nums = [6,3,5,2], p = 9
	Output: 2
	Explanation: We cannot remove a single element to get a sum divisible by 9. 
	             The best way is to remove the subarray [5,2], leaving us with 
	             [6,3] with sum 9.
	
	Example 3:
	Input: nums = [1,2,3], p = 3
	Output: 0
	Explanation: Here the sum is 6. which is already divisible by 3. Thus we do 
	             not need to remove anything.

	Example 4:
	Input: nums = [1,2,3], p = 7
	Output: -1
	Explanation: There is no way to remove a subarray in order to get a sum 
	             divisible by 7.

	Example 5:
	Input: nums = [1000000000,1000000000,1000000000], p = 3
	Output: 0

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^9
	* 1 <= p <= 10^9"""

    def minSubarray(self, nums: List[int], p: int) -> int:
        target = sum(nums) % p # targetted remainder 
        ans = inf
        seen = {(prefix := 0): -1}
        for i, x in enumerate(nums): 
            seen[(prefix := (prefix+x)%p)] = i # update seen before check 
            if (prefix-target) % p in seen: 
                ans = min(ans, i - seen[(prefix-target) % p])
        return ans if ans < len(nums) else -1 # not allowed to remove whole array 



    """1591. Strange Printer II (Hard)
	There is a strange printer with the following two special requirements: 
	1) On each turn, the printer will print a solid rectangular pattern of a 
	   single color on the grid. This will cover up the existing colors in the 
	   rectangle.
	2) Once the printer has used a color for the above operation, the same 
	   color cannot be used again.
	
	You are given a m x n matrix targetGrid, where targetGrid[row][col] is the 
	color in the position (row, col) of the grid. Return true if it is possible 
	to print the matrix targetGrid, otherwise, return false.

	Example 1:
	Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
	Output: true

	Example 2:
	Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
	Output: true

	Example 3:
	Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]
	Output: false
	Explanation: It is impossible to form targetGrid because it is not allowed 
	             to print the same color in different turns.

	Example 4:
	Input: targetGrid = [[1,1,1],[3,1,3]]
	Output: false

	Constraints:
	* m == targetGrid.length
	* n == targetGrid[i].length
	* 1 <= m, n <= 60
	* 1 <= targetGrid[row][col] <= 60"""

    def isPrintable(self, targetGrid: List[List[int]]) -> bool:
        m, n = len(targetGrid), len(targetGrid[0]) # dimensions 
        
        # build directed graph (adjacency list)
        digraph = {} 
        for c in range(1, 61): 
            imn = jmn = 60
            imx = jmx = 0
            for i in range(m): 
                for j in range(n): 
                    if targetGrid[i][j] == c: 
                        imn = min(imn, i)
                        imx = max(imx, i)
                        jmn = min(jmn, j)
                        jmx = max(jmx, j)
            for i in range(imn, imx+1):
                for j in range(jmn, jmx+1): 
                    if targetGrid[i][j] != c: 
                        digraph.setdefault(c, set()).add(targetGrid[i][j])
            
        # check for cycle in digraph (tri-color)
        def dfs(n): 
            """Return True if a cycle is detected."""
            if seen[n]: return seen[n] == 1 
            seen[n] = 1
            if any(dfs(nn) for nn in digraph.get(n, set())): return True 
            seen[n] = 2
            return False 
        
        seen = [0]*61
        return not any(dfs(i) for i in range(61)) # cycle, i.e. impossible to print 


    """1592. Rearrange Spaces Between Words (Easy)
	You are given a string text of words that are placed among some number of 
	spaces. Each word consists of one or more lowercase English letters and are 
	separated by at least one space. It's guaranteed that text contains at 
	least one word. Rearrange the spaces so that there is an equal number of 
	spaces between every pair of adjacent words and that number is maximized. 
	If you cannot redistribute all the spaces equally, place the extra spaces 
	at the end, meaning the returned string should be the same length as text. 
	Return the string after rearranging the spaces.

	Example 1:
	Input: text = "  this   is  a sentence "
	Output: "this   is   a   sentence"
	Explanation: There are a total of 9 spaces and 4 words. We can evenly 
	             divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.

	Example 2:
	Input: text = " practice   makes   perfect"
	Output: "practice   makes   perfect "
	Explanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 
	             spaces plus 1 extra space. We place this extra space at the 
	             end of the string.
	
	Example 3:
	Input: text = "hello   world"
	Output: "hello   world"
	
	Example 4:
	Input: text = "  walks  udp package   into  bar a"
	Output: "walks  udp  package  into  bar  a "

	Example 5:
	Input: text = "a"
	Output: "a"

	Constraints:
	* 1 <= text.length <= 100
	* text consists of lowercase English letters and ' '.
	* text contains at least one word."""

    def reorderSpaces(self, text: str) -> str:
        ns = text.count(" ") # count of spaces 
        nw = len(text := text.split()) # count of words 
        if nw > 1: nw, ns = divmod(ns, nw-1) # nw - between word spaces / ns - trailing spaces
        return (" "*nw).join(text) + " "*ns


    """1593. Split a String Into the Max Number of Unique Substrings (Medium)
	Given a string s, return the maximum number of unique substrings that the 
	given string can be split into. You can split string s into any list of 
	non-empty substrings, where the concatenation of the substrings forms the 
	original string. However, you must split the substrings such that all of 
	them are unique. A substring is a contiguous sequence of characters within 
	a string.

	Example 1:
	Input: s = "ababccc"
	Output: 5
	Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. 
	             Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as 
	             you have 'a' and 'b' multiple times.

	Example 2:
	Input: s = "aba"
	Output: 2
	Explanation: One way to split maximally is ['a', 'ba'].
	
	Example 3:
	Input: s = "aa"
	Output: 1
	Explanation: It is impossible to split the string any further.

	Constraints:
	* 1 <= s.length <= 16
	* s contains only lower case English letters."""

    def maxUniqueSplit(self, s: str) -> int:
        
        def fn(i, seen=set()):
            """Find max length via backtracking (not dp)."""
            ans = 0
            if i < len(s): # boundary condition when i == len(s)
                for ii in range(i+1, len(s)+1): 
                    if s[i:ii] not in seen: 
                        seen.add(s[i:ii])
                        ans = max(ans, 1 + fn(ii, seen))
                        seen.remove(s[i:ii])
            return ans 
            
        return fn(0)


    """1594. Maximum Non Negative Product in a Matrix (Medium)
	You are given a rows x cols matrix grid. Initially, you are located at the 
	top-left corner (0, 0), and in each step, you can only move right or down 
	in the matrix. Among all possible paths starting from the top-left corner 
	(0, 0) and ending in the bottom-right corner (rows - 1, cols - 1), find the 
	path with the maximum non-negative product. The product of a path is the 
	product of all integers in the grid cells visited along the path. Return 
	the maximum non-negative product modulo 109 + 7. If the maximum product is 
	negative return -1. Notice that the modulo is performed after getting the 
	maximum product.

	Example 1:
	Input: grid = [[-1,-2,-3],
	               [-2,-3,-3],
	               [-3,-3,-2]]
	Output: -1
	Explanation: It's not possible to get non-negative product in the path from 
	             (0, 0) to (2, 2), so return -1.

	Example 2:
	Input: grid = [[1,-2,1],
	               [1,-2,1],
	               [3,-4,1]]
	Output: 8
	Explanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).
	
	Example 3:
	Input: grid = [[1, 3],
	               [0,-4]]
	Output: 0
	Explanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).

	Example 4:
	Input: grid = [[ 1, 4,4,0],
	               [-2, 0,0,1],
	               [ 1,-1,1,1]]
	Output: 2
	Explanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).

	Constraints:
	* 1 <= rows, cols <= 15
	* -4 <= grid[i][j] <= 4"""

    def maxProductPath(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        
        @cache
        def fn(i, j): 
            """Return maximum & minimum products ending at (i, j)."""
            if i == 0 and j == 0: return grid[0][0], grid[0][0]
            if i < 0 or j < 0: return -inf, inf
            if grid[i][j] == 0: return 0, 0
            mx1, mn1 = fn(i-1, j) # from top
            mx2, mn2 = fn(i, j-1) # from left 
            mx, mn = max(mx1, mx2)*grid[i][j], min(mn1, mn2)*grid[i][j]
            return (mx, mn) if grid[i][j] > 0 else (mn, mx)
        
        mx, _ = fn(m-1, n-1)
        return -1 if mx < 0 else mx % 1_000_000_007


    """1595. Minimum Cost to Connect Two Groups of Points (Hard)
	You are given two groups of points where the first group has size1 points, 
	the second group has size2 points, and size1 >= size2. The cost of the 
	connection between any two points are given in an size1 x size2 matrix 
	where cost[i][j] is the cost of connecting point i of the first group and 
	point j of the second group. The groups are connected if each point in both 
	groups is connected to one or more points in the opposite group. In other 
	words, each point in the first group must be connected to at least one 
	point in the second group, and each point in the second group must be 
	connected to at least one point in the first group. Return the minimum cost 
	it takes to connect the two groups.

	Example 1:
	Input: cost = [[15, 96], [36, 2]]
	Output: 17
	Explanation: The optimal way of connecting the groups is:
	1--A
	2--B
	This results in a total cost of 17.

	Example 2:
	Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]
	Output: 4
	Explanation: The optimal way of connecting the groups is:
	1--A
	2--B
	2--C
	3--A
	This results in a total cost of 4.
	Note that there are multiple points connected to point 2 in the first group 
	and point A in the second group. This does not matter as there is no limit 
	to the number of points that can be connected. We only care about the 
	minimum total cost.

	Example 3:
	Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]
	Output: 10

	Constraints:
	* size1 == cost.length
	* size2 == cost[i].length
	* 1 <= size1, size2 <= 12
	* size1 >= size2
	* 0 <= cost[i][j] <= 100"""

    def connectTwoGroups(self, cost: List[List[int]]) -> int:
        m, n = len(cost), len(cost[0])
        mn = [min(x) for x in zip(*cost)] # min cost of connecting points in 2nd group 
        
        @cache
        def fn(i, mask):
            """Return min cost of connecting group1[i:] and group2 represented as mask."""
            if i == m: return sum(mn[j] for j in range(n) if not (mask & (1<<j)))
            return min(cost[i][j] + fn(i+1, mask | 1<<j) for j in range(n))
                
        return fn(0, 0)


    """1602. Find Nearest Right Node in Binary Tree (Medium)
	Given the root of a binary tree and a node u in the tree, return the 
	nearest node on the same level that is to the right of u, or return null 
	if u is the rightmost node in its level.

	Example 1:
	Input: root = [1,2,3,null,4,5,6], u = 4
	Output: 5
	Explanation: The nearest node on the same level to the right of node 4 is 
	             node 5.

	Example 2:
	Input: root = [3,null,4,2], u = 2
	Output: null
	Explanation: There are no nodes to the right of 2.

	Example 3:
	Input: root = [1], u = 1
	Output: null

	Example 4:
	Input: root = [3,4,2,null,null,null,1], u = 4
	Output: 2

	Constraints:
	* The number of nodes in the tree is in the range [1, 10^5].
	* 1 <= Node.val <= 10^5
	* All values in the tree are distinct.
	* u is a node in the binary tree rooted at root."""

    def findNearestRightNode(self, root: TreeNode, u: TreeNode) -> TreeNode:
        queue = [root]
        while queue: 
            prev = None 
            newq = []
            for node in queue: 
                if node == u: return prev 
                prev = node 
                if node.right: newq.append(node.right)
                if node.left: newq.append(node.left)
            queue = newq


    """1604. Alert Using Same Key-Card Three or More Times in a One Hour Period (Medium)
	LeetCode company workers use key-cards to unlock office doors. Each time a 
	worker uses their key-card, the security system saves the worker's name and 
	the time when it was used. The system emits an alert if any worker uses the 
	key-card three or more times in a one-hour period. You are given a list of 
	strings keyName and keyTime where [keyName[i], keyTime[i]] corresponds to a 
	person's name and the time when their key-card was used in a single day. 
	Access times are given in the 24-hour time format "HH:MM", such as "23:51" 
	and "09:49". Return a list of unique worker names who received an alert for 
	frequent keycard use. Sort the names in ascending order alphabetically. 
	Notice that "10:00" - "11:00" is considered to be within a one-hour period, 
	while "22:51" - "23:52" is not considered to be within a one-hour period.

	Example 1:
	Input: keyName = ["daniel","daniel","daniel","luis","luis","luis","luis"], 
	       keyTime = ["10:00","10:40","11:00","09:00","11:00","13:00","15:00"]
	Output: ["daniel"]
	Explanation: "daniel" used the keycard 3 times in a one-hour period ("10:00","10:40", "11:00").
	
	Example 2:
	Input: keyName = ["alice","alice","alice","bob","bob","bob","bob"], 
	       keyTime = ["12:01","12:00","18:00","21:00","21:20","21:30","23:00"]
	Output: ["bob"]
	Explanation: "bob" used the keycard 3 times in a one-hour period ("21:00","21:20", "21:30").
	
	Example 3:
	Input: keyName = ["john","john","john"], keyTime = ["23:58","23:59","00:01"]
	Output: []

	Example 4:
	Input: keyName = ["leslie","leslie","leslie","clare","clare","clare","clare"], 
	       keyTime = ["13:00","13:20","14:00","18:00","18:51","19:30","19:49"]
	Output: ["clare","leslie"]

	Constraints:
	* 1 <= keyName.length, keyTime.length <= 10^5
	* keyName.length == keyTime.length
	* keyTime[i] is in the format "HH:MM".
	* [keyName[i], keyTime[i]] is unique.
	* 1 <= keyName[i].length <= 10
	* keyName[i] contains only lowercase English letters."""

    def alertNames(self, keyName: List[str], keyTime: List[str]) -> List[str]:
        ans = set()
        seen = {}
        for key, time in sorted(zip(keyName, keyTime)): 
            if key not in ans: 
                h, m = time.split(":")
                time = int(h) * 60 + int(m)
                seen.setdefault(key, deque()).append(time)
                if len(seen[key]) == 3: 
                    if seen[key][-1] <= seen[key][0] + 60: ans.add(key)
                    seen[key].popleft()
        return sorted(ans)


    """1605. Find Valid Matrix Given Row and Column Sums (Medium)
	You are given two arrays rowSum and colSum of non-negative integers where 
	rowSum[i] is the sum of the elements in the ith row and colSum[j] is the 
	sum of the elements of the jth column of a 2D matrix. In other words, you 
	do not know the elements of the matrix, but you do know the sums of each 
	row and column. Find any matrix of non-negative integers of size 
	rowSum.length x colSum.length that satisfies the rowSum and colSum 
	requirements. Return a 2D array representing any matrix that fulfills the 
	requirements. It's guaranteed that at least one matrix that fulfills the 
	requirements exists.

	Example 1:
	Input: rowSum = [3,8], colSum = [4,7]
	Output: [[3,0],
	         [1,7]]
	Explanation:
	0th row: 3 + 0 = 3 == rowSum[0]
	1st row: 1 + 7 = 8 == rowSum[1]
	0th column: 3 + 1 = 4 == colSum[0]
	1st column: 0 + 7 = 7 == colSum[1]
	The row and column sums match, and all matrix elements are non-negative.
	Another possible matrix is: [[1,2],
	                             [3,5]]

	Example 2:
	Input: rowSum = [5,7,10], colSum = [8,6,8]
	Output: [[0,5,0],
	         [6,1,0],
	         [2,0,8]]

	Example 3:
	Input: rowSum = [14,9], colSum = [6,9,8]
	Output: [[0,9,5],
	         [6,0,3]]

	Example 4:
	Input: rowSum = [1,0], colSum = [1]
	Output: [[1],
	         [0]]

	Example 5:
	Input: rowSum = [0], colSum = [0]
	Output: [[0]]

	Constraints:
	* 1 <= rowSum.length, colSum.length <= 500
	* 0 <= rowSum[i], colSum[i] <= 10^8
	* sum(rows) == sum(columns)"""

    def restoreMatrix(self, rowSum: List[int], colSum: List[int]) -> List[List[int]]:
        m, n = len(rowSum), len(colSum) # dimensions 
        ans = [[0]*n for _ in range(m)] 
        
        i = j = 0
        while i < len(rowSum) and j < len(colSum):
            ans[i][j] = min(rowSum[i], colSum[j])
            rowSum[i] -= ans[i][j]
            colSum[j] -= ans[i][j]
            if rowSum[i] == 0: i += 1
            if colSum[j] == 0: j += 1
        return ans 


    """1606. Find Servers That Handled Most Number of Requests (Hard)
	You have k servers numbered from 0 to k-1 that are being used to handle 
	multiple requests simultaneously. Each server has infinite computational 
	capacity but cannot handle more than one request at a time. The requests 
	are assigned to servers according to a specific algorithm:
	* The ith (0-indexed) request arrives.
	* If all servers are busy, the request is dropped (not handled at all).
	* If the (i % k)th server is available, assign the request to that server.
	* Otherwise, assign the request to the next available server (wrapping 
	  around the list of servers and starting from 0 if necessary). For example, 
	  if the ith server is busy, try to assign the request to the (i+1)th 
	  server, then the (i+2)th server, and so on.
	You are given a strictly increasing array arrival of positive integers, 
	where arrival[i] represents the arrival time of the ith request, and 
	another array load, where load[i] represents the load of the ith request 
	(the time it takes to complete). Your goal is to find the busiest server(s). 
	A server is considered busiest if it handled the most number of requests 
	successfully among all the servers. Return a list containing the IDs 
	(0-indexed) of the busiest server(s). You may return the IDs in any order.

	Example 1:
	Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] 
	Output: [1] 
	Explanation:
	All of the servers start out available.
	The first 3 requests are handled by the first 3 servers in order.
	Request 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.
	Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped.
	Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.

	Example 2:
	Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]
	Output: [0]
	Explanation:
	The first 3 requests are handled by first 3 servers.
	Request 3 comes in. It is handled by server 0 since the server is available.
	Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.

	Example 3:
	Input: k = 3, arrival = [1,2,3], load = [10,12,11]
	Output: [0,1,2]
	Explanation: Each server handles a single request, so they are all considered the busiest.

	Example 4:
	Input: k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]
	Output: [1]

	Example 5:
	Input: k = 1, arrival = [1], load = [1]
	Output: [0]

	Constraints:
	* 1 <= k <= 10^5
	* 1 <= arrival.length, load.length <= 10^5
	* arrival.length == load.length
	* 1 <= arrival[i], load[i] <= 10^9
	* arrival is strictly increasing."""

    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:
        busy = [] # min-heap
        free = list(range(k)) # min-heap 
        freq = [0]*k
        
        for i, (ta, tl) in enumerate(zip(arrival, load)): 
            while busy and busy[0][0] <= ta: 
                _, ii = heappop(busy)
                heappush(free, i + (ii - i) % k) # circularly relocate it
            if free: 
                ii = heappop(free) % k 
                freq[ii] += 1
                heappush(busy, (ta+tl, ii))
        
        mx = max(freq)
        return [i for i, x in enumerate(freq) if x == mx]


    """1608. Special Array With X Elements Greater Than or Equal X (Easy)
	You are given an array nums of non-negative integers. nums is considered 
	special if there exists a number x such that there are exactly x numbers in 
	nums that are greater than or equal to x. Notice that x does not have to be 
	an element in nums. Return x if the array is special, otherwise, return -1. 
	It can be proven that if nums is special, the value for x is unique.

	Example 1:
	Input: nums = [3,5]
	Output: 2
	Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.

	Example 2:
	Input: nums = [0,0]
	Output: -1
	Explanation: No numbers fit the criteria for x.
	If x = 0, there should be 0 numbers >= x, but there are 2.
	If x = 1, there should be 1 number >= x, but there are 0.
	If x = 2, there should be 2 numbers >= x, but there are 0.
	x cannot be greater since there are only 2 numbers in nums.

	Example 3:
	Input: nums = [0,4,3,0,4]
	Output: 3
	Explanation: There are 3 values that are greater than or equal to 3.

	Example 4:
	Input: nums = [3,6,7,7,0]
	Output: -1

	Constraints:
	* 1 <= nums.length <= 100
	* 0 <= nums[i] <= 1000"""

    def specialArray(self, nums: List[int]) -> int:
        nums.sort() 
        if len(nums) <= nums[0]: return len(nums) # edge case 
        for i in range(1, len(nums)): 
            if nums[i-1] < len(nums)-i <= nums[i]: return len(nums)-i
        return -1


    """1609. Even Odd Tree (Medium)
	A binary tree is named Even-Odd if it meets the following conditions:
	* The root of the binary tree is at level index 0, its children are at 
	  level index 1, their children are at level index 2, etc.
	* For every even-indexed level, all nodes at the level have odd integer 
	  values in strictly increasing order (from left to right).
	* For every odd-indexed level, all nodes at the level have even integer 
	  values in strictly decreasing order (from left to right).
	Given the root of a binary tree, return true if the binary tree is Even-
	Odd, otherwise return false.

	Example 1:
	Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
	Output: true
	Explanation: The node values on each level are:
	Level 0: [1]
	Level 1: [10,4]
	Level 2: [3,7,9]
	Level 3: [12,8,6,2]
	Since levels 0 and 2 are all odd and increasing, and levels 1 and 3 are all 
	even and decreasing, the tree is Even-Odd.

	Example 2:
	Input: root = [5,4,2,3,3,7]
	Output: false
	Explanation: The node values on each level are:
	Level 0: [5]
	Level 1: [4,2]
	Level 2: [3,3,7]
	Node values in the level 2 must be in strictly increasing order, so the 
	tree is not Even-Odd.

	Example 3:
	Input: root = [5,9,1,3,5,7]
	Output: false
	Explanation: Node values in the level 1 should be even integers.

	Example 4:
	Input: root = [1]
	Output: true

	Example 5:
	Input: root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]
	Output: true

	Constraints:
	* The number of nodes in the tree is in the range [1, 10^5].
	* 1 <= Node.val <= 10^6"""

    def isEvenOddTree(self, root: TreeNode) -> bool:
        queue = [root]
        even = True # True for even level
        while queue: 
            newq = []
            prev = -inf if even else inf
            for node in queue: 
                if not even and (node.val & 1 or prev <= node.val): return False 
                elif even and (not (node.val & 1) or prev >= node.val): return False 
                prev = node.val 
                if node.left: newq.append(node.left)
                if node.right: newq.append(node.right)
            queue = newq 
            even = not even
        return True 


    """1610. Maximum Number of Visible Points (Hard)
	You are given an array points, an integer angle, and your location, where 
	location = [posx, posy] and points[i] = [xi, yi] both denote integral 
	coordinates on the X-Y plane. Initially, you are facing directly east from 
	your position. You cannot move from your position, but you can rotate. In 
	other words, posx and posy cannot be changed. Your field of view in degrees 
	is represented by angle, determining how wide you can see from any given 
	view direction. Let d be the amount in degrees that you rotate 
	counterclockwise. Then, your field of view is the inclusive range of angles 
	[d - angle/2, d + angle/2]. You can see some set of points if, for each 
	point, the angle formed by the point, your position, and the immediate east 
	direction from your position is in your field of view. There can be 
	multiple points at one coordinate. There may be points at your location, 
	and you can always see these points regardless of your rotation. Points do 
	not obstruct your vision to other points. Return the maximum number of 
	points you can see.

	Example 1:
	Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]
	Output: 3
	Explanation: The shaded region represents your field of view. All points 
	             can be made visible in your field of view, including [3,3] 
	             even though [2,2] is in front and in the same line of sight.

	Example 2:
	Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]
	Output: 4
	Explanation: All points can be made visible in your field of view, 
	             including the one at your location.

	Example 3:
	Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]
	Output: 1
	Explanation: You can only see one of the two points, as shown above.

	Constraints:
	* 1 <= points.length <= 10^5
	* points[i].length == 2
	* location.length == 2
	* 0 <= angle < 360
	* 0 <= posx, posy, xi, yi <= 109"""

    def visiblePoints(self, points: List[List[int]], angle: int, location: List[int]) -> int:
        x0, y0 = location
        
        ans = ovlp = 0
        theta = [] 
        for x, y in points: 
            if x == x0 and y == y0: ovlp += 1
            else: theta.append(atan2(y-y0, x-x0)) # (x, y) wrt (x0, y0)
        
        theta.sort()
        theta += [x+2*pi for x in theta]
        ii = 0
        for i in range(len(theta)): 
            while theta[i] - theta[ii] > angle*pi/180: ii += 1
            ans = max(ans, i-ii+1)
        return ans + ovlp


    """1611. Minimum One Bit Operations to Make Integers Zero (Hard)
	Given an integer n, you must transform it into 0 using the following 
	operations any number of times:
	* Change the rightmost (0th) bit in the binary representation of n.
	* Change the ith bit in the binary representation of n if the (i-1)th bit 
	  is set to 1 and the (i-2)th through 0th bits are set to 0.
	Return the minimum number of operations to transform n into 0.

	Example 1:
	Input: n = 0
	Output: 0

	Example 2:
	Input: n = 3
	Output: 2
	Explanation: The binary representation of 3 is "11".
	"11" -> "01" with the 2nd operation since the 0th bit is 1.
	"01" -> "00" with the 1st operation.

	Example 3:
	Input: n = 6
	Output: 4
	Explanation: The binary representation of 6 is "110".
	"110" -> "010" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.
	"010" -> "011" with the 1st operation.
	"011" -> "001" with the 2nd operation since the 0th bit is 1.
	"001" -> "000" with the 1st operation.

	Example 4:
	Input: n = 9
	Output: 14

	Example 5:
	Input: n = 333
	Output: 393

	Constraints: 0 <= n <= 109"""

    def minimumOneBitOperations(self, n: int) -> int:
        if not n: return 0 # edge case 
        if not (n & (n-1)): return 2*n-1
        b = 1 << n.bit_length()-1 # most significant set bit 
        return self.minimumOneBitOperations((b>>1)^b^n) + b


    """1612. Check If Two Expression Trees are Equivalent (Medium)
	A binary expression tree is a kind of binary tree used to represent 
	arithmetic expressions. Each node of a binary expression tree has either 
	zero or two children. Leaf nodes (nodes with 0 children) correspond to 
	operands (variables), and internal nodes (nodes with two children) 
	correspond to the operators. In this problem, we only consider the '+' 
	operator (i.e. addition). You are given the roots of two binary expression 
	trees, root1 and root2. Return true if the two binary expression trees are 
	equivalent. Otherwise, return false. Two binary expression trees are 
	equivalent if they evaluate to the same value regardless of what the 
	variables are set to. 

	Follow up: What will you change in your solution if the tree also supports 
	           the '-' operator (i.e. subtraction)?

	Example 1:
	Input: root1 = [x], root2 = [x]
	Output: true

	Example 2:
	Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,c]
	Output: true
	Explaination: a + (b + c) == (b + c) + a

	Example 3:
	Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,d]
	Output: false
	Explaination: a + (b + c) != (b + d) + a

	Constraints:
	* The number of nodes in both trees are equal, odd and, in the range [1, 4999].
	* Node.val is '+' or a lower-case English letter.
	* It's guaranteed that the tree given is a valid binary expression tree."""

    def checkEquivalence(self, root1: 'Node', root2: 'Node') -> bool:
        freq = defaultdict(int)
        
        def fn(x, k): 
            if not x: return 
            freq[x.val] += k
            if freq[x.val] == 0: freq.pop(x.val)
            fn(x.left, k)
            fn(x.right, k)
                
        fn(root1, 1)
        fn(root2, -1)
        return not freq


    """1618. Maximum Font to Fit a Sentence in a Screen (Medium)
	You are given a string text. We want to display text on a screen of width w 
	and height h. You can choose any font size from array fonts, which contains 
	the available font sizes in ascending order. You can use the FontInfo 
	interface to get the width and height of any character at any available 
	font size.

	The FontInfo interface is defined as such:

	interface FontInfo {
	  // Returns the width of character ch on the screen using font size fontSize.
	  // O(1) per call
	  public int getWidth(int fontSize, char ch);

	  // Returns the height of any character on the screen using font size fontSize.
	  // O(1) per call
	  public int getHeight(int fontSize);
	}
	The calculated width of text for some fontSize is the sum of every 
	getWidth(fontSize, text[i]) call for each 0 <= i < text.length (0-indexed). 
	The calculated height of text for some fontSize is getHeight(fontSize). 
	Note that text is displayed on a single line. It is guaranteed that 
	FontInfo will return the same value if you call getHeight or getWidth with 
	the same parameters. It is also guaranteed that for any font size fontSize 
	and any character ch:
	* getHeight(fontSize) <= getHeight(fontSize+1)
	* getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)
	Return the maximum font size you can use to display text on the screen. If 
	text cannot fit on the display with any font size, return -1.

	Example 1:
	Input: text = "helloworld", w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]
	Output: 6

	Example 2:
	Input: text = "leetcode", w = 1000, h = 50, fonts = [1,2,4]
	Output: 4

	Example 3:
	Input: text = "easyquestion", w = 100, h = 100, fonts = [10,15,20,25]
	Output: -1

	Constraints:
	* 1 <= text.length <= 50000
	* text contains only lowercase English letters.
	* 1 <= w <= 10^7
	* 1 <= h <= 10^4
	* 1 <= fonts.length <= 10^5
	* 1 <= fonts[i] <= 10^5
	* fonts is sorted in ascending order and does not contain duplicates."""

    def maxFont(self, text: str, w: int, h: int, fonts: List[int], fontInfo : 'FontInfo') -> int:
        # last True binary search 
        lo, hi = -1, len(fonts)-1
        while lo < hi: 
            mid = lo + hi + 1 >> 1
            hh = fontInfo.getHeight(fonts[mid])
            ww = sum(fontInfo.getWidth(fonts[mid], c) for c in text)
            if hh <= h and ww <= w : lo = mid
            else: hi = mid - 1 
        return fonts[lo] if lo >= 0 else -1  


    """1619. Mean of Array After Removing Some Elements (Easy)
	Given an integer array arr, return the mean of the remaining integers after 
	removing the smallest 5% and the largest 5% of the elements. Answers within 
	10-5 of the actual answer will be considered accepted.

	Example 1:
	Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
	Output: 2.00000
	Explanation: After erasing the minimum and the maximum values of this array, 
	             all elements are equal to 2, so the mean is 2.

	Example 2:
	Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
	Output: 4.00000

	Example 3:
	Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
	Output: 4.77778

	Example 4:
	Input: arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]
	Output: 5.27778

	Example 5:
	Input: arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]
	Output: 5.29167

	Constraints:
	* 20 <= arr.length <= 1000
	* arr.length is a multiple of 20.
	* 0 <= arr[i] <= 10^5"""

    def trimMean(self, arr: List[int]) -> float:
        return sum(sorted(arr)[len(arr)//20:-len(arr)//20])/(len(arr)*0.9)


    """1620. Coordinate With Maximum Network Quality (Medium)
	You are given an array of network towers towers and an integer radius, 
	where towers[i] = [xi, yi, qi] denotes the ith network tower with location 
	(xi, yi) and quality factor qi. All the coordinates are integral 
	coordinates on the X-Y plane, and the distance between two coordinates is 
	the Euclidean distance. The integer radius denotes the maximum distance in 
	which the tower is reachable. The tower is reachable if the distance is 
	less than or equal to radius. Outside that distance, the signal becomes 
	garbled, and the tower is not reachable. The signal quality of the ith 
	tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, 
	where d is the distance between the tower and the coordinate. The network 
	quality at a coordinate is the sum of the signal qualities from all the 
	reachable towers. Return the integral coordinate where the network quality 
	is maximum. If there are multiple coordinates with the same network quality, 
	return the lexicographically minimum coordinate.

	Note:
	A coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either 
	x1 < x2 or x1 == x2 and y1 < y2. ⌊val⌋ is the greatest integer less than or 
	equal to val (the floor function).

	Example 1:
	Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2
	Output: [2,1]
	Explanation: 
	At coordinate (2, 1) the total quality is 13
	- Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7
	- Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2
	- Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4
	No other coordinate has higher quality.

	Example 2:
	Input: towers = [[23,11,21]], radius = 9
	Output: [23,11]

	Example 3:
	Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2
	Output: [1,2]

	Example 4:
	Input: towers = [[2,1,9],[0,1,9]], radius = 2
	Output: [0,1]
	Explanation: Both (0, 1) and (2, 1) are optimal in terms of quality but 
	             (0, 1) is lexicograpically minimal.

	Constraints:
	* 1 <= towers.length <= 50
	* towers[i].length == 3
	* 0 <= xi, yi, qi <= 50
	* 1 <= radius <= 50"""

    def bestCoordinate(self, towers: List[List[int]], radius: int) -> List[int]:
        mx = -inf
        for x in range(51):
            for y in range(51): 
                val = 0
                for xi, yi, qi in towers: 
                    d = sqrt((x-xi)**2 + (y-yi)**2)
                    if d <= radius: val += int(qi/(1 + d))
                if val > mx: 
                    ans = [x, y]
                    mx = val
        return ans 


    """1621. Number of Sets of K Non-Overlapping Line Segments (Medium)
	Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at 
	x = i, find the number of ways we can draw exactly k non-overlapping line 
	segments such that each segment covers two or more points. The endpoints of 
	each segment must have integral coordinates. The k line segments do not 
	have to cover all n points, and they are allowed to share endpoints. Return 
	the number of ways we can draw k non-overlapping line segments. Since this 
	number can be huge, return it modulo 10^9 + 7.

	Example 1:
	Input: n = 4, k = 2
	Output: 5
	Explanation: The two line segments are shown in red and blue. The image 
	             above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, 
	             {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.

	Example 2:
	Input: n = 3, k = 1
	Output: 3
	Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.
	
	Example 3:
	Input: n = 30, k = 7
	Output: 796297179
	Explanation: The total number of possible ways to draw 7 line segments is 
	             3796297200. Taking this number modulo 10^9 + 7 gives us 
	             796297179.

	Example 4:
	Input: n = 5, k = 3
	Output: 7
	
	Example 5:
	Input: n = 3, k = 2
	Output: 1

	Constraints:
	* 2 <= n <= 1000
	* 1 <= k <= n-1"""

    def numberOfSets(self, n: int, k: int) -> int:
        return comb(n+k-1, 2*k) % 1_000_000_007


    """1624. Largest Substring Between Two Equal Characters (Easy)
	Given a string s, return the length of the longest substring between two 
	equal characters, excluding the two characters. If there is no such 
	substring return -1. A substring is a contiguous sequence of characters 
	within a string.

	Example 1:
	Input: s = "aa"
	Output: 0
	Explanation: The optimal substring here is an empty substring between the 
	             two 'a's.

	Example 2:
	Input: s = "abca"
	Output: 2
	Explanation: The optimal substring here is "bc".

	Example 3:
	Input: s = "cbzxy"
	Output: -1
	Explanation: There are no characters that appear twice in s.

	Example 4:
	Input: s = "cabbac"
	Output: 4
	Explanation: The optimal substring here is "abba". Other non-optimal 
	             substrings include "bb" and "".

	Constraints:
	* 1 <= s.length <= 300
	* s contains only lowercase English letters."""

    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        ans, seen = -1, {}
        for i, c in enumerate(s): 
            ans = max(ans, i - seen.setdefault(c, i) - 1)
        return ans 


    """1625. Lexicographically Smallest String After Applying Operations (Medium)
	You are given a string s of even length consisting of digits from 0 to 9, 
	and two integers a and b. You can apply either of the following two 
	operations any number of times and in any order on s: 
	1) Add a to all odd indices of s (0-indexed). Digits post 9 are cycled back 
	   to 0. For example, if s = "3456" and a = 5, s becomes "3951".
	2) Rotate s to the right by b positions. For example, if s = "3456" and 
	   b = 1, s becomes "6345".
	Return the lexicographically smallest string you can obtain by applying the 
	above operations any number of times on s. A string a is lexicographically 
	smaller than a string b (of the same length) if in the first position where 
	a and b differ, string a has a letter that appears earlier in the alphabet 
	than the corresponding letter in b. For example, "0158" is lexicographically 
	smaller than "0190" because the first position they differ is at the third 
	letter, and '5' comes before '9'.

	Example 1:
	Input: s = "5525", a = 9, b = 2
	Output: "2050"
	Explanation: We can apply the following operations:
	Start:  "5525"
	Rotate: "2555"
	Add:    "2454"
	Add:    "2353"
	Rotate: "5323"
	Add:    "5222"
	Add:    "5121"
	Rotate: "2151"
	Add:    "2050"
	There is no way to obtain a string that is lexicographically smaller then 
	"2050".

	Example 2:
	Input: s = "74", a = 5, b = 1
	Output: "24"
	Explanation: We can apply the following operations:
	Start:  "74"
	Rotate: "47"
	Add:    "42"
	Rotate: "24"
	There is no way to obtain a string that is lexicographically smaller then 
	"24".

	Example 3:
	Input: s = "0011", a = 4, b = 2
	Output: "0011"
	Explanation: There are no sequence of operations that will give us a 
	             lexicographically smaller string than "0011".

	Example 4:
	Input: s = "43987654", a = 7, b = 3
	Output: "00553311"
	 
	Constraints:
	* 2 <= s.length <= 100
	* s.length is even.
	* s consists of digits from 0 to 9 only.
	* 1 <= a <= 9
	* 1 <= b <= s.length - 1"""

    def findLexSmallestString(self, s: str, a: int, b: int) -> str:
        op1 = lambda s: "".join(str((int(c)+a)%10) if i&1 else c for i, c in enumerate(s))
        op2 = lambda s: s[-b:] + s[:-b]
        
        seen = set()
        stack = [s]
        while stack: 
            s = stack.pop()
            seen.add(s)
            if (ss := op1(s)) not in seen: stack.append(ss)
            if (ss := op2(s)) not in seen: stack.append(ss)
        return min(seen)


    """1626. Best Team With No Conflicts (Medium)
	You are the manager of a basketball team. For the upcoming tournament, you 
	want to choose the team with the highest overall score. The score of the 
	team is the sum of scores of all the players in the team. However, the 
	basketball team is not allowed to have conflicts. A conflict exists if a 
	younger player has a strictly higher score than an older player. A conflict 
	does not occur between players of the same age. Given two lists, scores and 
	ages, where each scores[i] and ages[i] represents the score and age of the 
	ith player, respectively, return the highest overall score of all possible 
	basketball teams.

	Example 1:
	Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]
	Output: 34
	Explanation: You can choose all the players.

	Example 2:
	Input: scores = [4,5,6,5], ages = [2,1,2,1]
	Output: 16
	Explanation: It is best to choose the last 3 players. Notice that you are 
	             allowed to choose multiple people of the same age.

	Example 3:
	Input: scores = [1,2,3,5], ages = [8,9,10,1]
	Output: 6
	Explanation: It is best to choose the first 3 players. 
	 
	Constraints:
	* 1 <= scores.length, ages.length <= 1000
	* scores.length == ages.length
	* 1 <= scores[i] <= 106
	* 1 <= ages[i] <= 1000"""

    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        ages, scores = zip(*sorted(zip(ages, scores)))
        
        @cache
        def fn(i): 
            """Return max score up to ith player included."""
            if i < 0: return 0 # boundary condition 
            return scores[i] + max((fn(ii) for ii in range(i) if ages[ii] == ages[i] or scores[ii] <= scores[i]), default=0)
        
        return max(fn(i) for i in range(len(scores)))


    """1627. Graph Connectivity With Threshold (Hard)
	We have n cities labeled from 1 to n. Two different cities with labels x 
	and y are directly connected by a bidirectional road if and only if x and y 
	share a common divisor strictly greater than some threshold. More formally, 
	cities with labels x and y have a road between them if there exists an 
	integer z such that all of the following are true:
	x % z == 0,
	y % z == 0, and
	z > threshold.
	Given the two integers, n and threshold, and an array of queries, you must 
	determine for each queries[i] = [ai, bi] if cities ai and bi are connected 
	(i.e. there is some path between them). Return an array answer, where 
	answer.length == queries.length and answer[i] is true if for the ith query, 
	there is a path between ai and bi, or answer[i] is false if there is no 
	path.

	Example 1:
	Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]
	Output: [false,false,true]
	Explanation: The divisors for each number:
	1:   1
	2:   1, 2
	3:   1, 3
	4:   1, 2, 4
	5:   1, 5
	6:   1, 2, 3, 6
	Using the underlined divisors above the threshold, only cities 3 and 6 
	share a common divisor, so they are the only ones directly connected. The 
	result of each query:
	[1,4]   1 is not connected to 4
	[2,5]   2 is not connected to 5
	[3,6]   3 is connected to 6 through path 3--6

	Example 2:
	Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]
	Output: [true,true,true,true,true]
	Explanation: The divisors for each number are the same as the previous 
	             example. However, since the threshold is 0, all divisors can 
	             be used. Since all numbers share 1 as a divisor, all cities 
	             are connected.
	
	Example 3:
	Input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]
	Output: [false,false,false,false,false]
	Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly 
	             greater than the threshold 1, so they are the only ones 
	             directly connected.
	Please notice that there can be multiple queries for the same pair of nodes 
	[x, y], and that the query [x, y] is equivalent to the query [y, x].

	Constraints:
	* 2 <= n <= 104
	* 0 <= threshold <= n
	* 1 <= queries.length <= 10^5
	* queries[i].length == 2
	* 1 <= ai, bi <= cities
	* ai != bi"""

""" 
 	class UnionFind:
	    def __init__(self, n):
	        self.parent = list(range(n))
	        self.rank = [1]*n
	        
	    def find(self, p): 
	        if self.parent[p] != p:
	            self.parent[p] = self.find(self.parent[p]) # path compression 
	        return self.parent[p]
	    
	    def union(self, p, q): 
	        prt, qrt = self.find(p), self.find(q)
	        if prt == qrt: return False
	        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt # union with ranking 
	        self.parent[prt] = qrt
	        self.rank[qrt] += self.rank[prt]
	        return True 
"""

    def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:
        uf = UnionFind(n)
        
        for u in range(threshold+1, n+1):
            for v in range(u*2, n+1, u): 
                uf.union(u-1, v-1)
        
        return [uf.find(u-1) == uf.find(v-1) for u, v in queries]


    """1629. Slowest Key (Easy)
	A newly designed keypad was tested, where a tester pressed a sequence of n 
	keys, one at a time. You are given a string keysPressed of length n, where 
	keysPressed[i] was the ith key pressed in the testing sequence, and a 
	sorted list releaseTimes, where releaseTimes[i] was the time the ith key 
	was released. Both arrays are 0-indexed. The 0th key was pressed at the 
	time 0, and every subsequent key was pressed at the exact time the previous 
	key was released. The tester wants to know the key of the keypress that had 
	the longest duration. The ith keypress had a duration of 
	releaseTimes[i] - releaseTimes[i - 1], and the 0th keypress had a duration 
	of releaseTimes[0]. Note that the same key could have been pressed multiple 
	times during the test, and these multiple presses of the same key may not 
	have had the same duration. Return the key of the keypress that had the 
	longest duration. If there are multiple such keypresses, return the 
	lexicographically largest key of the keypresses.

	Example 1:
	Input: releaseTimes = [9,29,49,50], keysPressed = "cbcd"
	Output: "c"
	Explanation: The keypresses were as follows:
	1) Keypress for 'c' had a duration of 9 (pressed at time 0 and released at 
	   time 9).
	2) Keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right 
	   after the release of the previous character and released at time 29).
	3) Keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 
	   right after the release of the previous character and released at time 
	   49).
	4) Keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right 
	   after the release of the previous character and released at time 50).
	The longest of these was the keypress for 'b' and the second keypress for 
	'c', both with duration 20. 'c' is lexicographically larger than 'b', so 
	the answer is 'c'.

	Example 2:
	Input: releaseTimes = [12,23,36,46,62], keysPressed = "spuda"
	Output: "a"
	Explanation: The keypresses were as follows:
	Keypress for 's' had a duration of 12.
	Keypress for 'p' had a duration of 23 - 12 = 11.
	Keypress for 'u' had a duration of 36 - 23 = 13.
	Keypress for 'd' had a duration of 46 - 36 = 10.
	Keypress for 'a' had a duration of 62 - 46 = 16.
	The longest of these was the keypress for 'a' with duration 16.

	Constraints:
	* releaseTimes.length == n
	* keysPressed.length == n
	* 2 <= n <= 1000
	* 0 <= releaseTimes[i] <= 10^9
	* releaseTimes[i] < releaseTimes[i+1]
	* keysPressed contains only lowercase English letters."""

    def slowestKey(self, releaseTimes: List[int], keysPressed: str) -> str:
        ans, most = "", 0
        for i, (t, k) in enumerate(zip(releaseTimes, keysPressed)):
            if i: t -= releaseTimes[i-1]
            if (t, k) > (most, ans): most, ans = t, k # update 
        return ans 


    """1630. Arithmetic Subarrays (Medium)
	A sequence of numbers is called arithmetic if it consists of at least two 
	elements, and the difference between every two consecutive elements is the 
	same. More formally, a sequence s is arithmetic if and only if 
	s[i+1] - s[i] == s[1] - s[0] for all valid i.

	For example, these are arithmetic sequences:
	1, 3, 5, 7, 9
	7, 7, 7, 7
	3, -1, -5, -9
	The following sequence is not arithmetic: 1, 1, 2, 5, 7
	You are given an array of n integers, nums, and two arrays of m integers 
	each, l and r, representing the m range queries, where the ith query is the 
	range [l[i], r[i]]. All the arrays are 0-indexed. Return a list of boolean 
	elements answer, where answer[i] is true if the subarray nums[l[i]], 
	nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic 
	sequence, and false otherwise.

	Example 1:
	Input: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]
	Output: [true,false,true]
	Explanation:
	In the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.
	In the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.
	In the 2nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence.

	Example 2:
	Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]
	Output: [false,true,false,false,true,true]

	Constraints:
	* n == nums.length
	* m == l.length
	* m == r.length
	* 2 <= n <= 500
	* 1 <= m <= 500
	* 0 <= l[i] < r[i] < n
	* -10^5 <= nums[i] <= 10^5"""

    def checkArithmeticSubarrays(self, nums: List[int], l: List[int], r: List[int]) -> List[bool]:
        ans = []
        for ll, rr in zip(l, r): 
            seq = sorted(nums[ll:rr+1])
            ans.append(len(set(seq[i] - seq[i-1] for i in range(1, len(seq)))) == 1)
        return ans 


    """1631. Path With Minimum Effort (Medium)
	You are a hiker preparing for an upcoming hike. You are given heights, a 2D 
	array of size rows x columns, where heights[row][col] represents the height 
	of cell (row, col). You are situated in the top-left cell, (0, 0), and you 
	hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 
	0-indexed). You can move up, down, left, or right, and you wish to find a 
	route that requires the minimum effort. A route's effort is the maximum 
	absolute difference in heights between two consecutive cells of the route. 
	Return the minimum effort required to travel from the top-left cell to the 
	bottom-right cell.

	Example 1:
	Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
	Output: 2
	Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 
	             2 in consecutive cells. This is better than the route of 
	             [1,2,2,2,5], where the maximum absolute difference is 3.

	Example 2:
	Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
	Output: 1
	Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 
	             1 in consecutive cells, which is better than route [1,3,5,3,5].
	
	Example 3:
	Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
	Output: 0

	Explanation: This route does not require any effort.

	Constraints:
	* rows == heights.length
	* columns == heights[i].length
	* 1 <= rows, columns <= 100
	* 1 <= heights[i][j] <= 106"""

    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        m, n = len(heights), len(heights[0])
        seen = [[inf]*n for _ in heights] # lowest height seen
        hp = [(0, 0, 0)] # height|row|column 
        while hp: 
            h, i, j = heappop(hp)
            if i == m-1 and j == n-1: return h # end condition 
            if h < seen[i][j]: 
                seen[i][j] = h
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    if 0 <= ii < m and 0 <= jj < n: 
                        hh = max(h, abs(heights[ii][jj] - heights[i][j]))
                        if hh < seen[ii][jj]: heappush(hp, (hh, ii, jj))


    """1632. Rank Transform of a Matrix (Hard)
	Given an m x n matrix, return a new matrix answer where answer[row][col] is 
	the rank of matrix[row][col]. The rank is an integer that represents how 
	large an element is compared to other elements. It is calculated using the 
	following rules:
	* The rank is an integer starting from 1.
	* If two elements p and q are in the same row or column, then:
		- If p < q then rank(p) < rank(q)
		- If p == q then rank(p) == rank(q)
		- If p > q then rank(p) > rank(q)
	* The rank should be as small as possible.
	It is guaranteed that answer is unique under the given rules.

	Example 1:
	Input: matrix = [[1,2],[3,4]]
	Output: [[1,2],[2,3]]
	Explanation:
	The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.
	The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.
	The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.
	The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.

	Example 2:
	Input: matrix = [[7,7],[7,7]]
	Output: [[1,1],[1,1]]

	Example 3:
	Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
	Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]

	Example 4:
	Input: matrix = [[7,3,6],[1,4,5],[9,8,2]]
	Output: [[5,1,4],[1,2,3],[6,3,1]]

	Constraints:
	* m == matrix.length
	* n == matrix[i].length
	* 1 <= m, n <= 500
	* -10^9 <= matrix[row][col] <= 10^9"""

    def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:
        m, n = len(matrix), len(matrix[0]) # dimension 
        # mapping from value to index 
        mp = {} 
        for i in range(m):
            for j in range(n): 
                mp.setdefault(matrix[i][j], []).append((i, j))
        
        def find(p):
            """Find root of p."""
            if p != parent[p]:
                parent[p] = find(parent[p])
            return parent[p]
        
        rank = [0]*(m+n)
        ans = [[0]*n for _ in range(m)]
        
        for k in sorted(mp): # from minimum to maximum 
            parent = list(range(m+n))
            for i, j in mp[k]: 
                ii, jj = find(i), find(m+j) # find 
                parent[ii] = jj # union 
                rank[jj] = max(rank[ii], rank[jj]) # max rank 
            
            seen = set()
            for i, j in mp[k]:
                ii = find(i)
                if ii not in seen: rank[ii] += 1
                seen.add(ii)
                rank[i] = rank[m+j] = ans[i][j] = rank[ii]
        return ans 


    """1634. Add Two Polynomials Represented as Linked Lists (Medium)
	A polynomial linked list is a special type of linked list where every node 
	represents a term in a polynomial expression. Each node has three attributes:
	* coefficient: an integer representing the number multiplier of the term. 
	  The coefficient of the term 9x4 is 9.
	* power: an integer representing the exponent. The power of the term 9x4 is 
	  4.
	* next: a pointer to the next node in the list, or null if it is the last 
	  node of the list.
	The polynomial linked list must be in its standard form: the polynomial 
	must be in strictly descending order by its power value. Also, terms with a 
	coefficient of 0 are omitted. Given two polynomial linked list heads, poly1 
	and poly2, add the polynomials together and return the head of the sum of 
	the polynomials.

	PolyNode format: The input/output format is as a list of n nodes, where 
	                 each node is represented as its [coefficient, power]. For 
	                 example, the polynomial 5x3 + 4x - 7 would be represented 
	                 as: [[5,3],[4,1],[-7,0]].

	Example 1:
	Input: poly1 = [[1,1]], poly2 = [[1,0]]
	Output: [[1,1],[1,0]]
	Explanation: poly1 = x. poly2 = 1. The sum is x + 1.

	Example 2:
	Input: poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]
	Output: [[5,2],[2,0]]
	Explanation: poly1 = 2x2 + 4x + 3. 
	             poly2 = 3x2 - 4x - 1. 
	             The sum is 5x2 + 2. Notice that we omit the "0x" term.

	Example 3:
	Input: poly1 = [[1,2]], poly2 = [[-1,2]]
	Output: []
	Explanation: The sum is 0. We return an empty list.
	 
	Constraints:
	* 0 <= n <= 10^4
	* -10^9 <= PolyNode.coefficient <= 10^9
	* PolyNode.coefficient != 0
	* 0 <= PolyNode.power <= 10^9
	* PolyNode.power > PolyNode.next.power"""

    def addPoly(self, poly1: 'PolyNode', poly2: 'PolyNode') -> 'PolyNode':
        dummy = node = PolyNode() 
        while poly1 and poly2: 
            if poly1.power > poly2.power: 
                node.next = node = poly1
                poly1 = poly1.next 
            elif poly1.power < poly2.power: 
                node.next = node = poly2
                poly2 = poly2.next 
            else: 
                coef = poly1.coefficient + poly2.coefficient
                if coef: node.next = node = PolyNode(coef, poly1.power)
                poly1 = poly1.next 
                poly2 = poly2.next 
        node.next = poly1 or poly2
        return dummy.next 


    """1636. Sort Array by Increasing Frequency (Easy)
	Given an array of integers nums, sort the array in increasing order based 
	on the frequency of the values. If multiple values have the same frequency, 
	sort them in decreasing order. Return the sorted array.

	Example 1:
	Input: nums = [1,1,2,2,2,3]
	Output: [3,1,1,2,2,2]
	Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' 
	             has a frequency of 3.

	Example 2:
	Input: nums = [2,3,1,3,2]
	Output: [1,3,3,2,2]
	Explanation: '2' and '3' both have a frequency of 2, so they are sorted in 
	             decreasing order.

	Example 3:
	Input: nums = [-1,1,-6,4,5,-6,1,4,1]
	Output: [5,-1,4,4,-6,-6,1,1,1]
	 
	Constraints:
	* 1 <= nums.length <= 100
	* -100 <= nums[i] <= 100"""

    def frequencySort(self, nums: List[int]) -> List[int]:
        freq = {}
        for x in nums: freq[x] = 1 + freq.get(x, 0)
        return sorted(nums, key=lambda x: (freq[x], -x))


    """1637. Widest Vertical Area Between Two Points Containing No Points (Medium)
	Given n points on a 2D plane where points[i] = [xi, yi], Return the widest 
	vertical area between two points such that no points are inside the area. A 
	vertical area is an area of fixed-width extending infinitely along the y-axis 
	(i.e., infinite height). The widest vertical area is the one with the maximum 
	width. Note that points on the edge of a vertical area are not considered 
	included in the area.

	Example 1:
	Input: points = [[8,7],[9,9],[7,4],[9,7]]
	Output: 1
	Explanation: Both the red and the blue area are optimal.

	Example 2:
	Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
	Output: 3

	Constraints:
	* n == points.length
	* 2 <= n <= 10^5
	* points[i].length == 2
	* 0 <= xi, yi <= 10^9"""

    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:
        vals = sorted(x for x, _ in points)
        return max(vals[i] - vals[i-1] for i in range(1, len(vals)))


    """1638. Count Substrings That Differ by One Character (Medium)
	Given two strings s and t, find the number of ways you can choose a non-
	empty substring of s and replace a single character by a different 
	character such that the resulting substring is a substring of t. In other 
	words, find the number of substrings in s that differ from some substring 
	in t by exactly one character. For example, the underlined substrings in 
	"computer" and "computation" only differ by the 'e'/'a', so this is a valid 
	way. Return the number of substrings that satisfy the condition above. A 
	substring is a contiguous sequence of characters within a string.

	Example 1:
	Input: s = "aba", t = "baba"
	Output: 6
	Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:
	("aba", "baba")
	("aba", "baba")
	("aba", "baba")
	("aba", "baba")
	("aba", "baba")
	("aba", "baba")
	The underlined portions are the substrings that are chosen from s and t.

	​​Example 2:
	Input: s = "ab", t = "bb"
	Output: 3
	Explanation: The following are the pairs of substrings from s and t that differ by 1 character:
	("ab", "bb")
	("ab", "bb")
	("ab", "bb")
	​​​​The underlined portions are the substrings that are chosen from s and t.

	Example 3:
	Input: s = "a", t = "a"
	Output: 0

	Example 4:
	Input: s = "abe", t = "bbc"
	Output: 10

	Constraints:
	* 1 <= s.length, t.length <= 100
	* s and t consist of lowercase English letters only."""

    def countSubstrings(self, s: str, t: str) -> int:
        m, n = len(s), len(t)
        dp0 = [[0]*(n+1) for _ in range(m+1)] # 0-mismatch
        dp1 = [[0]*(n+1) for _ in range(m+1)] # 1-mismatch
        
        ans = 0
        for i in range(m):
            for j in range(n):
                if s[i] == t[j]: 
                    dp0[i+1][j+1] = 1 + dp0[i][j]
                    dp1[i+1][j+1] = dp1[i][j]
                else: 
                    dp0[i+1][j+1] = 0
                    dp1[i+1][j+1] = 1 + dp0[i][j]
                ans += dp1[i+1][j+1]
        return ans 


    """1639. Number of Ways to Form a Target String Given a Dictionary (Hard)
	You are given a list of strings of the same length words and a string 
	target. Your task is to form target using the given words under the 
	following rules:
	* target should be formed from left to right.
	* To form the ith character (0-indexed) of target, you can choose the kth 
	  character of the jth string in words if target[i] = words[j][k].
	* Once you use the kth character of the jth string of words, you can no 
	  longer use the xth character of any string in words where x <= k. In 
	  other words, all characters to the left of or at index k become unusuable 
	  for every string.
	* Repeat the process until you form the string target.
	Notice that you can use multiple characters from the same string in words 
	provided the conditions above are met. Return the number of ways to form 
	target from words. Since the answer may be too large, return it modulo 
	10^9 + 7.

	Example 1:
	Input: words = ["acca","bbbb","caca"], target = "aba"
	Output: 6
	Explanation: There are 6 ways to form target.
	"aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("caca")
	"aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("caca")
	"aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("acca")
	"aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("acca")
	"aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("acca")
	"aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("caca")

	Example 2:
	Input: words = ["abba","baab"], target = "bab"
	Output: 4
	Explanation: There are 4 ways to form target.
	"bab" -> index 0 ("baab"), index 1 ("baab"), index 2 ("abba")
	"bab" -> index 0 ("baab"), index 1 ("baab"), index 3 ("baab")
	"bab" -> index 0 ("baab"), index 2 ("baab"), index 3 ("baab")
	"bab" -> index 1 ("abba"), index 2 ("baab"), index 3 ("baab")

	Example 3:
	Input: words = ["abcd"], target = "abcd"
	Output: 1

	Example 4:
	Input: words = ["abab","baba","abba","baab"], target = "abba"
	Output: 16

	Constraints:
	* 1 <= words.length <= 1000
	* 1 <= words[i].length <= 1000
	* All strings in words have the same length.
	* 1 <= target.length <= 1000
	* words[i] and target contain only lowercase English letters."""

    def numWays(self, words: List[str], target: str) -> int:
        freq = [defaultdict(int) for _ in range(len(words[0]))]
        for word in words: 
            for i, c in enumerate(word): 
                freq[i][c] += 1
        
        @cache
        def fn(i, k): 
            """Return number of ways to form target[i:] w/ col k."""
            if i == len(target): return 1
            if k == len(words[0]): return 0 
            return freq[k][target[i]]*fn(i+1, k+1) + fn(i, k+1)
        
        return fn(0, 0) % 1_000_000_007


    """1640. Check Array Formation Through Concatenation (Easy)
	You are given an array of distinct integers arr and an array of integer 
	arrays pieces, where the integers in pieces are distinct. Your goal is to 
	form arr by concatenating the arrays in pieces in any order. However, you 
	are not allowed to reorder the integers in each array pieces[i]. Return 
	true if it is possible to form the array arr from pieces. Otherwise, return 
	false.

	Example 1:
	Input: arr = [85], pieces = [[85]]
	Output: true

	Example 2:
	Input: arr = [15,88], pieces = [[88],[15]]
	Output: true
	Explanation: Concatenate [15] then [88]

	Example 3:
	Input: arr = [49,18,16], pieces = [[16,18,49]]
	Output: false
	Explanation: Even though the numbers match, we cannot reorder pieces[0].

	Example 4:
	Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]
	Output: true
	Explanation: Concatenate [91] then [4,64] then [78]

	Example 5:
	Input: arr = [1,3,5,7], pieces = [[2,4,6,8]]
	Output: false

	Constraints:
	* 1 <= pieces.length <= arr.length <= 100
	* sum(pieces[i].length) == arr.length
	* 1 <= pieces[i].length <= arr.length
	* 1 <= arr[i], pieces[i][j] <= 100
	* The integers in arr are distinct.
	* The integers in pieces are distinct (i.e., If we flatten pieces in a 1D 
	  array, all the integers in this array are distinct)."""

    def canFormArray(self, arr: List[int], pieces: List[List[int]]) -> bool:
        mp = {x[0]: x for x in pieces}
        return sum((mp.get(x, []) for x in arr), []) == arr


    """1641. Count Sorted Vowel Strings (Medium)
	Given an integer n, return the number of strings of length n that consist 
	only of vowels (a, e, i, o, u) and are lexicographically sorted. A string s 
	is lexicographically sorted if for all valid i, s[i] is the same as or 
	comes before s[i+1] in the alphabet.

	Example 1:
	Input: n = 1
	Output: 5
	Explanation: The 5 sorted strings that consist of vowels only are ["a","e","i","o","u"].

	Example 2:
	Input: n = 2
	Output: 15
	Explanation: The 15 sorted strings that consist of vowels only are
	["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"].
	Note that "ea" is not a valid string since 'e' comes after 'a' in the alphabet.

	Example 3:
	Input: n = 33
	Output: 66045

	Constraints: 1 <= n <= 50 """

    def countVowelStrings(self, n: int) -> int:
        
        @cache
        def fn(n, k): 
            """Return number of sorted strings of length n consisting of k vowels."""
            if n == 1: return k # base case 
            return sum(fn(n-1, kk) for kk in range(1, k+1))
        
        return fn(n, 5)


    """1642. Furthest Building You Can Reach (Medium)
	You are given an integer array heights representing the heights of 
	buildings, some bricks, and some ladders. You start your journey from 
	building 0 and move to the next building by possibly using bricks or 
	ladders. While moving from building i to building i+1 (0-indexed),
	* If the current building's height is greater than or equal to the next 
	  building's height, you do not need a ladder or bricks.
	* If the current building's height is less than the next building's height, 
	  you can either use one ladder or (h[i+1] - h[i]) bricks.
	Return the furthest building index (0-indexed) you can reach if you use the 
	given ladders and bricks optimally.

	Example 1:
	Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
	Output: 4
	Explanation: Starting at building 0, you can follow these steps:
	- Go to building 1 without using ladders nor bricks since 4 >= 2.
	- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.
	- Go to building 3 without using ladders nor bricks since 7 >= 6.
	- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.
	It is impossible to go beyond building 4 because you do not have any more bricks or ladders.

	Example 2:
	Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
	Output: 7

	Example 3:
	Input: heights = [14,3,19,3], bricks = 17, ladders = 0
	Output: 3

	Constraints:
	* 1 <= heights.length <= 10^5
	* 1 <= heights[i] <= 10^6
	* 0 <= bricks <= 10^9
	* 0 <= ladders <= heights.length"""

    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:
        pq = [] # min heap 
        for i in range(1, len(heights)): 
            diff = heights[i] - heights[i-1]
            if diff > 0: 
                heappush(pq, diff)
                if len(pq) > ladders: # not enough ladders 
                    bricks -= heappop(pq)
                    if bricks < 0: return i-1 
        return len(heights) - 1


    """1643. Kth Smallest Instructions (Hard)
	Bob is standing at cell (0, 0), and he wants to reach destination: 
	(row, column). He can only travel right and down. You are going to help Bob 
	by providing instructions for him to reach destination. The instructions 
	are represented as a string, where each character is either:
	* 'H', meaning move horizontally (go right), or
	* 'V', meaning move vertically (go down).
	Multiple instructions will lead Bob to destination. For example, if 
	destination is (2, 3), both "HHHVV" and "HVHVH" are valid instructions. 
	However, Bob is very picky. Bob has a lucky number k, and he wants the kth 
	lexicographically smallest instructions that will lead him to destination. 
	k is 1-indexed. Given an integer array destination and an integer k, return 
	the kth lexicographically smallest instructions that will take Bob to destination.

	Example 1:
	Input: destination = [2,3], k = 1
	Output: "HHHVV"
	Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:
	["HHHVV", "HHVHV", "HHVVH", "HVHHV", "HVHVH", "HVVHH", "VHHHV", "VHHVH", "VHVHH", "VVHHH"].

	Example 2:
	Input: destination = [2,3], k = 2
	Output: "HHVHV"

	Example 3:
	Input: destination = [2,3], k = 3
	Output: "HHVVH"

	Constraints:
	* destination.length == 2
	* 1 <= row, column <= 15
	* 1 <= k <= nCr(row + column, row), where nCr(a, b) denotes a choose b​​​​​."""

    def kthSmallestPath(self, destination: List[int], k: int) -> str:
        m, n = destination # m "V" & n "H" in total 
        ans = ""
        while n: 
            kk = comb(m+n-1, n-1) # (m+n-1 choose n-1) instructions starting with "H"  
            if kk >= k: 
                ans += "H"
                n -= 1
            else: 
                ans += "V"
                m -= 1
                k -= kk 
        return ans + m*"V"


    """1644. Lowest Common Ancestor of a Binary Tree II (Medium)
	Given the root of a binary tree, return the lowest common ancestor (LCA) 
	of two given nodes, p and q. If either node p or q does not exist in the 
	tree, return null. All values of the nodes in the tree are unique. 
	According to the definition of LCA on Wikipedia: "The lowest common 
	ancestor of two nodes p and q in a binary tree T is the lowest node that 
	has both p and q as descendants (where we allow a node to be a descendant 
	of itself)". A descendant of a node x is a node y that is on the path from 
	node x to some leaf node.

	Example 1:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
	Output: 3
	Explanation: The LCA of nodes 5 and 1 is 3.

	Example 2:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
	Output: 5
	Explanation: The LCA of nodes 5 and 4 is 5. A node can be a descendant of 
	             itself according to the definition of LCA.

	Example 3:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10
	Output: null
	Explanation: Node 10 does not exist in the tree, so return null.

	Constraints:
	* The number of nodes in the tree is in the range [1, 104].
	* -10^9 <= Node.val <= 10^9
	* All Node.val are unique.
	* p != q

	Follow up: Can you find the LCA traversing the tree, without checking nodes 
	           existence?"""

    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        
        def fn(node):
            """Return LCA of p and q in sub-tree rooted at node (if found)."""
            if node: 
                (ln, lx), (rn, rx) = fn(node.left), fn(node.right)
                if node in (p, q): return node, 1 + lx + rx
                if ln and rn: return node, lx + rx
                return (ln, lx) if ln else (rn, rx)
            return None, 0
            
        ans, x = fn(root)
        return ans if x == 2 else None 


    """1646. Get Maximum in Generated Array (Easy)
	You are given an integer n. An array nums of length n + 1 is generated in 
	the following way:
	* nums[0] = 0
	* nums[1] = 1
	* nums[2 * i] = nums[i] when 2 <= 2 * i <= n
	* nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n
	Return the maximum integer in the array nums​​​.

	Example 1:
	Input: n = 7
	Output: 3
	Explanation: According to the given rules:
	  nums[0] = 0
	  nums[1] = 1
	  nums[(1 * 2) = 2] = nums[1] = 1
	  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2
	  nums[(2 * 2) = 4] = nums[2] = 1
	  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3
	  nums[(3 * 2) = 6] = nums[3] = 2
	  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3
	Hence, nums = [0,1,1,2,1,3,2,3], and the maximum is 3.

	Example 2:
	Input: n = 2
	Output: 1
	Explanation: According to the given rules, the maximum between nums[0], 
	             nums[1], and nums[2] is 1.

	Example 3:
	Input: n = 3
	Output: 2
	Explanation: According to the given rules, the maximum between nums[0], 
	             nums[1], nums[2], and nums[3] is 2.

	Constraints:
	* 0 <= n <= 100"""

    def getMaximumGenerated(self, n: int) -> int:
        if not n: return 0 # edge case 
        nums = [0, 1]
        for i in range(2, n+1): 
            if i&1: nums.append(nums[i//2] + nums[i//2+1])
            else: nums.append(nums[i//2])
        return max(nums)


    """1647. Minimum Deletions to Make Character Frequencies Unique (Medium)
	A string s is called good if there are no two different characters in s 
	that have the same frequency. Given a string s, return the minimum number 
	of characters you need to delete to make s good. The frequency of a 
	character in a string is the number of times it appears in the string. For 
	example, in the string "aab", the frequency of 'a' is 2, while the 
	frequency of 'b' is 1.

	Example 1:
	Input: s = "aab"
	Output: 0
	Explanation: s is already good.

	Example 2:
	Input: s = "aaabbbcc"
	Output: 2
	Explanation: You can delete two 'b's resulting in the good string "aaabcc". 
	             Another way it to delete one 'b' and one 'c' resulting in the 
	             good string "aaabbc".

	Example 3:
	Input: s = "ceabaacb"
	Output: 2
	Explanation: You can delete both 'c's resulting in the good string "eabaab". 
	             Note that we only care about characters that are still in the 
	             string at the end (i.e. frequency of 0 is ignored).

	Constraints:
	* 1 <= s.length <= 10^5
	* s contains only lowercase English letters."""

    def minDeletions(self, s: str) -> int:
        freq = {} # frequency table 
        for c in s: freq[c] = 1 + freq.get(c, 0)
        
        ans = 0
        seen = set()
        for k in freq.values(): 
            while k in seen: 
                k -= 1 
                ans += 1
            if k: seen.add(k)
        return ans 


    """1648. Sell Diminishing-Valued Colored Balls (Medium)
	You have an inventory of different colored balls, and there is a customer 
	that wants orders balls of any color. The customer weirdly values the 
	colored balls. Each colored ball's value is the number of balls of that 
	color you currently have in your inventory. For example, if you own 6 
	yellow balls, the customer would pay 6 for the first yellow ball. After the 
	transaction, there are only 5 yellow balls left, so the next yellow ball is 
	then valued at 5 (i.e., the value of the balls decreases as you sell more 
	to the customer). You are given an integer array, inventory, where 
	inventory[i] represents the number of balls of the ith color that you 
	initially own. You are also given an integer orders, which represents the 
	total number of balls that the customer wants. You can sell the balls in 
	any order. Return the maximum total value that you can attain after selling 
	orders colored balls. As the answer may be too large, return it modulo 
	10^9 + 7.

	Example 1:
	Input: inventory = [2,5], orders = 4
	Output: 14
	Explanation: Sell the 1st color 1 time (2) and the 2nd color 3 times 
	             (5 + 4 + 3). The maximum total value is 2 + 5 + 4 + 3 = 14.

	Example 2:
	Input: inventory = [3,5], orders = 6
	Output: 19
	Explanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times 
	             (5 + 4 + 3 + 2). The maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.
	
	Example 3:
	Input: inventory = [2,8,4,10,6], orders = 20
	Output: 110
	
	Example 4:
	Input: inventory = [1000000000], orders = 1000000000
	Output: 21
	Explanation: Sell the 1st color 1000000000 times for a total value of 
	             500000000500000000. 500000000500000000 modulo 109 + 7 = 21.
	 
	Constraints:
	* 1 <= inventory.length <= 10^5
	* 1 <= inventory[i] <= 10^9
	* 1 <= orders <= min(sum(inventory[i]), 109)"""

    def maxProfit(self, inventory: List[int], orders: int) -> int:
        inventory.sort(reverse=True) # inventory high to low 
        inventory.append(0)
        ans = i = 0
        while orders: 
            sell = min(orders, (i+1)*(inventory[i] - inventory[i+1]))
            q, r = divmod(sell, i+1)
            ans += (i+1)*(2*inventory[i] - q + 1)*q//2 + r*(inventory[i] - q)
            orders -= sell 
            i += 1
        return ans % 1_000_000_007


    """1649. Create Sorted Array through Instructions (Hard)
	Given an integer array instructions, you are asked to create a sorted array 
	from the elements in instructions. You start with an empty container nums. 
	For each element from left to right in instructions, insert it into nums. 
	The cost of each insertion is the minimum of the following:
	* The number of elements currently in nums that are strictly less than 
	  instructions[i].
	* The number of elements currently in nums that are strictly greater than 
	  instructions[i].
	For example, if inserting element 3 into nums = [1,2,3,5], the cost of 
	insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is 
	greater than 3) and nums will become [1,2,3,3,5]. Return the total cost to 
	insert all elements from instructions into nums. Since the answer may be 
	large, return it modulo 109 + 7

	Example 1:
	Input: instructions = [1,5,6,2]
	Output: 1
	Explanation: Begin with nums = [].
	Insert 1 with cost min(0, 0) = 0, now nums = [1].
	Insert 5 with cost min(1, 0) = 0, now nums = [1,5].
	Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6].
	Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].
	The total cost is 0 + 0 + 0 + 1 = 1.

	Example 2:
	Input: instructions = [1,2,3,6,5,4]
	Output: 3
	Explanation: Begin with nums = [].
	Insert 1 with cost min(0, 0) = 0, now nums = [1].
	Insert 2 with cost min(1, 0) = 0, now nums = [1,2].
	Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3].
	Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].
	Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].
	Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].
	The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.

	Example 3:
	Input: instructions = [1,3,3,3,2,4,2,1,2]
	Output: 4
	Explanation: Begin with nums = [].
	Insert 1 with cost min(0, 0) = 0, now nums = [1].
	Insert 3 with cost min(1, 0) = 0, now nums = [1,3].
	Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3].
	Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].
	Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].
	Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].
	Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].
	Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].
	Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].
	The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.
	 
	Constraints:
	* 1 <= instructions.length <= 10^5
	* 1 <= instructions[i] <= 10^5

class Fenwick:
    def __init__(self, n):
        self.nums = [0]*(n+1)
        
    def sum(self, k): 
        ans = 0
        while k: 
            ans += self.nums[k]
            k &= k-1
        return ans 
    
    def add(self, i, x): 
        i += 1
        while i < len(self.nums): 
            self.nums[i] += x
            i += i & -i
	"""

    def createSortedArray(self, instructions: List[int]) -> int:
        ans = 0
        fen = Fenwick(10**5)
        freq = {} # frequency of each instructions
        for i, x in enumerate(instructions): 
            less = fen.sum(x)
            more = i - freq.get(x, 0) - less
            ans += min(less, more)
            fen.add(x, 1)
            freq[x] = 1 + freq.get(x, 0)
        return ans % 1_000_000_007


    """1650. Lowest Common Ancestor of a Binary Tree III (Medium)
	Given two nodes of a binary tree p and q, return their lowest common 
	ancestor (LCA). Each node will have a reference to its parent node. The 
	definition for Node is below:
	class Node {
	    public int val;
	    public Node left;
	    public Node right;
	    public Node parent;
	}
	According to the definition of LCA on Wikipedia: "The lowest common 
	ancestor of two nodes p and q in a tree T is the lowest node that has both 
	p and q as descendants (where we allow a node to be a descendant of itself)."

	Example 1:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
	Output: 3
	Explanation: The LCA of nodes 5 and 1 is 3.

	Example 2:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
	Output: 5
	Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant 
	             of itself according to the LCA definition.

	Example 3:
	Input: root = [1,2], p = 1, q = 2
	Output: 1

	Constraints:
	* The number of nodes in the tree is in the range [2, 10^5].
	* -10^9 <= Node.val <= 10^9
	* All Node.val are unique.
	* p != q
	* p and q exist in the tree."""

    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':
        n0, n1 = p, q
        while n0 != n1: 
            n0 = n0.parent if n0 else q
            n1 = n1.parent if n1 else p
        return n0 


    """1652. Defuse the Bomb (Easy)
	You have a bomb to defuse, and your time is running out! Your informer will 
	provide you with a circular array code of length of n and a key k. To 
	decrypt the code, you must replace every number. All the numbers are 
	replaced simultaneously.
	* If k > 0, replace the ith number with the sum of the next k numbers.
	* If k < 0, replace the ith number with the sum of the previous k numbers.
	* If k == 0, replace the ith number with 0.
	As code is circular, the next element of code[n-1] is code[0], and the 
	previous element of code[0] is code[n-1]. Given the circular array code and 
	an integer key k, return the decrypted code to defuse the bomb!

	Example 1:
	Input: code = [5,7,1,4], k = 3
	Output: [12,10,16,13]
	Explanation: Each number is replaced by the sum of the next 3 numbers. The 
	             decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that 
	             the numbers wrap around.

	Example 2:
	Input: code = [1,2,3,4], k = 0
	Output: [0,0,0,0]
	Explanation: When k is zero, the numbers are replaced by 0. 

	Example 3:
	Input: code = [2,4,9,3], k = -2
	Output: [12,5,6,13]
	Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the 
	             numbers wrap around again. If k is negative, the sum is of the 
	             previous numbers.

	Constraints:
	* n == code.length
	* 1 <= n <= 100
	* 1 <= code[i] <= 100
	* -(n - 1) <= k <= n - 1"""

    def decrypt(self, code: List[int], k: int) -> List[int]:
        if k < 0: return self.decrypt(code[::-1], -k)[::-1] 
        
        prefix = [0] # prefix sum (w/ leading 0)
        for x in code*2: prefix.append(prefix[-1] + x)
        
        ans = []
        for i in range(len(code)): 
            ans.append(prefix[i+k+1] - prefix[i+1])
        return ans 


    """1653. Minimum Deletions to Make String Balanced (Medium)
	You are given a string s consisting only of characters 'a' and 'b'​​​​. You 
	can delete any number of characters in s to make s balanced. s is balanced 
	if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and 
	s[j]= 'a'. Return the minimum number of deletions needed to make s balanced.
	 
	Example 1:
	Input: s = "aababbab"
	Output: 2
	Explanation: You can either delete the characters at 0-indexed positions 2 
	             and 6 ("aababbab" -> "aaabbb"), or delete the characters at 
	             0-indexed positions 3 and 6 ("aababbab" -> "aabbbb").

	Example 2:
	Input: s = "bbaaaaabb"
	Output: 2
	Explanation: The only solution is to delete the first two characters.

	Constraints:
	* 1 <= s.length <= 10^5
	* s[i] is 'a' or 'b'​​."""

    def minimumDeletions(self, s: str) -> int:
        ans = suffix = 0
        for c in reversed(s):
            if c == "a": suffix += 1
            else: ans = min(1 + ans, suffix)
        return ans


    """1654. Minimum Jumps to Reach Home (Medium)
	A certain bug's home is on the x-axis at position x. Help them get there 
	from position 0. The bug jumps according to the following rules:
	* It can jump exactly a positions forward (to the right).
	* It can jump exactly b positions backward (to the left).
	* It cannot jump backward twice in a row.
	* It cannot jump to any forbidden positions.
	The bug may jump forward beyond its home, but it cannot jump to positions 
	numbered with negative integers. Given an array of integers forbidden, 
	where forbidden[i] means that the bug cannot jump to the position 
	forbidden[i], and integers a, b, and x, return the minimum number of jumps 
	needed for the bug to reach its home. If there is no possible sequence of 
	jumps that lands the bug on position x, return -1.

	Example 1:
	Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
	Output: 3
	Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.

	Example 2:
	Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
	Output: -1

	Example 3:
	Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
	Output: 2
	Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) 
	             will get the bug home.

	Constraints:
	* 1 <= forbidden.length <= 1000
	* 1 <= a, b, forbidden[i] <= 2000
	* 0 <= x <= 2000
	* All the elements in forbidden are distinct.
	* Position x is not forbidden."""

    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:
        forbidden = set(forbidden)
        upper = max(forbidden | {x}) + a + b
        
        ans = 0
        queue = [(0, 0)]
        forbidden.add(0)
        while queue: 
            newq = []
            for n, k in queue: 
                if n == x: return ans
                if n+a <= upper and n+a not in forbidden: 
                    newq.append((n+a, 0))
                    forbidden.add(n+a)
                if k == 0 and 0 <= n-b and n-b not in forbidden: 
                    newq.append((n-b, 1))
            ans += 1
            queue = newq
        return -1 


    """1655. Distribute Repeating Integers (Hard)
	You are given an array of n integers, nums, where there are at most 50 
	unique values in the array. You are also given an array of m customer order 
	quantities, quantity, where quantity[i] is the amount of integers the ith 
	customer ordered. Determine if it is possible to distribute nums such that:
	* The ith customer gets exactly quantity[i] integers,
	* The integers the ith customer gets are all equal, and
	* Every customer is satisfied.
	Return true if it is possible to distribute nums according to the above 
	conditions.

	Example 1:
	Input: nums = [1,2,3,4], quantity = [2]
	Output: false
	Explanation: The 0th customer cannot be given two different integers.

	Example 2:
	Input: nums = [1,2,3,3], quantity = [2]
	Output: true
	Explanation: The 0th customer is given [3,3]. The integers [1,2] are not 
	             used.

	Example 3:
	Input: nums = [1,1,2,2], quantity = [2,2]
	Output: true
	Explanation: The 0th customer is given [1,1], and the 1st customer is given 
	             [2,2].

	Example 4:
	Input: nums = [1,1,2,3], quantity = [2,2]
	Output: false
	Explanation: Although the 0th customer could be given [1,1], the 1st 
	             customer cannot be satisfied.

	Example 5:
	Input: nums = [1,1,1,1,1], quantity = [2,3]
	Output: true
	Explanation: The 0th customer is given [1,1], and the 1st customer is given 
	             [1,1,1].

	Constraints:
	* n == nums.length
	* 1 <= n <= 10^5
	* 1 <= nums[i] <= 1000
	* m == quantity.length
	* 1 <= m <= 10
	* 1 <= quantity[i] <= 10^5
	* There are at most 50 unique values in nums."""

    def canDistribute(self, nums: List[int], quantity: List[int]) -> bool:
        freq = {}
        for x in nums: freq[x] = 1 + freq.get(x, 0)
        
        vals = sorted(freq.values(), reverse=True)
        quantity.sort(reverse=True) # handling large values first 
        
        def fn(i): 
            """Return True if possible to distribute quantity[i:] to remaining."""
            if i == len(quantity): return True 
            seen = set()
            for k in range(len(vals)): 
                if vals[k] >= quantity[i] and vals[k] not in seen: 
                    seen.add(vals[k])
                    vals[k] -= quantity[i]
                    if fn(i+1): return True 
                    vals[k] += quantity[i] # backtracking
                    
        return fn(0)


    """1657. Determine if Two Strings Are Close (Medium)
	Two strings are considered close if you can attain one from the other using 
	the following operations:
	* Operation 1: Swap any two existing characters.
	  + For example, abcde -> aecdb
	* Operation 2: Transform every occurrence of one existing character into 
	  another existing character, and do the same with the other character.
	  + For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn 
	    into a's)
	You can use the operations on either string as many times as necessary. 
	Given two strings, word1 and word2, return true if word1 and word2 are 
	close, and false otherwise.

	Example 1:
	Input: word1 = "abc", word2 = "bca"
	Output: true
	Explanation: You can attain word2 from word1 in 2 operations.
            	 Apply Operation 1: "abc" -> "acb"
            	 Apply Operation 1: "acb" -> "bca"

	Example 2:
	Input: word1 = "a", word2 = "aa"
	Output: false
	Explanation: It is impossible to attain word2 from word1, or vice versa, in 
	             any number of operations.
	
	Example 3:
	Input: word1 = "cabbba", word2 = "abbccc"
	Output: true
	Explanation: You can attain word2 from word1 in 3 operations.
	             Apply Operation 1: "cabbba" -> "caabbb"
	             Apply Operation 2: "caabbb" -> "baaccc"
	             Apply Operation 2: "baaccc" -> "abbccc"

	Example 4:
	Input: word1 = "cabbba", word2 = "aabbss"
	Output: false
	Explanation: It is impossible to attain word2 from word1, or vice versa, in 
	             any amount of operations.

	Constraints:
	* 1 <= word1.length, word2.length <= 10^5
	* word1 and word2 contain only lowercase English letters."""

    def closeStrings(self, word1: str, word2: str) -> bool:
        cnt1, cnt2 = Counter(word1), Counter(word2)
        return cnt1.keys() == cnt2.keys() and sorted(cnt1.values()) == sorted(cnt2.values())


    """1660. Correct a Binary Tree (Medium)
	You have a binary tree with a small defect. There is exactly one invalid 
	node where its right child incorrectly points to another node at the same 
	depth but to the invalid node's right. Given the root of the binary tree 
	with this defect, root, return the root of the binary tree after removing 
	this invalid node and every node underneath it (minus the node it 
	incorrectly points to).

	Custom testing:
	The test input is read as 3 lines:
	* TreeNode root
	* int fromNode (not available to correctBinaryTree)
	* int toNode (not available to correctBinaryTree)
	After the binary tree rooted at root is parsed, the TreeNode with value of 
	fromNode will have its right child pointer pointing to the TreeNode with a 
	value of toNode. Then, root is passed to correctBinaryTree.

	Example 1:
	Input: root = [1,2,3], fromNode = 2, toNode = 3
	Output: [1,null,3]
	Explanation: The node with value 2 is invalid, so remove it.

	Example 2:
	Input: root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4
	Output: [8,3,1,null,null,9,4,null,null,5,6]
	Explanation: The node with value 7 is invalid, so remove it and the node underneath it, node 2.

	Constraints:
	* The number of nodes in the tree is in the range [3, 10^4].
	* -10^9 <= Node.val <= 10^9
	* All Node.val are unique.
	* fromNode != toNode
	* fromNode and toNode will exist in the tree and will be on the same depth.
	* toNode is to the right of fromNode.
	* fromNode.right is null in the initial tree from the test data."""

    def correctBinaryTree(self, root: TreeNode) -> TreeNode:
        queue = [(root, None)]
        seen = set()
        for node, prev in queue: 
            if node.right and node.right.val in seen: 
                if node == prev.left: prev.left = None
                if node == prev.right: prev.right = None
                return root 
            seen.add(node.val)
            if node.right: queue.append((node.right, node))
            if node.left: queue.append((node.left, node))


    """1662. Check If Two String Arrays are Equivalent (Easy)
	Given two string arrays word1 and word2, return true if the two arrays 
	represent the same string, and false otherwise. A string is represented by 
	an array if the array elements concatenated in order forms the string.

	Example 1:
	Input: word1 = ["ab", "c"], word2 = ["a", "bc"]
	Output: true
	Explanation: word1 represents string "ab" + "c" -> "abc"
	             word2 represents string "a" + "bc" -> "abc"
	             The strings are the same, so return true.

	Example 2:
	Input: word1 = ["a", "cb"], word2 = ["ab", "c"]
	Output: false

	Example 3:
	Input: word1  = ["abc", "d", "defg"], word2 = ["abcddefg"]
	Output: true

	Constraints:
	* 1 <= word1.length, word2.length <= 103
	* 1 <= word1[i].length, word2[i].length <= 103
	* 1 <= sum(word1[i].length), sum(word2[i].length) <= 103
	* word1[i] and word2[i] consist of lowercase letters."""

    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:
        return "".join(word1) == "".join(word2)


    """1663. Smallest String With A Given Numeric Value (Medium)
	The numeric value of a lowercase character is defined as its position 
	(1-indexed) in the alphabet, so the numeric value of a is 1, the numeric 
	value of b is 2, the numeric value of c is 3, and so on. The numeric value 
	of a string consisting of lowercase characters is defined as the sum of its 
	characters' numeric values. For example, the numeric value of the string 
	"abe" is equal to 1 + 2 + 5 = 8. You are given two integers n and k. Return 
	the lexicographically smallest string with length equal to n and numeric 
	value equal to k. Note that a string x is lexicographically smaller than 
	string y if x comes before y in dictionary order, that is, either x is a 
	prefix of y, or if i is the first position such that x[i] != y[i], then 
	x[i] comes before y[i] in alphabetic order.

	Example 1:
	Input: n = 3, k = 27
	Output: "aay"
	Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is 
	             the smallest string with such a value and length equal to 3.

	Example 2:
	Input: n = 5, k = 73
	Output: "aaszz"

	Constraints:
	* 1 <= n <= 10^5
	* n <= k <= 26 * n"""

    def getSmallestString(self, n: int, k: int) -> str:
        ans = []
        for i in range(n): 
            val = max(1, k - (n-i-1)*26)
            ans.append(chr(val + 96))
            k -= val
        return "".join(ans)


    """1664. Ways to Make a Fair Array (Medium)
	You are given an integer array nums. You can choose exactly one index 
	(0-indexed) and remove the element. Notice that the index of the elements 
	may change after the removal. For example, if nums = [6,1,7,4,1]:
	* Choosing to remove index 1 results in nums = [6,7,4,1].
	* Choosing to remove index 2 results in nums = [6,1,4,1].
	* Choosing to remove index 4 results in nums = [6,1,7,4].
	An array is fair if the sum of the odd-indexed values equals the sum of the 
	even-indexed values. Return the number of indices that you could choose 
	such that after the removal, nums is fair.

	Example 1:
	Input: nums = [2,1,6,4]
	Output: 1
	Explanation:
	Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.
	Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.
	Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.
	Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.
	There is 1 index that you can remove to make nums fair.

	Example 2:
	Input: nums = [1,1,1]
	Output: 3
	Explanation: You can remove any index and the remaining array is fair.

	Example 3:
	Input: nums = [1,2,3]
	Output: 0
	Explanation: You cannot make a fair array after removing any index.

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^4"""

    def waysToMakeFair(self, nums: List[int]) -> int:
        prefix = [0]*2
        suffix = [sum(nums[::2]), sum(nums[1::2])]
        
        ans = 0
        for i, x in enumerate(nums): 
            suffix[i%2] -= x
            if prefix[0] + suffix[1] == prefix[1] + suffix[0]: ans += 1
            prefix[i%2] += x
        return ans 


    """1665. Minimum Initial Energy to Finish Tasks (Hard)
	You are given an array tasks where tasks[i] = [actuali, minimumi]:
	* actuali is the actual amount of energy you spend to finish the ith task.
	* minimumi is the minimum amount of energy you require to begin the ith 
	  task.
	For example, if the task is [10, 12] and your current energy is 11, you 
	cannot start this task. However, if your current energy is 13, you can 
	complete this task, and your energy will be 3 after finishing it. You can 
	finish the tasks in any order you like. Return the minimum initial amount 
	of energy you will need to finish all the tasks.

	Example 1:
	Input: tasks = [[1,2],[2,4],[4,8]]
	Output: 8
	Explanation:
	Starting with 8 energy, we finish the tasks in the following order:
	    - 3rd task. Now energy = 8 - 4 = 4.
	    - 2nd task. Now energy = 4 - 2 = 2.
	    - 1st task. Now energy = 2 - 1 = 1.
	Notice that even though we have leftover energy, starting with 7 energy 
	does not work because we cannot do the 3rd task.

	Example 2:
	Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]
	Output: 32
	Explanation:
	Starting with 32 energy, we finish the tasks in the following order:
	    - 1st task. Now energy = 32 - 1 = 31.
	    - 2nd task. Now energy = 31 - 2 = 29.
	    - 3rd task. Now energy = 29 - 10 = 19.
	    - 4th task. Now energy = 19 - 10 = 9.
	    - 5th task. Now energy = 9 - 8 = 1.
	
	Example 3:
	Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
	Output: 27
	Explanation:
	Starting with 27 energy, we finish the tasks in the following order:
	    - 5th task. Now energy = 27 - 5 = 22.
	    - 2nd task. Now energy = 22 - 2 = 20.
	    - 3rd task. Now energy = 20 - 3 = 17.
	    - 1st task. Now energy = 17 - 1 = 16.
	    - 4th task. Now energy = 16 - 4 = 12.
	    - 6th task. Now energy = 12 - 6 = 6.
	 
	Constraints:
	* 1 <= tasks.length <= 10^5
	* 1 <= actual​i <= minimumi <= 10^4"""

    def minimumEffort(self, tasks: List[List[int]]) -> int:
        ans = val = 0
        for x, y in sorted(tasks, key=lambda x: x[0]-x[1]): 
            if val < y: 
                ans += y - val 
                val = y
            val -= x
        return ans 


    """1666. Change the Root of a Binary Tree (Medium)
	Given the root of a binary tree and a leaf node, reroot the tree so that 
	the leaf is the new root. You can reroot the tree with the following steps 
	for each node cur on the path starting from the leaf up to the root​​​ 
	excluding the root:
	* If cur has a left child, then that child becomes cur's right child.
	* cur's original parent becomes cur's left child. Note that in this process 
	  the original parent's pointer to cur becomes null, making it have at most 
	  one child.
	Return the new root of the rerooted tree.

	Note: Ensure that your solution sets the Node.parent pointers correctly 
	      after rerooting or you will receive "Wrong Answer".

	Example 1:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 7
	Output: [7,2,null,5,4,3,6,null,null,null,1,null,null,0,8]

	Example 2:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 0
	Output: [0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]

	Constraints:
	* The number of nodes in the tree is in the range [2, 100].
	* -109 <= Node.val <= 109
	* All Node.val are unique.
	* leaf exist in the tree."""

    def flipBinaryTree(self, root: 'Node', leaf: 'Node') -> 'Node':        
        prev, node = None, leaf
        while node: 
            if node == root:
                if prev == node.right: node.right = None
                else: node.left = None
            else: 
                if prev == node.right: node.right = node.left 
                node.left = node.parent
            node.parent, node, prev = prev, node.parent, node 
        return leaf


    """1668. Maximum Repeating Substring (Easy)
	For a string sequence, a string word is k-repeating if word concatenated k 
	times is a substring of sequence. The word's maximum k-repeating value is 
	the highest value k where word is k-repeating in sequence. If word is not a 
	substring of sequence, word's maximum k-repeating value is 0. Given strings 
	sequence and word, return the maximum k-repeating value of word in sequence.

	Example 1:
	Input: sequence = "ababc", word = "ab"
	Output: 2
	Explanation: "abab" is a substring in "ababc".

	Example 2:
	Input: sequence = "ababc", word = "ba"
	Output: 1
	Explanation: "ba" is a substring in "ababc". "baba" is not a substring in 
	             "ababc".

	Example 3:
	Input: sequence = "ababc", word = "ac"
	Output: 0
	Explanation: "ac" is not a substring in "ababc". 

	Constraints:
	* 1 <= sequence.length <= 100
	* 1 <= word.length <= 100
	* sequence and word contains only lowercase English letters."""

    def maxRepeating(self, sequence: str, word: str) -> int:
        if len(sequence) < len(word): return 0 # edge case 
        
        pattern = word * (len(sequence)//len(word))
        lps = [0] # longest proper prefix also suffix (KMP)
        k = 0
        for i in range(1, len(pattern)):
            while k and pattern[k] != pattern[i]: k = lps[k-1]
            if pattern[i] == pattern[k]: k += 1
            lps.append(k)
        
        ans = k = 0
        for i in range(len(sequence)):
            while k and pattern[k] != sequence[i]: k = lps[k-1]
            if pattern[k] == sequence[i]: k += 1
            ans = max(ans, k//len(word))
            if k == len(pattern): return ans
        return ans 


    """1669. Merge In Between Linked Lists (Medium)
	You are given two linked lists: list1 and list2 of sizes n and m 
	respectively. Remove list1's nodes from the ath node to the bth node, and 
	put list2 in their place. Build the result list and return its head.

	Example 1:
	Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
	Output: [0,1,2,1000000,1000001,1000002,5]
	Explanation: We remove the nodes 3 and 4 and put the entire list2 in their 
	             place. The blue edges and nodes in the above figure indicate 
	             the result.

	Example 2:
	Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, 
	       list2 = [1000000,1000001,1000002,1000003,1000004]
	Output: [0,1,1000000,1000001,1000002,1000003,1000004,6]
	Explanation: The blue edges and nodes in the above figure indicate the result.

	Constraints:
	* 3 <= list1.length <= 10^4
	* 1 <= a <= b < list1.length - 1
	* 1 <= list2.length <= 10^4"""

    def mergeInBetween(self, list1: ListNode, a: int, b: int, list2: ListNode) -> ListNode:
        node = list1
        for k in range(b+1): 
            if k == a-1: start = node 
            node = node.next 
        end = node 
        
        start.next = node = list2
        while node.next: node = node.next 
        node.next = end
        return list1 


    """1671. Minimum Number of Removals to Make Mountain Array (Hard)
	You may recall that an array arr is a mountain array if and only if:
	* arr.length >= 3
	* There exists some index i (0-indexed) with 0 < i < arr.length - 1 such 
	  that:
	  + arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
	  + arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
	Given an integer array nums​​​, return the minimum number of elements to 
	remove to make nums​​​ a mountain array.

	Example 1:
	Input: nums = [1,3,1]
	Output: 0
	Explanation: The array itself is a mountain array so we do not need to 
	             remove any elements.

	Example 2:
	Input: nums = [2,1,1,5,6,2,3,1]
	Output: 3
	Explanation: One solution is to remove the elements at indices 0, 1, and 5, 
	             making the array nums = [1,5,6,3,1].
	
	Example 3:
	Input: nums = [4,3,2,1,1,2,3,1]
	Output: 4

	Example 4:
	Input: nums = [1,2,3,4,4,3,2,1]
	Output: 1

	Constraints:
	* 3 <= nums.length <= 1000
	* 1 <= nums[i] <= 10^9
	* It is guaranteed that you can make a mountain array out of nums."""

    def minimumMountainRemovals(self, nums: List[int]) -> int:
        
        def fn(nums): 
            """Return length of LIS (excluding x) ending at x."""
            ans, vals = [], []
            for i, x in enumerate(nums): 
                k = bisect_left(vals, x)
                if k == len(vals): vals.append(x)
                else: vals[k] = x
                ans.append(k)
            return ans 
        
        left, right = fn(nums), fn(nums[::-1])[::-1]
        
        ans = inf
        for i in range(1, len(nums)-1): 
            if left[i] and right[i]:
                ans = min(ans, len(nums) - left[i] - right[i] - 1)
        return ans 


    """1672. Richest Customer Wealth (Easy)
	You are given an m x n integer grid accounts where accounts[i][j] is the 
	amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth 
	that the richest customer has. A customer's wealth is the amount of money 
	they have in all their bank accounts. The richest customer is the customer 
	that has the maximum wealth.

	Example 1:
	Input: accounts = [[1,2,3],[3,2,1]]
	Output: 6
	Explanation:
	1st customer has wealth = 1 + 2 + 3 = 6
	2nd customer has wealth = 3 + 2 + 1 = 6
	Both customers are considered the richest with a wealth of 6 each, so return 6.

	Example 2:
	Input: accounts = [[1,5],[7,3],[3,5]]
	Output: 10
	Explanation: 
	1st customer has wealth = 6
	2nd customer has wealth = 10 
	3rd customer has wealth = 8
	The 2nd customer is the richest with a wealth of 10.

	Example 3:
	Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]
	Output: 17

	Constraints:
	* m == accounts.length
	* n == accounts[i].length
	* 1 <= m, n <= 50
	* 1 <= accounts[i][j] <= 100"""

    def maximumWealth(self, accounts: List[List[int]]) -> int:
        return max(map(sum, accounts))


    """1673. Find the Most Competitive Subsequence (Medium)
	Given an integer array nums and a positive integer k, return the most 
	competitive subsequence of nums of size k. An array's subsequence is a 
	resulting sequence obtained by erasing some (possibly zero) elements from 
	the array. We define that a subsequence a is more competitive than a 
	subsequence b (of the same length) if in the first position where a and b 
	differ, subsequence a has a number less than the corresponding number in b. 
	For example, [1,3,4] is more competitive than [1,3,5] because the first 
	position they differ is at the final number, and 4 is less than 5.

	Example 1:
	Input: nums = [3,5,2,6], k = 2
	Output: [2,6]
	Explanation: Among the set of every possible subsequence: 
	             {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most 
	             competitive.

	Example 2:
	Input: nums = [2,4,3,3,5,4,9,6], k = 4
	Output: [2,3,3,4]
	 
	Constraints:
	* 1 <= nums.length <= 10^5
	* 0 <= nums[i] <= 10^9
	* 1 <= k <= nums.length"""

    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:
        stack = [] # (increasing) mono-stack 
        for i, x in enumerate(nums): 
            while stack and stack[-1] > x and len(stack) + len(nums) - i > k: stack.pop()
            if len(stack) < k: stack.append(x)
        return stack 


    """1674. Minimum Moves to Make Array Complementary (Medium)
	You are given an integer array nums of even length n and an integer limit. 
	In one move, you can replace any integer from nums with another integer 
	between 1 and limit, inclusive. The array nums is complementary if for all 
	indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. 
	For example, the array [1,2,3,4] is complementary because for all indices i, 
	nums[i] + nums[n - 1 - i] = 5. Return the minimum number of moves required 
	to make nums complementary.

	Example 1:
	Input: nums = [1,2,4,3], limit = 4
	Output: 1
	Explanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).
	nums[0] + nums[3] = 1 + 3 = 4.
	nums[1] + nums[2] = 2 + 2 = 4.
	nums[2] + nums[1] = 2 + 2 = 4.
	nums[3] + nums[0] = 3 + 1 = 4.
	Therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.

	Example 2:
	Input: nums = [1,2,2,1], limit = 2
	Output: 2
	Explanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.

	Example 3:
	Input: nums = [1,2,1,2], limit = 2
	Output: 0
	Explanation: nums is already complementary.

	Constraints:
	* n == nums.length
	* 2 <= n <= 10^5
	* 1 <= nums[i] <= limit <= 10^5
	* n is even."""

    def minMoves(self, nums: List[int], limit: int) -> int:
        diff = [0]*(2*limit+2) # difference array 
        
        for i in range(len(nums)//2): 
            m = min(nums[i], nums[~i]) + 1 # lower bound 
            diff[m] += -1
            x = nums[i] + nums[~i]
            diff[x] += -1
            diff[x+1] += 1
            M = max(nums[i], nums[~i]) + 1 + limit # upper bound 
            diff[M] += 1
        
        for i in range(1, len(diff)): diff[i] += diff[i-1] # prefix sum 
        return len(nums) + min(diff)


    """1675. Minimize Deviation in Array (Hard)
	You are given an array nums of n positive integers. You can perform two 
	types of operations on any element of the array any number of times:

	* If the element is even, divide it by 2.
	  + For example, if the array is [1,2,3,4], then you can do this operation 
	    on the last element, and the array will be [1,2,3,2].
	* If the element is odd, multiply it by 2.
	  + For example, if the array is [1,2,3,4], then you can do this operation 
	    on the first element, and the array will be [2,2,3,4].
	The deviation of the array is the maximum difference between any two 
	elements in the array. Return the minimum deviation the array can have 
	after performing some number of operations.

	Example 1:
	Input: nums = [1,2,3,4]
	Output: 1
	Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], 
	             then the deviation will be 3 - 2 = 1.

	Example 2:
	Input: nums = [4,1,5,20,3]
	Output: 3
	Explanation: You can transform the array after two operations to [4,2,5,5,3], 
	             then the deviation will be 5 - 2 = 3.

	Example 3:
	Input: nums = [2,10,8]
	Output: 3

	Constraints:
	* n == nums.length
	* 2 <= n <= 10^5
	* 1 <= nums[i] <= 10^9"""

    def minimumDeviation(self, nums: List[int]) -> int:
        pq = [-2*x if x&1 else -x for x in nums] # max-heap 
        heapify(pq)
        
        mn = -max(pq)
        ans = -pq[0] - mn 
        while not pq[0] & 1: 
            x = heappop(pq)
            heappush(pq, x//2)
            mn = min(mn, -x//2)
            ans = min(ans, -pq[0] - mn)
        return ans 


    """1676. Lowest Common Ancestor of a Binary Tree IV (Medium)
	Given the root of a binary tree and an array of TreeNode objects nodes, 
	return the lowest common ancestor (LCA) of all the nodes in nodes. All the 
	nodes will exist in the tree, and all values of the tree's nodes are unique.
	Extending the definition of LCA on Wikipedia: "The lowest common ancestor 
	of n nodes p1, p2, ..., pn in a binary tree T is the lowest node that has 
	every pi as a descendant (where we allow a node to be a descendant of 
	itself) for every valid i". A descendant of a node x is a node y that is on 
	the path from node x to some leaf node.

	Example 1:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]
	Output: 2
	Explanation: The lowest common ancestor of nodes 4 and 7 is node 2.

	Example 2:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1]
	Output: 1
	Explanation: The lowest common ancestor of a single node is the node itself.

	Example 3:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4]
	Output: 5
	Explanation: The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5.

	Example 4:
	Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [0,1,2,3,4,5,6,7,8]
	Output: 3
	Explanation: The lowest common ancestor of all the nodes is the root node.

	Constraints:
	* The number of nodes in the tree is in the range [1, 104].
	* -109 <= Node.val <= 109
	* All Node.val are unique.
	* All nodes[i] will exist in the tree.
	* All nodes[i] are distinct."""

    def lowestCommonAncestor(self, root: 'TreeNode', nodes: 'List[TreeNode]') -> 'TreeNode':
        nodes = set(nodes)
        
        @cache
        def fn(node):
            if not node: return # edge case 
            if node in nodes or fn(node.left) and fn(node.right): return node
            return fn(node.left) or fn(node.right)
        
        return fn(root)


    """1678. Goal Parser Interpretation (Easy)
	You own a Goal Parser that can interpret a string command. The command 
	consists of an alphabet of "G", "()" and/or "(al)" in some order. The Goal 
	Parser will interpret "G" as the string "G", "()" as the string "o", and 
	"(al)" as the string "al". The interpreted strings are then concatenated in 
	the original order. Given the string command, return the Goal Parser's 
	interpretation of command.

	Example 1:
	Input: command = "G()(al)"
	Output: "Goal"
	Explanation: The Goal Parser interprets the command as follows:
	G -> G
	() -> o
	(al) -> al
	The final concatenated result is "Goal".

	Example 2:
	Input: command = "G()()()()(al)"
	Output: "Gooooal"

	Example 3:
	Input: command = "(al)G(al)()()G"
	Output: "alGalooG"

	Constraints:
	* 1 <= command.length <= 100
	* command consists of "G", "()", and/or "(al)" in some order."""

    def interpret(self, command: str) -> str:
        return command.replace("()", "o").replace("(al)", "al")


    """1679. Max Number of K-Sum Pairs (Medium)
	You are given an integer array nums and an integer k. In one operation, you 
	can pick two numbers from the array whose sum equals k and remove them from 
	the array. Return the maximum number of operations you can perform on the 
	array.

	Example 1:
	Input: nums = [1,2,3,4], k = 5
	Output: 2
	Explanation: Starting with nums = [1,2,3,4]:
	- Remove numbers 1 and 4, then nums = [2,3]
	- Remove numbers 2 and 3, then nums = []
	There are no more pairs that sum up to 5, hence a total of 2 operations.

	Example 2:
	Input: nums = [3,1,3,4,3], k = 6
	Output: 1
	Explanation: Starting with nums = [3,1,3,4,3]:
	- Remove the first two 3's, then nums = [1,4,3]
	There are no more pairs that sum up to 6, hence a total of 1 operation.

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^9
	* 1 <= k <= 10^9"""

    def maxOperations(self, nums: List[int], k: int) -> int:
        freq = {}
        for x in nums: freq[x] = 1 + freq.get(x, 0)
        
        ans = 0
        for x, v in freq.items(): 
            if k - x in freq: 
                if x == k - x: ans += freq[x]//2
                elif x < k - x: ans += min(freq[x], freq[k-x])
        return ans 


    """1680. Concatenation of Consecutive Binary Numbers (Medium)
	Given an integer n, return the decimal value of the binary string formed by 
	concatenating the binary representations of 1 to n in order, modulo 109 + 7.

	Example 1:
	Input: n = 1
	Output: 1
	Explanation: "1" in binary corresponds to the decimal value 1. 

	Example 2:
	Input: n = 3
	Output: 27
	Explanation: In binary, 1, 2, and 3 corresponds to "1", "10", and "11". 
	             After concatenating them, we have "11011", which corresponds 
	             to the decimal value 27.

	Example 3:
	Input: n = 12
	Output: 505379714
	Explanation: The concatenation results in "1101110010111011110001001101010111100".
	             The decimal value of that is 118505380540. After modulo 10^9 + 7, 
	             the result is 505379714.

	Constraints: 1 <= n <= 10^5"""

    def concatenatedBinary(self, n: int) -> int:
        ans = k = 0
        for x in range(1, n+1): 
            if not x & x-1: k += 1
            ans = ((ans << k) + x) % 1_000_000_007
        return ans 


    """1682. Longest Palindromic Subsequence II (Medium)
	A subsequence of a string s is considered a good palindromic subsequence if:
	* It is a subsequence of s.
	* It is a palindrome (has the same value if reversed).
	* It has an even length.
	* No two consecutive characters are equal, except the two middle ones.
	For example, if s = "abcabcabb", then "abba" is considered a good palindromic 
	subsequence, while "bcb" (not even length) and "bbbb" (has equal consecutive 
	characters) are not. Given a string s, return the length of the longest good 
	palindromic subsequence in s.

	Example 1:
	Input: s = "bbabab"
	Output: 4
	Explanation: The longest good palindromic subsequence of s is "baab".

	Example 2:
	Input: s = "dcbccacdb"
	Output: 4
	Explanation: The longest good palindromic subsequence of s is "dccd".

	Constraints:
	* 1 <= s.length <= 250
	* s consists of lowercase English letters."""

    def longestPalindromeSubseq(self, s: str) -> int:
        dp = [[[0]*27 for _ in s] for _ in s] # n x n x 27 
        
        for i in reversed(range(len(s))):
            for j in range(i+1, len(s)):
                for k in range(27): 
                    if s[i] == s[j] != chr(k+96): 
                        dp[i][j][k] = 2 + dp[i+1][j-1][ord(s[i])-96]
                    else: 
                        dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k])
        return dp[0][-1][0]


    """1684. Count the Number of Consistent Strings (Easy)
	You are given a string allowed consisting of distinct characters and an 
	array of strings words. A string is consistent if all characters in the 
	string appear in the string allowed. Return the number of consistent 
	strings in the array words.

	Example 1:
	Input: allowed = "ab", words = ["ad","bd","aaab","baa","badab"]
	Output: 2
	Explanation: Strings "aaab" and "baa" are consistent since they only 
	             contain characters 'a' and 'b'.

	Example 2:
	Input: allowed = "abc", words = ["a","b","c","ab","ac","bc","abc"]
	Output: 7
	Explanation: All strings are consistent.

	Example 3:
	Input: allowed = "cad", words = ["cc","acd","b","ba","bac","bad","ac","d"]
	Output: 4
	Explanation: Strings "cc", "acd", "ac", and "d" are consistent.

	Constraints:
	* 1 <= words.length <= 104
	* 1 <= allowed.length <= 26
	* 1 <= words[i].length <= 10
	* The characters in allowed are distinct.
	* words[i] and allowed contain only lowercase English letters."""

    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:
        return sum(all(c in allowed for c in word) for word in words)


    """1687. Delivering Boxes from Storage to Ports (Hard)
	You have the task of delivering some boxes from storage to their ports 
	using only one ship. However, this ship has a limit on the number of boxes 
	and the total weight that it can carry. You are given an array boxes, where 
	boxes[i] = [portsi, weighti], and three integers portsCount, maxBoxes, and 
	maxWeight.
	* portsi is the port where you need to deliver the ith box and weightsi is 
	  the weight of the ith box.
	* portsCount is the number of ports.
	* maxBoxes and maxWeight are the respective box and weight limits of the 
	  ship.
	The boxes need to be delivered in the order they are given. The ship will 
	follow these steps:
	* The ship will take some number of boxes from the boxes queue, not 
	  violating the maxBoxes and maxWeight constraints.
	* For each loaded box in order, the ship will make a trip to the port the 
	  box needs to be delivered to and deliver it. If the ship is already at 
	  the correct port, no trip is needed, and the box can immediately be 
	  delivered.
	* The ship then makes a return trip to storage to take more boxes from the 
	  queue.
	The ship must end at storage after all the boxes have been delivered. 
	Return the minimum number of trips the ship needs to make to deliver all 
	boxes to their respective ports.

	Example 1:
	Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3
	Output: 4
	Explanation: The optimal strategy is as follows: 
	             - The ship takes all the boxes in the queue, goes to port 1, 
	               then port 2, then port 1 again, then returns to storage. 4 
	               trips.
	             So the total number of trips is 4. Note that the first and 
	             third boxes cannot be delivered together because the boxes 
	             need to be delivered in order (i.e. the second box needs to be 
	             delivered at port 2 before the third box).
	
	Example 2:
	Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6
	Output: 6
	Explanation: The optimal strategy is as follows: 
	             - The ship takes the first box, goes to port 1, then returns 
	               to storage. 2 trips.
	             - The ship takes the second, third and fourth boxes, goes to 
	               port 3, then returns to storage. 2 trips.
	             - The ship takes the fifth box, goes to port 3, then returns 
	               to storage. 2 trips.
	             So the total number of trips is 2 + 2 + 2 = 6.
	
	Example 3:
	Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7
	Output: 6
	Explanation: The optimal strategy is as follows:
	             - The ship takes the first and second boxes, goes to port 1, 
	               then returns to storage. 2 trips.
	             - The ship takes the third and fourth boxes, goes to port 2, 
	               then returns to storage. 2 trips.
	             - The ship takes the fifth and sixth boxes, goes to port 3, 
	               then returns to storage. 2 trips.
	             So the total number of trips is 2 + 2 + 2 = 6.
	
	Example 4:
	Input: boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7
	Output: 14
	Explanation: The optimal strategy is as follows:
	             - The ship takes the first box, goes to port 2, then storage. 
	               2 trips.
	             - The ship takes the second box, goes to port 2, then storage. 
	               2 trips.
	             - The ship takes the third and fourth boxes, goes to port 3, 
	               then storage. 2 trips.
	             - The ship takes the fifth box, goes to port 3, then storage. 
	               2 trips.
	             - The ship takes the sixth and seventh boxes, goes to port 3, 
	               then port 4, then storage. 3 trips. 
	             - The ship takes the eighth and ninth boxes, goes to port 1, 
	               then port 5, then storage. 3 trips.
	             So the total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14.

	Constraints:
	* 1 <= boxes.length <= 10^5
	* 1 <= portsCount, maxBoxes, maxWeight <= 10^5
	* 1 <= portsi <= portsCount
	* 1 <= weightsi <= maxWeight"""

    def boxDelivering(self, boxes: List[List[int]], portsCount: int, maxBoxes: int, maxWeight: int) -> int:
        dp = [0] + [inf]*len(boxes)
        trips = 2
        ii = 0
        for i in range(len(boxes)):
            maxWeight -= boxes[i][1]
            if i and boxes[i-1][0] != boxes[i][0]: trips += 1
            while maxBoxes < i - ii + 1 or maxWeight < 0 or ii < i and dp[ii] == dp[ii+1]:
                maxWeight += boxes[ii][1]
                if boxes[ii][0] != boxes[ii+1][0]: trips-=1
                ii += 1
            dp[i+1] = dp[ii] + trips
        return dp[-1] 


    """1688. Count of Matches in Tournament (Easy)
	You are given an integer n, the number of teams in a tournament that has 
	strange rules: 
	* If the current number of teams is even, each team gets paired with another 
	  team. A total of n / 2 matches are played, and n / 2 teams advance to the 
	  next round.
	* If the current number of teams is odd, one team randomly advances in the 
	  tournament, and the rest gets paired. A total of (n - 1) / 2 matches are 
	  played, and (n - 1) / 2 + 1 teams advance to the next round.
	Return the number of matches played in the tournament until a winner is 
	decided.

	Example 1:
	Input: n = 7
	Output: 6
	Explanation: Details of the tournament: 
	- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.
	- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.
	- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
	Total number of matches = 3 + 2 + 1 = 6.

	Example 2:
	Input: n = 14
	Output: 13
	Explanation: Details of the tournament:
	- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.
	- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.
	- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.
	- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
	Total number of matches = 7 + 3 + 2 + 1 = 13.

	Constraints: 1 <= n <= 200"""

    def numberOfMatches(self, n: int) -> int:
        return n-1


    """1689. Partitioning Into Minimum Number Of Deci-Binary Numbers (Medium)
	A decimal number is called deci-binary if each of its digits is either 0 or 
	1 without any leading zeros. For example, 101 and 1100 are deci-binary, 
	while 112 and 3001 are not. Given a string n that represents a positive 
	decimal integer, return the minimum number of positive deci-binary numbers 
	needed so that they sum up to n.

	Example 1:
	Input: n = "32"
	Output: 3
	Explanation: 10 + 11 + 11 = 32

	Example 2:
	Input: n = "82734"
	Output: 8

	Example 3:
	Input: n = "27346209830709182346"
	Output: 9

	Constraints:
	* 1 <= n.length <= 10^5
	* n consists of only digits.
	* n does not contain any leading zeros and represents a positive integer."""

    def minPartitions(self, n: str) -> int:
        return int(max(n))


    """1690. Stone Game VII (Medium)
	Alice and Bob take turns playing a game, with Alice starting first. There 
	are n stones arranged in a row. On each player's turn, they can remove 
	either the leftmost stone or the rightmost stone from the row and receive 
	points equal to the sum of the remaining stones' values in the row. The 
	winner is the one with the higher score when there are no stones left to 
	remove. Bob found that he will always lose this game (poor Bob, he always 
	loses), so he decided to minimize the score's difference. Alice's goal is 
	to maximize the difference in the score. Given an array of integers stones 
	where stones[i] represents the value of the ith stone from the left, return 
	the difference in Alice and Bob's score if they both play optimally.

	Example 1:
	Input: stones = [5,3,1,4,2]
	Output: 6
	Explanation: 
	- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].
	- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].
	- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].
	- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].
	- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].
	The score difference is 18 - 12 = 6.

	Example 2:
	Input: stones = [7,90,5,1,100,10,10,2]
	Output: 122

	Constraints:
	* n == stones.length
	* 2 <= n <= 1000
	* 1 <= stones[i] <= 1000"""

    def stoneGameVII(self, stones: List[int]) -> int:
        prefix = [0]
        for x in stones: prefix.append(prefix[-1] + x)
        
        n = len(stones)
        dp = [[0]*n for _ in range(n)]
        for i in reversed(range(n)): 
            for j in range(i+1, n): 
                dp[i][j] = max(prefix[j+1] - prefix[i+1] - dp[i+1][j], prefix[j] - prefix[i] - dp[i][j-1])
        return dp[0][-1]


    """1691. Maximum Height by Stacking Cuboids (Hard)
	Given n cuboids where the dimensions of the ith cuboid is 
	cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of 
	cuboids and place them on each other. You can place cuboid i on cuboid j if 
	widthi <= widthj and lengthi <= lengthj and heighti <= heightj. You can 
	rearrange any cuboid's dimensions by rotating it to put it on another 
	cuboid. Return the maximum height of the stacked cuboids.

	Example 1:
	Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]
	Output: 190
	Explanation:
	Cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.
	Cuboid 0 is placed next with the 45x20 side facing down with height 50.
	Cuboid 2 is placed next with the 23x12 side facing down with height 45.
	The total height is 95 + 50 + 45 = 190.

	Example 2:
	Input: cuboids = [[38,25,45],[76,35,3]]
	Output: 76
	Explanation:
	You can't place any of the cuboids on the other.
	We choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.

	Example 3:
	Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]
	Output: 102
	Explanation:
	After rearranging the cuboids, you can see that all cuboids have the same dimension.
	You can place the 11x7 side down on all cuboids so their heights are 17.
	The maximum height of stacked cuboids is 6 * 17 = 102.

	Constraints:
	* n == cuboids.length
	* 1 <= n <= 100
	* 1 <= widthi, lengthi, heighti <= 100"""

    def maxHeight(self, cuboids: List[List[int]]) -> int:
        cuboids = sorted((sorted(x, reverse=True) for x in cuboids), reverse=True)
        
        @cache
        def fn(i, h, l, w): 
            """Return max heights of stacking cuboids[i:]."""
            if i == len(cuboids): return 0 # no cuboids left 
            hi, li, wi = cuboids[i]
            if hi <= h and li <= l and wi <= w: 
                return max(hi + fn(i+1, hi, li, wi), fn(i+1, h, l, w))
            else:
                return fn(i+1, h, l, w)
            
        return fn(0, inf, inf, inf)


    """1694. Reformat Phone Number (Easy)
	You are given a phone number as a string number. number consists of digits, 
	spaces ' ', and/or dashes '-'. You would like to reformat the phone number 
	in a certain manner. Firstly, remove all spaces and dashes. Then, group the 
	digits from left to right into blocks of length 3 until there are 4 or fewer 
	digits. The final digits are then grouped as follows:
	* 2 digits: A single block of length 2.
	* 3 digits: A single block of length 3.
	* 4 digits: Two blocks of length 2 each.
	The blocks are then joined by dashes. Notice that the reformatting process 
	should never produce any blocks of length 1 and produce at most two blocks 
	of length 2. Return the phone number after formatting.

	Example 1:
	Input: number = "1-23-45 6"
	Output: "123-456"
	Explanation: The digits are "123456".
	Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is "123".
	Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is "456".
	Joining the blocks gives "123-456".

	Example 2:
	Input: number = "123 4-567"
	Output: "123-45-67"
	Explanation: The digits are "1234567".
	Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is "123".
	Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are "45" and "67".
	Joining the blocks gives "123-45-67".

	Example 3:
	Input: number = "123 4-5678"
	Output: "123-456-78"
	Explanation: The digits are "12345678".
	Step 1: The 1st block is "123".
	Step 2: The 2nd block is "456".
	Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is "78".
	Joining the blocks gives "123-456-78".

	Example 4:
	Input: number = "12"
	Output: "12"

	Example 5:
	Input: number = "--17-5 229 35-39475 "
	Output: "175-229-353-94-75"

	Constraints:
	* 2 <= number.length <= 100
	* number consists of digits and the characters '-' and ' '.
	* There are at least two digits in number."""

    def reformatNumber(self, number: str) -> str:
        number = number.replace("-", "").replace(" ", "") # replacing - and space 
        ans = []
        for i in range(0, len(number), 3): 
            if len(number) - i != 4: ans.append(number[i:i+3])
            else: 
                ans.extend([number[i:i+2], number[i+2:]])
                break 
        return "-".join(ans)


    """1695. Maximum Erasure Value (Medium)
	You are given an array of positive integers nums and want to erase a 
	subarray containing unique elements. The score you get by erasing the 
	subarray is equal to the sum of its elements. Return the maximum score you 
	can get by erasing exactly one subarray. An array b is called to be a 
	subarray of a if it forms a contiguous subsequence of a, that is, if it is 
	equal to a[l],a[l+1],...,a[r] for some (l,r).

	Example 1:
	Input: nums = [4,2,4,5,6]
	Output: 17
	Explanation: The optimal subarray here is [2,4,5,6].

	Example 2:
	Input: nums = [5,2,1,2,5,2,1,2,5]
	Output: 8
	Explanation: The optimal subarray here is [5,2,1] or [1,2,5].

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^4"""

    def maximumUniqueSubarray(self, nums: List[int]) -> int:
        freq = defaultdict(int)
        ans = ii = val = 0 
        for x in nums: 
            val += x
            freq[x] += 1
            while freq[x] > 1: 
                val -= nums[ii]
                freq[nums[ii]] -= 1
                ii += 1
            ans = max(ans, val)
        return ans 


    """1696. Jump Game VI (Medium)
	You are given a 0-indexed integer array nums and an integer k. You are 
	initially standing at index 0. In one move, you can jump at most k steps 
	forward without going outside the boundaries of the array. That is, you can 
	jump from index i to any index in the range [i + 1, min(n - 1, i + k)] 
	inclusive. You want to reach the last index of the array (index n - 1). 
	Your score is the sum of all nums[j] for each index j you visited in the 
	array. Return the maximum score you can get.

	Example 1:
	Input: nums = [1,-1,-2,4,-7,3], k = 2
	Output: 7
	Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] 
	             (underlined above). The sum is 7.

	Example 2:
	Input: nums = [10,-5,-2,4,0,3], k = 3
	Output: 17
	Explanation: You can choose your jumps forming the subsequence [10,4,3] 
	             (underlined above). The sum is 17.
	
	Example 3:
	Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
	Output: 0

	Constraints:
	* 1 <= nums.length, k <= 10^5
	* -104 <= nums[i] <= 10^4"""

    def maxResult(self, nums: List[int], k: int) -> int:
        queue = deque()
        for i in reversed(range(len(nums))): 
            while queue and queue[0][1] - i > k: queue.popleft()
            ans = nums[i]
            if queue: ans += queue[0][0]
            while queue and queue[-1][0] <= ans: queue.pop()
            queue.append((ans, i))
        return ans 


    """1697. Checking Existence of Edge Length Limited Paths (Hard)
	An undirected graph of n nodes is defined by edgeList, where 
	edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with 
	distance disi. Note that there may be multiple edges between two nodes. 
	Given an array queries, where queries[j] = [pj, qj, limitj], your task is 
	to determine for each queries[j] whether there is a path between pj and qj 
	such that each edge on the path has a distance strictly less than limitj. 
	Return a boolean array answer, where answer.length == queries.length and 
	the jth value of answer is true if there is a path for queries[j] is true, 
	and false otherwise.

	Example 1:
	Input: n = 3, 
	       edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], 
	       queries = [[0,1,2],[0,2,5]]
	Output: [false,true]
	Explanation: The above figure shows the given graph. Note that there are 
	             two overlapping edges between 0 and 1 with distances 2 and 16. 
	             For the first query, between 0 and 1 there is no path where 
	             each distance is less than 2, thus we return false for this 
	             query. For the second query, there is a path (0 -> 1 -> 2) of 
	             two edges with distances less than 5, thus we return true for 
	             this query.

	Example 2:
	Input: n = 5, 
	       edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], 
	       queries = [[0,4,14],[1,4,13]]
	Output: [true,false]
	Exaplanation: The above figure shows the given graph.

	Constraints:
	* 2 <= n <= 10^5
	* 1 <= edgeList.length, queries.length <= 10^5
	* edgeList[i].length == 3
	* queries[j].length == 3
	* 0 <= ui, vi, pj, qj <= n - 1
	* ui != vi
	* pj != qj
	* 1 <= disi, limitj <= 109
	* There may be multiple edges between two nodes."""

    def distanceLimitedPathsExist(self, n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:
        queries = sorted((w, p, q, i) for i, (p, q, w) in enumerate(queries))
        edgeList = sorted((w, u, v) for u, v, w in edgeList)
        
        uf = UnionFind(n)
        
        ans = [None] * len(queries)
        ii = 0
        for w, p, q, i in queries: 
            while ii < len(edgeList) and edgeList[ii][0] < w: 
                _, u, v = edgeList[ii]
                uf.union(u, v)
                ii += 1
            ans[i] = uf.find(p) == uf.find(q)
        return ans 


    """1700. Number of Students Unable to Eat Lunch (Easy)
	The school cafeteria offers circular and square sandwiches at lunch break, 
	referred to by numbers 0 and 1 respectively. All students stand in a queue. 
	Each student either prefers square or circular sandwiches. The number of 
	sandwiches in the cafeteria is equal to the number of students. The 
	sandwiches are placed in a stack. At each step:
	* If the student at the front of the queue prefers the sandwich on the top 
	  of the stack, they will take it and leave the queue.
	* Otherwise, they will leave it and go to the queue's end.
	This continues until none of the queue students want to take the top 
	sandwich and are thus unable to eat. You are given two integer arrays 
	students and sandwiches where sandwiches[i] is the type of the i​​​​​​th 
	sandwich in the stack (i = 0 is the top of the stack) and students[j] is 
	the preference of the j​​​​​​th student in the initial queue (j = 0 is the front 
	of the queue). Return the number of students that are unable to eat.

	Example 1:
	Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
	Output: 0 
	Explanation:
	- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].
	- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].
	- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].
	- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].
	- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].
	- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].
	- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].
	- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].
	Hence all students are able to eat.

	Example 2:
	Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]
	Output: 3

	Constraints:
	* 1 <= students.length, sandwiches.length <= 100
	* students.length == sandwiches.length
	* sandwiches[i] is 0 or 1.
	* students[i] is 0 or 1."""

    def countStudents(self, students: List[int], sandwiches: List[int]) -> int:
        ss = sum(students)
        for i, x in enumerate(sandwiches): 
            if (x and not ss) or (not x and ss == len(sandwiches) - i): return len(sandwiches)-i
            ss -= x 
        return 0 


    """1701. Average Waiting Time (Medium)
	There is a restaurant with a single chef. You are given an array customers, 
	where customers[i] = [arrivali, timei]:
	* arrivali is the arrival time of the ith customer. The arrival times are 
	  sorted in non-decreasing order.
	* timei is the time needed to prepare the order of the ith customer.
	When a customer arrives, he gives the chef his order, and the chef starts 
	preparing it once he is idle. The customer waits till the chef finishes 
	preparing his order. The chef does not prepare food for more than one 
	customer at a time. The chef prepares food for customers in the order they 
	were given in the input. Return the average waiting time of all customers. 
	Solutions within 10-5 from the actual answer are considered accepted.

	Example 1:
	Input: customers = [[1,2],[2,5],[4,3]]
	Output: 5.00000
	Explanation:
	1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.
	2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.
	3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.
	So the average waiting time = (2 + 6 + 7) / 3 = 5.

	Example 2:
	Input: customers = [[5,2],[5,4],[10,3],[20,1]]
	Output: 3.25000
	Explanation:
	1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.
	2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.
	3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.
	4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.
	So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.
	 
	Constraints:
	* 1 <= customers.length <= 10^5
	* 1 <= arrivali, timei <= 10^4
	* arrivali <= arrivali+1"""

    def averageWaitingTime(self, customers: List[List[int]]) -> float:
        ans = t = 0
        for arrvl, tt in customers: 
            t = max(t, arrvl) + tt
            ans += t - arrvl
        return ans/len(customers)


    """1702. Maximum Binary String After Change (Medium)
	You are given a binary string binary consisting of only 0's or 1's. You can 
	apply each of the following operations any number of times:
	* Operation 1: If the number contains the substring "00", you can replace it with "10".
	  - For example, "00010" -> "10010"
	* Operation 2: If the number contains the substring "10", you can replace it with "01".
	  - For example, "00010" -> "00001"
	Return the maximum binary string you can obtain after any number of 
	operations. Binary string x is greater than binary string y if x's decimal 
	representation is greater than y's decimal representation.

	Example 1:
	Input: binary = "000110"
	Output: "111011"
	Explanation: A valid transformation sequence can be:
	"000110" -> "000101" 
	"000101" -> "100101" 
	"100101" -> "110101" 
	"110101" -> "110011" 
	"110011" -> "111011"

	Example 2:
	Input: binary = "01"
	Output: "01"
	Explanation: "01" cannot be transformed any further.

	Constraints:
	* 1 <= binary.length <= 10^5
	* binary consist of '0' and '1'."""

    def maximumBinaryString(self, binary: str) -> str:
        if binary.count("0") <= 1: return binary 
        ones = binary.count("1", binary.index("0"))
        return (len(binary)-ones-1)*"1" + "0" + ones*"1"


    """1703. Minimum Adjacent Swaps for K Consecutive Ones (Hard)
	You are given an integer array, nums, and an integer k. nums comprises of 
	only 0's and 1's. In one move, you can choose two adjacent indices and swap 
	their values. Return the minimum number of moves required so that nums has 
	k consecutive 1's.

	Example 1:
	Input: nums = [1,0,0,1,0,1], k = 2
	Output: 1
	Explanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.

	Example 2:
	Input: nums = [1,0,0,0,0,0,1,1], k = 3
	Output: 5
	Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].

	Example 3:
	Input: nums = [1,1,0,1], k = 2
	Output: 0
	Explanation: nums already has 2 consecutive 1's.

	Constraints:
	* 1 <= nums.length <= 10^5
	* nums[i] is 0 or 1.
	* 1 <= k <= sum(nums)"""

    def minMoves(self, nums: List[int], k: int) -> int:
        loc = [i for i, x in enumerate(nums) if x]
        prefix = [0]
        for x in loc: prefix.append(prefix[-1] + x)
        
        ans = inf
        for i in range(len(loc)-k+1): 
            ans = min(ans, (prefix[i+k] - prefix[i+(k+1)//2]) - (prefix[i+k//2] - prefix[i]))
        return ans - (k//2)*((k+1)//2)


    """1704. Determine if String Halves Are Alike (Easy)
	You are given a string s of even length. Split this string into two halves 
	of equal lengths, and let a be the first half and b be the second half. Two 
	strings are alike if they have the same number of vowels ('a', 'e', 'i', 
	'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and 
	lowercase letters. Return true if a and b are alike. Otherwise, return 
	false.

	Example 1:
	Input: s = "book"
	Output: true
	Explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. 
	             Therefore, they are alike.

	Example 2:
	Input: s = "textbook"
	Output: false
	Explanation: a = "text" and b = "book". a has 1 vowel whereas b has 2. 
	             Therefore, they are not alike. Notice that the vowel o is 
	             counted twice.

	Example 3:
	Input: s = "MerryChristmas"
	Output: false

	Example 4:
	Input: s = "AbCdEfGh"
	Output: true

	Constraints:
	* 2 <= s.length <= 1000
	* s.length is even.
	* s consists of uppercase and lowercase letters."""

    def halvesAreAlike(self, s: str) -> bool:
        cnt = 0
        for i, c in enumerate(s):
            if c in "aeiouAEIOU": cnt += 1 if i < len(s)//2 else -1
        return cnt == 0


    """1705. Maximum Number of Eaten Apples (Medium)
	There is a special kind of apple tree that grows apples every day for n 
	days. On the ith day, the tree grows apples[i] apples that will rot after 
	days[i] days, that is on day i + days[i] the apples will be rotten and 
	cannot be eaten. On some days, the apple tree does not grow any apples, 
	which are denoted by apples[i] == 0 and days[i] == 0. You decided to eat at 
	most one apple a day (to keep the doctors away). Note that you can keep 
	eating after the first n days. Given two integer arrays days and apples of 
	length n, return the maximum number of apples you can eat.

	Example 1:
	Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]
	Output: 7
	Explanation: You can eat 7 apples:
	- On the first day, you eat an apple that grew on the first day.
	- On the second day, you eat an apple that grew on the second day.
	- On the third day, you eat an apple that grew on the second day. After 
	  this day, the apples that grew on the third day rot.
	- On the fourth to the seventh days, you eat apples that grew on the fourth 
	  day.

	Example 2:
	Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]
	Output: 5
	Explanation: You can eat 5 apples:
	- On the first to the third day you eat apples that grew on the first day.
	- Do nothing on the fouth and fifth days.
	- On the sixth and seventh days you eat apples that grew on the sixth day.

	Constraints:
	* apples.length == n
	* days.length == n
	* 1 <= n <= 2 * 104
	* 0 <= apples[i], days[i] <= 2 * 104
	* days[i] = 0 if and only if apples[i] = 0."""

    def eatenApples(self, apples: List[int], days: List[int]) -> int:
        ans = 0
        
        pq = [] # min-heap 
        for i, (x, d) in enumerate(zip(apples, days)): 
            while pq and pq[0][0] <= i: heappop(pq) # rotten 
            if x: heappush(pq, (i+d, x))
            if pq: 
                ii, x = heappop(pq)
                if x-1: heappush(pq, (ii, x-1))
                ans += 1
        
        i += 1
        while pq: 
            ii, x = heappop(pq)
            x = min(x, ii-i)
            ans += x
            i += x 
        return ans 


    """1706. Where Will the Ball Fall (Medium)
	You have a 2-D grid of size m x n representing a box, and you have n balls. 
	The box is open on the top and bottom sides. Each cell in the box has a 
	diagonal board spanning two corners of the cell that can redirect a ball to 
	the right or to the left.
	* A board that redirects the ball to the right spans the top-left corner to 
	  the bottom-right corner and is represented in the grid as 1.
	* A board that redirects the ball to the left spans the top-right corner to 
	  the bottom-left corner and is represented in the grid as -1.
	We drop one ball at the top of each column of the box. Each ball can get 
	stuck in the box or fall out of the bottom. A ball gets stuck if it hits a 
	"V" shaped pattern between two boards or if a board redirects the ball into 
	either wall of the box. Return an array answer of size n where answer[i] is 
	the column that the ball falls out of at the bottom after dropping the ball 
	from the ith column at the top, or -1 if the ball gets stuck in the box.

	Example 1:
	Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
	Output: [1,-1,-1,-1,-1]
	Explanation: This example is shown in the photo.
	Ball b0 is dropped at column 0 and falls out of the box at column 1.
	Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.
	Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.
	Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.
	Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.

	Example 2:
	Input: grid = [[-1]]
	Output: [-1]
	Explanation: The ball gets stuck against the left wall.

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 100
	* grid[i][j] is 1 or -1."""

    def findBall(self, grid: List[List[int]]) -> List[int]:
        m, n = len(grid), len(grid[0]) # dimensions
        ans = [-1]*n 
        for j in range(n): 
            k = j
            for i in range(m):
                kk = k + grid[i][k]
                if not 0 <= kk < n or grid[i][k] * grid[i][kk] < 0: break
                k = kk 
            else: ans[j] = k # no break 
        return ans 


    """1707. Maximum XOR With an Element From Array (Hard)
	You are given an array nums consisting of non-negative integers. You are 
	also given a queries array, where queries[i] = [xi, mi]. The answer to the 
	ith query is the maximum bitwise XOR value of xi and any element of nums 
	that does not exceed mi. In other words, the answer is max(nums[j] XOR xi) 
	for all j such that nums[j] <= mi. If all elements in nums are larger than 
	mi, then the answer is -1. Return an integer array answer where 
	answer.length == queries.length and answer[i] is the answer to the ith 
	query.

	Example 1:
	Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]
	Output: [3,3,7]
	Explanation:
	1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 
	   1 XOR 3 = 2. The larger of the two is 3.
	2) 1 XOR 2 = 3.
	3) 5 XOR 2 = 7.

	Example 2:
	Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]
	Output: [15,-1,5]

	Constraints:
	* 1 <= nums.length, queries.length <= 10^5
	* queries[i].length == 2
	* 0 <= nums[j], xi, mi <= 10^9"""

	# class Trie: 
	#     def __init__(self):
	#         self.root = {}
	        
	#     def __bool__(self):
	#         return bool(self.root)
	    
	#     def insert(self, num):
	#         node = self.root 
	#         for x in bin(num)[2:].zfill(32): 
	#             node = node.setdefault(int(x), {})
	#         node["#"] = num
	    
	#     def query(self, num): 
	#         node = self.root
	#         for x in bin(num)[2:].zfill(32):
	#             node = node.get(1 - int(x)) or node.get(int(x))
	#         return num ^ node["#"]

    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        nums.sort()
        queries = sorted((m, x, i) for i, (x, m) in enumerate(queries))
        
        ans = [-1]*len(queries)
        k = 0
        trie = Trie()
        for m, x, i in queries: 
            while k < len(nums) and nums[k] <= m: 
                trie.insert(nums[k])
                k += 1
            if trie: ans[i] = trie.query(x)
        return ans 


    """1708. Largest Subarray Length K (Easy)
	An array A is larger than some array B if for the first index i where 
	A[i] != B[i], A[i] > B[i]. For example, consider 0-indexing:
	* [1,3,2,4] > [1,2,2,4], since at index 1, 3 > 2.
	* [1,4,4,4] < [2,1,1,1], since at index 0, 1 < 2.
	A subarray is a contiguous subsequence of the array. Given an integer array 
	nums of distinct integers, return the largest subarray of nums of length k.

	Example 1:
	Input: nums = [1,4,5,2,3], k = 3
	Output: [5,2,3]
	Explanation: The subarrays of size 3 are: [1,4,5], [4,5,2], and [5,2,3]. Of 
	             these, [5,2,3] is the largest.

	Example 2:
	Input: nums = [1,4,5,2,3], k = 4
	Output: [4,5,2,3]
	Explanation: The subarrays of size 4 are: [1,4,5,2], and [4,5,2,3]. Of 
	             these, [4,5,2,3] is the largest.
	
	Example 3:
	Input: nums = [1,4,5,2,3], k = 1
	Output: [5]

	Constraints:
	* 1 <= k <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^9
	* All the integers of nums are unique.

	Follow up: What if the integers in nums are not distinct?"""

    def largestSubarray(self, nums: List[int], k: int) -> List[int]:
        ii = 0
        for i in range(len(nums)-k+1): 
            if nums[i] > nums[ii]: ii = i
        return nums[ii:ii+k]


    """1710. Maximum Units on a Truck (Easy)
	You are assigned to put some amount of boxes onto one truck. You are given 
	a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:
	* numberOfBoxesi is the number of boxes of type i.
	* numberOfUnitsPerBoxi is the number of units in each box of the type i.
	You are also given an integer truckSize, which is the maximum number of 
	boxes that can be put on the truck. You can choose any boxes to put on the 
	truck as long as the number of boxes does not exceed truckSize. Return the 
	maximum total number of units that can be put on the truck.

	Example 1:
	Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
	Output: 8
	Explanation: There are:
	- 1 box of the first type that contains 3 units.
	- 2 boxes of the second type that contain 2 units each.
	- 3 boxes of the third type that contain 1 unit each.
	You can take all the boxes of the first and second types, and one box of the third type.
	The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.

	Example 2:
	Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10
	Output: 91

	Constraints:
	* 1 <= boxTypes.length <= 1000
	* 1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000
	* 1 <= truckSize <= 106"""

    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:
        ans = 0 
        for boxes, units in sorted(boxTypes, key=lambda x: x[1], reverse=True): 
            boxes = min(boxes, truckSize)
            ans += boxes * units
            truckSize -= boxes
        return ans 


    """1711. Count Good Meals (Medium)
	A good meal is a meal that contains exactly two different food items with a 
	sum of deliciousness equal to a power of two. You can pick any two different 
	foods to make a good meal. Given an array of integers deliciousness where 
	deliciousness[i] is the deliciousness of the i​​​​​​th​​​​​​​​ item of food, return the 
	number of different good meals you can make from this list modulo 10^9 + 7. 
	Note that items with different indices are considered different even if they 
	have the same deliciousness value.

	Example 1:
	Input: deliciousness = [1,3,5,7,9]
	Output: 4
	Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).
	Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.

	Example 2:
	Input: deliciousness = [1,1,1,3,3,3,7]
	Output: 15
	Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.

	Constraints:
	* 1 <= deliciousness.length <= 10^5
	* 0 <= deliciousness[i] <= 2^20"""

    def countPairs(self, deliciousness: List[int]) -> int:
        ans = 0
        freq = defaultdict(int)
        for x in deliciousness: 
            for k in range(22): ans += freq[2**k - x]
            freq[x] += 1
        return ans % 1_000_000_007


    """1712. Ways to Split Array Into Three Subarrays (Medium)
	A split of an integer array is good if:
	* The array is split into three non-empty contiguous subarrays - named left, 
	  mid, right respectively from left to right.
	* The sum of the elements in left is less than or equal to the sum of the 
	  elements in mid, and the sum of the elements in mid is less than or equal 
	  to the sum of the elements in right.
	Given nums, an array of non-negative integers, return the number of good 
	ways to split nums. As the number may be too large, return it modulo 10^9 + 7.

	Example 1:
	Input: nums = [1,1,1]
	Output: 1
	Explanation: The only good way to split nums is [1] [1] [1].

	Example 2:
	Input: nums = [1,2,2,2,5,0]
	Output: 3
	Explanation: There are three good ways of splitting nums:
	[1] [2] [2,2,5,0]
	[1] [2,2] [2,5,0]
	[1,2] [2,2] [5,0]

	Example 3:
	Input: nums = [3,2,1]
	Output: 0
	Explanation: There is no good way to split nums.

	Constraints:
	* 3 <= nums.length <= 10^5
	* 0 <= nums[i] <= 10^4"""

    def waysToSplit(self, nums: List[int]) -> int:
        prefix = [0]
        for x in nums: prefix.append(prefix[-1] + x)
        
        ans = j = k = 0 
        for i in range(1, len(nums)): 
            j = max(j, i+1)
            while j < len(nums) and 2*prefix[i] > prefix[j]: j += 1
            k = max(k, j)
            while k < len(nums) and 2*prefix[k] <= prefix[i] + prefix[-1]: k += 1
            ans += k - j 
        return ans % 1_000_000_007


    """1713. Minimum Operations to Make a Subsequence (Hard)
	You are given an array target that consists of distinct integers and 
	another integer array arr that can have duplicates. In one operation, you 
	can insert any integer at any position in arr. For example, if arr = [1,4,1,2], 
	you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can 
	insert the integer at the very beginning or end of the array. Return the 
	minimum number of operations needed to make target a subsequence of arr. A 
	subsequence of an array is a new array generated from the original array by 
	deleting some elements (possibly none) without changing the remaining 
	elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] 
	(the underlined elements), while [2,4,2] is not.

	Example 1:
	Input: target = [5,1,3], arr = [9,4,2,3,4]
	Output: 2
	Explanation: You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr.

	Example 2:
	Input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]
	Output: 3

	Constraints:
	* 1 <= target.length, arr.length <= 10^5
	* 1 <= target[i], arr[i] <= 10^9
	* target contains no duplicates."""

    def minOperations(self, target: List[int], arr: List[int]) -> int:
        mp = {x: i for i, x in enumerate(target)}
        stack = []
        for x in arr: 
            if x in mp: 
                i = bisect_left(stack, mp[x])
                if i < len(stack): stack[i] = mp[x]
                else: stack.append(mp[x])
        return len(target) - len(stack)


    """1716. Calculate Money in Leetcode Bank (Easy)
	Hercy wants to save money for his first car. He puts money in the Leetcode 
	bank every day. He starts by putting in $1 on Monday, the first day. Every 
	day from Tuesday to Sunday, he will put in $1 more than the day before. On 
	every subsequent Monday, he will put in $1 more than the previous Monday. 
	Given n, return the total amount of money he will have in the Leetcode bank 
	at the end of the nth day.

	Example 1:
	Input: n = 4
	Output: 10
	Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.

	Example 2:
	Input: n = 10
	Output: 37
	Explanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + 
	             (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only 
	             puts in $2.

	Example 3:
	Input: n = 20
	Output: 96
	Explanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + 
	             (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.

	Constraints: 1 <= n <= 1000"""

    def totalMoney(self, n: int) -> int:
        q, r = divmod(n, 7)
        return ((7*q + (49+2*r))*q + r*(r+1))//2


    """1716. Calculate Money in Leetcode Bank (Easy)
	Hercy wants to save money for his first car. He puts money in the Leetcode 
	bank every day. He starts by putting in $1 on Monday, the first day. Every 
	day from Tuesday to Sunday, he will put in $1 more than the day before. On 
	every subsequent Monday, he will put in $1 more than the previous Monday. 
	Given n, return the total amount of money he will have in the Leetcode bank 
	at the end of the nth day.

	Example 1:
	Input: n = 4
	Output: 10
	Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.

	Example 2:
	Input: n = 10
	Output: 37
	Explanation: After the 10th day, the total is 
	             (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on 
	             the 2nd Monday, Hercy only puts in $2.

	Example 3:
	Input: n = 20
	Output: 96
	Explanation: After the 20th day, the total is 
	            (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.

	Constraints: 1 <= n <= 1000"""

    def totalMoney(self, n: int) -> int:
        ans = val = 0
        for x in range(n): 
            if x % 7 == 0: val = x//7 # reset 
            val += 1
            ans += val
        return ans 


    """1717. Maximum Score From Removing Substrings (Medium)
	You are given a string s and two integers x and y. You can perform two 
	types of operations any number of times.
	* Remove substring "ab" and gain x points.
	  + For example, when removing "ab" from "cabxbae" it becomes "cxbae".
	* Remove substring "ba" and gain y points.
	  + For example, when removing "ba" from "cabxbae" it becomes "cabxe".
	Return the maximum points you can gain after applying the above operations 
	on s.

	Example 1:
	Input: s = "cdbcbbaaabab", x = 4, y = 5
	Output: 19
	Explanation:
	- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
	- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
	- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
	- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
	Total score = 5 + 4 + 5 + 5 = 19.

	Example 2:
	Input: s = "aabbaaxybbaabb", x = 5, y = 4
	Output: 20

	Constraints:
	* 1 <= s.length <= 10^5
	* 1 <= x, y <= 10^4
	* s consists of lowercase English letters."""

    def maximumGain(self, s: str, x: int, y: int) -> int:
        a, b = "a", "b"
        if x < y: 
            x, y = y, x
            a, b = b, a
        ans = cnt0 = cnt1 = 0
        for c in s: 
            if c not in "ab": 
                ans += min(cnt0, cnt1) * y
                cnt0 = cnt1 = 0 
            elif c == b:
                if cnt0: 
                    cnt0 -= 1
                    ans += x
                else: cnt1 += 1
            else: cnt0 += 1
        return ans + min(cnt0, cnt1) * y


    """1718. Construct the Lexicographically Largest Valid Sequence (Medium)
	Given an integer n, find a sequence that satisfies all of the following:
	* The integer 1 occurs once in the sequence.
	* Each integer between 2 and n occurs twice in the sequence.
	* For every integer i between 2 and n, the distance between the two 
	  occurrences of i is exactly i.
	The distance between two numbers on the sequence, a[i] and a[j], is the 
	absolute difference of their indices, |j - i|. Return the lexicographically 
	largest sequence. It is guaranteed that under the given constraints, there 
	is always a solution. A sequence a is lexicographically larger than a 
	sequence b (of the same length) if in the first position where a and b 
	differ, sequence a has a number greater than the corresponding number in b. 
	For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because 
	the first position they differ is at the third number, and 9 is greater 
	than 5.

	Example 1:
	Input: n = 3
	Output: [3,1,2,3,2]
	Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the 
	             lexicographically largest valid sequence.

	Example 2:
	Input: n = 5
	Output: [5,3,1,4,3,5,2,4,2]

	Constraints: 1 <= n <= 20"""

    def constructDistancedSequence(self, n: int) -> List[int]:
        ans = [0]*(2*n-1)
        
        def fn(i): 
            """Return largest sequence after filling in ith position."""
            if i == 2*n-1 or ans[i] and fn(i+1): return True 
            for x in reversed(range(1, n+1)): 
                if x not in ans: 
                    ii = x if x > 1 else 0 
                    if i+ii < 2*n-1 and ans[i] == ans[i+ii] == 0: 
                        ans[i] = ans[i+ii] = x
                        if fn(i+1): return True 
                        ans[i] = ans[i+ii] = 0 
        
        fn(0)
        return ans 


    """1719. Number Of Ways To Reconstruct A Tree (Hard)
	You are given an array pairs, where pairs[i] = [xi, yi], and:
	* There are no duplicates.
	* xi < yi
	Let ways be the number of rooted trees that satisfy the following 
	conditions:
	* The tree consists of nodes whose values appeared in pairs.
	* A pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or 
	  yi is an ancestor of xi.
	* Note: the tree does not have to be a binary tree.
	Two ways are considered to be different if there is at least one node that 
	has different parents in both ways.

	Return:
	* 0 if ways == 0
	* 1 if ways == 1
	* 2 if ways > 1
	A rooted tree is a tree that has a single root node, and all edges are 
	oriented to be outgoing from the root. An ancestor of a node is any node on 
	the path from the root to that node (excluding the node itself). The root 
	has no ancestors.

	Example 1:
	Input: pairs = [[1,2],[2,3]]
	Output: 1
	Explanation: There is exactly one valid rooted tree, which is shown in the 
	             above figure.

	Example 2:
	Input: pairs = [[1,2],[2,3],[1,3]]
	Output: 2
	Explanation: There are multiple valid rooted trees. Three of them are shown 
	             in the above figures.
	
	Example 3:
	Input: pairs = [[1,2],[2,3],[2,4],[1,5]]
	Output: 0
	Explanation: There are no valid rooted trees.

	Constraints:
	* 1 <= pairs.length <= 10^5
	* 1 <= xi < yi <= 500
	* The elements in pairs are unique."""

    def checkWays(self, pairs: List[List[int]]) -> int:
        graph = {}
        for x, y in pairs: 
            graph.setdefault(x, set()).add(y)
            graph.setdefault(y, set()).add(x)
        
        ans = 1 
        ancestors = set()
        for n in sorted(graph, key=lambda x: len(graph[x]), reverse=True): 
            p = min(ancestors & graph[n], key=lambda x: len(graph[x]), default=None) # immediate ancestor 
            ancestors.add(n)
            if p: 
                if graph[n] - (graph[p] | {p}): return 0 # impossible to have more than ancestor
                if len(graph[n]) == len(graph[p]): ans = 2
            elif len(graph[n]) != len(graph)-1: return 0
        return ans 


    """1721. Swapping Nodes in a Linked List (Medium)
	You are given the head of a linked list, and an integer k. Return the head 
	of the linked list after swapping the values of the kth node from the 
	beginning and the kth node from the end (the list is 1-indexed).

	Example 1:
	Input: head = [1,2,3,4,5], k = 2
	Output: [1,4,3,2,5]

	Example 2:
	Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5
	Output: [7,9,6,6,8,7,3,0,9,5]

	Example 3:
	Input: head = [1], k = 1
	Output: [1]

	Example 4:
	Input: head = [1,2], k = 1
	Output: [2,1]

	Example 5:
	Input: head = [1,2,3], k = 2
	Output: [1,2,3]

	Constraints:
	* The number of nodes in the list is n.
	* 1 <= k <= n <= 10^5
	* 0 <= Node.val <= 100"""

    def swapNodes(self, head: ListNode, k: int) -> ListNode:
        node = n1 = n2 = head 
        while node: 
            k -= 1
            if not k: n1 = node 
            if k < 0: n2 = n2.next 
            node = node.next
        n1.val, n2.val = n2.val, n1.val
        return head 


    """1730. Shortest Path to Get Food (Medium)
	You are starving and you want to eat food as quickly as possible. You want 
	to find the shortest path to arrive at any food cell. You are given an m x n 
	character matrix, grid, of these different types of cells:
	* '*' is your location. There is exactly one '*' cell.
	* '#' is a food cell. There may be multiple food cells.
	* 'O' is free space, and you can travel through these cells.
	* 'X' is an obstacle, and you cannot travel through these cells.
	You can travel to any adjacent cell north, east, south, or west of your 
	current location if there is not an obstacle. Return the length of the 
	shortest path for you to reach any food cell. If there is no path for you 
	to reach food, return -1.

	Example 1:
	Input: grid = [["X","X","X","X","X","X"],
	               ["X","*","O","O","O","X"],
	               ["X","O","O","#","O","X"],
	               ["X","X","X","X","X","X"]]
	Output: 3
	Explanation: It takes 3 steps to reach the food.
	
	Example 2:
	Input: grid = [["X","X","X","X","X"],
	               ["X","*","X","O","X"],
	               ["X","O","X","#","X"],
	               ["X","X","X","X","X"]]
	Output: -1
	Explanation: It is not possible to reach the food.
	
	Example 3:
	Input: grid = [["X","X","X","X","X","X","X","X"],
	               ["X","*","O","X","O","#","O","X"],
	               ["X","O","O","X","O","O","X","X"],
	               ["X","O","O","O","O","#","O","X"],
	               ["X","X","X","X","X","X","X","X"]]
	Output: 6
	Explanation: There can be multiple food cells. It only takes 6 steps to reach the bottom food.
	
	Example 4:
	Input: grid = [["O","*"],
	               ["#","O"]]
	Output: 2

	Example 5:
	Input: grid = [["X","*"],
	               ["#","X"]]
	Output: -1

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 200
	* grid[row][col] is '*', 'X', 'O', or '#'.
	* The grid contains exactly one '*'."""

    def getFood(self, grid: List[List[str]]) -> int:
        m, n = len(grid), len(grid[0]) # dimensions 
        
        for i in range(m):
            for j in range(n): 
                if grid[i][j] == "*": break 
            else: continue 
            break 
            
        ans = 0
        queue = [(i, j)]
        grid[i][j] = "X" # mark visited (upon pushing)
        
        while queue: 
            ans += 1
            newq = []
            for i, j in queue: 
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    if 0 <= ii < m and 0 <= jj < n and grid[ii][jj] != "X": 
                        if grid[ii][jj] == "#": return ans 
                        newq.append((ii, jj))
                        grid[ii][jj] = "X" # mark visited 
            queue = newq
        return -1 


    """1732. Find the Highest Altitude (Easy)
	There is a biker going on a road trip. The road trip consists of n + 1 
	points at different altitudes. The biker starts his trip on point 0 with 
	altitude equal 0. You are given an integer array gain of length n where 
	gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for all 
	(0 <= i < n). Return the highest altitude of a point.

	Example 1:
	Input: gain = [-5,1,5,0,-7]
	Output: 1
	Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.

	Example 2:
	Input: gain = [-4,-3,-2,-1,4,3,2]
	Output: 0
	Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.

	Constraints:
	* n == gain.length
	* 1 <= n <= 100
	* -100 <= gain[i] <= 100"""

    def largestAltitude(self, gain: List[int]) -> int:
        ans = prefix = 0
        for x in gain:
            prefix += x
            ans = max(ans, prefix)
        return ans 


    """1732. Find the Highest Altitude (Easy)
	There is a biker going on a road trip. The road trip consists of n + 1 
	points at different altitudes. The biker starts his trip on point 0 with 
	altitude equal 0. You are given an integer array gain of length n where 
	gain[i] is the net gain in altitude between points i and i + 1 for all 
	(0 <= i < n). Return the highest altitude of a point.

	Example 1:
	Input: gain = [-5,1,5,0,-7]
	Output: 1
	Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.

	Example 2:
	Input: gain = [-4,-3,-2,-1,4,3,2]
	Output: 0
	Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.

	Constraints:
	* n == gain.length
	* 1 <= n <= 100
	* -100 <= gain[i] <= 100"""

    def largestAltitude(self, gain: List[int]) -> int:
        ans = prefix = 0
        for x in gain: 
            prefix += x
            ans = max(ans, prefix)
        return ans 


    """1733. Minimum Number of People to Teach (Medium)
	On a social network consisting of m users and some friendships between 
	users, two users can communicate with each other if they know a common 
	language. You are given an integer n, an array languages, and an array 
	friendships where:
	* There are n languages numbered 1 through n,
	* languages[i] is the set of languages the ith user knows, and
	* friendships[i] = [ui, vi] denotes a friendship between the users ui and vi.
	You can choose one language and teach it to some users so that all friends 
	can communicate with each other. Return the minimum number of users you 
	need to teach. Note that friendships are not transitive, meaning if x is a 
	friend of y and y is a friend of z, this doesn't guarantee that x is a 
	friend of z.

	Example 1:
	Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]
	Output: 1
	Explanation: You can either teach user 1 the second language or user 2 the first language.

	Example 2:
	Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]
	Output: 2
	Explanation: Teach the third language to users 1 and 3, yielding two users to teach.

	Constraints:
	* 2 <= n <= 500
	* languages.length == m
	* 1 <= m <= 500
	* 1 <= languages[i].length <= n
	* 1 <= languages[i][j] <= n
	* 1 <= ui < vi <= languages.length
	* 1 <= friendships.length <= 500
	* All tuples (ui, vi) are unique
	* languages[i] contains only unique values"""

    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:
        languages = [set(x) for x in languages]
        
        users = set()
        for u, v in friendships: 
            if not languages[u-1] & languages[v-1]: 
                users.add(u-1)
                users.add(v-1)
        
        freq = {}
        for i in users: 
            for k in languages[i]:
                freq[k] = 1 + freq.get(k, 0)
        return len(users) - max(freq.values(), default=0)


    """1734. Decode XORed Permutation (Medium)
	There is an integer array perm that is a permutation of the first n 
	positive integers, where n is always odd. It was encoded into another 
	integer array encoded of length n - 1, such that 
	encoded[i] = perm[i] XOR perm[i + 1]. 
	For example, if perm = [1,3,2], then encoded = [2,1]. Given the encoded 
	array, return the original array perm. It is guaranteed that the answer 
	exists and is unique.

	Example 1:
	Input: encoded = [3,1]
	Output: [1,2,3]
	Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]

	Example 2:
	Input: encoded = [6,5,4,6]
	Output: [2,4,1,5,3]

	Constraints:
	* 3 <= n < 10^5
	* n is odd.
	* encoded.length == n - 1"""

    def decode(self, encoded: List[int]) -> List[int]:
        x = reduce(xor, list(range(1, len(encoded) + 2)))
        for i in range(1, len(encoded), 2): x ^= encoded[i]
        ans = [x]
        for x in encoded: ans.append(ans[-1] ^ x)
        return ans 


    """1735. Count Ways to Make Array With Product (Hard)
	You are given a 2D integer array, queries. For each queries[i], where 
	queries[i] = [ni, ki], find the number of different ways you can place 
	positive integers into an array of size ni such that the product of the 
	integers is ki. As the number of ways may be too large, the answer to the 
	ith query is the number of ways modulo 10^9 + 7. Return an integer array 
	answer where answer.length == queries.length, and answer[i] is the answer 
	to the ith query.

	Example 1:
	Input: queries = [[2,6],[5,1],[73,660]]
	Output: [4,1,50734910]
	Explanation: Each query is independent.
	[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].
	[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].
	[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 10^9 + 7 = 50734910.

	Example 2:
	Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]
	Output: [1,2,3,10,5]

	Constraints:
	* 1 <= queries.length <= 10^4
	* 1 <= ni, ki <= 10^4"""

    def waysToFillArray(self, queries: List[List[int]]) -> List[int]:
        spf = list(range(10001)) # spf = smallest prime factor 
        for i in range(4, 10001, 2): spf[i] = 2
        for i in range(3, int(sqrt(10001))+1): 
            if spf[i] == i: 
                for ii in range(i*i, 10001, i): 
                    spf[ii] = min(spf[ii], i)
        
        ans = []
        for n, k in queries: 
            freq = {} # prime factorization via sieve
            while k != 1: 
                freq[spf[k]] = 1 + freq.get(spf[k], 0)
                k //= spf[k]
            val = 1
            for x in freq.values(): 
                val *= comb(n+x-1, x)
            ans.append(val % 1_000_000_007)
        return ans 


    """1736. Latest Time by Replacing Hidden Digits (Easy)
	You are given a string time in the form of hh:mm, where some of the digits 
	in the string are hidden (represented by ?). The valid times are those 
	inclusively between 00:00 and 23:59. Return the latest valid time you can 
	get from time by replacing the hidden digits.

	Example 1:
	Input: time = "2?:?0"
	Output: "23:50"
	Explanation: The latest hour beginning with the digit '2' is 23 and the 
	             latest minute ending with the digit '0' is 50.

	Example 2:
	Input: time = "0?:3?"
	Output: "09:39"

	Example 3:
	Input: time = "1?:22"
	Output: "19:22"

	Constraints:
	* time is in the format hh:mm.
	* It is guaranteed that you can produce a valid time from the given string."""

    def maximumTime(self, time: str) -> str:
        time = list(time)
        for i in range(len(time)): 
            if time[i] == "?": 
                if i == 0: time[i] = "2" if time[i+1] in "?0123" else "1"
                elif i == 1: time[i] = "3" if time[0] == "2" else "9"
                elif i == 3: time[i] = "5"
                else: time[i] = "9"
        return "".join(time)


    """1737. Change Minimum Characters to Satisfy One of Three Conditions (Medium)
	You are given two strings a and b that consist of lowercase letters. In one 
	operation, you can change any character in a or b to any lowercase letter. 
	Your goal is to satisfy one of the following three conditions:
	* Every letter in a is strictly less than every letter in b in the alphabet.
	* Every letter in b is strictly less than every letter in a in the alphabet.
	* Both a and b consist of only one distinct letter.
	Return the minimum number of operations needed to achieve your goal.

	Example 1:
	Input: a = "aba", b = "caa"
	Output: 2
	Explanation: Consider the best way to make each condition true:
	1) Change b to "ccc" in 2 operations, then every letter in a is less than 
	   every letter in b.
	2) Change a to "bbb" and b to "aaa" in 3 operations, then every letter in b 
	   is less than every letter in a.
	3) Change a to "aaa" and b to "aaa" in 2 operations, then a and b consist 
	   of one distinct letter.
	The best way was done in 2 operations (either condition 1 or condition 3).

	Example 2:
	Input: a = "dabadd", b = "cda"
	Output: 3
	Explanation: The best way is to make condition 1 true by changing b to "eee".

	Constraints:
	* 1 <= a.length, b.length <= 10^5
	* a and b consist only of lowercase letters."""

    def minCharacters(self, a: str, b: str) -> int:
        pa, pb = [0]*26, [0]*26
        for x in a: pa[ord(x)-97] += 1
        for x in b: pb[ord(x)-97] += 1
        
        ans = len(a) - max(pa) + len(b) - max(pb) # condition 3
        for i in range(25): 
            pa[i+1] += pa[i]
            pb[i+1] += pb[i]
            ans = min(ans, pa[i] + len(b) - pb[i]) # condition 2
            ans = min(ans, len(a) - pa[i] + pb[i]) # condition 1
        return ans 


    """1738. Find Kth Largest XOR Coordinate Value (Medium)
	You are given a 2D matrix of size m x n, consisting of non-negative 
	integers. You are also given an integer k. The value of coordinate (a, b) 
	of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 
	0 <= j <= b < n (0-indexed). Find the kth largest value (1-indexed) of all 
	the coordinates of matrix.

	Example 1:
	Input: matrix = [[5,2],[1,6]], k = 1
	Output: 7
	Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.

	Example 2:
	Input: matrix = [[5,2],[1,6]], k = 2
	Output: 5
	Explanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.

	Example 3:
	Input: matrix = [[5,2],[1,6]], k = 3
	Output: 4
	Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.

	Example 4:
	Input: matrix = [[5,2],[1,6]], k = 4
	Output: 0
	Explanation: The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value.

	Constraints:
	* m == matrix.length
	* n == matrix[i].length
	* 1 <= m, n <= 1000
	* 0 <= matrix[i][j] <= 106
	* 1 <= k <= m * n"""

    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:
        m, n = len(matrix), len(matrix[0]) # dimensions 
        
        pq = []
        for i in range(m): 
            for j in range(n): 
                if i: matrix[i][j] ^= matrix[i-1][j]
                if j: matrix[i][j] ^= matrix[i][j-1]
                if i and j: matrix[i][j] ^= matrix[i-1][j-1]
                heappush(pq, matrix[i][j])
                if len(pq) > k: heappop(pq)
        return pq[0]


    """1739. Building Boxes (Hard)
	You have a cubic storeroom where the width, length, and height of the room 
	are all equal to n units. You are asked to place n boxes in this room where 
	each box is a cube of unit side length. There are however some rules to 
	placing the boxes:
	* You can place the boxes anywhere on the floor.
	* If box x is placed on top of the box y, then each side of the four 
	  vertical sides of the box y must either be adjacent to another box or to 
	  a wall.
	Given an integer n, return the minimum possible number of boxes touching 
	the floor.

	Example 1:
	Input: n = 3
	Output: 3
	Explanation: The figure above is for the placement of the three boxes. 
	             These boxes are placed in the corner of the room, where the 
	             corner is on the left side.

	Example 2:
	Input: n = 4
	Output: 3
	Explanation: The figure above is for the placement of the four boxes. These 
	             boxes are placed in the corner of the room, where the corner 
	             is on the left side.
	
	Example 3:
	Input: n = 10
	Output: 6
	Explanation: The figure above is for the placement of the ten boxes. These 
	             boxes are placed in the corner of the room, where the corner 
	             is on the back side.

	Constraints: 1 <= n <= 10^9"""

    def minimumBoxes(self, n: int) -> int:
        x = int((6*n)**(1/3))
        if x*(x+1)*(x+2) > 6*n: x -= 1
        n -= x*(x+1)*(x+2)//6
        return x*(x+1)//2 + ceil((sqrt(1+8*n)-1)/2)


    """1742. Maximum Number of Balls in a Box (Easy)
	You are working in a ball factory where you have n balls numbered from 
	lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), 
	and an infinite number of boxes numbered from 1 to infinity. Your job at 
	this factory is to put each ball in the box with a number equal to the sum 
	of digits of the ball's number. For example, the ball number 321 will be 
	put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in 
	the box number 1 + 0 = 1. Given two integers lowLimit and highLimit, return 
	the number of balls in the box with the most balls.

	Example 1:
	Input: lowLimit = 1, highLimit = 10
	Output: 2
	Explanation:
	Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
	Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ...
	Box 1 has the most number of balls with 2 balls.

	Example 2:
	Input: lowLimit = 5, highLimit = 15
	Output: 2
	Explanation:
	Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
	Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ...
	Boxes 5 and 6 have the most number of balls with 2 balls in each.

	Example 3:
	Input: lowLimit = 19, highLimit = 28
	Output: 2
	Explanation:
	Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...
	Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...
	Box 10 has the most number of balls with 2 balls.
	 
	Constraints: 1 <= lowLimit <= highLimit <= 10^5"""

    def countBalls(self, lowLimit: int, highLimit: int) -> int:
        freq = {}
        for x in range(lowLimit, highLimit+1):
            key = sum(int(xx) for xx in str(x))
            freq[key] = 1 + freq.get(key, 0) 
        return max(freq.values())


    """1743. Restore the Array From Adjacent Pairs (Medium)
	There is an integer array nums that consists of n unique elements, but you 
	have forgotten it. However, you do remember every pair of adjacent elements 
	in nums. You are given a 2D integer array adjacentPairs of size n - 1 where 
	each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are 
	adjacent in nums. It is guaranteed that every adjacent pair of elements 
	nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], 
	nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order. 
	Return the original array nums. If there are multiple solutions, return any 
	of them.

	Example 1:
	Input: adjacentPairs = [[2,1],[3,4],[3,2]]
	Output: [1,2,3,4]
	Explanation: This array has all its adjacent pairs in adjacentPairs. Notice 
	             that adjacentPairs[i] may not be in left-to-right order.

	Example 2:
	Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
	Output: [-2,4,1,-3]
	Explanation: There can be negative numbers. Another solution is [-3,1,4,-2], 
	             which would also be accepted.
	
	Example 3:
	Input: adjacentPairs = [[100000,-100000]]
	Output: [100000,-100000]

	Constraints:
	* nums.length == n
	* adjacentPairs.length == n - 1
	* adjacentPairs[i].length == 2
	* 2 <= n <= 10^5
	* -10^5 <= nums[i], ui, vi <= 10^5
	* There exists some nums that has adjacentPairs as its pairs."""

    def restoreArray(self, adjacentPairs: List[List[int]]) -> List[int]:
        graph = {}
        for u, v in adjacentPairs: 
            graph.setdefault(u, []).append(v)
            graph.setdefault(v, []).append(u)
        
        ans = []
        seen = set()
        stack = [next(x for x in graph if len(graph[x]) == 1)]
        while stack: 
            n = stack.pop()
            ans.append(n)
            seen.add(n)
            for nn in graph[n]: 
                if nn not in seen: stack.append(nn)
        return ans 


    """1744. Can You Eat Your Favorite Candy on Your Favorite Day? (Medium)
	You are given a (0-indexed) array of positive integers candiesCount where 
	candiesCount[i] represents the number of candies of the ith type you have. 
	You are also given a 2D array queries where 
	queries[i] = [favoriteTypei, favoriteDayi, dailyCapi].

	You play a game with the following rules:
	* You start eating candies on day 0.
	* You cannot eat any candy of type i unless you have eaten all candies of 
	  type i - 1.
	* You must eat at least one candy per day until you have eaten all the 
	  candies.
	Construct a boolean array answer such that answer.length == queries.length 
	and answer[i] is true if you can eat a candy of type favoriteTypei on day 
	favoriteDayi without eating more than dailyCapi candies on any day, and 
	false otherwise. Note that you can eat different types of candy on the same 
	day, provided that you follow rule 2. Return the constructed array answer.

	Example 1:
	Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]
	Output: [true,false,true]
	Explanation:
	1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.
	2- You can eat at most 4 candies each day.
	   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.
	   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.
	3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.

	Example 2:
	Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
	Output: [false,true,true,false,false]

	Constraints:
	* 1 <= candiesCount.length <= 10^5
	* 1 <= candiesCount[i] <= 10^5
	* 1 <= queries.length <= 10^5
	* queries[i].length == 3
	* 0 <= favoriteTypei < candiesCount.length
	* 0 <= favoriteDayi <= 10^9
	* 1 <= dailyCapi <= 10^9"""

    def canEat(self, candiesCount: List[int], queries: List[List[int]]) -> List[bool]:
        prefix = [0]
        for x in candiesCount: prefix.append(prefix[-1] + x) # prefix sum 
        return [prefix[t] < (day+1)*cap and day < prefix[t+1] for t, day, cap in queries]


    """1745. Palindrome Partitioning IV (Hard)
	Given a string s, return true if it is possible to split the string s into 
	three non-empty palindromic substrings. Otherwise, return false.​​​​​ A string 
	is said to be palindrome if it the same string when reversed.

	Example 1:
	Input: s = "abcbdd"
	Output: true
	Explanation: "abcbdd" = "a" + "bcb" + "dd", and all three substrings are 
	             palindromes.

	Example 2:
	Input: s = "bcbddxy"
	Output: false
	Explanation: s cannot be split into 3 palindromes.

	Constraints:
	* 3 <= s.length <= 2000
	* s​​​​​​ consists only of lowercase English letters."""

    def checkPartitioning(self, s: str) -> bool:
        mp = defaultdict(set)
        for i in range(2*len(s)-1): 
            lo, hi = i//2, (i+1)//2
            while 0 <= lo <= hi < len(s) and s[lo] == s[hi]: 
                mp[lo].add(hi)
                lo, hi = lo-1, hi+1
        
        for i in range(len(s)):
            for j in range(i+1, len(s)):
                if i-1 in mp[0] and j-1 in mp[i] and len(s)-1 in mp[j]: return True
        return False 


    """1746. Maximum Subarray Sum After One Operation (Medium)
	You are given an integer array nums. You must perform exactly one operation 
	where you can replace one element nums[i] with nums[i] * nums[i]. Return 
	the maximum possible subarray sum after exactly one operation. The subarray 
	must be non-empty.

	Example 1:
	Input: nums = [2,-1,-4,-3]
	Output: 17
	Explanation: You can perform the operation on index 2 (0-indexed) to make 
	             nums = [2,-1,16,-3]. Now, the maximum subarray sum is 
	             2 + -1 + 16 = 17.

	Example 2:
	Input: nums = [1,-1,1,1,-1,-1,1]
	Output: 4
	Explanation: You can perform the operation on index 1 (0-indexed) to make 
	             nums = [1,1,1,1,-1,-1,1]. Now, the maximum subarray sum is 
	             1 + 1 + 1 + 1 = 4.

	Constraints:
	* 1 <= nums.length <= 10^5
	* -10^4 <= nums[i] <= 10^4"""

    def maxSumAfterOperation(self, nums: List[int]) -> int:
        ans = f0 = f1 = 0 
        for x in nums: 
            f1 = max(max(0, f0) + x*x, f1 + x)
            f0 = max(0, f0) + x 
            ans = max(ans, f1)
        return ans 


    """1748. Sum of Unique Elements (Easy)
	You are given an integer array nums. The unique elements of an array are 
	the elements that appear exactly once in the array. Return the sum of all 
	the unique elements of nums.

	Example 1:
	Input: nums = [1,2,3,2]
	Output: 4
	Explanation: The unique elements are [1,3], and the sum is 4.

	Example 2:
	Input: nums = [1,1,1,1,1]
	Output: 0
	Explanation: There are no unique elements, and the sum is 0.

	Example 3:
	Input: nums = [1,2,3,4,5]
	Output: 15
	Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.

	Constraints:
	* 1 <= nums.length <= 100
	* 1 <= nums[i] <= 100"""

    def sumOfUnique(self, nums: List[int]) -> int:
        freq = {}
        for x in nums: freq[x] = 1 + freq.get(x, 0)
        return sum(x for x in nums if freq[x] == 1)


    """1749. Maximum Absolute Sum of Any Subarray (Medium)
	You are given an integer array nums. The absolute sum of a subarray 
	[numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).
	Return the maximum absolute sum of any (possibly empty) subarray of nums. 
	Note that abs(x) is defined as follows:
	* If x is a negative integer, then abs(x) = -x.
	* If x is a non-negative integer, then abs(x) = x.

	Example 1:
	Input: nums = [1,-3,2,3,-4]
	Output: 5
	Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.

	Example 2:
	Input: nums = [2,-5,1,-4,3,-2]
	Output: 8
	Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.

	Constraints:
	* 1 <= nums.length <= 10^5
	* -10^4 <= nums[i] <= 10^4"""

    def maxAbsoluteSum(self, nums: List[int]) -> int:
        ans = mx = mn = 0
        for x in nums: 
            mx = max(mx + x, 0)
            mn = min(mn + x, 0)
            ans = max(ans, mx, -mn)
        return ans 


    """1750. Minimum Length of String After Deleting Similar Ends (Medium)
	Given a string s consisting only of characters 'a', 'b', and 'c'. You are 
	asked to apply the following algorithm on the string any number of times:
	* Pick a non-empty prefix from the string s where all the characters in the 
	  prefix are equal.
	* Pick a non-empty suffix from the string s where all the characters in 
	  this suffix are equal.
	* The prefix and the suffix should not intersect at any index.
	* The characters from the prefix and suffix must be the same.
	* Delete both the prefix and the suffix.
	Return the minimum length of s after performing the above operation any 
	number of times (possibly zero times).

	Example 1:
	Input: s = "ca"
	Output: 2
	Explanation: You can't remove any characters, so the string stays as is.

	Example 2:
	Input: s = "cabaabac"
	Output: 0
	Explanation: An optimal sequence of operations is:
	- Take prefix = "c" and suffix = "c" and remove them, s = "abaaba".
	- Take prefix = "a" and suffix = "a" and remove them, s = "baab".
	- Take prefix = "b" and suffix = "b" and remove them, s = "aa".
	- Take prefix = "a" and suffix = "a" and remove them, s = "".

	Example 3:
	Input: s = "aabccabba"
	Output: 3
	Explanation: An optimal sequence of operations is:
	- Take prefix = "aa" and suffix = "a" and remove them, s = "bccabb".
	- Take prefix = "b" and suffix = "bb" and remove them, s = "cca".

	Constraints:
	* 1 <= s.length <= 10^5
	* s only consists of characters 'a', 'b', and 'c'."""

    def minimumLength(self, s: str) -> int:
        lo, hi = 0, len(s)-1
        while lo < hi and s[lo] == s[hi]:
            ch = s[lo]
            while lo <= hi and s[lo] == ch: lo += 1
            while lo <= hi and s[hi] == ch: hi -= 1
        return hi - lo + 1


    """1751. Maximum Number of Events That Can Be Attended II (Hard)
	You are given an array of events where events[i] = [startDayi, endDayi, valuei]. 
	The ith event starts at startDayi and ends at endDayi, and if you attend 
	this event, you will receive a value of valuei. You are also given an 
	integer k which represents the maximum number of events you can attend. You 
	can only attend one event at a time. If you choose to attend an event, you 
	must attend the entire event. Note that the end day is inclusive: that is, 
	you cannot attend two events where one of them starts and the other ends on 
	the same day. Return the maximum sum of values that you can receive by 
	attending events.

	Example 1:
	Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2
	Output: 7
	Explanation: Choose the green events, 0 and 1 (0-indexed) for a total value 
	             of 4 + 3 = 7.

	Example 2:
	Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2
	Output: 10
	Explanation: Choose event 2 for a total value of 10. Notice that you cannot 
	             attend any other event as they overlap, and that you do not 
	             have to attend k events.

	Example 3:
	Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3
	Output: 9
	Explanation: Although the events do not overlap, you can only attend 3 
	             events. Pick the highest valued three.

	Constraints:
	* 1 <= k <= events.length
	* 1 <= k * events.length <= 106
	* 1 <= startDayi <= endDayi <= 109
	* 1 <= valuei <= 106"""

    def maxValue(self, events: List[List[int]], k: int) -> int:
        events.sort()
        starts = [i for i, _, _ in events]
        
        @cache
        def fn(i, k): 
            """Return """
            if i == len(events) or k == 0: return 0 
            ii = bisect_left(starts, events[i][1]+1)
            return max(fn(i+1, k), events[i][2] + fn(ii, k-1))
        
        return fn(0, k)


    """1752. Check if Array Is Sorted and Rotated (Easy)
	Given an array nums, return true if the array was originally sorted in non-
	decreasing order, then rotated some number of positions (including zero). 
	Otherwise, return false. There may be duplicates in the original array. 
	Note: An array A rotated by x positions results in an array B of the same 
	length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.

	Example 1:
	Input: nums = [3,4,5,1,2]
	Output: true
	Explanation: [1,2,3,4,5] is the original sorted array. You can rotate the 
	             array by x = 3 positions to begin on the the element of value 
	             3: [3,4,5,1,2].
	
	Example 2:
	Input: nums = [2,1,3,4]
	Output: false
	Explanation: There is no sorted array once rotated that can make nums.
	
	Example 3:
	Input: nums = [1,2,3]
	Output: true
	Explanation: [1,2,3] is the original sorted array. You can rotate the array 
	             by x = 0 positions (i.e. no rotation) to make nums.
	
	Example 4:
	Input: nums = [1,1,1]
	Output: true
	Explanation: [1,1,1] is the original sorted array. You can rotate any 
	             number of positions to make nums.
	
	Example 5:
	Input: nums = [2,1]
	Output: true
	Explanation: [1,2] is the original sorted array. You can rotate the array 
	             by x = 5 positions to begin on the element of value 2: [2,1].

	Constraints:
	* 1 <= nums.length <= 100
	* 1 <= nums[i] <= 100"""

    def check(self, nums: List[int]) -> bool:
        cnt = 0
        for i in range(len(nums)): 
            if nums[i-1] > nums[i]: cnt += 1
        return cnt <= 1


    """1753. Maximum Score From Removing Stones (Medium)
	You are playing a solitaire game with three piles of stones of sizes 
	a​​​​​​, b,​​​​​​ and c​​​​​​ respectively. Each turn you choose two different non-empty 
	piles, take one stone from each, and add 1 point to your score. The game 
	stops when there are fewer than two non-empty piles (meaning there are no 
	more available moves). Given three integers a​​​​​, b,​​​​​ and c​​​​​, return the 
	maximum score you can get.

	Example 1:
	Input: a = 2, b = 4, c = 6
	Output: 6
	Explanation: The starting state is (2, 4, 6). One optimal set of moves is:
	- Take from 1st and 3rd piles, state is now (1, 4, 5)
	- Take from 1st and 3rd piles, state is now (0, 4, 4)
	- Take from 2nd and 3rd piles, state is now (0, 3, 3)
	- Take from 2nd and 3rd piles, state is now (0, 2, 2)
	- Take from 2nd and 3rd piles, state is now (0, 1, 1)
	- Take from 2nd and 3rd piles, state is now (0, 0, 0)
	There are fewer than two non-empty piles, so the game ends. Total: 6 points.

	Example 2:
	Input: a = 4, b = 4, c = 6
	Output: 7
	Explanation: The starting state is (4, 4, 6). One optimal set of moves is:
	- Take from 1st and 2nd piles, state is now (3, 3, 6)
	- Take from 1st and 3rd piles, state is now (2, 3, 5)
	- Take from 1st and 3rd piles, state is now (1, 3, 4)
	- Take from 1st and 3rd piles, state is now (0, 3, 3)
	- Take from 2nd and 3rd piles, state is now (0, 2, 2)
	- Take from 2nd and 3rd piles, state is now (0, 1, 1)
	- Take from 2nd and 3rd piles, state is now (0, 0, 0)
	There are fewer than two non-empty piles, so the game ends. Total: 7 points.

	Example 3:
	Input: a = 1, b = 8, c = 8
	Output: 8
	Explanation: One optimal set of moves is to take from the 2nd and 3rd piles 
	             for 8 turns until they are empty. After that, there are fewer 
	             than two non-empty piles, so the game ends.

	Constraints: 1 <= a, b, c <= 10^5"""

    def maximumScore(self, a: int, b: int, c: int) -> int:
        a, b, c = sorted((a, b, c))
        if a + b < c: return a + b
        return (a + b + c)//2

    
    """1754. Largest Merge Of Two Strings (Medium)
	You are given two strings word1 and word2. You want to construct a string 
	merge in the following way: while either word1 or word2 are non-empty, 
	choose one of the following options:
	* If word1 is non-empty, append the first character in word1 to merge and 
	  delete it from word1.
	  + For example, if word1 = "abc" and merge = "dv", then after choosing 
	    this operation, word1 = "bc" and merge = "dva".
	* If word2 is non-empty, append the first character in word2 to merge and 
	  delete it from word2.
	  + For example, if word2 = "abc" and merge = "", then after choosing this 
	    operation, word2 = "bc" and merge = "a".
	Return the lexicographically largest merge you can construct. A string a is 
	lexicographically larger than a string b (of the same length) if in the 
	first position where a and b differ, a has a character strictly larger than 
	the corresponding character in b. For example, "abcd" is lexicographically 
	larger than "abcc" because the first position they differ is at the fourth 
	character, and d is greater than c.

	Example 1:
	Input: word1 = "cabaa", word2 = "bcaaa"
	Output: "cbcabaaaaa"
	Explanation: One way to get the lexicographically largest merge is:
	- Take from word1: merge = "c", word1 = "abaa", word2 = "bcaaa"
	- Take from word2: merge = "cb", word1 = "abaa", word2 = "caaa"
	- Take from word2: merge = "cbc", word1 = "abaa", word2 = "aaa"
	- Take from word1: merge = "cbca", word1 = "baa", word2 = "aaa"
	- Take from word1: merge = "cbcab", word1 = "aa", word2 = "aaa"
	- Append the remaining 5 a's from word1 and word2 at the end of merge.

	Example 2:
	Input: word1 = "abcabc", word2 = "abdcaba"
	Output: "abdcabcabcaba"

	Constraints:
	* 1 <= word1.length, word2.length <= 3000
	* word1 and word2 consist only of lowercase English letters."""

    def largestMerge(self, word1: str, word2: str) -> str:
        ans = []
        i1 = i2 = 0
        while i1 < len(word1) and i2 < len(word2): 
            if word1[i1:] > word2[i2:]: 
                ans.append(word1[i1])
                i1 += 1
            else: 
                ans.append(word2[i2])
                i2 += 1
        return "".join(ans) + word1[i1:] + word2[i2:]


    """1755. Closest Subsequence Sum (Hard)
	You are given an integer array nums and an integer goal. You want to choose 
	a subsequence of nums such that the sum of its elements is the closest 
	possible to goal. That is, if the sum of the subsequence's elements is sum, 
	then you want to minimize the absolute difference abs(sum - goal). Return 
	the minimum possible value of abs(sum - goal). Note that a subsequence of 
	an array is an array formed by removing some elements (possibly all or none) 
	of the original array.

	Example 1:
	Input: nums = [5,-7,3,5], goal = 6
	Output: 0
	Explanation: Choose the whole array as a subsequence, with a sum of 6. This 
	             is equal to the goal, so the absolute difference is 0.

	Example 2:
	Input: nums = [7,-9,15,-2], goal = -5
	Output: 1
	Explanation: Choose the subsequence [7,-9,-2], with a sum of -4. The 
	             absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is 
	             the minimum.
	
	Example 3:
	Input: nums = [1,2,3], goal = -7
	Output: 7

	Constraints:
	* 1 <= nums.length <= 40
	* -10^7 <= nums[i] <= 10^7
	* -10^9 <= goal <= 10^9"""

    def minAbsDifference(self, nums: List[int], goal: int) -> int:
        
        def fn(nums):
            ans = {0}
            for x in nums: 
                ans |= {x + y for y in ans}
            return ans 
        
        nums0 = sorted(fn(nums[:len(nums)//2]))
        nums1 = sorted(fn(nums[len(nums)//2:]))
        
        ans = inf
        k = len(nums1)-1
        for x in nums0: 
            while 0 <= k and x + nums1[k] > goal: k -= 1
            if 0 <= k: ans = min(ans, goal - x - nums1[k])
            if k+1 < len(nums1): ans = min(ans, nums1[k+1] + x - goal)
        return ans 


    """1758. Minimum Changes To Make Alternating Binary String (Easy)
	You are given a string s consisting only of the characters '0' and '1'. In 
	one operation, you can change any '0' to '1' or vice versa. The string is 
	called alternating if no two adjacent characters are equal. For example, 
	the string "010" is alternating, while the string "0100" is not. Return the 
	minimum number of operations needed to make s alternating.

	Example 1:
	Input: s = "0100"
	Output: 1
	Explanation: If you change the last character to '1', s will be "0101", which is alternating.

	Example 2:
	Input: s = "10"
	Output: 0
	Explanation: s is already alternating.

	Example 3:
	Input: s = "1111"
	Output: 2
	Explanation: You need two operations to reach "0101" or "1010".

	Constraints:
	* 1 <= s.length <= 104
	* s[i] is either '0' or '1'."""

    def minOperations(self, s: str) -> int:
        cnt = 0 # "010101..."
        for i, c in enumerate(s): 
            if i&1 == int(c): cnt += 1
        return min(cnt, len(s) - cnt)


    """1759. Count Number of Homogenous Substrings (Medium)
	Given a string s, return the number of homogenous substrings of s. Since 
	the answer may be too large, return it modulo 10^9 + 7.  string is 
	homogenous if all the characters of the string are the same. A substring 
	is a contiguous sequence of characters within a string.

	Example 1:
	Input: s = "abbcccaa"
	Output: 13
	Explanation: The homogenous substrings are listed as below:
	"a"   appears 3 times.
	"aa"  appears 1 time.
	"b"   appears 2 times.
	"bb"  appears 1 time.
	"c"   appears 3 times.
	"cc"  appears 2 times.
	"ccc" appears 1 time.
	3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.

	Example 2:
	Input: s = "xy"
	Output: 2
	Explanation: The homogenous substrings are "x" and "y".

	Example 3:
	Input: s = "zzzzz"
	Output: 15

	Constraints:
	* 1 <= s.length <= 10^5
	* s consists of lowercase letters."""

    def countHomogenous(self, s: str) -> int:
        ans = ii = 0
        for i in range(len(s)):
            if s[ii] != s[i]: ii = i
            ans += i - ii + 1
        return ans % 1_000_000_007


    """1760. Minimum Limit of Balls in a Bag (Medium)
	You are given an integer array nums where the ith bag contains nums[i] 
	balls. You are also given an integer maxOperations. You can perform the 
	following operation at most maxOperations times:
	* Take any bag of balls and divide it into two new bags with a positive 
	  number of balls.
	  + For example, a bag of 5 balls can become two new bags of 1 and 4 balls, 
	    or two new bags of 2 and 3 balls.
	Your penalty is the maximum number of balls in a bag. You want to minimize 
	your penalty after the operations. Return the minimum possible penalty 
	after performing the operations.

	Example 1:
	Input: nums = [9], maxOperations = 2
	Output: 3
	Explanation: 
	- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].
	- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].
	The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.

	Example 2:
	Input: nums = [2,4,8,2], maxOperations = 4
	Output: 2
	Explanation:
	- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].
	- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].
	- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].
	- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].
	The bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.

	Example 3:
	Input: nums = [7,17], maxOperations = 2
	Output: 7

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= maxOperations, nums[i] <= 10^9"""

    def minimumSize(self, nums: List[int], maxOperations: int) -> int:
        lo, hi = 1, 1_000_000_000
        while lo < hi: 
            mid = lo + hi >> 1
            if sum((x-1)//mid for x in nums) <= maxOperations: hi = mid
            else: lo = mid + 1
        return lo


    """1761. Minimum Degree of a Connected Trio in a Graph (Hard)
	You are given an undirected graph. You are given an integer n which is the 
	number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] 
	indicates that there is an undirected edge between ui and vi. A connected 
	trio is a set of three nodes where there is an edge between every pair of 
	them. The degree of a connected trio is the number of edges where one 
	endpoint is in the trio, and the other is not. Return the minimum degree of 
	a connected trio in the graph, or -1 if the graph has no connected trios.

	Example 1:
	Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
	Output: 3
	Explanation: There is exactly one trio, which is [1,2,3]. The edges that 
	             form its degree are bolded in the figure above.

	Example 2:
	Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]
	Output: 0
	Explanation: There are exactly three trios:
	1) [1,4,3] with degree 0.
	2) [2,5,6] with degree 2.
	3) [5,6,7] with degree 2.

	Constraints:
	* 2 <= n <= 400
	* edges[i].length == 2
	* 1 <= edges.length <= n * (n-1) / 2
	* 1 <= ui, vi <= n
	* ui != vi
	* There are no repeated edges."""

    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:
        graph = [[False]*n for _ in range(n)]
        degree = [0]*n
        
        for u, v in edges: 
            graph[u-1][v-1] = graph[v-1][u-1] = True
            degree[u-1] += 1
            degree[v-1] += 1
        
        ans = inf
        for i in range(n): 
            for j in range(i+1, n):
                if graph[i][j]: 
                    for k in range(j+1, n):
                        if graph[j][k] and graph[k][i]: 
                            ans = min(ans, degree[i] + degree[j] + degree[k] - 6)
        return ans if ans < inf else -1


    """1762. Buildings With an Ocean View (Medium)
	There are n buildings in a line. You are given an integer array heights of 
	size n that represents the heights of the buildings in the line. The ocean 
	is to the right of the buildings. A building has an ocean view if the 
	building can see the ocean without obstructions. Formally, a building has 
	an ocean view if all the buildings to its right have a smaller height. 
	Return a list of indices (0-indexed) of buildings that have an ocean view, 
	sorted in increasing order.

	Example 1:
	Input: heights = [4,2,3,1]
	Output: [0,2,3]
	Explanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.

	Example 2:
	Input: heights = [4,3,2,1]
	Output: [0,1,2,3]
	Explanation: All the buildings have an ocean view.

	Example 3:
	Input: heights = [1,3,2,4]
	Output: [3]
	Explanation: Only building 3 has an ocean view.

	Example 4:
	Input: heights = [2,2,2,2]
	Output: [3]
	Explanation: Buildings cannot see the ocean if there are buildings of the same height to its right.

	Constraints:
	* 1 <= heights.length <= 10^5
	* 1 <= heights[i] <= 10^9"""

    def findBuildings(self, heights: List[int]) -> List[int]:
        stack = []
        for i, x in enumerate(heights): 
            while stack and heights[stack[-1]] <= x: stack.pop()
            stack.append(i)
        return stack 


    """1763. Longest Nice Substring (Easy)
	A string s is nice if, for every letter of the alphabet that s contains, it 
	appears both in uppercase and lowercase. For example, "abABB" is nice 
	because 'A' and 'a' appear, and 'B' and 'b' appear. However, "abA" is not 
	because 'b' appears, but 'B' does not. Given a string s, return the longest 
	substring of s that is nice. If there are multiple, return the substring of 
	the earliest occurrence. If there are none, return an empty string.

	Example 1:
	Input: s = "YazaAay"
	Output: "aAa"
	Explanation: "aAa" is a nice string because 'A/a' is the only letter of the 
	             alphabet in s, and both 'A' and 'a' appear. "aAa" is the 
	             longest nice substring.

	Example 2:
	Input: s = "Bb"
	Output: "Bb"
	Explanation: "Bb" is a nice string because both 'B' and 'b' appear. The 
	             whole string is a substring.
	
	Example 3:
	Input: s = "c"
	Output: ""
	Explanation: There are no nice substrings.
	
	Example 4:
	Input: s = "dDzeE"
	Output: "dD"
	Explanation: Both "dD" and "eE" are the longest nice substrings. As there 
	             are multiple longest nice substrings, return "dD" since it 
	             occurs earlier.

	Constraints:
	* 1 <= s.length <= 100
	* s consists of uppercase and lowercase English letters."""

    def longestNiceSubstring(self, s: str) -> str:
        if not s: return "" # boundary condition 
        ss = set(s)
        for i, c in enumerate(s):
            if c.swapcase() not in ss: 
                s0 = self.longestNiceSubstring(s[:i])
                s1 = self.longestNiceSubstring(s[i+1:])
                return max(s0, s1, key=len)
        return s


    """1764. Form Array by Concatenating Subarrays of Another Array (Medium)
	You are given a 2D integer array groups of length n. You are also given an 
	integer array nums. You are asked if you can choose n disjoint subarrays 
	from the array nums such that the ith subarray is equal to groups[i] 
	(0-indexed), and if i > 0, the (i-1)th subarray appears before the ith 
	subarray in nums (i.e. the subarrays must be in the same order as groups). 
	Return true if you can do this task, and false otherwise. Note that the 
	subarrays are disjoint if and only if there is no index k such that nums[k] 
	belongs to more than one subarray. A subarray is a contiguous sequence of 
	elements within an array.

	Example 1:
	Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]
	Output: true
	Explanation: You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and 
	             the 1st one as [1,-1,0,1,-1,-1,3,-2,0]. These subarrays are 
	             disjoint as they share no common nums[k] element.

	Example 2:
	Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]
	Output: false
	Explanation: Note that choosing the subarrays [1,2,3,4,10,-2] and 
	             [1,2,3,4,10,-2] is incorrect because they are not in the same 
	             order as in groups. [10,-2] must come before [1,2,3,4].
	
	Example 3:
	Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]
	Output: false
	Explanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and 
	             [7,7,1,2,3,4,7,7] is invalid because they are not disjoint. 
	             They share a common elements nums[4] (0-indexed).

	Constraints:
	* groups.length == n
	* 1 <= n <= 10^3
	* 1 <= groups[i].length, sum(groups[i].length) <= 10^3
	* 1 <= nums.length <= 10^3
	* -10^7 <= groups[i][j], nums[k] <= 10^7"""

    def canChoose(self, groups: List[List[int]], nums: List[int]) -> bool:
        i = 0
        for grp in groups: 
            for ii in range(i, len(nums)):
                if nums[ii:ii+len(grp)] == grp: 
                    i = ii + len(grp)
                    break 
            else: return False
        return True


    """1765. Map of Highest Peak (Medium)
	You are given an integer matrix isWater of size m x n that represents a map 
	of land and water cells.
	* If isWater[i][j] == 0, cell (i, j) is a land cell.
	* If isWater[i][j] == 1, cell (i, j) is a water cell.
	You must assign each cell a height in a way that follows these rules:
	* The height of each cell must be non-negative.
	* If the cell is a water cell, its height must be 0.
	* Any two adjacent cells must have an absolute height difference of at most 
	  1. A cell is adjacent to another cell if the former is directly north, 
	  east, south, or west of the latter (i.e., their sides are touching).
	Find an assignment of heights such that the maximum height in the matrix is 
	maximized. Return an integer matrix height of size m x n where height[i][j] 
	is cell (i, j)'s height. If there are multiple solutions, return any of them.

	Example 1:
	Input: isWater = [[0,1],[0,0]]
	Output: [[1,0],[2,1]]
	Explanation: The image shows the assigned heights of each cell. The blue 
	             cell is the water cell, and the green cells are the land cells.

	Example 2:
	Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]
	Output: [[1,1,0],[0,1,1],[1,2,2]]
	Explanation: A height of 2 is the maximum possible height of any assignment. 
	             Any height assignment that has a maximum height of 2 while 
	             still meeting the rules will also be accepted.

	Constraints:
	* m == isWater.length
	* n == isWater[i].length
	* 1 <= m, n <= 1000
	* isWater[i][j] is 0 or 1.
	* There is at least one water cell."""

    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:
        m, n = len(isWater), len(isWater[0]) # dimensions 
        
        ans = [[-1]*n for _ in range(m)]
        queue = deque()
        for i in range(m): 
            for j in range(n):
                if isWater[i][j]:
                    queue.append((i, j))
                    ans[i][j] = 0

        while queue: 
            i, j = queue.popleft()
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < m and 0 <= jj < n and ans[ii][jj] == -1: 
                    ans[ii][jj] = 1 + ans[i][j]
                    queue.append((ii, jj))
        return ans 


    """1766. Tree of Coprimes (Hard)
	There is a tree (i.e., a connected, undirected graph that has no cycles) 
	consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. 
	Each node has a value associated with it, and the root of the tree is node 
	0. To represent this tree, you are given an integer array nums and a 2D 
	array edges. Each nums[i] represents the ith node's value, and each 
	edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree. 
	Two values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the 
	greatest common divisor of x and y. An ancestor of a node i is any other 
	node on the shortest path from node i to the root. A node is not considered 
	an ancestor of itself. Return an array ans of size n, where ans[i] is the 
	closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, 
	or -1 if there is no such ancestor.

	Example 1:
	Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]
	Output: [-1,0,0,1]
	Explanation: In the above figure, each node's value is in parentheses.
	- Node 0 has no coprime ancestors.
	- Node 1 has only one ancestor, node 0. Their values are coprime 
	  (gcd(2,3) == 1).
	- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime 
	  (gcd(3,3) == 3), but node 0's value is (gcd(2,3) == 1), so node 0 is the 
	  closest valid ancestor.
	- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 
	  (gcd(3,2) == 1), so node 1 is its closest valid ancestor.

	Example 2:
	Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]
	Output: [-1,0,-1,0,0,0,-1]

	Constraints:
	* nums.length == n
	* 1 <= nums[i] <= 50
	* 1 <= n <= 10^5
	* edges.length == n - 1
	* edges[j].length == 2
	* 0 <= uj, vj < n
	* uj != vj"""

    def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:
        tree = {} # tree as adjacency list 
        for u, v in edges: 
            tree.setdefault(u, []).append(v)
            tree.setdefault(v, []).append(u)
        
        ans = [-1]*len(nums)
        path = {} # val -> list of position & depth 
        seen = {0}
        
        def fn(k, i): 
            """Populate ans via dfs."""
            ii = -1 
            for x in path:
                if gcd(nums[k], x) == 1: # coprime 
                    if path[x] and path[x][-1][1] > ii: 
                        ans[k] = path[x][-1][0]
                        ii = path[x][-1][1]
                        
            path.setdefault(nums[k], []).append((k, i))
            for kk in tree.get(k, []): 
                if kk not in seen: 
                    seen.add(kk)
                    fn(kk, i+1)
            path[nums[k]].pop()
            
        fn(0, 0)
        return ans 


    """1768. Merge Strings Alternately (Easy)
	You are given two strings word1 and word2. Merge the strings by adding 
	letters in alternating order, starting with word1. If a string is longer 
	than the other, append the additional letters onto the end of the merged 
	string. Return the merged string.

	Example 1:
	Input: word1 = "abc", word2 = "pqr"
	Output: "apbqcr"
	Explanation: The merged string will be merged as so:
	             word1:  a   b   c
	             word2:    p   q   r
	             merged: a p b q c r

	Example 2:
	Input: word1 = "ab", word2 = "pqrs"
	Output: "apbqrs"
	Explanation: Notice that as word2 is longer, "rs" is appended to the end.
	             word1:  a   b 
	             word2:    p   q   r   s
	             merged: a p b q   r   s

	Example 3:
	Input: word1 = "abcd", word2 = "pq"
	Output: "apbqcd"
	Explanation: Notice that as word1 is longer, "cd" is appended to the end.
	             word1:  a   b   c   d
	             word2:    p   q 
	             merged: a p b q c   d
	 
	Constraints:
	* 1 <= word1.length, word2.length <= 100
	* word1 and word2 consist of lowercase English letters."""

    def mergeAlternately(self, word1: str, word2: str) -> str:
        return "".join(x+y for x, y in zip_longest(word1, word2, fillvalue=""))


    """1769. Minimum Number of Operations to Move All Balls to Each Box (Medium)
	You have n boxes. You are given a binary string boxes of length n, where 
	boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball. 
	In one operation, you can move one ball from a box to an adjacent box. Box 
	i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there 
	may be more than one ball in some boxes. Return an array answer of size n, 
	where answer[i] is the minimum number of operations needed to move all the 
	balls to the ith box. Each answer[i] is calculated considering the initial 
	state of the boxes.

	Example 1:
	Input: boxes = "110"
	Output: [1,1,3]
	Explanation: The answer for each box is as follows:
	             1) First box: you will have to move one ball from the second box to the first box in one operation.
	             2) Second box: you will have to move one ball from the first box to the second box in one operation.
	             3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.
	
	Example 2:
	Input: boxes = "001011"
	Output: [11,8,5,4,3,4]

	Constraints:
	* n == boxes.length
	* 1 <= n <= 2000
	* boxes[i] is either '0' or '1'."""

    def minOperations(self, boxes: str) -> List[int]:
        ans = []
        ops = cnt = 0 # count of remaining "1"s
        for i, x in enumerate(boxes):
            if x == "1": 
                ops += i
                cnt += 1
        
        for i, x in enumerate(boxes): 
            ans.append(ops)
            if x == "1": cnt -= 2
            ops -= cnt
        return ans 


    """1770. Maximum Score from Performing Multiplication Operations (Medium)
	You are given two integer arrays nums and multipliers of size n and m 
	respectively, where n >= m. The arrays are 1-indexed. You begin with a 
	score of 0. You want to perform exactly m operations. On the ith operation 
	(1-indexed), you will:
	* Choose one integer x from either the start or the end of the array nums.
	* Add multipliers[i] * x to your score.
	* Remove x from the array nums.
	Return the maximum score after performing m operations.

	Example 1:
	Input: nums = [1,2,3], multipliers = [3,2,1]
	Output: 14
	Explanation: An optimal solution is as follows:
	- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.
	- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.
	- Choose from the end, [1], adding 1 * 1 = 1 to the score.
	The total score is 9 + 4 + 1 = 14.

	Example 2:
	Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]
	Output: 102
	Explanation: An optimal solution is as follows:
	- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.
	- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.
	- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.
	- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.
	- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. 
	The total score is 50 + 15 - 9 + 4 + 42 = 102.

	Constraints:
	* n == nums.length
	* m == multipliers.length
	* 1 <= m <= 10^3
	* m <= n <= 10^5
	* -1000 <= nums[i], multipliers[i] <= 1000"""

    def maximumScore(self, nums: List[int], multipliers: List[int]) -> int:
        n, m = len(nums), len(multipliers)
        dp = [[0]*m for _ in range(m+1)]
        
        for i in reversed(range(m)):
            for j in range(i, m): 
                k = i + m - j - 1
                dp[i][j] = max(nums[i] * multipliers[k] + dp[i+1][j], nums[j-m+n] * multipliers[k] + dp[i][j-1])
        
        return dp[0][-1]


    """1771. Maximize Palindrome Length From Subsequences (Hard)
	You are given two strings, word1 and word2. You want to construct a string 
	in the following manner:
	* Choose some non-empty subsequence subsequence1 from word1.
	* Choose some non-empty subsequence subsequence2 from word2.
	* Concatenate the subsequences: subsequence1 + subsequence2, to make the 
	  string.
	Return the length of the longest palindrome that can be constructed in the 
	described manner. If no palindromes can be constructed, return 0. A 
	subsequence of a string s is a string that can be made by deleting some 
	(possibly none) characters from s without changing the order of the 
	remaining characters. A palindrome is a string that reads the same forward 
	as well as backward.

	Example 1:
	Input: word1 = "cacb", word2 = "cbba"
	Output: 5
	Explanation: Choose "ab" from word1 and "cba" from word2 to make "abcba", 
	             which is a palindrome.

	Example 2:
	Input: word1 = "ab", word2 = "ab"
	Output: 3
	Explanation: Choose "ab" from word1 and "a" from word2 to make "aba", which 
	             is a palindrome.

	Example 3:
	Input: word1 = "aa", word2 = "bb"
	Output: 0
	Explanation: You cannot construct a palindrome from the described method, 
	             so return 0.

	Constraints:
	* 1 <= word1.length, word2.length <= 1000
	* word1 and word2 consist of lowercase English letters."""

    def longestPalindrome(self, word1: str, word2: str) -> int:
        
        @cache
        def fn(lo, hi):
            """Return length of longest palindromic subsequence."""
            if lo >= hi: return int(lo == hi)
            if word[lo] == word[hi]: return 2 + fn(lo+1, hi-1)
            return max(fn(lo+1, hi), fn(lo, hi-1))
        
        ans = 0
        word = word1 + word2
        for x in ascii_lowercase: 
            i = word1.find(x) 
            j = word2.rfind(x)
            if i != -1 and j != -1: ans = max(ans, fn(i, j+len(word1)))
        return ans 


    """1772. Sort Features by Popularity (Medium)
	You are given a string array features where features[i] is a single word 
	that represents the name of a feature of the latest product you are working 
	on. You have made a survey where users have reported which features they 
	like. You are given a string array responses, where each responses[i] is a 
	string containing space-separated words. The popularity of a feature is the 
	number of responses[i] that contain the feature. You want to sort the 
	features in non-increasing order by their popularity. If two features have 
	the same popularity, order them by their original index in features. Notice 
	that one response could contain the same feature multiple times; this 
	feature is only counted once in its popularity. Return the features in 
	sorted order.

	Example 1:
	Input: features = ["cooler","lock","touch"], 
	       responses = ["i like cooler cooler","lock touch cool","locker like touch"]
	Output: ["touch","cooler","lock"]
	Explanation: appearances("cooler") = 1, appearances("lock") = 1, 
	             appearances("touch") = 2. Since "cooler" and "lock" both had 1 
	             appearance, "cooler" comes first because "cooler" came first 
	             in the features array.
	
	Example 2:
	Input: features = ["a","aa","b","c"], responses = ["a","a aa","a a a a a","b a"]
	Output: ["a","aa","b","c"]

	Constraints:
	* 1 <= features.length <= 10^4
	* 1 <= features[i].length <= 10
	* features contains no duplicates.
	* features[i] consists of lowercase letters.
	* 1 <= responses.length <= 10^2
	* 1 <= responses[i].length <= 10^3
	* responses[i] consists of lowercase letters and spaces.
	* responses[i] contains no two consecutive spaces.
	* responses[i] has no leading or trailing spaces."""

    def sortFeatures(self, features: List[str], responses: List[str]) -> List[str]:
        freq = defaultdict(int)
        for response in responses: 
            words = set(response.split())
            for feature in features: 
                if feature in words: freq[feature] += 1
        return sorted(features, key=lambda x: freq.get(x, 0), reverse=True)


    """1773. Count Items Matching a Rule (Easy)
	You are given an array items, where each items[i] = [typei, colori, namei] 
	describes the type, color, and name of the ith item. You are also given a 
	rule represented by two strings, ruleKey and ruleValue. The ith item is 
	said to match the rule if one of the following is true:
	* ruleKey == "type" and ruleValue == typei.
	* ruleKey == "color" and ruleValue == colori.
	* ruleKey == "name" and ruleValue == namei.
	Return the number of items that match the given rule.

	Example 1:
	Input: items = [["phone","blue","pixel"],["computer","silver","lenovo"],["phone","gold","iphone"]], ruleKey = "color", ruleValue = "silver"
	Output: 1
	Explanation: There is only one item matching the given rule, which is ["computer","silver","lenovo"].
	
	Example 2:
	Input: items = [["phone","blue","pixel"],["computer","silver","phone"],["phone","gold","iphone"]], ruleKey = "type", ruleValue = "phone"
	Output: 2
	Explanation: There are only two items matching the given rule, which are ["phone","blue","pixel"] and ["phone","gold","iphone"]. Note that the item ["computer","silver","phone"] does not match.

	Constraints:
	* 1 <= items.length <= 104
	* 1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10
	* ruleKey is equal to either "type", "color", or "name".
	* All strings consist only of lowercase letters."""

    def countMatches(self, items: List[List[str]], ruleKey: str, ruleValue: str) -> int:
        return sum(1 for t, c, n in items if (ruleKey, ruleValue) in (("type", t), ("color", c), ("name", n)))


    """1774. Closest Dessert Cost (Medium)
	You would like to make dessert and are preparing to buy the ingredients. 
	You have n ice cream base flavors and m types of toppings to choose from. 
	You must follow these rules when making your dessert:
	* There must be exactly one ice cream base.
	* You can add one or more types of topping or have no toppings at all.
	* There are at most two of each type of topping.
	You are given three inputs:
	* baseCosts, an integer array of length n, where each baseCosts[i] 
	  represents the price of the ith ice cream base flavor.
	* toppingCosts, an integer array of length m, where each toppingCosts[i] is 
	  the price of one of the ith topping.
	* target, an integer representing your target price for dessert.
	You want to make a dessert with a total cost as close to target as possible. 
	Return the closest possible cost of the dessert to target. If there are 
	multiple, return the lower one.

	Example 1:
	Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10
	Output: 10
	Explanation: Consider the following combination (all 0-indexed):
	- Choose base 1: cost 7
	- Take 1 of topping 0: cost 1 x 3 = 3
	- Take 0 of topping 1: cost 0 x 4 = 0
	Total: 7 + 3 + 0 = 10.

	Example 2:
	Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18
	Output: 17
	Explanation: Consider the following combination (all 0-indexed):
	- Choose base 1: cost 3
	- Take 1 of topping 0: cost 1 x 4 = 4
	- Take 2 of topping 1: cost 2 x 5 = 10
	- Take 0 of topping 2: cost 0 x 100 = 0
	Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.

	Example 3:
	Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9
	Output: 8
	Explanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.

	Example 4:
	Input: baseCosts = [10], toppingCosts = [1], target = 1
	Output: 10
	Explanation: Notice that you don't have to have any toppings, but you must have exactly one base.

	Constraints:
	* n == baseCosts.length
	* m == toppingCosts.length
	* 1 <= n, m <= 10
	* 1 <= baseCosts[i], toppingCosts[i] <= 10^4
	* 1 <= target <= 10^4"""

    def closestCost(self, baseCosts: List[int], toppingCosts: List[int], target: int) -> int:
        
        @cache
        def fn(i, cost):
            """Return sum of subsequence closest to target."""
            if cost >= target or i == len(toppingCosts): return cost
            return min(fn(i+1, cost), fn(i+1, cost+toppingCosts[i]), key=lambda x: (abs(x-target), x))
        
        ans = inf
        toppingCosts *= 2
        for cost in baseCosts: 
            ans = min(ans, fn(0, cost), key=lambda x: (abs(x-target), x))
        return ans 


    """1775. Equal Sum Arrays With Minimum Number of Operations (Medium)
	You are given two arrays of integers nums1 and nums2, possibly of different 
	lengths. The values in the arrays are between 1 and 6, inclusive. In one 
	operation, you can change any integer's value in any of the arrays to any 
	value between 1 and 6, inclusive. Return the minimum number of operations 
	required to make the sum of values in nums1 equal to the sum of values in 
	nums2. Return -1​​​​​ if it is not possible to make the sum of the two arrays 
	equal.

	Example 1:
	Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]
	Output: 3
	Explanation: You can make the sums of nums1 and nums2 equal with 3 
	operations. All indices are 0-indexed.
	- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].
	- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].
	- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].

	Example 2:
	Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]
	Output: -1
	Explanation: There is no way to decrease the sum of nums1 or to increase 
	the sum of nums2 to make them equal.

	Example 3:
	Input: nums1 = [6,6], nums2 = [1]
	Output: 3
	Explanation: You can make the sums of nums1 and nums2 equal with 3 
	operations. All indices are 0-indexed. 
	- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].
	- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].
	- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].

	Constraints:
	* 1 <= nums1.length, nums2.length <= 10^5
	* 1 <= nums1[i], nums2[i] <= 6"""

    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:
        if 6*len(nums1) < len(nums2) or 6*len(nums2) < len(nums1): return -1 # impossible 
        
        if sum(nums1) < sum(nums2): nums1, nums2 = nums2, nums1
        s1, s2 = sum(nums1), sum(nums2) # s1 >= s2
            
        nums1.sort()
        nums2.sort()
        
        ans = j = 0
        i = len(nums1)-1
        
        while s1 > s2: 
            if j >= len(nums2) or 0 <= i and nums1[i] - 1 > 6 - nums2[j]: 
                s1 += 1 - nums1[i]
                i -= 1
            else: 
                s2 += 6 - nums2[j]
                j += 1
            ans += 1
        return ans 


    """1776. Car Fleet II (Hard)
	There are n cars traveling at different speeds in the same direction along 
	a one-lane road. You are given an array cars of length n, where 
	cars[i] = [position_i, speed_i] represents:
	* positioni is the distance between the ith car and the beginning of the 
	  road in meters. It is guaranteed that position_i < position_{i+1}.
	* speedi is the initial speed of the ith car in meters per second.
	For simplicity, cars can be considered as points moving along the number 
	line. Two cars collide when they occupy the same position. Once a car 
	collides with another car, they unite and form a single car fleet. The cars 
	in the formed fleet will have the same position and the same speed, which 
	is the initial speed of the slowest car in the fleet. Return an array 
	answer, where answer[i] is the time, in seconds, at which the ith car 
	collides with the next car, or -1 if the car does not collide with the next 
	car. Answers within 10^-5 of the actual answers are accepted.

	Example 1:
	Input: cars = [[1,2],[2,1],[4,3],[7,2]]
	Output: [1.00000,-1.00000,3.00000,-1.00000]
	Explanation: After exactly one second, the first car will collide with the 
	             second car, and form a car fleet with speed 1 m/s. After 
	             exactly 3 seconds, the third car will collide with the fourth 
	             car, and form a car fleet with speed 2 m/s.

	Example 2:
	Input: cars = [[3,4],[5,4],[6,3],[9,1]]
	Output: [2.00000,1.00000,1.50000,-1.00000]

	Constraints:
	* 1 <= cars.length <= 10^5
	* 1 <= position_i, speedi <= 10^6
	* position_i < position_{i+1}"""

    def getCollisionTimes(self, cars: List[List[int]]) -> List[float]:
        ans = [-1]*len(cars)
        stack = []
        for i, (x, v) in enumerate(reversed(cars)): 
            while stack and (v <= stack[-1][1] or (stack[-1][0] - x)/(v - stack[-1][1]) >= stack[-1][2]): stack.pop()
            if stack: 
                t = (stack[-1][0] - x)/(v - stack[-1][1])
                stack.append((x, v, t))
                ans[~i] = t
            else: 
                stack.append((x, v, inf))
        return ans 


    """1779. Find Nearest Point That Has the Same X or Y Coordinate (Easy)
	You are given two integers, x and y, which represent your current location 
	on a Cartesian grid: (x, y). You are also given an array points where each 
	points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is 
	valid if it shares the same x-coordinate or the same y-coordinate as your 
	location. Return the index (0-indexed) of the valid point with the smallest 
	Manhattan distance from your current location. If there are multiple, 
	return the valid point with the smallest index. If there are no valid 
	points, return -1. The Manhattan distance between two points (x1, y1) and 
	(x2, y2) is abs(x1 - x2) + abs(y1 - y2).

	Example 1:
	Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]
	Output: 2
	Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of 
	             the valid points, [2,4] and [4,4] have the smallest Manhattan 
	             distance from your current location, with a distance of 1. 
	             [2,4] has the smallest index, so return 2.

	Example 2:
	Input: x = 3, y = 4, points = [[3,4]]
	Output: 0
	Explanation: The answer is allowed to be on the same location as your 
	             current location.
	
	Example 3:
	Input: x = 3, y = 4, points = [[2,3]]
	Output: -1
	Explanation: There are no valid points.

	Constraints:
	* 1 <= points.length <= 10^4
	* points[i].length == 2
	* 1 <= x, y, ai, bi <= 10^4"""

    def nearestValidPoint(self, x: int, y: int, points: List[List[int]]) -> int:
        ans = -1
        dist = inf
        for i, (xx, yy) in enumerate(points): 
            if (x == xx or y == yy) and abs(x-xx) + abs(y-yy) < dist: 
                ans = i
                dist = abs(x-xx) + abs(y-yy)
        return ans


    """1780. Check if Number is a Sum of Powers of Three (Medium)
	Given an integer n, return true if it is possible to represent n as the sum 
	of distinct powers of three. Otherwise, return false. An integer y is a 
	power of three if there exists an integer x such that y == 3x.

	Example 1:
	Input: n = 12
	Output: true
	Explanation: 12 = 31 + 32

	Example 2:
	Input: n = 91
	Output: true
	Explanation: 91 = 30 + 32 + 34

	Example 3:
	Input: n = 21
	Output: false

	Constraints: 1 <= n <= 10^7"""

    def checkPowersOfThree(self, n: int) -> bool:
        while n: 
            n, r = divmod(n, 3)
            if r == 2: return False 
        return True 


    """1781. Sum of Beauty of All Substrings (Medium)
	The beauty of a string is the difference in frequencies between the most 
	frequent and least frequent characters. For example, the beauty of "abaacc" 
	is 3 - 1 = 2. Given a string s, return the sum of beauty of all of its 
	substrings.

	Example 1:
	Input: s = "aabcb"
	Output: 5
	Explanation: The substrings with non-zero beauty are 
	             ["aab","aabc","aabcb","abcb","bcb"], each with beauty equal to 1.

	Example 2:
	Input: s = "aabcbaa"
	Output: 17

	Constraints:
	* 1 <= s.length <= 500
	* s consists of only lowercase English letters."""

    def beautySum(self, s: str) -> int:
        ans = 0
        for i in range(len(s)):
            freq = [0]*26
            for ii in range(i, len(s)): 
                freq[ord(s[ii])-97] += 1
                ans += max(freq) - min(x for x in freq if x)
        return ans  


    """1782. Count Pairs Of Nodes (Hard)
	You are given an undirected graph represented by an integer n, which is the 
	number of nodes, and edges, where edges[i] = [ui, vi] which indicates that 
	there is an undirected edge between ui and vi. You are also given an integer 
	array queries. The answer to the jth query is the number of pairs of nodes 
	(a, b) that satisfy the following conditions:
	* a < b
	* cnt is strictly greater than queries[j], where cnt is the number of edges 
	  incident to a or b.
	Return an array answers such that answers.length == queries.length and 
	answers[j] is the answer of the jth query. Note that there can be repeated 
	edges.

	Example 1:
	Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]
	Output: [6,5]
	Explanation: The number of edges incident to at least one of each pair is 
	             shown above.

	Example 2:
	Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]
	Output: [10,10,9,8,6]

	Constraints:
	* 2 <= n <= 2 * 10^4
	* 1 <= edges.length <= 10^5
	* 1 <= ui, vi <= n
	* ui != vi
	* 1 <= queries.length <= 20
	* 0 <= queries[j] < edges.length"""

    def countPairs(self, n: int, edges: List[List[int]], queries: List[int]) -> List[int]:
        degree = [0]*n
        freq = defaultdict(int)
        for u, v in edges: 
            degree[u-1] += 1
            degree[v-1] += 1
            freq[min(u-1, v-1), max(u-1, v-1)] += 1
        
        vals = sorted(degree)
        
        ans = []
        for query in queries: 
            cnt = 0 
            lo, hi = 0, n-1
            while lo < hi: 
                if query < vals[lo] + vals[hi]: 
                    cnt += hi - lo # (lo, hi), (lo+1, hi), ..., (hi-1, hi) all valid
                    hi -= 1
                else: lo += 1
            for u, v in freq: 
                if degree[u] + degree[v] - freq[u, v] <= query < degree[u] + degree[v]: cnt -= 1
            ans.append(cnt)
        return ans


    """1784. Check if Binary String Has at Most One Segment of Ones (Easy)
	Given a binary string s without leading zeros, return true if s contains 
	at most one contiguous segment of ones. Otherwise, return false.

	Example 1:
	Input: s = "1001"
	Output: false
	Explanation: The ones do not form a contiguous segment.

	Example 2:
	Input: s = "110"
	Output: true

	Constraints:
	* 1 <= s.length <= 100
	* s[i] is either '0' or '1'.
	* s[0] is '1'."""

    def checkOnesSegment(self, s: str) -> bool:
        return "01" not in s


    """1785. Minimum Elements to Add to Form a Given Sum (Medium)
	You are given an integer array nums and two integers limit and goal. The 
	array nums has an interesting property that abs(nums[i]) <= limit. Return 
	the minimum number of elements you need to add to make the sum of the array 
	equal to goal. The array must maintain its property that 
	abs(nums[i]) <= limit. Note that abs(x) equals x if x >= 0, and -x 
	otherwise.

	Example 1:
	Input: nums = [1,-1,1], limit = 3, goal = -4
	Output: 2
	Explanation: You can add -2 and -3, then the sum of the array will be 
	             1 - 1 + 1 - 2 - 3 = -4.

	Example 2:
	Input: nums = [1,-10,9,1], limit = 100, goal = 0
	Output: 1

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= limit <= 10^6
	* -limit <= nums[i] <= limit
	* -10^9 <= goal <= 10^9"""

    def minElements(self, nums: List[int], limit: int, goal: int) -> int:
        return ceil(abs(goal - sum(nums))/limit)


    """1786. Number of Restricted Paths From First to Last Node (Medium)
	There is an undirected weighted connected graph. You are given a positive 
	integer n which denotes that the graph has n nodes labeled from 1 to n, and 
	an array edges where each edges[i] = [ui, vi, weighti] denotes that there 
	is an edge between nodes ui and vi with weight equal to weighti. A path 
	from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] 
	such that z0 = start and zk = end and there is an edge between zi and zi+1 
	where 0 <= i <= k-1. The distance of a path is the sum of the weights on 
	the edges of the path. Let distanceToLastNode(x) denote the shortest 
	distance of a path between node n and node x. A restricted path is a path 
	that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) 
	where 0 <= i <= k-1. Return the number of restricted paths from node 1 to 
	node n. Since that number may be too large, return it modulo 109 + 7.

	Example 1:
	Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]
	Output: 3
	Explanation: Each circle contains the node number in black and its 
	             distanceToLastNode value in blue. The three restricted paths 
	             are:
 				 1) 1 --> 2 --> 5
 				 2) 1 --> 2 --> 3 --> 5
				 3) 1 --> 3 --> 5

	Example 2:
	Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]
	Output: 1
	Explanation: Each circle contains the node number in black and its 
	             distanceToLastNode value in blue. The only restricted path is 
	             1 --> 3 --> 7.

	Constraints:
	* 1 <= n <= 2 * 10^4
	* n - 1 <= edges.length <= 4 * 10^4
	* edges[i].length == 3
	* 1 <= ui, vi <= n
	* ui != vi
	* 1 <= weighti <= 10^5
	* There is at most one edge between any two nodes.
	* There is at least one path between any two nodes."""

    def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:
        graph = {} # graph as adjacency list 
        for u, v, w in edges: 
            graph.setdefault(u-1, []).append((v-1, w))
            graph.setdefault(v-1, []).append((u-1, w))
        
        # dijkstra's algo
        pq = [(0, n-1)]
        dist = [inf]*(n-1) + [0]
        while pq: 
            d, u = heappop(pq)
            for v, w in graph[u]: 
                if dist[u] + w < dist[v]: 
                    dist[v] = dist[u] + w
                    heappush(pq, (dist[v], v))
        
        @cache
        def fn(u): 
            """Return number of restricted paths from u to n."""
            if u == n-1: return 1 # boundary condition 
            ans = 0
            for v, _ in graph[u]: 
                if dist[u] > dist[v]: ans += fn(v)
            return ans 
        
        return fn(0) % 1_000_000_007


    """1787. Make the XOR of All Segments Equal to Zero (Hard)
	You are given an array nums and an integer k. The XOR of a segment [left, right] 
	where left <= right is the XOR of all the elements with indices between 
	left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right]. 
	Return the minimum number of elements to change in the array such that the 
	XOR of all segments of size k is equal to zero.

	Example 1:
	Input: nums = [1,2,0,3,0], k = 1
	Output: 3
	Explanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].

	Example 2:
	Input: nums = [3,4,5,2,1,7,3,4,7], k = 3
	Output: 3
	Explanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].

	Example 3:
	Input: nums = [1,2,4,1,2,5,1,2,6], k = 3
	Output: 3
	Explanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].

	Constraints:
	* 1 <= k <= nums.length <= 2000
	* 0 <= nums[i] < 2^10"""

    def minChanges(self, nums: List[int], k: int) -> int:
        freq = defaultdict(lambda: defaultdict(int))
        for i, x in enumerate(nums): freq[i%k][x] += 1 # freq by row
        
        n = 1 << 10
        dp = [0] + [-inf]*(n-1)
        for i in range(k): 
            mx = max(dp)
            tmp = [0]*n
            for x, c in enumerate(dp): 
                for xx, cc in freq[i].items(): 
                    tmp[x^xx] = max(tmp[x^xx], c + cc, mx)
            dp = tmp 
        return len(nums) - dp[0]


    """1790. Check if One String Swap Can Make Strings Equal (Easy)
	You are given two strings s1 and s2 of equal length. A string swap is an 
	operation where you choose two indices in a string (not necessarily 
	different) and swap the characters at these indices. Return true if it is 
	possible to make both strings equal by performing at most one string swap 
	on exactly one of the strings. Otherwise, return false.

	Example 1:
	Input: s1 = "bank", s2 = "kanb"
	Output: true
	Explanation: For example, swap the first character with the last character 
	             of s2 to make "bank".

	Example 2:
	Input: s1 = "attack", s2 = "defend"
	Output: false
	Explanation: It is impossible to make them equal with one string swap.

	Example 3:
	Input: s1 = "kelb", s2 = "kelb"
	Output: true
	Explanation: The two strings are already equal, so no string swap operation 
	             is required.

	Example 4:
	Input: s1 = "abcd", s2 = "dcba"
	Output: false

	Constraints:
	* 1 <= s1.length, s2.length <= 100
	* s1.length == s2.length
	* s1 and s2 consist of only lowercase English letters."""

    def areAlmostEqual(self, s1: str, s2: str) -> bool:
        diff = [[x, y] for x, y in zip(s1, s2) if x != y]
        return not diff or len(diff) == 2 and diff[0][::-1] == diff[1]

    
    """1791. Find Center of Star Graph (Medium)
	There is an undirected star graph consisting of n nodes labeled from 1 to n. 
	A star graph is a graph where there is one center node and exactly n - 1 
	edges that connect the center node with every other node. You are given a 
	2D integer array edges where each edges[i] = [ui, vi] indicates that there 
	is an edge between the nodes ui and vi. Return the center of the given star 
	graph.

	Example 1:
	Input: edges = [[1,2],[2,3],[4,2]]
	Output: 2
	Explanation: As shown in the figure above, node 2 is connected to every 
	             other node, so 2 is the center.

	Example 2:
	Input: edges = [[1,2],[5,1],[1,3],[1,4]]
	Output: 1

	Constraints:
	* 3 <= n <= 10^5
	* edges.length == n - 1
	* edges[i].length == 2
	* 1 <= ui, vi <= n
	* ui != vi
	* The given edges represent a valid star graph."""

    def findCenter(self, edges: List[List[int]]) -> int:
        if edges[0][0] in edges[1]: return edges[0][0]
        else: return edges[0][1]


    """1792. Maximum Average Pass Ratio (Medium)
	There is a school that has classes of students and each class will be 
	having a final exam. You are given a 2D integer array classes, where 
	classes[i] = [passi, totali]. You know beforehand that in the ith class, 
	there are totali total students, but only passi number of students will 
	pass the exam. You are also given an integer extraStudents. There are 
	another extraStudents brilliant students that are guaranteed to pass the 
	exam of any class they are assigned to. You want to assign each of the 
	extraStudents students to a class in a way that maximizes the average pass 
	ratio across all the classes. The pass ratio of a class is equal to the 
	number of students of the class that will pass the exam divided by the 
	total number of students of the class. The average pass ratio is the sum of 
	pass ratios of all the classes divided by the number of the classes. Return 
	the maximum possible average pass ratio after assigning the extraStudents 
	students. Answers within 10-5 of the actual answer will be accepted.

	Example 1:
	Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2
	Output: 0.78333
	Explanation: You can assign the two extra students to the first class. The 
	             average pass ratio will be equal to 
	             (3/4 + 3/5 + 2/2) / 3 = 0.78333.

	Example 2:
	Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4
	Output: 0.53485

	Constraints:
	* 1 <= classes.length <= 10^5
	* classes[i].length == 2
	* 1 <= passi <= totali <= 10^5
	* 1 <= extraStudents <= 10^5"""

    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:
        pq = [(p/t - (p+1)/(t+1), p, t) for p, t in classes] # max-heap 
        heapify(pq)
        
        for _ in range(extraStudents):  
            _, p, t = heappop(pq)
            heappush(pq, ((p+1)/(t+1) - (p+2)/(t+2), p+1, t+1))
        
        return sum(p/t for _, p, t in pq)/len(pq)


    """1793. Maximum Score of a Good Subarray (Hard)
	You are given an array of integers nums (0-indexed) and an integer k. The 
	score of a subarray (i, j) is defined as 
	min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). 
	A good subarray is a subarray where i <= k <= j. Return the maximum 
	possible score of a good subarray.

	Example 1:
	Input: nums = [1,4,3,7,4,5], k = 3
	Output: 15
	Explanation: The optimal subarray is (1, 5) with a score of 
	             min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. 

	Example 2:
	Input: nums = [5,5,4,5,4,1,1,1], k = 0
	Output: 20
	Explanation: The optimal subarray is (0, 4) with a score of 
	             min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 2 * 10^4
	* 0 <= k < nums.length"""

    def maximumScore(self, nums: List[int], k: int) -> int:
        ans = mn0 = mn1 = nums[k]
        lo = hi = k
        while 0 <= lo-1 or hi+1 < len(nums): 
            if lo == 0 or hi+1 < len(nums) and nums[lo-1] < nums[hi+1]: hi += 1
            else: lo -= 1
            mn0 = min(mn0, nums[lo])
            mn1 = min(mn1, nums[hi])
            ans = max(ans, min(mn0, mn1)*(hi-lo+1))
        return ans 


    """1794. Count Pairs of Equal Substrings With Minimum Difference (Medium)
	You are given two strings firstString and secondString that are 0-indexed 
	and consist only of lowercase English letters. Count the number of index 
	quadruples (i,j,a,b) that satisfy the following conditions:
	* 0 <= i <= j < firstString.length
	* 0 <= a <= b < secondString.length
	* The substring of firstString that starts at the ith character and ends at 
	  the jth character (inclusive) is equal to the substring of secondString 
	  that starts at the ath character and ends at the bth character (inclusive).
	* j - a is the minimum possible value among all quadruples that satisfy the 
	  previous conditions.
	Return the number of such quadruples.

	Example 1:
	Input: firstString = "abcd", secondString = "bccda"
	Output: 1
	Explanation: The quadruple (0,0,4,4) is the only one that satisfies all the 
	             conditions and minimizes j - a.
	
	Example 2:
	Input: firstString = "ab", secondString = "cd"
	Output: 0
	Explanation: There are no quadruples satisfying all the conditions.

	Constraints:
	* 1 <= firstString.length, secondString.length <= 2 * 10^5
	* Both strings consist only of lowercase English letters."""

    def countQuadruples(self, firstString: str, secondString: str) -> int:
        prefix = {}
        suffix = {}
        for i, x in enumerate(firstString): prefix.setdefault(x, i)
        for i, x in enumerate(secondString): suffix[x] = i 
        
        ans = 0 
        most = -inf 
        for x in ascii_lowercase: 
            if x in prefix and x in suffix: 
                val = suffix[x] - prefix[x]
                if val > most: ans, most = 1, val
                elif val == most: ans += 1
        return ans


    """1796. Second Largest Digit in a String (Easy)
	Given an alphanumeric string s, return the second largest numerical digit 
	that appears in s, or -1 if it does not exist. An alphanumeric string is a 
	string consisting of lowercase English letters and digits.

	Example 1:
	Input: s = "dfa12321afd"
	Output: 2
	Explanation: The digits that appear in s are [1, 2, 3]. The second largest 
	             digit is 2.

	Example 2:
	Input: s = "abc1111"
	Output: -1
	Explanation: The digits that appear in s are [1]. There is no second 
	             largest digit. 

	Constraints:
	* 1 <= s.length <= 500
	* s consists of only lowercase English letters and/or digits."""

    def secondHighest(self, s: str) -> int:
        seen = set()
        for c in s: 
            if c.isdigit(): 
                seen.add(int(c))
        return -1 if len(seen) < 2 else sorted(seen)[-2]


    """1798. Maximum Number of Consecutive Values You Can Make (Medium)
	You are given an integer array coins of length n which represents the n 
	coins that you own. The value of the ith coin is coins[i]. You can make 
	some value x if you can choose some of your n coins such that their values 
	sum up to x. Return the maximum number of consecutive integer values that 
	you can make with your coins starting from and including 0. Note that you 
	may have multiple coins of the same value.

	Example 1:
	Input: coins = [1,3]
	Output: 2
	Explanation: You can make the following values:
	- 0: take []
	- 1: take [1]
	You can make 2 consecutive integer values starting from 0.

	Example 2:
	Input: coins = [1,1,1,4]
	Output: 8
	Explanation: You can make the following values:
	- 0: take []
	- 1: take [1]
	- 2: take [1,1]
	- 3: take [1,1,1]
	- 4: take [4]
	- 5: take [4,1]
	- 6: take [4,1,1]
	- 7: take [4,1,1,1]
	You can make 8 consecutive integer values starting from 0.

	Example 3:
	Input: nums = [1,4,10,3,1]
	Output: 20

	Constraints:
	* coins.length == n
	* 1 <= n <= 4 * 10^4
	* 1 <= coins[i] <= 4 * 10^4"""

    def getMaximumConsecutive(self, coins: List[int]) -> int:
        ans = 1
        for x in sorted(coins): 
            if ans < x: break 
            ans += x
        return ans


    """1799. Maximize Score After N Operations (Hard)
	You are given nums, an array of positive integers of size 2 * n. You must 
	perform n operations on this array. In the ith operation (1-indexed), you 
	will:
	* Choose two elements, x and y.
	* Receive a score of i * gcd(x, y).
	* Remove x and y from nums.
	Return the maximum score you can receive after performing n operations. The 
	function gcd(x, y) is the greatest common divisor of x and y.

	Example 1:
	Input: nums = [1,2]
	Output: 1
	Explanation: The optimal choice of operations is: (1 * gcd(1, 2)) = 1

	Example 2:
	Input: nums = [3,4,6,8]
	Output: 11
	Explanation: The optimal choice of operations is: 
	             (1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11
	
	Example 3:
	Input: nums = [1,2,3,4,5,6]
	Output: 14
	Explanation: The optimal choice of operations is:
     	         (1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14

	Constraints:
	* 1 <= n <= 7
	* nums.length == 2 * n
	* 1 <= nums[i] <= 10^6"""

    def maxScore(self, nums: List[int]) -> int:
        n = len(nums)
        
        @cache
        def fn(mask, k): 
            """Return maximum score at kth operation with available numbers by mask."""
            if mask == 0: return 0 # no more numbers 
            ans = 0
            for i in range(n): 
                if mask & 1 << i:
                    for j in range(i+1, n): 
                        if mask & 1 << j: 
                            mask0 = mask & ~(1<<i) & ~(1<<j) # unset ith & jth bit
                            ans = max(ans, k*gcd(nums[i], nums[j]) + fn(mask0, k+1))
            return ans 
        
        return fn((1<<n) - 1, 1)


    """1800. Maximum Ascending Subarray Sum (Easy)
	Given an array of positive integers nums, return the maximum possible sum 
	of an ascending subarray in nums. A subarray is defined as a contiguous 
	sequence of numbers in an array. A subarray [numsl, numsl+1, ..., numsr-1, 
	numsr] is ascending if for all i where l <= i < r, numsi < numsi+1. Note 
	that a subarray of size 1 is ascending.

	Example 1:
	Input: nums = [10,20,30,5,10,50]
	Output: 65
	Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65.

	Example 2:
	Input: nums = [10,20,30,40,50]
	Output: 150
	Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.

	Example 3:
	Input: nums = [12,17,15,13,10,11,12]
	Output: 33
	Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.

	Example 4:
	Input: nums = [100,10,1]
	Output: 100

	Constraints:
	* 1 <= nums.length <= 100
	* 1 <= nums[i] <= 100"""

    def maxAscendingSum(self, nums: List[int]) -> int:
        ans = val = 0
        for i, x in enumerate(nums): 
            if not i or nums[i-1] >= nums[i]: val = 0 # reset val 
            val += nums[i]
            ans = max(ans, val)
        return ans 


    """1801. Number of Orders in the Backlog (Medium)
	You are given a 2D integer array orders, where each 
	orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have 
	been placed of type orderTypei at the price pricei. The orderTypei is:
	* 0 if it is a batch of buy orders, or
	* 1 if it is a batch of sell orders.
	Note that orders[i] represents a batch of amounti independent orders with 
	the same price and order type. All orders represented by orders[i] will be 
	placed before all orders represented by orders[i+1] for all valid i. There 
	is a backlog that consists of orders that have not been executed. The 
	backlog is initially empty. When an order is placed, the following happens:
	* If the order is a buy order, you look at the sell order with the smallest 
	  price in the backlog. If that sell order's price is smaller than or equal 
	  to the current buy order's price, they will match and be executed, and 
	  that sell order will be removed from the backlog. Else, the buy order is 
	  added to the backlog.
	* Vice versa, if the order is a sell order, you look at the buy order with 
	  the largest price in the backlog. If that buy order's price is larger 
	  than or equal to the current sell order's price, they will match and be 
	  executed, and that buy order will be removed from the backlog. Else, the 
	  sell order is added to the backlog.
	Return the total amount of orders in the backlog after placing all the 
	orders from the input. Since this number can be large, return it modulo 
	10^9 + 7.

	Example 1:
	Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
	Output: 6
	Explanation: Here is what happens with the orders:
	- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.
	- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.
	- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.
	- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.
	Finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.

	Example 2:
	Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
	Output: 999999984
	Explanation: Here is what happens with the orders:
	- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.
	- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.
	- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.
	- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.
	Finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).

	Constraints:
	* 1 <= orders.length <= 10^5
	* orders[i].length == 3
	* 1 <= pricei, amounti <= 10^9
	* orderTypei is either 0 or 1."""

    def getNumberOfBacklogOrders(self, orders: List[List[int]]) -> int:
        buy, sell = [], [] # max-heap & min-heap 
        for p, q, t in orders: 
            if t: heappush(sell, [p, q])
            else: heappush(buy, [-p, q])
            
            while buy and sell and -buy[0][0] >= sell[0][0]: 
                qty = min(buy[0][1], sell[0][1])
                buy[0][1] -= qty
                sell[0][1] -= qty
                if not buy[0][1]: heappop(buy)
                if not sell[0][1]: heappop(sell)
        return (sum(q for _, q in sell) + sum(q for _, q in buy)) % 1_000_000_007


    """1802. Maximum Value at a Given Index in a Bounded Array (Medium)
	You are given three positive integers n, index and maxSum. You want to 
	construct an array nums (0-indexed) that satisfies the following conditions:
	* nums.length == n
	* nums[i] is a positive integer where 0 <= i < n.
	* abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.
	* The sum of all the elements of nums does not exceed maxSum.
	* nums[index] is maximized.
	Return nums[index] of the constructed array. ote that abs(x) equals x if 
	x >= 0, and -x otherwise.

	Example 1:
	Input: n = 4, index = 2,  maxSum = 6
	Output: 2
	Explanation: The arrays [1,1,2,1] and [1,2,2,1] satisfy all the conditions. 
	             There are no other valid arrays with a larger value at the 
	             given index.

	Example 2:
	Input: n = 6, index = 1,  maxSum = 10
	Output: 3

	Constraints:
	* 1 <= n <= maxSum <= 10^9
	* 0 <= index < n"""

    def maxValue(self, n: int, index: int, maxSum: int) -> int:
        
        def fn(n, x): 
            if n < x: return n*(2*x-n+1)//2
            return x*(1+x)//2 + n - x
        
        lo, hi = 0, 10**9
        while lo < hi: 
            mid = lo + hi + 1 >> 1
            sm = fn(index, mid-1) + fn(n-index, mid)
            if sm <= maxSum: lo = mid 
            else: hi = mid - 1
        return lo 


    """1803. Count Pairs With XOR in a Range (Hard)
	Given a (0-indexed) integer array nums and two integers low and high, 
	return the number of nice pairs. A nice pair is a pair (i, j) where 
	0 <= i < j < nums.length and low <= (nums[i] XOR nums[j]) <= high.

	Example 1:
	Input: nums = [1,4,2,7], low = 2, high = 6
	Output: 6
	Explanation: All nice pairs (i, j) are as follows:
	             - (0, 1): nums[0] XOR nums[1] = 5 
	             - (0, 2): nums[0] XOR nums[2] = 3
	             - (0, 3): nums[0] XOR nums[3] = 6
	             - (1, 2): nums[1] XOR nums[2] = 6
	             - (1, 3): nums[1] XOR nums[3] = 3
	             - (2, 3): nums[2] XOR nums[3] = 5

	Example 2:
	Input: nums = [9,8,4,2,1], low = 5, high = 14
	Output: 8
	Explanation: All nice pairs (i, j) are as follows:
	             - (0, 2): nums[0] XOR nums[2] = 13
	             - (0, 3): nums[0] XOR nums[3] = 11
	             - (0, 4): nums[0] XOR nums[4] = 8
	             - (1, 2): nums[1] XOR nums[2] = 12
	             - (1, 3): nums[1] XOR nums[3] = 10
	             - (1, 4): nums[1] XOR nums[4] = 9
	             - (2, 3): nums[2] XOR nums[3] = 6
	             - (2, 4): nums[2] XOR nums[4] = 5

	Constraints:
	* 1 <= nums.length <= 2 * 10^4
	* 1 <= nums[i] <= 2 * 10^4
	* 1 <= low <= high <= 2 * 10^4

	class Trie: 
	    def __init__(self): 
	        self.root = {}
	        
	    def insert(self, val): 
	        node = self.root 
	        for i in reversed(range(15)):
	            bit = (val >> i) & 1
	            if bit not in node: node[bit] = {"cnt": 0}
	            node = node[bit]
	            node["cnt"] += 1
	        
	    def count(self, val, high): 
	        ans = 0 
	        node = self.root
	        for i in reversed(range(15)):
	            if not node: break 
	            bit = (val >> i) & 1 
	            cmp = (high >> i) & 1
	            if cmp: 
	                if node.get(bit, {}): ans += node[bit]["cnt"]
	                node = node.get(1^bit, {})
	            else: node = node.get(bit, {})
	        return ans"""

    def countPairs(self, nums: List[int], low: int, high: int) -> int:
        trie = Trie()
        
        ans = 0
        for x in nums: 
            ans += trie.count(x, high+1) - trie.count(x, low)
            trie.insert(x)
        return ans 


    """1805. Number of Different Integers in a String (Easy)
	You are given a string word that consists of digits and lowercase English 
	letters. You will replace every non-digit character with a space. For 
	example, "a123bc34d8ef34" will become " 123  34 8  34". Notice that you are 
	left with some integers that are separated by at least one space: "123", 
	"34", "8", and "34". Return the number of different integers after 
	performing the replacement operations on word. Two integers are considered 
	different if their decimal representations without any leading zeros are 
	different.

	Example 1:
	Input: word = "a123bc34d8ef34"
	Output: 3
	Explanation: The three different integers are "123", "34", and "8". Notice 
	             that "34" is only counted once.

	Example 2:
	Input: word = "leet1234code234"
	Output: 2
	
	Example 3:
	Input: word = "a1b01c001"
	Output: 1
	Explanation: The three integers "1", "01", and "001" all represent the same 
	             integer because the leading zeros are ignored when comparing 
	             their decimal values.

	Constraints:
	* 1 <= word.length <= 1000
	* word consists of digits and lowercase English letters."""

    def numDifferentIntegers(self, word: str) -> int:
        seen = set()
        for key, grp in groupby(word, str.isdigit): 
            if key: seen.add(int("".join(grp)))
        return len(seen)


    """1806. Minimum Number of Operations to Reinitialize a Permutation (Medium)
	You are given an even integer n. You initially have a permutation 
	perm of size n where perm[i] == i (0-indexed). In one operation, you 
	will create a new array arr, and for each i:
	* If i % 2 == 0, then arr[i] = perm[i / 2].
	* If i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].
	You will then assign arr to perm. Return the minimum non-zero number of 
	operations you need to perform on perm to return the permutation to its 
	initial value.

	Example 1:
	Input: n = 2
	Output: 1
	Explanation: prem = [0,1] initially. 
	             After the 1st operation, prem = [0,1]
	             So it takes only 1 operation.

	Example 2:
	Input: n = 4
	Output: 2
	Explanation: prem = [0,1,2,3] initially. 
	             After the 1st operation, prem = [0,2,1,3]
	             After the 2nd operation, prem = [0,1,2,3]
	             So it takes only 2 operations.
	
	Example 3:
	Input: n = 6
	Output: 4

	Constraints:
	* 2 <= n <= 1000
	* n is even."""

    def reinitializePermutation(self, n: int) -> int:
        ans = 0
        perm = list(range(n))
        while True: 
            ans += 1
            perm = [perm[n//2+(i-1)//2] if i&1 else perm[i//2] for i in range(n)]
            if all(perm[i] == i for i in range(n)): return ans


    """1807. Evaluate the Bracket Pairs of a String (Medium)
	You are given a string s that contains some bracket pairs, with each pair 
	containing a non-empty key. 
	* For example, in the string "(name)is(age)yearsold", there are two bracket 
	  pairs that contain the keys "name" and "age".
	You know the values of a wide range of keys. This is represented by a 2D 
	string array knowledge where each knowledge[i] = [keyi, valuei] indicates 
	that key keyi has a value of valuei. You are tasked to evaluate all of the 
	bracket pairs. When you evaluate a bracket pair that contains some key keyi, 
	you will:
	* Replace keyi and the bracket pair with the key's corresponding valuei.
	* If you do not know the value of the key, you will replace keyi and the 
	  bracket pair with a question mark "?" (without the quotation marks).
	Each key will appear at most once in your knowledge. There will not be any 
	nested brackets in s. Return the resulting string after evaluating all of 
	the bracket pairs.

	Example 1:
	Input: s = "(name)is(age)yearsold", knowledge = [["name","bob"],["age","two"]]
	Output: "bobistwoyearsold"
	Explanation: The key "name" has a value of "bob", so replace "(name)" with "bob".
	             The key "age" has a value of "two", so replace "(age)" with "two".

	Example 2:
	Input: s = "hi(name)", knowledge = [["a","b"]]
	Output: "hi?"
	Explanation: As you do not know the value of the key "name", replace 
	             "(name)" with "?".

	Example 3:
	Input: s = "(a)(a)(a)aaa", knowledge = [["a","yes"]]
	Output: "yesyesyesaaa"
	Explanation: The same key can appear multiple times.
	The key "a" has a value of "yes", so replace all occurrences of "(a)" with "yes".
	Notice that the "a"s not in a bracket pair are not evaluated.
	
	Example 4:
	Input: s = "(a)(b)", knowledge = [["a","b"],["b","a"]]
	Output: "ba"

	Constraints:
	* 1 <= s.length <= 10^5
	* 0 <= knowledge.length <= 10^5
	* knowledge[i].length == 2
	* 1 <= keyi.length, valuei.length <= 10
	* s consists of lowercase English letters and round brackets '(' and ')'.
	* Every open bracket '(' in s will have a corresponding close bracket ')'.
	* The key in each bracket pair of s will be non-empty.
	* There will not be any nested bracket pairs in s.
	* keyi and valuei consist of lowercase English letters.
	* Each keyi in knowledge is unique."""

    def evaluate(self, s: str, knowledge: List[List[str]]) -> str:
        mp = dict(knowledge)
        i = 0 
        ans = []
        while i < len(s): 
            if s[i] == "(": 
                ii = i 
                while ii < len(s) and s[ii] != ")": 
                    ii += 1
                ans.append(mp.get(s[i+1:ii], "?"))
                i = ii+1
            else: 
                ans.append(s[i])
                i += 1
        return "".join(ans)


    """1812. Determine Color of a Chessboard Square (Easy)
	You are given coordinates, a string that represents the coordinates of a 
	square of the chessboard. Below is a chessboard for your reference. Return 
	true if the square is white, and false if the square is black. The 
	coordinate will always represent a valid chessboard square. The coordinate 
	will always have the letter first, and the number second.

	Example 1:
	Input: coordinates = "a1"
	Output: false
	Explanation: From the chessboard above, the square with coordinates "a1" is 
	             black, so return false.

	Example 2:
	Input: coordinates = "h3"
	Output: true
	Explanation: From the chessboard above, the square with coordinates "h3" is 
	             white, so return true.
	
	Example 3:
	Input: coordinates = "c7"
	Output: false

	Constraints:
	* coordinates.length == 2
	* 'a' <= coordinates[0] <= 'h'
	* '1' <= coordinates[1] <= '8'"""

    def squareIsWhite(self, coordinates: str) -> bool:
        return (ord(coordinates[0])-97)&1 == int(coordinates[1])&1	


    """1813. Sentence Similarity III (Medium)
	A sentence is a list of words that are separated by a single space with no 
	leading or trailing spaces. For example, "Hello World", "HELLO", "hello 
	world hello world" are all sentences. Words consist of only uppercase and 
	lowercase English letters. Two sentences sentence1 and sentence2 are 
	similar if it is possible to insert an arbitrary sentence (possibly empty) 
	inside one of these sentences such that the two sentences become equal. For 
	example, sentence1 = "Hello my name is Jane" and sentence2 = "Hello Jane" 
	can be made equal by inserting "my name is" between "Hello" and "Jane" in 
	sentence2. Given two sentences sentence1 and sentence2, return true if 
	sentence1 and sentence2 are similar. Otherwise, return false.

	Example 1:
	Input: sentence1 = "My name is Haley", sentence2 = "My Haley"
	Output: true
	Explanation: sentence2 can be turned to sentence1 by inserting "name is" 
	             between "My" and "Haley".

	Example 2:
	Input: sentence1 = "of", sentence2 = "A lot of words"
	Output: false
	Explanation: No single sentence can be inserted inside one of the sentences 
	             to make it equal to the other.
	
	Example 3:
	Input: sentence1 = "Eating right now", sentence2 = "Eating"
	Output: true
	Explanation: sentence2 can be turned to sentence1 by inserting "right now" 
	             at the end of the sentence.
	
	Example 4:
	Input: sentence1 = "Luky", sentence2 = "Lucccky"
	Output: false

	Constraints:
	* 1 <= sentence1.length, sentence2.length <= 100
	* sentence1 and sentence2 consist of lowercase and uppercase English letters 
	  and spaces.
	* The words in sentence1 and sentence2 are separated by a single space."""

    def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:
        if len(sentence1) < len(sentence2): 
            sentence1, sentence2 = sentence2, sentence1 
        words1 = sentence1.split()
        words2 = sentence2.split()
        
        lo = 0 
        while lo < len(words2) and words1[lo] == words2[lo]: lo += 1
        
        hi = -1 
        while -len(words2) <= hi and words1[hi] == words2[hi]: hi -= 1
        
        return lo - hi -1 >= len(words2)

    
    """1814. Count Nice Pairs in an Array (Medium)
	You are given an array nums that consists of non-negative integers. Let us 
	define rev(x) as the reverse of the non-negative integer x. For example, 
	rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it 
	satisfies all of the following conditions:
	* 0 <= i < j < nums.length
	* nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
	Return the number of nice pairs of indices. Since that number can be too 
	large, return it modulo 109 + 7.

	Example 1:
	Input: nums = [42,11,1,97]
	Output: 2
	Explanation: The two pairs are:
	 - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.
	 - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.

	Example 2:
	Input: nums = [13,10,35,24,76]
	Output: 4

	Constraints:
	* 1 <= nums.length <= 10^5
	* 0 <= nums[i] <= 10^9"""

    def countNicePairs(self, nums: List[int]) -> int:
        ans = 0 
        freq = defaultdict(int)
        for x in nums: 
            x -= int(str(x)[::-1])
            ans += freq[x]
            freq[x] += 1
        return ans % 1_000_000_007


    """1815. Maximum Number of Groups Getting Fresh Donuts (Hard)
	There is a donuts shop that bakes donuts in batches of batchSize. They have 
	a rule where they must serve all of the donuts of a batch before serving 
	any donuts of the next batch. You are given an integer batchSize and an 
	integer array groups, where groups[i] denotes that there is a group of 
	groups[i] customers that will visit the shop. Each customer will get 
	exactly one donut. When a group visits the shop, all customers of the group 
	must be served before serving any of the following groups. A group will be 
	happy if they all get fresh donuts. That is, the first customer of the 
	group does not receive a donut that was left over from the previous group. 
	You can freely rearrange the ordering of the groups. Return the maximum 
	possible number of happy groups after rearranging the groups.

	Example 1:
	Input: batchSize = 3, groups = [1,2,3,4,5,6]
	Output: 4
	Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 
	             4th, and 6th groups will be happy.

	Example 2:
	Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]
	Output: 4

	Constraints:
	* 1 <= batchSize <= 9
	* 1 <= groups.length <= 30
	* 1 <= groups[i] <= 10^9"""

    def maxHappyGroups(self, batchSize: int, groups: List[int]) -> int:
        ans = 0 
        freq = [0]*batchSize
        for x in groups: 
            x %= batchSize 
            if x == 0: ans += 1
            elif freq[batchSize-x]: 
                ans += 1
                freq[batchSize-x] -= 1
            else: freq[x] += 1
            
        @cache
        def fn(freq, r): 
            """Return max group getting fresh donuts."""
            ans = 0 
            if any(freq): 
                for i, x in enumerate(freq):  
                    if x: ans = max(ans, fn(freq[:i] + (x-1,) + freq[i+1:], (r+i)%batchSize))
                if r == 0: ans += 1
            return ans
        
        return fn(tuple(freq), 0) + ans


    """1816. Truncate Sentence (Easy)
	A sentence is a list of words that are separated by a single space with no 
	leading or trailing spaces. Each of the words consists of only uppercase 
	and lowercase English letters (no punctuation). For example, "Hello World", 
	"HELLO", and "hello world hello world" are all sentences. You are given a 
	sentence s and an integer k. You want to truncate s such that it contains 
	only the first k words. Return s after truncating it.

	Example 1:
	Input: s = "Hello how are you Contestant", k = 4
	Output: "Hello how are you"
	Explanation:
	The words in s are ["Hello", "how" "are", "you", "Contestant"].
	The first 4 words are ["Hello", "how", "are", "you"].
	Hence, you should return "Hello how are you".

	Example 2:
	Input: s = "What is the solution to this problem", k = 4
	Output: "What is the solution"
	Explanation:
	The words in s are ["What", "is" "the", "solution", "to", "this", "problem"].
	The first 4 words are ["What", "is", "the", "solution"].
	Hence, you should return "What is the solution".

	Example 3:
	Input: s = "chopper is not a tanuki", k = 5
	Output: "chopper is not a tanuki"

	Constraints:
	* 1 <= s.length <= 500
	* k is in the range [1, the number of words in s].
	* s consist of only lowercase and uppercase English letters and spaces.
	* The words in s are separated by a single space.
	* There are no leading or trailing spaces."""

    def truncateSentence(self, s: str, k: int) -> str:
        return " ".join(s.split()[:k])


    """1817. Finding the Users Active Minutes (Medium)
	You are given the logs for users' actions on LeetCode, and an integer k. 
	The logs are represented by a 2D integer array logs where each 
	logs[i] = [IDi, timei] indicates that the user with IDi performed an 
	action at the minute timei. Multiple users can perform actions 
	simultaneously, and a single user can perform multiple actions in the same 
	minute. The user active minutes (UAM) for a given user is defined as the 
	number of unique minutes in which the user performed an action on LeetCode. 
	A minute can only be counted once, even if multiple actions occur during it.
	You are to calculate a 1-indexed array answer of size k such that, for each 
	j (1 <= j <= k), answer[j] is the number of users whose UAM equals j. 
	Return the array answer as described above.

	Example 1:
	Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5
	Output: [0,2,0,0,0]
	Explanation:
	The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).
	The user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.
	Since both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.

	Example 2:
	Input: logs = [[1,1],[2,2],[2,3]], k = 4
	Output: [1,1,0,0]
	Explanation:
	The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.
	The user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.
	There is one user with a UAM of 1 and one with a UAM of 2.
	Hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.

	Constraints:
	* 1 <= logs.length <= 10^4
	* 0 <= IDi <= 10^9
	* 1 <= timei <= 10^5
	* k is in the range [The maximum UAM for a user, 10^5]."""

    def findingUsersActiveMinutes(self, logs: List[List[int]], k: int) -> List[int]:
        mp = {}
        for i, t in logs: 
            mp.setdefault(i, set()).add(t)
            
        ans = [0]*k
        for v in mp.values(): 
            if len(v) <= k: 
                ans[len(v)-1] += 1
        return ans 


    """1818. Minimum Absolute Sum Difference (Medium)
	You are given two positive integer arrays nums1 and nums2, both of length n.
	The absolute sum difference of arrays nums1 and nums2 is defined as the sum 
	of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed). You can replace 
	at most one element of nums1 with any other element in nums1 to minimize 
	the absolute sum difference. Return the minimum absolute sum difference 
	after replacing at most one element in the array nums1. Since the answer 
	may be large, return it modulo 109 + 7. |x| is defined as:
	* x if x >= 0, or
	* -x if x < 0.

	Example 1:
	Input: nums1 = [1,7,5], nums2 = [2,3,5]
	Output: 3
	Explanation: There are two possible optimal solutions:
	- Replace the second element with the first: [1,7,5] => [1,1,5], or
	- Replace the second element with the third: [1,7,5] => [1,5,5].
	Both will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3.

	Example 2:
	Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]
	Output: 0
	Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an 
	absolute sum difference of 0.

	Example 3:
	Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]
	Output: 20
	Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].
	This yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20

	Constraints:
	* n == nums1.length
	* n == nums2.length
	* 1 <= n <= 10^5
	* 1 <= nums1[i], nums2[i] <= 10^5"""

    def minAbsoluteSumDiff(self, nums1: List[int], nums2: List[int]) -> int:
        s1 = sorted(nums1)
        ans = bnft = 0 
        for x, y in zip(nums1, nums2): 
            ans += abs(x - y)
            k = bisect_left(s1, y)
            if k < len(s1): bnft = max(bnft, abs(x - y) - (s1[k] - y)) # benefit of replacing x to s1[k]
            if 0 < k: bnft = max(bnft, abs(x - y) - (y - s1[k-1])) # benefit of replacing x to s1[k-1]
        return (ans - bnft) % 1_000_000_007


    """1819. Number of Different Subsequences GCDs (Hard)
	You are given an array nums that consists of positive integers. The GCD of 
	a sequence of numbers is defined as the greatest integer that divides all 
	the numbers in the sequence evenly. For example, the GCD of the sequence 
	[4,6,16] is 2. A subsequence of an array is a sequence that can be formed 
	by removing some elements (possibly none) of the array. For example, 
	[2,5,10] is a subsequence of [1,2,1,2,4,1,5,10]. Return the number of 
	different GCDs among all non-empty subsequences of nums.

	Example 1:
	Input: nums = [6,10,3]
	Output: 5
	Explanation: The figure shows all the non-empty subsequences and their GCDs.
   	             The different GCDs are 6, 10, 3, 2, and 1.

	Example 2:
	Input: nums = [5,15,40,5,6]
	Output: 7

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 2 * 10^5"""

    def countDifferentSubsequenceGCDs(self, nums: List[int]) -> int:
        nums = set(nums)
        
        ans = 0
        m = max(nums)
        for x in range(1, m+1): 
            g = 0
            for xx in range(x, m+1, x): 
                if xx in nums: g = gcd(g, xx)
            if g == x: ans += 1
        return ans 


    """1820. Maximum Number of Accepted Invitations (Medium)
	There are m boys and n girls in a class attending an upcoming party. You 
	are given an m x n integer matrix grid, where grid[i][j] equals 0 or 1. If 
	grid[i][j] == 1, then that means the ith boy can invite the jth girl to the 
	party. A boy can invite at most one girl, and a girl can accept at most one 
	invitation from a boy. Return the maximum possible number of accepted 
	invitations.

	Example 1:
	Input: grid = [[1,1,1],
	               [1,0,1],
	               [0,0,1]]
	Output: 3
	Explanation: The invitations are sent as follows:
	             - The 1st boy invites the 2nd girl.
	             - The 2nd boy invites the 1st girl.
	             - The 3rd boy invites the 3rd girl.
	
	Example 2:
	Input: grid = [[1,0,1,0],
	               [1,0,0,0],
	               [0,0,1,0],
	               [1,1,1,0]]
	Output: 3
	Explanation: The invitations are sent as follows:
	             -The 1st boy invites the 3rd girl.
	             -The 2nd boy invites the 1st girl.
	             -The 3rd boy invites no one.
	             -The 4th boy invites the 2nd girl.

	Constraints:
	* grid.length == m
	* grid[i].length == n
	* 1 <= m, n <= 200
	* grid[i][j] is either 0 or 1."""

    def maximumInvitations(self, grid: List[List[int]]) -> int:
    	# maximum bipartite matching 
        m, n = len(grid), len(grid[0])
        ans = 0
        match = [-1] * n
        
        def fn(i): 
            """Look up match for ith boy."""
            for j in range(n):
                if grid[i][j] and not seen[j]: 
                    seen[j] = True
                    if match[j] == -1 or fn(match[j]): 
                        match[j] = i
                        return True 
            return False 
        
        for i in range(m):
            seen = [False] * n
            if fn(i): ans += 1
        return ans 


    """1822. Sign of the Product of an Array (Easy)
	There is a function signFunc(x) that returns:
	* 1 if x is positive.
	* -1 if x is negative.
	* 0 if x is equal to 0.
	You are given an integer array nums. Let product be the product of all 
	values in the array nums. Return signFunc(product).

	Example 1:
	Input: nums = [-1,-2,-3,-4,3,2,1]
	Output: 1
	Explanation: The product of all values in the array is 144, and signFunc(144) = 1
	
	Example 2:
	Input: nums = [1,5,0,2,-3]
	Output: 0
	Explanation: The product of all values in the array is 0, and signFunc(0) = 0

	Example 3:
	Input: nums = [-1,1,-1,1,-1]
	Output: -1
	Explanation: The product of all values in the array is -1, and signFunc(-1) = -1

	Constraints:
	* 1 <= nums.length <= 1000
	* -100 <= nums[i] <= 100"""

    def arraySign(self, nums: List[int]) -> int:
        ans = 1
        for x in nums: 
            if x == 0: return 0 
            if x < 0: ans *= -1
        return ans 


    """1823. Find the Winner of the Circular Game (Medium)
	There are n friends that are playing a game. The friends are sitting in a 
	circle and are numbered from 1 to n in clockwise order. More formally, 
	moving clockwise from the ith friend brings you to the (i+1)th friend for 
	1 <= i < n, and moving clockwise from the nth friend brings you to the 1st 
	friend. The rules of the game are as follows:
	* Start at the 1st friend.
	* Count the next k friends in the clockwise direction including the friend 
	  you started at. The counting wraps around the circle and may count some 
	  friends more than once.
	* The last friend you counted leaves the circle and loses the game.
	* If there is still more than one friend in the circle, go back to step 2 
	  starting from the friend immediately clockwise of the friend who just 
	  lost and repeat.
	* Else, the last friend in the circle wins the game.
	Given the number of friends, n, and an integer k, return the winner of the 
	game.

	Example 1:
	Input: n = 5, k = 2
	Output: 3
	Explanation: Here are the steps of the game:
	1) Start at friend 1.
	2) Count 2 friends clockwise, which are friends 1 and 2.
	3) Friend 2 leaves the circle. Next start is friend 3.
	4) Count 2 friends clockwise, which are friends 3 and 4.
	5) Friend 4 leaves the circle. Next start is friend 5.
	6) Count 2 friends clockwise, which are friends 5 and 1.
	7) Friend 1 leaves the circle. Next start is friend 3.
	8) Count 2 friends clockwise, which are friends 3 and 5.
	9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.

	Example 2:
	Input: n = 6, k = 5
	Output: 1
	Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is 
	             friend 1.
	 
	Constraints: 1 <= k <= n <= 500"""

    def findTheWinner(self, n: int, k: int) -> int:
    	"""Josephus Problem"""
        ans = 0
        for x in range(2, n+1): 
            ans = (ans + k) % x
        return ans + 1


    """1824. Minimum Sideway Jumps (Medium)
	There is a 3 lane road of length n that consists of n + 1 points labeled 
	from 0 to n. A frog starts at point 0 in the second lane and wants to jump 
	to point n. However, there could be obstacles along the way. You are given 
	an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 
	to 3) describes an obstacle on the lane obstacles[i] at point i. If 
	obstacles[i] == 0, there are no obstacles at point i. There will be at most 
	one obstacle in the 3 lanes at each point. For example, if obstacles[2] == 1, 
	then there is an obstacle on lane 1 at point 2. The frog can only travel 
	from point i to point i + 1 on the same lane if there is not an obstacle on 
	the lane at point i + 1. To avoid obstacles, the frog can also perform a 
	side jump to jump to another lane (even if they are not adjacent) at the 
	same point if there is no obstacle on the new lane. For example, the frog 
	can jump from lane 3 at point 3 to lane 1 at point 3. Return the minimum 
	number of side jumps the frog needs to reach any lane at point n starting 
	from lane 2 at point 0. Note: There will be no obstacles on points 0 and n.

	Example 1:
	Input: obstacles = [0,1,2,3,0]
	Output: 2 
	Explanation: The optimal solution is shown by the arrows above. There are 2 
	             side jumps (red arrows). Note that the frog can jump over 
	             obstacles only when making side jumps (as shown at point 2).

	Example 2:
	Input: obstacles = [0,1,1,3,3,0]
	Output: 0
	Explanation: There are no obstacles on lane 2. No side jumps are required.
	
	Example 3:
	Input: obstacles = [0,2,1,0,3,0]
	Output: 2
	Explanation: The optimal solution is shown by the arrows above. There are 2
	             side jumps.

	Constraints:
	* obstacles.length == n + 1
	* 1 <= n <= 5 * 10^5
	* 0 <= obstacles[i] <= 3
	* obstacles[0] == obstacles[n] == 0"""

    def minSideJumps(self, obstacles: List[int]) -> int:
        dp = [0]*3 
        for i in reversed(range(len(obstacles) - 1)): 
            tmp = [inf]*3
            for k in range(3):
                if obstacles[i]-1 != k: 
                    tmp[k] = dp[k]
                    if obstacles[i]-1 != (k+1)%3: tmp[k] = min(tmp[k], 1 + dp[(k+1)%3])
                    if obstacles[i]-1 != (k+2)%3: tmp[k] = min(tmp[k], 1 + dp[(k+2)%3])
            dp = tmp
        return dp[1]


    """1827. Minimum Operations to Make the Array Increasing (Easy)
	You are given an integer array nums (0-indexed). In one operation, you can 
	choose an element of the array and increment it by 1. For example, if 
	nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].
	Return the minimum number of operations needed to make nums strictly 
	increasing. An array nums is strictly increasing if nums[i] < nums[i+1] for 
	all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly 
	increasing.

	Example 1:
	Input: nums = [1,1,1]
	Output: 3
	Explanation: You can do the following operations:
	1) Increment nums[2], so nums becomes [1,1,2].
	2) Increment nums[1], so nums becomes [1,2,2].
	3) Increment nums[2], so nums becomes [1,2,3].

	Example 2:
	Input: nums = [1,5,2,4,1]
	Output: 14

	Example 3:
	Input: nums = [8]
	Output: 0

	Constraints:
	* 1 <= nums.length <= 5000
	* 1 <= nums[i] <= 10^4"""

    def minOperations(self, nums: List[int]) -> int:
        ans = 0
        for i in range(1, len(nums)):
            if nums[i-1] >= nums[i]: 
                ans += 1 + nums[i-1] - nums[i]
                nums[i] = 1 + nums[i-1]
        return ans 


    """1828. Queries on Number of Points Inside a Circle (Medium)
	You are given an array points where points[i] = [xi, yi] is the coordinates 
	of the ith point on a 2D plane. Multiple points can have the same coordinates.
	You are also given an array queries where queries[j] = [xj, yj, rj] describes 
	a circle centered at (xj, yj) with a radius of rj. For each query queries[j], 
	compute the number of points inside the jth circle. Points on the border of 
	the circle are considered inside. Return an array answer, where answer[j] is 
	the answer to the jth query.

	Example 1:
	Input: points = [[1,3],[3,3],[5,3],[2,2]], 
	       queries = [[2,3,1],[4,3,1],[1,1,2]]
	Output: [3,2,2]
	Explanation: The points and circles are shown above. queries[0] is the green 
	             circle, queries[1] is the red circle, and queries[2] is the blue 
	             circle.

	Example 2:
	Input: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], 
	       queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]
	Output: [2,3,2,4]
	Explanation: The points and circles are shown above. queries[0] is green, 
	             queries[1] is red, queries[2] is blue, and queries[3] is purple.

	Constraints:
	* 1 <= points.length <= 500
	* points[i].length == 2
	* 0 <= xi, yi <= 500
	* 1 <= queries.length <= 500
	* queries[j].length == 3
	* 0 <= xj, yj <= 500
	* 1 <= rj <= 500
	* All coordinates are integers.

	Follow up: Could you find the answer for each query in better complexity than 
	           O(n)?"""

    def countPoints(self, points: List[List[int]], queries: List[List[int]]) -> List[int]:
        ans = []
        for x, y, r in queries: 
            val = 0
            for xx, yy in points: 
                if (x-xx)**2 + (y-yy)**2 <= r**2: 
                    val += 1
            ans.append(val)
        return ans 


    """1829. Maximum XOR for Each Query (Medium)
	You are given a sorted array nums of n non-negative integers and an integer 
	maximumBit. You want to perform the following query n times:
	* Find a non-negative integer k < 2maximumBit such that nums[0] XOR nums[1] 
	  XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to 
	  the ith query.
	* Remove the last element from the current array nums.
	Return an array answer, where answer[i] is the answer to the ith query.

	Example 1:
	Input: nums = [0,1,1,3], maximumBit = 2
	Output: [0,3,2,3]
	Explanation: The queries are answered as follows:
	1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.
	2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.
	3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.
	4th query: nums = [0], k = 3 since 0 XOR 3 = 3.

	Example 2:
	Input: nums = [2,3,4,7], maximumBit = 3
	Output: [5,2,6,5]
	Explanation: The queries are answered as follows:
	1st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.
	2nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.
	3rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.
	4th query: nums = [2], k = 5 since 2 XOR 5 = 7.

	Example 3:
	Input: nums = [0,1,2,2,5,7], maximumBit = 3
	Output: [4,3,6,4,6,7]

	Constraints:
	* nums.length == n
	* 1 <= n <= 10^5
	* 1 <= maximumBit <= 20
	* 0 <= nums[i] < 2maximumBit
	* nums is sorted in ascending order."""

    def getMaximumXor(self, nums: List[int], maximumBit: int) -> List[int]:
        ans = [0]*len(nums)
        prefix = 0
        for i, x in enumerate(nums): 
            prefix ^= x 
            ans[~i] = prefix ^ ((1 << maximumBit) -1)
        return ans


    """1830. Minimum Number of Operations to Make String Sorted (Hard)
	You are given a string s (0-indexed). You are asked to perform the 
	following operation on s until you get a sorted string:
	* Find the largest index i such that 1 <= i < s.length and s[i] < s[i - 1].
	* Find the largest index j such that i <= j < s.length and s[k] < s[i - 1] 
	  for all the possible values of k in the range [i, j] inclusive.
	* Swap the two characters at indices i - 1 and j.
	* Reverse the suffix starting at index i.
	Return the number of operations needed to make the string sorted. Since the 
	answer can be too large, return it modulo 109 + 7.

	Example 1:
	Input: s = "cba"
	Output: 5
	Explanation: The simulation goes as follows:
	Operation 1: i=2, j=2. Swap s[1] and s[2] to get s="cab", then reverse the suffix starting at 2. Now, s="cab".
	Operation 2: i=1, j=2. Swap s[0] and s[2] to get s="bac", then reverse the suffix starting at 1. Now, s="bca".
	Operation 3: i=2, j=2. Swap s[1] and s[2] to get s="bac", then reverse the suffix starting at 2. Now, s="bac".
	Operation 4: i=1, j=1. Swap s[0] and s[1] to get s="abc", then reverse the suffix starting at 1. Now, s="acb".
	Operation 5: i=2, j=2. Swap s[1] and s[2] to get s="abc", then reverse the suffix starting at 2. Now, s="abc".

	Example 2:
	Input: s = "aabaa"
	Output: 2
	Explanation: The simulation goes as follows:
	Operation 1: i=3, j=4. Swap s[2] and s[4] to get s="aaaab", then reverse the substring starting at 3. Now, s="aaaba".
	Operation 2: i=4, j=4. Swap s[3] and s[4] to get s="aaaab", then reverse the substring starting at 4. Now, s="aaaab".

	Example 3:
	Input: s = "cdbea"
	Output: 63

	Example 4:
	Input: s = "leetcodeleetcodeleetcode"
	Output: 982157772

	Constraints:
	* 1 <= s.length <= 3000
	* s consists only of lowercase English letters."""

    def makeStringSorted(self, s: str) -> int:
        freq = [0]*26
        for c in s: freq[ord(c) - 97] += 1
        
        MOD = 1_000_000_007
        fac = cache(lambda x: x*fac(x-1)%MOD if x else 1)
        ifac = cache(lambda x: pow(fac(x), MOD-2, MOD)) # Fermat's little theorem (a**(p-1) = 1 (mod p))
        
        ans, n = 0, len(s)
        for c in s: 
            val = ord(c) - 97
            mult = fac(n-1)
            for k in range(26): mult *= ifac(freq[k])
            for k in range(val): ans += freq[k] * mult
            n -= 1
            freq[val] -= 1
        return ans % MOD


    """1832. Check if the Sentence Is Pangram (Easy)
	A pangram is a sentence where every letter of the English alphabet appears 
	at least once. Given a string sentence containing only lowercase English 
	letters, return true if sentence is a pangram, or false otherwise.

	Example 1:
	Input: sentence = "thequickbrownfoxjumpsoverthelazydog"
	Output: true
	Explanation: sentence contains at least one of every letter of the English alphabet.

	Example 2:
	Input: sentence = "leetcode"
	Output: false

	Constraints:
	* 1 <= sentence.length <= 1000
	* sentence consists of lowercase English letters."""

    def checkIfPangram(self, sentence: str) -> bool:
        freq = [0]*26
        for x in sentence: 
            freq[ord(x) - 97] += 1
        return min(freq) > 0 


    """1833. Maximum Ice Cream Bars (Medium)
	It is a sweltering summer day, and a boy wants to buy some ice cream bars. 
	At the store, there are n ice cream bars. You are given an array costs of 
	length n, where costs[i] is the price of the ith ice cream bar in coins. 
	The boy initially has coins coins to spend, and he wants to buy as many ice 
	cream bars as possible. Return the maximum number of ice cream bars the boy 
	can buy with coins coins. Note: The boy can buy the ice cream bars in any 
	order.

	Example 1:
	Input: costs = [1,3,2,4,1], coins = 7
	Output: 4
	Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total 
	             price of 1 + 3 + 2 + 1 = 7.

	Example 2:
	Input: costs = [10,6,8,7,7,8], coins = 5
	Output: 0
	Explanation: The boy cannot afford any of the ice cream bars.
	
	Example 3:
	Input: costs = [1,6,3,1,2,5], coins = 20
	Output: 6
	Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.

	Constraints:
	* costs.length == n
	* 1 <= n <= 10^5
	* 1 <= costs[i] <= 10^5
	* 1 <= coins <= 10^8"""

    def maxIceCream(self, costs: List[int], coins: int) -> int:
        ans = 0
        for x in sorted(costs): 
            if x <= coins: 
                ans += 1
                coins -= x
            else: break 
        return ans 


    """1834. Single-Threaded CPU (Medium)
	You are given n tasks labeled from 0 to n - 1 represented by a 2D 
	integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] 
	means that the ith task will be available to process at enqueueTimei 
	and will take processingTimei to finish processing. You have a single-
	threaded CPU that can process at most one task at a time and will act in 
	the following way:
	* If the CPU is idle and there are no available tasks to process, the CPU 
	  remains idle.
	* If the CPU is idle and there are available tasks, the CPU will choose the 
	  one with the shortest processing time. If multiple tasks have the same 
	  shortest processing time, it will choose the task with the smallest index.
	* Once a task is started, the CPU will process the entire task without 
	  stopping.
	* The CPU can finish a task then start a new one instantly.
	Return the order in which the CPU will process the tasks.

	Example 1:
	Input: tasks = [[1,2],[2,4],[3,2],[4,1]]
	Output: [0,2,3,1]
	Explanation: The events go as follows: 
	- At time = 1, task 0 is available to process. Available tasks = {0}.
	- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.
	- At time = 2, task 1 is available to process. Available tasks = {1}.
	- At time = 3, task 2 is available to process. Available tasks = {1, 2}.
	- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.
	- At time = 4, task 3 is available to process. Available tasks = {1, 3}.
	- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.
	- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.
	- At time = 10, the CPU finishes task 1 and becomes idle.

	Example 2:
	Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]
	Output: [4,3,2,0,1]
	Explanation: The events go as follows:
	- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.
	- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.
	- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.
	- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.
	- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.
	- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.
	- At time = 40, the CPU finishes task 1 and becomes idle.

	Constraints:
	* tasks.length == n
	* 1 <= n <= 10^5
	* 1 <= enqueueTimei, processingTimei <= 10^9"""

    def getOrder(self, tasks: List[List[int]]) -> List[int]:
        ans = []
        pq = [] # min-heap 
        t = 0 # end of prev task 
        
        tasks.append([inf, inf])
        for (enq, prc), i in sorted(zip(tasks, range(len(tasks)))): # adding a sentinel
            while pq and t < enq: 
                tp, ii, te = heappop(pq)
                ans.append(ii)
                t = max(t, te) + tp # time finish processing this task
            heappush(pq, (prc, i, enq))
        return ans 


    """1835. Find XOR Sum of All Pairs Bitwise AND (Hard)
	The XOR sum of a list is the bitwise XOR of all its elements. If the list 
	only contains one element, then its XOR sum will be equal to this element.
	For example, the XOR sum of [1,2,3,4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4, 
	and the XOR sum of [3] is equal to 3. You are given two 0-indexed arrays 
	arr1 and arr2 that consist only of non-negative integers. Consider the list 
	containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) 
	pair where 0 <= i < arr1.length and 0 <= j < arr2.length. Return the XOR 
	sum of the aforementioned list.

	Example 1:
	Input: arr1 = [1,2,3], arr2 = [6,5]
	Output: 0
	Explanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].
	             The XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.

	Example 2:
	Input: arr1 = [12], arr2 = [4]
	Output: 4
	Explanation: The list = [12 AND 4] = [4]. The XOR sum = 4.

	Constraints:
	* 1 <= arr1.length, arr2.length <= 10^5
	* 0 <= arr1[i], arr2[j] <= 10^9"""

    def getXORSum(self, arr1: List[int], arr2: List[int]) -> int:
        return reduce(xor, arr1) & reduce(xor, arr2)


    """1836. Remove Duplicates From an Unsorted Linked List (Medium)
	Given the head of a linked list, find all the values that appear more than 
	once in the list and delete the nodes that have any of those values. Return 
	the linked list after the deletions.

	Example 1:
	Input: head = [1,2,3,2]
	Output: [1,3]
	Explanation: 2 appears twice in the linked list, so all 2's should be 
	             deleted. After deleting all 2's, we are left with [1,3].
	
	Example 2:
	Input: head = [2,1,1,2]
	Output: []
	Explanation: 2 and 1 both appear twice. All the elements should be deleted.

	Example 3:
	Input: head = [3,2,2,1,3,2,4]
	Output: [1,4]
	Explanation: 3 appears twice and 2 appears three times. After deleting all 
	             3's and 2's, we are left with [1,4].

	Constraints:
	* The number of nodes in the list is in the range [1, 10^5]
	* 1 <= Node.val <= 10^5"""

    def deleteDuplicatesUnsorted(self, head: ListNode) -> ListNode:
        freq = defaultdict(int)
        node = head
        while node: 
            freq[node.val] += 1
            node = node.next 
        
        dummy = node = ListNode(next=head)
        while node.next: 
            if freq[node.next.val] > 1: node.next = node.next.next
            else: node = node.next 
        return dummy.next


    """1837. Sum of Digits in Base K (Easy)
	Given an integer n (in base 10) and a base k, return the sum of the digits 
	of n after converting n from base 10 to base k. After converting, each 
	digit should be interpreted as a base 10 number, and the sum should be 
	returned in base 10.

	Example 1:
	Input: n = 34, k = 6
	Output: 9
	Explanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.

	Example 2:
	Input: n = 10, k = 10
	Output: 1
	Explanation: n is already in base 10. 1 + 0 = 1.

	Constraints:
	* 1 <= n <= 100
	* 2 <= k <= 10"""

    def sumBase(self, n: int, k: int) -> int:
        ans = 0
        while n: 
            n, x = divmod(n, k)
            ans += x
        return ans 


    """1838. Frequency of the Most Frequent Element (Medium)
	The frequency of an element is the number of times it occurs in an array. 
	You are given an integer array nums and an integer k. In one operation, you 
	can choose an index of nums and increment the element at that index by 1. 
	Return the maximum possible frequency of an element after performing at 
	most k operations.

	Example 1:
	Input: nums = [1,2,4], k = 5
	Output: 3
	Explanation: Increment the first element three times and the second element 
	             two times to make nums = [4,4,4]. 4 has a frequency of 3.

	Example 2:
	Input: nums = [1,4,8,13], k = 5
	Output: 2
	Explanation: There are multiple optimal solutions:
	- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.
	- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.
	- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.
	
	Example 3:
	Input: nums = [3,9,6], k = 2
	Output: 1

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^5
	* 1 <= k <= 10^5"""

    def maxFrequency(self, nums: List[int], k: int) -> int:
        nums.sort()
        ans = ii = sm = 0 
        for i in range(len(nums)): 
            sm += nums[i]
            while k < nums[i]*(i-ii+1) - sm: 
                sm -= nums[ii]
                ii += 1
            ans = max(ans, i - ii + 1)
        return ans 


    """1839. Longest Substring Of All Vowels in Order (Medium)
	A string is considered beautiful if it satisfies the following conditions:
	* Each of the 5 English vowels ('a', 'e', 'i', 'o', 'u') must appear at 
	  least once in it.
	* The letters must be sorted in alphabetical order (i.e. all 'a's before 
	  'e's, all 'e's before 'i's, etc.).
	For example, strings "aeiou" and "aaaaaaeiiiioou" are considered beautiful, 
	but "uaeio", "aeoiu", and "aaaeeeooo" are not beautiful. Given a string 
	word consisting of English vowels, return the length of the longest 
	beautiful substring of word. If no such substring exists, return 0. A 
	substring is a contiguous sequence of characters in a string.

	Example 1:
	Input: word = "aeiaaioaaaaeiiiiouuuooaauuaeiu"
	Output: 13
	Explanation: The longest beautiful substring in word is "aaaaeiiiiouuu" of 
	             length 13.

	Example 2:
	Input: word = "aeeeiiiioooauuuaeiou"
	Output: 5
	Explanation: The longest beautiful substring in word is "aeiou" of length 5.
	
	Example 3:
	Input: word = "a"
	Output: 0
	Explanation: There is no beautiful substring, so return 0.

	Constraints:
	* 1 <= word.length <= 5 * 10^5
	* word consists of characters 'a', 'e', 'i', 'o', and 'u'."""

    def longestBeautifulSubstring(self, word: str) -> int:
        ans = 0
        cnt = unique = 1
        for i in range(1, len(word)): 
            if word[i-1] <= word[i]: 
                cnt += 1
                if word[i-1] < word[i]: unique += 1
            else: cnt = unique = 1
            if unique == 5: ans = max(ans, cnt)
        return ans 


    """1840. Maximum Building Height (Hard)
	You want to build n new buildings in a city. The new buildings will be 
	built in a line and are labeled from 1 to n. However, there are city 
	restrictions on the heights of the new buildings:
	* The height of each building must be a non-negative integer.
	* The height of the first building must be 0.
	* The height difference between any two adjacent buildings cannot exceed 1.
	Additionally, there are city restrictions on the maximum height of specific 
	buildings. These restrictions are given as a 2D integer array restrictions 
	where restrictions[i] = [idi, maxHeighti] indicates that building idi must 
	have a height less than or equal to maxHeighti. It is guaranteed that each 
	building will appear at most once in restrictions, and building 1 will not 
	be in restrictions. Return the maximum possible height of the tallest 
	building.

	Example 1:
	Input: n = 5, restrictions = [[2,1],[4,1]]
	Output: 2
	Explanation: The green area in the image indicates the maximum allowed 
	             height for each building. We can build the buildings with 
	             heights [0,1,2,1,2], and the tallest building has a height of 
	             2.

	Example 2:
	Input: n = 6, restrictions = []
	Output: 5
	Explanation: The green area in the image indicates the maximum allowed 
	             height for each building. We can build the buildings with 
	             heights [0,1,2,3,4,5], and the tallest building has a height 
	             of 5.
	
	Example 3:
	Input: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]
	Output: 5
	Explanation: The green area in the image indicates the maximum allowed 
	             height for each building. We can build the buildings with 
	             heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a 
	             height of 5.

	Constraints:
	* 2 <= n <= 10^9
	* 0 <= restrictions.length <= min(n - 1, 10^5)
	* 2 <= idi <= n
	* idi is unique.
	* 0 <= maxHeighti <= 10^9"""

    def maxBuilding(self, n: int, restrictions: List[List[int]]) -> int:
        restrictions.extend([[1, 0], [n, n-1]])
        restrictions.sort()
        
        for i in reversed(range(len(restrictions)-1)): 
            restrictions[i][1] = min(restrictions[i][1], restrictions[i+1][1] + restrictions[i+1][0] - restrictions[i][0])
        
        ans = 0 
        for i in range(1, len(restrictions)): 
            restrictions[i][1] = min(restrictions[i][1], restrictions[i-1][1] + restrictions[i][0] - restrictions[i-1][0])
            ans = max(ans, (restrictions[i-1][1] + restrictions[i][0] - restrictions[i-1][0] + restrictions[i][1])//2)
        return ans 


    """1844. Replace All Digits with Characters (Easy)
	You are given a 0-indexed string s that has lowercase English letters in 
	its even indices and digits in its odd indices. There is a function 
	shift(c, x), where c is a character and x is a digit, that returns the xth 
	character after c.
	* For example, shift('a', 5) = 'f' and shift('x', 0) = 'x'.
	For every odd index i, you want to replace the digit s[i] with 
	shift(s[i-1], s[i]). Return s after replacing all digits. It is guaranteed 
	that shift(s[i-1], s[i]) will never exceed 'z'.

	Example 1:
	Input: s = "a1c1e1"
	Output: "abcdef"
	Explanation: The digits are replaced as follows:
	             - s[1] -> shift('a',1) = 'b'
	             - s[3] -> shift('c',1) = 'd'
	             - s[5] -> shift('e',1) = 'f'
	
	Example 2:
	Input: s = "a1b2c3d4e"
	Output: "abbdcfdhe"
	Explanation: The digits are replaced as follows:
	             - s[1] -> shift('a',1) = 'b'
	             - s[3] -> shift('b',2) = 'd'
	             - s[5] -> shift('c',3) = 'f'
	             - s[7] -> shift('d',4) = 'h'

	Constraints:
	* 1 <= s.length <= 100
	* s consists only of lowercase English letters and digits.
	* shift(s[i-1], s[i]) <= 'z' for all odd indices i."""

    def replaceDigits(self, s: str) -> str:
        s = list(s)
        for i in range(1, len(s), 2): 
            s[i] = chr(ord(s[i-1]) + int(s[i]))
        return "".join(s)


    """1846. Maximum Element After Decreasing and Rearranging (Medium)
	You are given an array of positive integers arr. Perform some operations 
	(possibly none) on arr so that it satisfies these conditions:
	* The value of the first element in arr must be 1.
	* The absolute difference between any 2 adjacent elements must be less than 
	  or equal to 1. In other words, abs(arr[i] - arr[i - 1]) <= 1 for each i 
	  where 1 <= i < arr.length (0-indexed). abs(x) is the absolute value of x.
	There are 2 types of operations that you can perform any number of times:
	* Decrease the value of any element of arr to a smaller positive integer.
	* Rearrange the elements of arr to be in any order.
	Return the maximum possible value of an element in arr after performing the 
	operations to satisfy the conditions.

	Example 1:
	Input: arr = [2,2,1,2,1]
	Output: 2
	Explanation: We can satisfy the conditions by rearranging arr so it becomes 
	             [1,2,2,2,1]. The largest element in arr is 2.
	
	Example 2:
	Input: arr = [100,1,1000]
	Output: 3
	Explanation: One possible way to satisfy the conditions is by doing the 
	             following:
	             1. Rearrange arr so it becomes [1,100,1000].
	             2. Decrease the value of the second element to 2.
	             3. Decrease the value of the third element to 3.
	             Now arr = [1,2,3], which satisfies the conditions. The largest 
	             element in arr is 3.
	
	Example 3:
	Input: arr = [1,2,3,4,5]
	Output: 5
	Explanation: The array already satisfies the conditions, and the largest 
	             element is 5.

	Constraints:
	* 1 <= arr.length <= 10^5
	* 1 <= arr[i] <= 10^9"""

    def maximumElementAfterDecrementingAndRearranging(self, arr: List[int]) -> int:
        arr.sort()
        ans = 0
        for x in arr: 
            ans = min(ans+1, x)
        return ans 


    """1847. Closest Room (Hard)
	There is a hotel with n rooms. The rooms are represented by a 2D integer 
	array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room 
	with room number roomIdi and size equal to sizei. Each roomIdi is 
	guaranteed to be unique. You are also given k queries in a 2D array queries 
	where queries[j] = [preferredj, minSizej]. The answer to the jth query is 
	the room number id of a room such that:
	* The room has a size of at least minSizej, and
	* abs(id - preferredj) is minimized, where abs(x) is the absolute value of 
	  x.
	If there is a tie in the absolute difference, then use the room with the 
	smallest such id. If there is no such room, the answer is -1. Return an 
	array answer of length k where answer[j] contains the answer to the jth 
	query.

	Example 1:
	Input: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]
	Output: [3,-1,3]
	Explanation: The answers to the queries are as follows:
	Query = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.
	Query = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.
	Query = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.

	Example 2:
	Input: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]
	Output: [2,1,3]
	Explanation: The answers to the queries are as follows:
	Query = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.
	Query = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.
	Query = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.

	Constraints:
	* n == rooms.length
	* 1 <= n <= 10^5
	* k == queries.length
	* 1 <= k <= 10^4
	* 1 <= roomIdi, preferredj <= 10^7
	* 1 <= sizei, minSizej <= 10^7"""

    def closestRoom(self, rooms: List[List[int]], queries: List[List[int]]) -> List[int]:
        rooms.sort(key=lambda x: (-x[1], x[0])) # descending order 
        
        ans = [-1] * len(queries)
        sl = SortedList()
        k = 0 
        
        for (preferred, msz), i in sorted(zip(queries, range(len(queries))), key=lambda x: (-x[0][1], x[0][0])): # descending order 
            while k < len(rooms) and rooms[k][1] >= msz: 
                sl.add(rooms[k][0])
                k += 1
            v = sl.bisect_left(preferred)
            if sl: 
                if v == len(sl) or v > 0 and preferred - sl[v-1] <= sl[v] - preferred: ans[i] = sl[v-1]
                else: ans[i] = sl[v]
        return ans 


    """1848. Minimum Distance to the Target Element (Easy)
	Given an integer array nums (0-indexed) and two integers target and start, 
	find an index i such that nums[i] == target and abs(i - start) is minimized. 
	Note that abs(x) is the absolute value of x. Return abs(i - start). It is 
	guaranteed that target exists in nums.

	Example 1:
	Input: nums = [1,2,3,4,5], target = 5, start = 3
	Output: 1
	Explanation: nums[4] = 5 is the only value equal to target, so the answer 
	             is abs(4 - 3) = 1.

	Example 2:
	Input: nums = [1], target = 1, start = 0
	Output: 0
	Explanation: nums[0] = 1 is the only value equal to target, so the answer 
	             is abs(0 - 0) = 0.
	
	Example 3:
	Input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0
	Output: 0
	Explanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), 
	             which is abs(0 - 0) = 0.

	Constraints:
	* 1 <= nums.length <= 1000
	* 1 <= nums[i] <= 10^4
	* 0 <= start < nums.length
	* target is in nums."""

    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:
        ans = inf
        for i, x in enumerate(nums): 
            if x == target: 
                ans = min(ans, abs(i - start))
        return ans 


    """1849. Splitting a String Into Descending Consecutive Values (Medium)
	You are given a string s that consists of only digits. Check if we can 
	split s into two or more non-empty substrings such that the numerical 
	values of the substrings are in descending order and the difference between 
	numerical values of every two adjacent substrings is equal to 1. 

	* For example, the string s = "0090089" can be split into ["0090", "089"] 
	  with numerical values [90,89]. The values are in descending order and 
	  adjacent values differ by 1, so this way is valid.
	* Another example, the string s = "001" can be split into ["0", "01"], 
	  ["00", "1"], or ["0", "0", "1"]. However all the ways are invalid because 
	  they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of 
	  which are not in descending order.
	Return true if it is possible to split s​​​​​​ as described above, or false 
	otherwise. A substring is a contiguous sequence of characters in a string.

	Example 1:
	Input: s = "1234"
	Output: false
	Explanation: There is no valid way to split s.

	Example 2:
	Input: s = "050043"
	Output: true
	Explanation: s can be split into ["05", "004", "3"] with numerical values 
	             [5,4,3]. The values are in descending order with adjacent 
	             values differing by 1.

	Example 3:
	Input: s = "9080701"
	Output: false
	Explanation: There is no valid way to split s.
	
	Example 4:
	Input: s = "10009998"
	Output: true
	Explanation: s can be split into ["100", "099", "98"] with numerical values 
	             [100,99,98]. The values are in descending order with adjacent 
	             values differing by 1.

	Constraints:
	* 1 <= s.length <= 20
	* s only consists of digits."""

    def splitString(self, s: str) -> bool:
        
        def fn(i, x): 
            """Return True if s[i:] can be split following x."""
            if i == len(s): return True 
            if x == 0: return False 
            ans = False 
            for ii in range(i, len(s) - int(i == 0)):
                if x is None or int(s[i:ii+1]) == x - 1: 
                    ans = ans or fn(ii+1, int(s[i:ii+1]))
            return ans 
        
        return fn(0, None)


    """1850. Minimum Adjacent Swaps to Reach the Kth Smallest Number (Medium)
	You are given a string num, representing a large integer, and an integer k. 
	We call some integer wonderful if it is a permutation of the digits in num 
	and is greater in value than num. There can be many wonderful integers. 
	However, we only care about the smallest-valued ones.

	For example, when num = "5489355142":
	* The 1st smallest wonderful integer is "5489355214".
	* The 2nd smallest wonderful integer is "5489355241".
	* The 3rd smallest wonderful integer is "5489355412".
	* The 4th smallest wonderful integer is "5489355421".
	Return the minimum number of adjacent digit swaps that needs to be applied 
	to num to reach the kth smallest wonderful integer. The tests are generated 
	in such a way that kth smallest wonderful integer exists.

	Example 1:
	Input: num = "5489355142", k = 4
	Output: 2
	Explanation: The 4th smallest wonderful number is "5489355421". To get this 
	             number:
	             - Swap index 7 with index 8: "5489355142" -> "5489355412"
	             - Swap index 8 with index 9: "5489355412" -> "5489355421"
	
	Example 2:
	Input: num = "11112", k = 4
	Output: 4
	Explanation: The 4th smallest wonderful number is "21111". To get this 
	             number:
	             - Swap index 3 with index 4: "11112" -> "11121"
	             - Swap index 2 with index 3: "11121" -> "11211"
	             - Swap index 1 with index 2: "11211" -> "12111"
	             - Swap index 0 with index 1: "12111" -> "21111"
	
	Example 3:
	Input: num = "00123", k = 1
	Output: 1
	Explanation: The 1st smallest wonderful number is "00132". To get this number:
	             - Swap index 3 with index 4: "00123" -> "00132"

	Constraints:
	* 2 <= num.length <= 1000
	* 1 <= k <= 1000
	* num only consists of digits."""

    def getMinSwaps(self, num: str, k: int) -> int:
        num = list(num)
        orig = num.copy()
        
        for _ in range(k): 
            for i in reversed(range(len(num)-1)): 
                if num[i] < num[i+1]: 
                    ii = i+1 
                    while ii < len(num) and num[i] < num[ii]: ii += 1
                    num[i], num[ii-1] = num[ii-1], num[i]
                    lo, hi = i+1, len(num)-1
                    while lo < hi: 
                        num[lo], num[hi] = num[hi], num[lo]
                        lo += 1
                        hi -= 1
                    break 
        
        ans = 0
        for i in range(len(num)): 
            ii = i
            while orig[i] != num[i]: 
                ans += 1
                ii += 1
                num[i], num[ii] = num[ii], num[i]
        return ans 


    """1851. Minimum Interval to Include Each Query (Hard)
	You are given a 2D integer array intervals, where 
	intervals[i] = [lefti, righti] describes the ith interval starting at lefti 
	and ending at righti (inclusive). The size of an interval is defined as the 
	number of integers it contains, or more formally righti - lefti + 1. You 
	are also given an integer array queries. The answer to the jth query is the 
	size of the smallest interval i such that lefti <= queries[j] <= righti. If 
	no such interval exists, the answer is -1. Return an array containing the 
	answers to the queries.

	Example 1:
	Input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]
	Output: [3,3,1,4]
	Explanation: The queries are processed as follows:
	- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.
	- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.
	- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.
	- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.

	Example 2:
	Input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]
	Output: [2,-1,4,6]
	Explanation: The queries are processed as follows:
	- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.
	- Query = 19: None of the intervals contain 19. The answer is -1.
	- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.
	- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.

	Constraints:
	* 1 <= intervals.length <= 10^5
	* 1 <= queries.length <= 10^5
	* intervals[i].length == 2
	* 1 <= lefti <= righti <= 10^7
	* 1 <= queries[j] <= 10^7"""

    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:
        intervals.sort()
        pq = []
        k = 0 
        ans = [-1] * len(queries)
        for query, i in sorted(zip(queries, range(len(queries)))): 
            while k < len(intervals) and intervals[k][0] <= query: 
                heappush(pq, (intervals[k][1] - intervals[k][0] + 1, *intervals[k]))
                k += 1
            while pq and pq[0][2] < query: 
                heappop(pq)
            if pq: ans[i] = pq[0][0]
        return ans 


    """1852. Distinct Numbers in Each Subarray (Medium)
	Given an integer array nums and an integer k, you are asked to construct 
	the array ans of size n-k+1 where ans[i] is the number of distinct numbers 
	in the subarray nums[i:i+k-1] = [nums[i], nums[i+1], ..., nums[i+k-1]].
	Return the array ans.

	Example 1:
	Input: nums = [1,2,3,2,2,1,3], k = 3
	Output: [3,2,2,2,3]
	Explanation: The number of distinct elements in each subarray goes as follows:
	             - nums[0:2] = [1,2,3] so ans[0] = 3
	             - nums[1:3] = [2,3,2] so ans[1] = 2
	             - nums[2:4] = [3,2,2] so ans[2] = 2
	             - nums[3:5] = [2,2,1] so ans[3] = 2
	             - nums[4:6] = [2,1,3] so ans[4] = 3
	
	Example 2:
	Input: nums = [1,1,1,1,2,3,4], k = 4
	Output: [1,2,3,4]
	Explanation: The number of distinct elements in each subarray goes as follows:
	             - nums[0:3] = [1,1,1,1] so ans[0] = 1
	             - nums[1:4] = [1,1,1,2] so ans[1] = 2
	             - nums[2:5] = [1,1,2,3] so ans[2] = 3
	             - nums[3:6] = [1,2,3,4] so ans[3] = 4

	Constraints:
	* 1 <= k <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^5"""

    def distinctNumbers(self, nums: List[int], k: int) -> List[int]:
        ans = []
        freq = defaultdict(int)
        for i, x in enumerate(nums): 
            freq[x] += 1
            if i >= k: 
                freq[nums[i-k]] -= 1
                if freq[nums[i-k]] == 0: freq.pop(nums[i-k])
            if i+1 >= k: ans.append(len(freq))
        return ans


    """1854. Maximum Population Year (Easy)
	You are given a 2D integer array logs where each logs[i] = [birthi, deathi] 
	indicates the birth and death years of the ith person. The population of 
	some year x is the number of people alive during that year. The ith person 
	is counted in year x's population if x is in the inclusive range 
	[birthi, deathi - 1]. Note that the person is not counted in the year that 
	they die. Return the earliest year with the maximum population.

	Example 1:
	Input: logs = [[1993,1999],[2000,2010]]
	Output: 1993
	Explanation: The maximum population is 1, and 1993 is the earliest year 
	             with this population.

	Example 2:
	Input: logs = [[1950,1961],[1960,1971],[1970,1981]]
	Output: 1960
	Explanation: The maximum population is 2, and it had happened in years 1960 
	             and 1970. The earlier year between them is 1960.

	Constraints:
	* 1 <= logs.length <= 100
	* 1950 <= birthi < deathi <= 2050"""

    def maximumPopulation(self, logs: List[List[int]]) -> int:
        vals = []
        for x, y in logs: 
            vals.append((x, 1))
            vals.append((y, -1))
        ans = prefix = most = 0
        for x, k in sorted(vals): 
            prefix += k
            if prefix > most: 
                ans = x
                most = prefix 
        return ans 


    """1855. Maximum Distance Between a Pair of Values (Medium)
	You are given two non-increasing 0-indexed integer arrays nums1​​​​​​ and 
	nums2​​​​​​. A pair of indices (i, j), where 0 <= i < nums1.length and 
	0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. 
	The distance of the pair is j - i​​​​. Return the maximum distance of any 
	valid pair (i, j). If there are no valid pairs, return 0. An array arr is 
	non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.

	Example 1:
	Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]
	Output: 2
	Explanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), 
	             and (4,4). The maximum distance is 2 with pair (2,4).

	Example 2:
	Input: nums1 = [2,2,2], nums2 = [10,10,1]
	Output: 1
	Explanation: The valid pairs are (0,0), (0,1), and (1,1). The maximum 
	             distance is 1 with pair (0,1).
	
	Example 3:
	Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]
	Output: 2
	Explanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).
	             The maximum distance is 2 with pair (2,4).
	
	Example 4:
	Input: nums1 = [5,4], nums2 = [3,2]
	Output: 0
	Explanation: There are no valid pairs, so return 0.

	Constraints:
	* 1 <= nums1.length <= 10^5
	* 1 <= nums2.length <= 10^5
	* 1 <= nums1[i], nums2[j] <= 10^5
	* Both nums1 and nums2 are non-increasing."""

    def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:
        ans = ii = 0 
        for i, x in enumerate(nums2): 
            while ii < len(nums1) and nums1[ii] > nums2[i]: ii += 1
            if ii < len(nums1): ans = max(ans, i - ii)
        return ans 


    """1856. Maximum Subarray Min-Product (Medium)
	The min-product of an array is equal to the minimum value in the array 
	multiplied by the array's sum. For example, the array [3,2,5] (minimum 
	value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20. Given an array
	of integers nums, return the maximum min-product of any non-empty subarray 
	of nums. Since the answer may be large, return it modulo 10^9 + 7. Note 
	that the min-product should be maximized before performing the modulo 
	operation. Testcases are generated such that the maximum min-product 
	without modulo will fit in a 64-bit signed integer. A subarray is a 
	contiguous part of an array.

	Example 1:
	Input: nums = [1,2,3,2]
	Output: 14
	Explanation: The maximum min-product is achieved with the subarray [2,3,2] 
	             (minimum value is 2). 2 * (2+3+2) = 2 * 7 = 14.
	
	Example 2:
	Input: nums = [2,3,3,1,2]
	Output: 18
	Explanation: The maximum min-product is achieved with the subarray [3,3] 
	             (minimum value is 3). 3 * (3+3) = 3 * 6 = 18.
	
	Example 3:
	Input: nums = [3,1,5,6,4,2]
	Output: 60
	Explanation: The maximum min-product is achieved with the subarray [5,6,4] 
	             (minimum value is 4). 4 * (5+6+4) = 4 * 15 = 60.

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^7"""

    def maxSumMinProduct(self, nums: List[int]) -> int:
        prefix = [0]
        for x in nums: prefix.append(prefix[-1] + x)
        
        ans = 0 
        stack = []
        for i, x in enumerate(nums + [-inf]): # append "-inf" to force flush all elements
            while stack and stack[-1][1] >= x: 
                _, xx = stack.pop()
                ii = stack[-1][0] if stack else -1 
                ans = max(ans, xx*(prefix[i] - prefix[ii+1]))
            stack.append((i, x))
        return ans % 1_000_000_007

    
    """1857. Largest Color Value in a Directed Graph (Hard)
	There is a directed graph of n colored nodes and m edges. The nodes are 
	numbered from 0 to n - 1. You are given a string colors where colors[i] is 
	a lowercase English letter representing the color of the ith node in this 
	graph (0-indexed). You are also given a 2D array edges where 
	edges[j] = [aj, bj] indicates that there is a directed edge from node aj to 
	node bj. A valid path in the graph is a sequence of nodes 
	x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to 
	xi+1 for every 1 <= i < k. The color value of the path is the number of 
	nodes that are colored the most frequently occurring color along that path. 
	Return the largest color value of any valid path in the given graph, or -1 
	if the graph contains a cycle.

	Example 1:
	Input: colors = "abaca", edges = [[0,1],[0,2],[2,3],[3,4]]
	Output: 3
	Explanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored "a" 
	             (red in the above image).

	Example 2:
	Input: colors = "a", edges = [[0,0]]
	Output: -1
	Explanation: There is a cycle from 0 to 0.

	Constraints:
	* n == colors.length
	* m == edges.length
	* 1 <= n <= 10^5
	* 0 <= m <= 10^5
	* colors consists of lowercase English letters.
	* 0 <= aj, bj < n"""

    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:
        graph = {}
        indeg = [0] * len(colors)
        for u, v in edges: 
            indeg[v] += 1
            graph.setdefault(u, []).append(v)
            
        roots = [x for x in range(len(colors)) if indeg[x] == 0]
        
        # Kahn's algo
        stack = roots.copy()
        nodes = []
        while stack: 
            x = stack.pop()
            nodes.append(x)
            for xx in graph.get(x, []):
                indeg[xx] -= 1
                if indeg[xx] == 0: stack.append(xx)
        if len(nodes) < len(colors): return -1 # cycle detected 
        
        @cache
        def fn(x): 
            """Return distribution of (maximized) colors at given node."""
            ans = [0]*26
            ans[ord(colors[x]) - 97] = 1
            for xx in graph.get(x, []): 
                val = fn(xx)
                for i in range(26): 
                    if i == ord(colors[x]) - 97: ans[i] = max(ans[i], 1 + val[i])
                    else: ans[i] = max(ans[i], val[i])
            return ans 
        
        ans = [0]*26 
        for root in roots: 
            val = fn(root)
            for i in range(26): ans[i] = max(ans[i], val[i])
        return max(ans)


    """1858. Longest Word With All Prefixes (Medium)
	Given an array of strings words, find the longest string in words such that 
	every prefix of it is also in words. For example, let 
	words = ["a", "app", "ap"]. The string "app" has prefixes "ap" and "a", all 
	of which are in words. Return the string described above. If there is more 
	than one string with the same length, return the lexicographically smallest 
	one, and if no string exists, return "".

	Example 1:
	Input: words = ["k","ki","kir","kira", "kiran"]
	Output: "kiran"
	Explanation: "kiran" has prefixes "kira", "kir", "ki", and "k", and all of 
	             them appear in words.
	
	Example 2:
	Input: words = ["a", "banana", "app", "appl", "ap", "apply", "apple"]
	Output: "apple"
	Explanation: Both "apple" and "apply" have all their prefixes in words. 
	             However, "apple" is lexicographically smaller, so we return 
	             that.
	
	Example 3:
	Input: words = ["abc", "bc", "ab", "qwe"]
	Output: ""

	Constraints:
	* 1 <= words.length <= 10^5
	* 1 <= words[i].length <= 10^5
	* 1 <= sum(words[i].length) <= 10^5"""

    def longestWord(self, words: List[str]) -> str:
        ans = ""
        seen = {""}
        for word in sorted(words, key=lambda x: (len(x), x)): 
            if word[:-1] in seen: 
                seen.add(word)
                ans = max(ans, word, key=len)
        return ans 


    """1859. Sorting the Sentence (Easy)
	A sentence is a list of words that are separated by a single space with no 
	leading or trailing spaces. Each word consists of lowercase and uppercase 
	English letters. A sentence can be shuffled by appending the 1-indexed word 
	position to each word then rearranging the words in the sentence. For 
	example, the sentence "This is a sentence" can be shuffled as 
	"sentence4 a3 is2 This1" or "is2 sentence4 This1 a3". Given a shuffled 
	sentence s containing no more than 9 words, reconstruct and return the 
	original sentence.

	Example 1:
	Input: s = "is2 sentence4 This1 a3"
	Output: "This is a sentence"
	Explanation: Sort the words in s to their original positions 
	             "This1 is2 a3 sentence4", then remove the numbers.

	Example 2:
	Input: s = "Myself2 Me1 I4 and3"
	Output: "Me Myself and I"
	Explanation: Sort the words in s to their original positions 
	             "Me1 Myself2 and3 I4", then remove the numbers.

	Constraints:
	* 2 <= s.length <= 200
	* s consists of lowercase and uppercase English letters, spaces, and digits 
	  from 1 to 9.
	* The number of words in s is between 1 and 9.
	* The words in s are separated by a single space.
	* s contains no leading or trailing spaces."""

    def sortSentence(self, s: str) -> str:
        words = s.split()
        ans = [""]*len(words)
        for word in words: 
            ans[int(word[-1])-1] = word[:-1]
        return " ".join(ans)


    """1860. Incremental Memory Leak (Medium)
	You are given two integers memory1 and memory2 representing the available 
	memory in bits on two memory sticks. There is currently a faulty program 
	running that consumes an increasing amount of memory every second. At the 
	ith second (starting from 1), i bits of memory are allocated to the stick 
	with more available memory (or from the first memory stick if both have the 
	same available memory). If neither stick has at least i bits of available 
	memory, the program crashes. Return an array containing 
	[crashTime, memory1crash, memory2crash], where crashTime is the time (in 
	seconds) when the program crashed and memory1crash and memory2crash are the 
	available bits of memory in the first and second sticks respectively.

	Example 1:
	Input: memory1 = 2, memory2 = 2
	Output: [3,1,0]
	Explanation: The memory is allocated as follows:
	- At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.
	- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.
	- At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively.

	Example 2:
	Input: memory1 = 8, memory2 = 11
	Output: [6,0,4]
	Explanation: The memory is allocated as follows:
	- At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.
	- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.
	- At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.
	- At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.
	- At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.
	- At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively.

	Constraints: 0 <= memory1, memory2 <= 2^31 - 1"""
 
    def memLeak(self, memory1: int, memory2: int) -> List[int]:
        k = 1
        while k <= memory1 or k <= memory2: 
            if memory1 < memory2: memory2 -= k 
            else: memory1 -= k 
            k += 1
        return [k, memory1, memory2]


    """1861. Rotating the Box (Medium)
	You are given an m x n matrix of characters box representing a side-view of 
	a box. Each cell of the box is one of the following:
	* A stone '#'
	* A stationary obstacle '*'
	* Empty '.'
	The box is rotated 90 degrees clockwise, causing some of the stones to fall 
	due to gravity. Each stone falls down until it lands on an obstacle, another 
	stone, or the bottom of the box. Gravity does not affect the obstacles' 
	positions, and the inertia from the box's rotation does not affect the 
	stones' horizontal positions. It is guaranteed that each stone in box rests 
	on an obstacle, another stone, or the bottom of the box. Return an n x m 
	matrix representing the box after the rotation described above.

	Example 1:
	Input: box = [["#",".","#"]]
	Output: [["."],
	         ["#"],
	         ["#"]]

	Example 2:
	Input: box = [["#",".","*","."],
	              ["#","#","*","."]]
	Output: [["#","."],
	         ["#","#"],
	         ["*","*"],
	         [".","."]]

	Example 3:
	Input: box = [["#","#","*",".","*","."],
	              ["#","#","#","*",".","."],
	              ["#","#","#",".","#","."]]
	Output: [[".","#","#"],
	         [".","#","#"],
	         ["#","#","*"],
	         ["#","*","."],
	         ["#",".","*"],
	         ["#",".","."]]

	Constraints:
	* m == box.length
	* n == box[i].length
	* 1 <= m, n <= 500
	* box[i][j] is either '#', '*', or '.'."""

    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:
        m, n = len(box), len(box[0]) # dimensions 
        
        for i in range(m//2): box[i], box[~i] = box[~i], box[i]
        box = [list(x) for x in zip(*box)]
        
        for j in range(m): 
            count = 0 
            for i in range(n): 
                if box[i][j] == "#": 
                    count += 1
                    box[i][j] = "."
                if i+1 == n or box[i+1][j] == "*": 
                    for ii in range(count): box[i-ii][j] = "#"
                    count = 0
        return box


    """1862. Sum of Floored Pairs (Hard)
	Given an integer array nums, return the sum of floor(nums[i] / nums[j]) for 
	all pairs of indices 0 <= i, j < nums.length in the array. Since the answer 
	may be too large, return it modulo 10^9 + 7. The floor() function returns 
	the integer part of the division.

	Example 1:
	Input: nums = [2,5,9]
	Output: 10
	Explanation:
	floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0
	floor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1
	floor(5 / 2) = 2
	floor(9 / 2) = 4
	floor(9 / 5) = 1
	We calculate the floor of the division for every pair of indices in the 
	array then sum them up.

	Example 2:
	Input: nums = [7,7,7,7,7,7,7]
	Output: 49

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^5"""

    def sumOfFlooredPairs(self, nums: List[int]) -> int:
        m = 2*max(nums)
        
        freq = [0]*(m+1)
        for x in nums: freq[x] += 1
        prefix = [0]
        for x in freq: prefix.append(prefix[-1] + x)
        
        ans = 0 
        for i in range(1, m+1): 
            if freq[i]:
                for ii in range(i, m+1, i): 
                    count = prefix[ii] - prefix[ii-i]
                    ans += count * freq[i] * (ii//i-1)
        return ans % 1_000_000_007


    """1863. Sum of All Subset XOR Totals (Easy)
	The XOR total of an array is defined as the bitwise XOR of all its elements, 
	or 0 if the array is empty. 
	* For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.
	Given an array nums, return the sum of all XOR totals for every subset of 
	nums. Note that subsets with the same elements should be counted multiple 
	times. An array a is a subset of an array b if a can be obtained from b by 
	deleting some (possibly zero) elements of b.

	Example 1:
	Input: nums = [1,3]
	Output: 6
	Explanation: The 4 subsets of [1,3] are:
	- The empty subset has an XOR total of 0.
	- [1] has an XOR total of 1.
	- [3] has an XOR total of 3.
	- [1,3] has an XOR total of 1 XOR 3 = 2.
	0 + 1 + 3 + 2 = 6

	Example 2:
	Input: nums = [5,1,6]
	Output: 28
	Explanation: The 8 subsets of [5,1,6] are:
	- The empty subset has an XOR total of 0.
	- [5] has an XOR total of 5.
	- [1] has an XOR total of 1.
	- [6] has an XOR total of 6.
	- [5,1] has an XOR total of 5 XOR 1 = 4.
	- [5,6] has an XOR total of 5 XOR 6 = 3.
	- [1,6] has an XOR total of 1 XOR 6 = 7.
	- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.
	0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28

	Example 3:
	Input: nums = [3,4,5,6,7,8]
	Output: 480
	Explanation: The sum of all XOR totals for every subset is 480.

	Constraints:
	* 1 <= nums.length <= 12
	* 1 <= nums[i] <= 20"""

    def subsetXORSum(self, nums: List[int]) -> int:
        ans = 0
        for mask in range(1 << len(nums)): 
            val = 0
            for i in range(len(nums)): 
                if mask & 1 << i: val ^= nums[i]
            ans += val
        return ans 


    """1864. Minimum Number of Swaps to Make the Binary String Alternating (Medium)
	Given a binary string s, return the minimum number of character swaps to 
	make it alternating, or -1 if it is impossible. The string is called 
	alternating if no two adjacent characters are equal. For example, the 
	strings "010" and "1010" are alternating, while the string "0100" is not.
	Any two characters may be swapped, even if they are not adjacent.

	Example 1:
	Input: s = "111000"
	Output: 1
	Explanation: Swap positions 1 and 4: "111000" -> "101010". The string is 
	             now alternating.

	Example 2:
	Input: s = "010"
	Output: 0
	Explanation: The string is already alternating, no swaps are needed.
	
	Example 3:
	Input: s = "1110"
	Output: -1

	Constraints:
	* 1 <= s.length <= 1000
	* s[i] is either '0' or '1'."""

    def minSwaps(self, s: str) -> int:
        ones = s.count("1")
        zeros = len(s) - ones 
        if abs(ones - zeros) > 1: return -1 # impossible
        
        def fn(x): 
            """Return number of swaps if string starts with x."""
            ans = 0 
            for c in s: 
                if c != x: ans += 1
                x = "1" if x == "0" else "0"
            return ans//2
        
        if ones > zeros: return fn("1")
        elif ones < zeros: return fn("0")
        else: return min(fn("0"), fn("1")) 


    """1866. Number of Ways to Rearrange Sticks With K Sticks Visible (Hard)
	There are n uniquely-sized sticks whose lengths are integers from 1 to n. 
	You want to arrange the sticks such that exactly k sticks are visible from 
	the left. A stick is visible from the left if there are no longer sticks to 
	the left of it. For example, if the sticks are arranged [1,3,2,5,4], then 
	the sticks with lengths 1, 3, and 5 are visible from the left. Given n and 
	k, return the number of such arrangements. Since the answer may be large, 
	return it modulo 109 + 7.

	Example 1:
	Input: n = 3, k = 2
	Output: 3
	Explanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such 
	             that exactly 2 sticks are visible. The visible sticks are 
	             underlined.
	
	Example 2:
	Input: n = 5, k = 5
	Output: 1
	Explanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are 
	             visible. The visible sticks are underlined.
	
	Example 3:
	Input: n = 20, k = 11
	Output: 647427950
	Explanation: There are 647427950 (mod 109 + 7) ways to rearrange the sticks 
	             such that exactly 11 sticks are visible.

	Constraints:
	* 1 <= n <= 1000
	* 1 <= k <= n"""

    def rearrangeSticks(self, n: int, k: int) -> int:
        
        @cache 
        def fn(n, k): 
            """Return number of ways to rearrange n sticks to that k are visible."""
            if n == k: return 1
            if k == 0: return 0
            return ((n-1)*fn(n-1, k) + fn(n-1, k-1)) % 1_000_000_007
        
        return fn(n, k) 


    """1868. Product of Two Run-Length Encoded Arrays (Medium)
	Run-length encoding is a compression algorithm that allows for an integer 
	array nums with many segments of consecutive repeated numbers to be 
	represented by a (generally smaller) 2D array encoded. Each 
	encoded[i] = [vali, freqi] describes the ith segment of repeated numbers in 
	nums where vali is the value that is repeated freqi times. For example, 
	nums = [1,1,1,2,2,2,2,2] is represented by the run-length encoded array 
	encoded = [[1,3],[2,5]]. Another way to read this is "three 1's followed by 
	five 2's". The product of two run-length encoded arrays encoded1 and 
	encoded2 can be calculated using the following steps:
	* Expand both encoded1 and encoded2 into the full arrays nums1 and nums2 
	  respectively.
	* Create a new array prodNums of length nums1.length and set 
	  prodNums[i] = nums1[i] * nums2[i].
	* Compress prodNums into a run-length encoded array and return it.
	You are given two run-length encoded arrays encoded1 and encoded2 
	representing full arrays nums1 and nums2 respectively. Both nums1 and nums2 
	have the same length. Each encoded1[i] = [vali, freqi] describes the ith 
	segment of nums1, and each encoded2[j] = [valj, freqj] describes the jth 
	segment of nums2. Return the product of encoded1 and encoded2.

	Note: Compression should be done such that the run-length encoded array has 
	      the minimum possible length.

	Example 1:
	Input: encoded1 = [[1,3],[2,3]], encoded2 = [[6,3],[3,3]]
	Output: [[6,6]]
	Explanation: encoded1 expands to [1,1,1,2,2,2] and encoded2 expands to 
	             [6,6,6,3,3,3]. prodNums = [6,6,6,6,6,6], which is compressed 
	             into the run-length encoded array [[6,6]].
	
	Example 2:
	Input: encoded1 = [[1,3],[2,1],[3,2]], encoded2 = [[2,3],[3,3]]
	Output: [[2,3],[6,1],[9,2]]
	Explanation: encoded1 expands to [1,1,1,2,3,3] and encoded2 expands to 
	             [2,2,2,3,3,3]. prodNums = [2,2,2,6,9,9], which is compressed 
	             into the run-length encoded array [[2,3],[6,1],[9,2]].

	Constraints:
	* 1 <= encoded1.length, encoded2.length <= 10^5
	* encoded1[i].length == 2
	* encoded2[j].length == 2
	* 1 <= vali, freqi <= 10^4 for each encoded1[i].
	* 1 <= valj, freqj <= 10^4 for each encoded2[j].
	* The full arrays that encoded1 and encoded2 represent are the same length."""

    def findRLEArray(self, encoded1: List[List[int]], encoded2: List[List[int]]) -> List[List[int]]:
        ans = []
        i = j = 0 
        while i < len(encoded1) and j < len(encoded2): 
            val = encoded1[i][0] * encoded2[j][0]
            freq = min(encoded1[i][1], encoded2[j][1])
            if ans and ans[-1][0] == val: ans[-1][1] += freq
            else: ans.append([val, freq])
            encoded1[i][1] -= freq
            encoded2[j][1] -= freq
            if encoded1[i][1] == 0: i += 1
            if encoded2[j][1] == 0: j += 1
        return ans 


    """1869. Longer Contiguous Segments of Ones than Zeros (Easy)
	Given a binary string s, return true if the longest contiguous segment of 
	1s is strictly longer than the longest contiguous segment of 0s in s. 
	Return false otherwise. For example, in s = "110100010" the longest 
	contiguous segment of 1s has length 2, and the longest contiguous segment 
	of 0s has length 3. Note that if there are no 0s, then the longest 
	contiguous segment of 0s is considered to have length 0. The same applies 
	if there are no 1s.

	Example 1:
	Input: s = "1101"
	Output: true
	Explanation:
	The longest contiguous segment of 1s has length 2: "1101"
	The longest contiguous segment of 0s has length 1: "1101"
	The segment of 1s is longer, so return true.

	Example 2:
	Input: s = "111000"
	Output: false
	Explanation:
	The longest contiguous segment of 1s has length 3: "111000"
	The longest contiguous segment of 0s has length 3: "111000"
	The segment of 1s is not longer, so return false.

	Example 3:
	Input: s = "110100010"
	Output: false
	Explanation:
	The longest contiguous segment of 1s has length 2: "110100010"
	The longest contiguous segment of 0s has length 3: "110100010"
	The segment of 1s is not longer, so return false.

	Constraints:
	* 1 <= s.length <= 100
	* s[i] is either '0' or '1'."""

    def checkZeroOnes(self, s: str) -> bool:
        ones = zeros = 0 
        for i in range(len(s)): 
            if i == 0 or s[i-1] != s[i]: cnt = 0 
            cnt += 1
            if s[i] == "0": zeros = max(zeros, cnt)
            else: ones = max(ones, cnt)
        return ones > zeros 


    """1870. Minimum Speed to Arrive on Time (Medium)
	You are given a floating-point number hour, representing the amount of time 
	you have to reach the office. To commute to the office, you must take n 
	trains in sequential order. You are also given an integer array dist of 
	length n, where dist[i] describes the distance (in kilometers) of the ith 
	train ride. Each train can only depart at an integer hour, so you may need 
	to wait in between each train ride. For example, if the 1st train ride 
	takes 1.5 hours, you must wait for an additional 0.5 hours before you can 
	depart on the 2nd train ride at the 2 hour mark. Return the minimum 
	positive integer speed (in kilometers per hour) that all the trains must 
	travel at for you to reach the office on time, or -1 if it is impossible to 
	be on time. Tests are generated such that the answer will not exceed 10^7 
	and hour will have at most two digits after the decimal point.

	Example 1:
	Input: dist = [1,3,2], hour = 6
	Output: 1
	Explanation: At speed 1:
	- The first train ride takes 1/1 = 1 hour.
	- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.
	- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.
	- You will arrive at exactly the 6 hour mark.

	Example 2:
	Input: dist = [1,3,2], hour = 2.7
	Output: 3
	Explanation: At speed 3:
	- The first train ride takes 1/3 = 0.33333 hours.
	- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.
	- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.
	- You will arrive at the 2.66667 hour mark.

	Example 3:
	Input: dist = [1,3,2], hour = 1.9
	Output: -1
	Explanation: It is impossible because the earliest the third train can depart is at the 2 hour mark.

	Constraints:
	* n == dist.length
	* 1 <= n <= 10^5
	* 1 <= dist[i] <= 10^5
	* 1 <= hour <= 10^9
	* There will be at most two digits after the decimal point in hour."""

    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:
        lo, hi = 1, 10_000_001
        while lo < hi: 
            mid = lo + hi >> 1
            tm = sum((dist[i]+mid-1)//mid for i in range(0, len(dist)-1)) + dist[-1]/mid
            if tm <= hour: hi = mid
            else: lo = mid + 1
        return lo if lo < 10_000_001 else -1 


    """1871. Jump Game VII (Medium)
	You are given a 0-indexed binary string s and two integers minJump and 
	maxJump. In the beginning, you are standing at index 0, which is equal to 
	'0'. You can move from index i to index j if the following conditions are 
	fulfilled:
	* i + minJump <= j <= min(i + maxJump, s.length - 1), and
	* s[j] == '0'.
	Return true if you can reach index s.length - 1 in s, or false otherwise.

	Example 1:
	Input: s = "011010", minJump = 2, maxJump = 3
	Output: true
	Explanation: In the first step, move from index 0 to index 3. 
	             In the second step, move from index 3 to index 5.
	
	Example 2:
	Input: s = "01101110", minJump = 2, maxJump = 3
	Output: false

	Constraints:
	* 2 <= s.length <= 10^5
	* s[i] is either '0' or '1'.
	* s[0] == '0'
	* 1 <= minJump <= maxJump < s.length"""

    def canReach(self, s: str, minJump: int, maxJump: int) -> bool:
        prefix = [0, 1]
        for i in range(1, len(s)): 
            prefix.append(prefix[-1])
            lo = max(0, i-maxJump)
            hi = max(0, i-minJump+1)
            if s[i] == "0" and prefix[hi] - prefix[lo] > 0: prefix[-1] += 1
        return prefix[-1] > prefix[-2] 


    """1872. Stone Game VIII (Hard)
	Alice and Bob take turns playing a game, with Alice starting first. There 
	are n stones arranged in a row. On each player's turn, while the number of 
	stones is more than one, they will do the following:
	* Choose an integer x > 1, and remove the leftmost x stones from the row.
	* Add the sum of the removed stones' values to the player's score.
	* Place a new stone, whose value is equal to that sum, on the left side of 
	the row.
	The game stops when only one stone is left in the row. The score difference 
	between Alice and Bob is (Alice's score - Bob's score). Alice's goal is to 
	maximize the score difference, and Bob's goal is the minimize the score 
	difference. Given an integer array stones of length n where stones[i] 
	represents the value of the ith stone from the left, return the score 
	difference between Alice and Bob if they both play optimally.

	Example 1:
	Input: stones = [-1,2,-3,4,-5]
	Output: 5
	Explanation:
	- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of
	  value 2 on the left. stones = [2,-5].
	- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on
	  the left. stones = [-3].
	The difference between their scores is 2 - (-3) = 5.

	Example 2:
	Input: stones = [7,-6,5,10,5,-2,-6]
	Output: 13
	Explanation:
	- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a
	  stone of value 13 on the left. stones = [13].
	The difference between their scores is 13 - 0 = 13.

	Example 3:
	Input: stones = [-10,-12]
	Output: -22
	Explanation:
	- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her
	  score and places a stone of value -22 on the left. stones = [-22].
	The difference between their scores is (-22) - 0 = -22.

	Constraints:
	* n == stones.length
	* 2 <= n <= 10^5
	* -104 <= stones[i] <= 10^4"""

    def stoneGameVIII(self, stones: List[int]) -> int:
        prefix = [0]
        for x in stones: prefix.append(prefix[-1] + x)
        
        @cache
        def fn(i): 
            """Return max score difference."""
            if i+1 == len(stones): return prefix[-1]
            return max(fn(i+1), prefix[i+1] - fn(i+1))
        
        return fn(1)


    """1874. Minimize Product Sum of Two Arrays (Medium)
	The product sum of two equal-length arrays a and b is equal to the sum of 
	a[i] * b[i] for all 0 <= i < a.length (0-indexed). For example, if 
	a = [1,2,3,4] and b = [5,2,3,1], the product sum would be 
	1*5 + 2*2 + 3*3 + 4*1 = 22. Given two arrays nums1 and nums2 of length n, 
	return the minimum product sum if you are allowed to rearrange the order 
	of the elements in nums1. 

	Example 1:
	Input: nums1 = [5,3,4,2], nums2 = [4,2,2,5]
	Output: 40
	Explanation: We can rearrange nums1 to become [3,5,4,2]. The product sum of 
	             [3,5,4,2] and [4,2,2,5] is 3*4 + 5*2 + 4*2 + 2*5 = 40.
	
	Example 2:
	Input: nums1 = [2,1,4,5,7], nums2 = [3,2,4,8,6]
	Output: 65
	Explanation: We can rearrange nums1 to become [5,7,4,1,2]. The product sum 
	             of [5,7,4,1,2] and [3,2,4,8,6] is 
	             5*3 + 7*2 + 4*4 + 1*8 + 2*6 = 65.

	Constraints:
	* n == nums1.length == nums2.length
	* 1 <= n <= 10^5
	* 1 <= nums1[i], nums2[i] <= 100"""

    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:
        return sum(x1*x2 for x1, x2 in zip(sorted(nums1), sorted(nums2, reverse=True)))


    """1876. Substrings of Size Three with Distinct Characters (Easy)
	A string is good if there are no repeated characters. Given a string s, 
	return the number of good substrings of length three in s. Note that if 
	there are multiple occurrences of the same substring, every occurrence 
	should be counted. A substring is a contiguous sequence of characters in a 
	string.

	Example 1:
	Input: s = "xyzzaz"
	Output: 1
	Explanation: There are 4 substrings of size 3: "xyz", "yzz", "zza", and 
	             "zaz". The only good substring of length 3 is "xyz".

	Example 2:
	Input: s = "aababcabc"
	Output: 4
	Explanation: There are 7 substrings of size 3: "aab", "aba", "bab", "abc", 
	             "bca", "cab", and "abc". The good substrings are "abc", "bca", 
	             "cab", and "abc".

	Constraints:
	* 1 <= s.length <= 100
	* s consists of lowercase English letters."""

    def countGoodSubstrings(self, s: str) -> int:
        ans = 0
        for i in range(3, len(s)+1):
            if len(set(s[i-3:i])) == 3: ans += 1
        return ans 


    """1877. Minimize Maximum Pair Sum in Array (Medium)
	The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the 
	largest pair sum in a list of pairs. For example, if we have pairs (1,5), 
	(2,3), and (4,4), the maximum pair sum would be 
	max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8. Given an array nums of even length n, 
	pair up the elements of nums into n / 2 pairs such that:
	* Each element of nums is in exactly one pair, and
	* The maximum pair sum is minimized.
	Return the minimized maximum pair sum after optimally pairing up the 
	elements.

	Example 1:
	Input: nums = [3,5,2,3]
	Output: 7
	Explanation: The elements can be paired up into pairs (3,3) and (5,2). The 
	             maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.

	Example 2:
	Input: nums = [3,5,4,2,4,6]
	Output: 8
	Explanation: The elements can be paired up into pairs (3,5), (4,4), and 
	             (6,2). The maximum pair sum is 
	             max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.

	Constraints:
	* n == nums.length
	* 2 <= n <= 10^5
	* n is even.
	* 1 <= nums[i] <= 10^5"""

    def minPairSum(self, nums: List[int]) -> int:
        nums.sort()
        return max(nums[i] + nums[~i] for i in range(len(nums)//2))


    """1878. Get Biggest Three Rhombus Sums in a Grid (Medium)
	You are given an m x n integer matrix grid. A rhombus sum is the sum of the 
	elements that form the border of a regular rhombus shape in grid. The 
	rhombus must have the shape of a square rotated 45 degrees with each of the 
	corners centered in a grid cell. Below is an image of four valid rhombus 
	shapes with the corresponding colored cells that should be included in each 
	rhombus sum. Note that the rhombus can have an area of 0, which is depicted 
	by the purple rhombus in the bottom right corner. Return the biggest three 
	distinct rhombus sums in the grid in descending order. If there are less 
	than three distinct values, return all of them.

	Example 1:
	Input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]
	Output: [228,216,211]
	Explanation: The rhombus shapes for the three biggest distinct rhombus sums 
	             are depicted above.
	             - Blue: 20 + 3 + 200 + 5 = 228
	             - Red: 200 + 2 + 10 + 4 = 216
	             - Green: 5 + 200 + 4 + 2 = 211

	Example 2:
	Input: grid = [[1,2,3],[4,5,6],[7,8,9]]
	Output: [20,9,8]
	Explanation: The rhombus shapes for the three biggest distinct rhombus sums 
	             are depicted above.
 	             - Blue: 4 + 2 + 6 + 8 = 20
 	             - Red: 9 (area 0 rhombus in the bottom right corner)
 	             - Green: 8 (area 0 rhombus in the bottom middle)
	
	Example 3:
	Input: grid = [[7,7,7]]
	Output: [7]
	Explanation: All three possible rhombus sums are the same, so return [7].

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 50
	* 1 <= grid[i][j] <= 10^5"""

    def getBiggestThree(self, grid: List[List[int]]) -> List[int]:
        m, n = len(grid), len(grid[0]) # dimensions 
        anti, diag = {}, {}
        for i in range(m):
            for j in range(n): 
                key = i+j
                if key not in anti: anti[key] = [0]
                anti[key].append(anti[key][-1] + grid[i][j])
                
                key = i-j 
                if key not in diag: diag[key] = [0]
                diag[key].append(diag[key][-1] + grid[i][j])
        
        def fn(i, j, k): 
            """Return sum of k diagonal elements starting from (i, j)"""
            if i >= j: return diag[i-j][j+k] - diag[i-j][j]
            return diag[i-j][i+k] - diag[i-j][i]
        
        def gn(i, j, k):
            """Return sum of k anti-diagonal elements starting from (i, j)"""
            if i+j < n: return anti[i+j][i+k] - anti[i+j][i]
            return anti[i+j][n-1-j+k] - anti[i+j][n-1-j]
        
        ans = set()
        for i in range(m):
            for j in range(n): 
                ans.add(grid[i][j])
                for ii in range(i+2, m, 2): 
                    r = (ii-i)//2
                    if j-r < 0 or j+r >= n: break 
                    val = 0 
                    val += fn(i, j, r+1)
                    val += gn(i, j, r+1)
                    val += fn((ii+i)//2, j-r, r+1)
                    val += gn((ii+i)//2, j+r, r+1)
                    val -= grid[i][j] + grid[(ii+i)//2][j-r] + grid[(ii+i)//2][j+r] + grid[ii][j]
                    ans.add(val)
        return sorted(ans, reverse=True)[:3]


    """1879. Minimum XOR Sum of Two Arrays (Hard)
	You are given two integer arrays nums1 and nums2 of length n. The XOR sum 
	of the two integer arrays is 
	(nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed).
	For example, the XOR sum of [1,2,3] and [3,2,1] is equal to 
	(1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4. Rearrange the elements 
	of nums2 such that the resulting XOR sum is minimized. Return the XOR sum 
	after the rearrangement.

	Example 1:
	Input: nums1 = [1,2], nums2 = [2,3]
	Output: 2
	Explanation: Rearrange nums2 so that it becomes [3,2]. The XOR sum is 
	             (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2.
	
	Example 2:
	Input: nums1 = [1,0,3], nums2 = [5,3,4]
	Output: 8
	Explanation: Rearrange nums2 so that it becomes [5,4,3]. The XOR sum is 
	             (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8.

	Constraints:
	* n == nums1.length
	* n == nums2.length
	* 1 <= n <= 14
	* 0 <= nums1[i], nums2[i] <= 10^7"""

    def minimumXORSum(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        
        @cache 
        def fn(mask, k): 
            """Return min xor sum."""
            if not mask: return 0 
            ans = inf 
            for i in range(n): 
                if mask & (1<<i): 
                    ans = min(ans, (nums1[i]^nums2[k]) + fn(mask^(1<<i), k+1))
            return ans 
        
        return fn((1<<n)-1, 0)


    """1880. Check if Word Equals Summation of Two Words (Easy)
	The letter value of a letter is its position in the alphabet starting from 
	0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.). The numerical value of some 
	string of lowercase English letters s is the concatenation of the letter 
	values of each letter in s, which is then converted into an integer. 
	* For example, if s = "acb", we concatenate each letter's letter value, 
	  resulting in "021". After converting it, we get 21.
	
	You are given three strings firstWord, secondWord, and targetWord, each 
	consisting of lowercase English letters 'a' through 'j' inclusive. Return 
	true if the summation of the numerical values of firstWord and secondWord 
	equals the numerical value of targetWord, or false otherwise.

	Example 1:
	Input: firstWord = "acb", secondWord = "cba", targetWord = "cdb"
	Output: true
	Explanation:
	The numerical value of firstWord is "acb" -> "021" -> 21.
	The numerical value of secondWord is "cba" -> "210" -> 210.
	The numerical value of targetWord is "cdb" -> "231" -> 231.
	We return true because 21 + 210 == 231.

	Example 2:
	Input: firstWord = "aaa", secondWord = "a", targetWord = "aab"
	Output: false
	Explanation: 
	The numerical value of firstWord is "aaa" -> "000" -> 0.
	The numerical value of secondWord is "a" -> "0" -> 0.
	The numerical value of targetWord is "aab" -> "001" -> 1.
	We return false because 0 + 0 != 1.

	Example 3:
	Input: firstWord = "aaa", secondWord = "a", targetWord = "aaaa"
	Output: true
	Explanation: 
	The numerical value of firstWord is "aaa" -> "000" -> 0.
	The numerical value of secondWord is "a" -> "0" -> 0.
	The numerical value of targetWord is "aaaa" -> "0000" -> 0.
	We return true because 0 + 0 == 0.

	Constraints:
	* 1 <= firstWord.length, secondWord.length, targetWord.length <= 8
	* firstWord, secondWord, and targetWord consist of lowercase English 
	  letters from 'a' to 'j' inclusive."""

    def isSumEqual(self, firstWord: str, secondWord: str, targetWord: str) -> bool:
        fn = lambda w: int("".join(str(ord(c)-97) for c in w))
        return fn(firstWord) + fn(secondWord) == fn(targetWord)


    """1881. Maximum Value after Insertion (Medium)
	You are given a very large integer n, represented as a string, and an 
	integer digit x. The digits in n and the digit x are in the inclusive range 
	[1, 9], and n may represent a negative number. You want to maximize n's 
	numerical value by inserting x anywhere in the decimal representation of n. 
	You cannot insert x to the left of the negative sign.

	* For example, if n = 73 and x = 6, it would be best to insert it between 7 
	  and 3, making n = 763.
	* If n = -55 and x = 2, it would be best to insert it before the first 5, 
	  making n = -255.
	Return a string representing the maximum value of n after the insertion.

	Example 1:
	Input: n = "99", x = 9
	Output: "999"
	Explanation: The result is the same regardless of where you insert 9.

	Example 2:
	Input: n = "-13", x = 2
	Output: "-123"
	Explanation: You can make n one of {-213, -123, -132}, and the largest of 
	             those three is -123.

	Constraints:
	* 1 <= n.length <= 10^5
	* 1 <= x <= 9
	* The digits in n are in the range [1, 9].
	* n is a valid representation of an integer.
	* In the case of a negative n, it will begin with '-'."""

    def maxValue(self, n: str, x: int) -> str:
        x = str(x)
        if n[0] == "-": 
            for i in range(1, len(n)): 
                if x < n[i]: return n[:i] + x + n[i:]
        else: 
            for i in range(0, len(n)): 
                if x > n[i]: return n[:i] + x + n[i:]
        return n + x


    """1882. Process Tasks Using Servers (Medium)
	You are given two 0-indexed integer arrays servers and tasks of lengths n 
	and m respectively. servers[i] is the weight of the ith server, and tasks[j] 
	is the time needed to process the jth task in seconds. You are running a 
	simulation system that will shut down after all tasks are processed. Each 
	server can only process one task at a time. You will be able to process the 
	jth task starting from the jth second beginning with the 0th task at second 
	0. To process task j, you assign it to the server with the smallest weight 
	that is free, and in case of a tie, choose the server with the smallest 
	index. If a free server gets assigned task j at second t, it will be free 
	again at the second t + tasks[j]. If there are no free servers, you must 
	wait until one is free and execute the free tasks as soon as possible. If 
	multiple tasks need to be assigned, assign them in order of increasing index.
	You may assign multiple tasks at the same second if there are multiple free 
	servers. Build an array ans of length m, where ans[j] is the index of the 
	server the jth task will be assigned to. Return the array ans.

	Example 1:
	Input: servers = [3,3,2], tasks = [1,2,3,2,1,2]
	Output: [2,2,0,2,1,2]
	Explanation: Events in chronological order go as follows:
	- At second 0, task 0 is added and processed using server 2 until second 1.
	- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.
	- At second 2, task 2 is added and processed using server 0 until second 5.
	- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.
	- At second 4, task 4 is added and processed using server 1 until second 5.
	- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.

	Example 2:
	Input: servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]
	Output: [1,4,1,4,1,3,2]
	Explanation: Events in chronological order go as follows: 
	- At second 0, task 0 is added and processed using server 1 until second 2.
	- At second 1, task 1 is added and processed using server 4 until second 2.
	- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. 
	- At second 3, task 3 is added and processed using server 4 until second 7.
	- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. 
	- At second 5, task 5 is added and processed using server 3 until second 7.
	- At second 6, task 6 is added and processed using server 2 until second 7.

	Constraints:
	* servers.length == n
	* tasks.length == m
	* 1 <= n, m <= 2 * 10^5
	* 1 <= servers[i], tasks[j] <= 2 * 10^5"""

    def assignTasks(self, servers: List[int], tasks: List[int]) -> List[int]:
        busy = []
        free = [(wt, i) for i, wt in enumerate(servers)]
        heapify(free)
        
        ans = []
        for t, task in enumerate(tasks): 
            while busy and busy[0][0] == t: 
                _, wt, i = heappop(busy)
                heappush(free, (wt, i))
            if free: wt, i = heappop(free)
            else: t, wt, i = heappop(busy)
            ans.append(i)
            heappush(busy, (t+task, wt, i))
        return ans 


    """1883. Minimum Skips to Arrive at Meeting On Time (Hard)
	You are given an integer hoursBefore, the number of hours you have to 
	travel to your meeting. To arrive at your meeting, you have to travel 
	through n roads. The road lengths are given as an integer array dist of 
	length n, where dist[i] describes the length of the ith road in kilometers. 
	In addition, you are given an integer speed, which is the speed (in km/h) 
	you will travel at. After you travel road i, you must rest and wait for the 
	next integer hour before you can begin traveling on the next road. Note 
	that you do not have to rest after traveling the last road because you are 
	already at the meeting.

	* For example, if traveling a road takes 1.4 hours, you must wait until the 
	  2 hour mark before traveling the next road. If traveling a road takes 
	  exactly 2 hours, you do not need to wait.
	However, you are allowed to skip some rests to be able to arrive on time, 
	meaning you do not need to wait for the next integer hour. Note that this 
	means you may finish traveling future roads at different hour marks.

	* For example, suppose traveling the first road takes 1.4 hours and 
	  traveling the second road takes 0.6 hours. Skipping the rest after the 
	  first road will mean you finish traveling the second road right at the 2 
	  hour mark, letting you start traveling the third road immediately.
	Return the minimum number of skips required to arrive at the meeting on 
	time, or -1 if it is impossible.

	Example 1:
	Input: dist = [1,3,2], speed = 4, hoursBefore = 2
	Output: 1
	Explanation: Without skipping any rests, you will arrive in 
	             (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours. You can skip 
	             the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 
	             hours. Note that the second rest is shortened because you finish 
	             traveling the second road at an integer hour due to skipping the 
	             first rest.
	
	Example 2:
	Input: dist = [7,3,5,5], speed = 2, hoursBefore = 10
	Output: 2
	Explanation: Without skipping any rests, you will arrive in 
	             (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.
	             You can skip the first and third rest to arrive in 
	             ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours.
	
	Example 3:
	Input: dist = [7,3,5,5], speed = 1, hoursBefore = 10
	Output: -1
	Explanation: It is impossible to arrive at the meeting on time even if you 
	             skip all the rests.

	Constraints:
	* n == dist.length
	* 1 <= n <= 1000
	* 1 <= dist[i] <= 10^5
	* 1 <= speed <= 10^6
	* 1 <= hoursBefore <= 10^7"""

    def minSkips(self, dist: List[int], speed: int, hoursBefore: int) -> int:
        if sum(dist)/speed > hoursBefore: return -1 # impossible 
        
        @cache
        def fn(i, k): 
            """Return min time (in distance) of traveling first i roads with k skips."""
            if k < 0: return inf # impossible 
            if i == 0: return 0 
            return min(ceil((fn(i-1, k) + dist[i-1])/speed) * speed, dist[i-1] + fn(i-1, k-1))
        
        for k in range(len(dist)):
            if fn(len(dist)-1, k) + dist[-1] <= hoursBefore*speed: return k 


    """1884. Egg Drop With 2 Eggs and N Floors (Medium)
	You are given two identical eggs and you have access to a building with n 
	floors labeled from 1 to n. You know that there exists a floor f where 
	0 <= f <= n such that any egg dropped at a floor higher than f will break, 
	and any egg dropped at or below floor f will not break. In each move, you 
	may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). 
	If the egg breaks, you can no longer use it. However, if the egg does not 
	break, you may reuse it in future moves. Return the minimum number of moves 
	that you need to determine with certainty what the value of f is.

	Example 1:
	Input: n = 2
	Output: 2
	Explanation: We can drop the first egg from floor 1 and the second egg from floor 2.
	             If the first egg breaks, we know that f = 0.
	             If the second egg breaks but the first egg didn't, we know that f = 1.
	             Otherwise, if both eggs survive, we know that f = 2.
	
	Example 2:
	Input: n = 100
	Output: 14
	Explanation: One optimal strategy is:
	- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. 
	  Drop the 2nd egg starting from floor 1 and going up one at a time to find 
	  f within 7 more drops. Total drops is 1 + 7 = 8.
	- If the 1st egg does not break, drop the 1st egg again at floor 22. If it 
	  breaks, we know f is between 9 and 21. Drop the 2nd egg starting from 
	  floor 10 and going up one at a time to find f within 12 more drops. Total 
	  drops is 2 + 12 = 14.
	- If the 1st egg does not break again, follow a similar process dropping 
	  the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 
	  100.
	Regardless of the outcome, it takes at most 14 drops to determine f.

	Constraints: 1 <= n <= 1000"""

    def twoEggDrop(self, n: int) -> int:
        
        @cache
        def fn(n, k): 
            """Return min moves for n floors and k eggs."""
            if k == 1: return n 
            if n == 0: return 0 
            ans = inf 
            for x in range(1, n+1): 
                ans = min(ans, 1 + max(fn(x-1, k-1), fn(n-x, k)))
            return ans 
        
        return fn(n, 2)


    """1885. Count Pairs in Two Arrays (Medium)
	Given two integer arrays nums1 and nums2 of length n, count the pairs of 
	indices (i, j) such that i < j and nums1[i] + nums1[j] > nums2[i] + nums2[j].
	Return the number of pairs satisfying the condition.

	Example 1:
	Input: nums1 = [2,1,2,1], nums2 = [1,2,1,2]
	Output: 1
	Explanation: The pairs satisfying the condition are:
	             - (0, 2) where 2 + 2 > 1 + 1.
	
	Example 2:
	Input: nums1 = [1,10,6,2], nums2 = [1,4,1,5]
	Output: 5
	Explanation: The pairs satisfying the condition are:
	             - (0, 1) where 1 + 10 > 1 + 4.
	             - (0, 2) where 1 + 6 > 1 + 1.
	             - (1, 2) where 10 + 6 > 4 + 1.
	             - (1, 3) where 10 + 2 > 4 + 5.
	             - (2, 3) where 6 + 2 > 1 + 5.

	Constraints:
	* n == nums1.length == nums2.length
	* 1 <= n <= 10^5
	* 1 <= nums1[i], nums2[i] <= 10^5"""

    def countPairs(self, nums1: List[int], nums2: List[int]) -> int:
        diff = sorted(x - y for x, y in zip(nums1, nums2))
        ans = 0 
        for i, x in enumerate(diff): 
            ans += len(diff) - bisect_right(diff, -x, i+1)
        return ans 


    """1886. Determine Whether Matrix Can Be Obtained By Rotation (Easy)
	Given two n x n binary matrices mat and target, return true if it is 
	possible to make mat equal to target by rotating mat in 90-degree 
	increments, or false otherwise.

	Example 1:
	Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
	Output: true
	Explanation: We can rotate mat 90 degrees clockwise to make mat equal 
	             target.
	
	Example 2:
	Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
	Output: false
	Explanation: It is impossible to make mat equal to target by rotating mat.

	Example 3:
	Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
	Output: true
	Explanation: We can rotate mat 90 degrees clockwise two times to make mat 
	             equal target.

	Constraints:
	* n == mat.length == target.length
	* n == mat[i].length == target[i].length
	* 1 <= n <= 10
	* mat[i][j] and target[i][j] are either 0 or 1."""

    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:
        for _ in range(4): 
            if mat == target: return True
            mat = [list(x) for x in zip(*mat[::-1])]
        return False 


    """1887. Reduction Operations to Make the Array Elements Equal (Medium)
	Given an integer array nums, your goal is to make all elements in nums 
	equal. To complete one operation, follow these steps:
	* Find the largest value in nums. Let its index be i (0-indexed) and its 
	  value be largest. If there are multiple elements with the largest value, 
	  pick the smallest i.
	* Find the next largest value in nums strictly smaller than largest. Let 
	  its value be nextLargest.
	Reduce nums[i] to nextLargest. Return the number of operations to make all 
	elements in nums equal.

	Example 1:
	Input: nums = [5,1,3]
	Output: 3
	Explanation: It takes 3 operations to make all elements in nums equal:
	1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].
	2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].
	3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1].

	Example 2:
	Input: nums = [1,1,1]
	Output: 0
	Explanation: All elements in nums are already equal.

	Example 3:
	Input: nums = [1,1,2,2,3]
	Output: 4
	Explanation: It takes 4 operations to make all elements in nums equal:
	1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].
	2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].
	3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].
	4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1].

	Constraints:
	* 1 <= nums.length <= 5 * 10^4
	* 1 <= nums[i] <= 5 * 10^4"""

    def reductionOperations(self, nums: List[int]) -> int:
        ans = val = 0
        nums.sort()
        for i in range(1, len(nums)): 
            if nums[i-1] < nums[i]: val += 1
            ans += val
        return ans 


    """1888. Minimum Number of Flips to Make the Binary String Alternating (Medium)
	You are given a binary string s. You are allowed to perform two types of 
	operations on the string in any sequence:
	* Type-1: Remove the character at the start of the string s and append it 
	  to the end of the string.
	* Type-2: Pick any character in s and flip its value, i.e., if its value is 
	  '0' it becomes '1' and vice-versa.
	Return the minimum number of type-2 operations you need to perform such 
	that s becomes alternating. The string is called alternating if no two 
	adjacent characters are equal. For example, the strings "010" and "1010" 
	are alternating, while the string "0100" is not.

	Example 1:
	Input: s = "111000"
	Output: 2
	Explanation: Use the first operation two times to make s = "100011". Then, 
	             use the second operation on the third and sixth elements to 
	             make s = "101010".
	
	Example 2:
	Input: s = "010"
	Output: 0
	Explanation: The string is already alternating.

	Example 3:
	Input: s = "1110"
	Output: 1
	Explanation: Use the second operation on the second element to make 
	             s = "1010".

	Constraints:
	* 1 <= s.length <= 10^5
	* s[i] is either '0' or '1'."""

    def minFlips(self, s: str) -> int:
        s = [int(x) for x in s]
        ans = inf
        x01 = x10 = 0 
        for i in range(2*len(s)): 
            x01 += s[i%len(s)]^i&1
            x10 += s[i%len(s)]^(i+1)&1
            if i+1 >= len(s): 
                if i >= len(s):
                    x01 -= s[i-len(s)]^(i-len(s))&1
                    x10 -= s[i-len(s)]^(i-len(s)+1)&1
                ans = min(ans, x01, x10)
        return ans 


    """1889. Minimum Space Wasted From Packaging (Hard)
	You have n packages that you are trying to place in boxes, one package in 
	each box. There are m suppliers that each produce boxes of different sizes 
	(with infinite supply). A package can be placed in a box if the size of the 
	package is less than or equal to the size of the box. The package sizes are 
	given as an integer array packages, where packages[i] is the size of the 
	ith package. The suppliers are given as a 2D integer array boxes, where 
	boxes[j] is an array of box sizes that the jth supplier produces. You want 
	to choose a single supplier and use boxes from them such that the total 
	wasted space is minimized. For each package in a box, we define the space 
	wasted to be size of the box - size of the package. The total wasted space 
	is the sum of the space wasted in all the boxes. For example, if you have 
	to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes 
	[4,8], you can fit the packages of size-2 and size-3 into two boxes of 
	size-4 and the package with size-5 into a box of size-8. This would result 
	in a waste of (4-2) + (4-3) + (8-5) = 6. Return the minimum total wasted 
	space by choosing the box supplier optimally, or -1 if it is impossible to 
	fit all the packages inside boxes. Since the answer may be large, return 
	it modulo 10^9 + 7.

	Example 1:
	Input: packages = [2,3,5], boxes = [[4,8],[2,8]]
	Output: 6
	Explanation: It is optimal to choose the first supplier, using two size-4 
	             boxes and one size-8 box. The total waste is 
	             (4-2) + (4-3) + (8-5) = 6.
	
	Example 2:
	Input: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]
	Output: -1
	Explanation: There is no box that the package of size 5 can fit in.

	Example 3:
	Input: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]
	Output: 9
	Explanation: It is optimal to choose the third supplier, using two size-5 
	             boxes, two size-10 boxes, and two size-14 boxes. The total 
	             waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.

	Constraints:
	* n == packages.length
	* m == boxes.length
	* 1 <= n <= 10^5
	* 1 <= m <= 10^5
	* 1 <= packages[i] <= 10^5
	* 1 <= boxes[j].length <= 10^5
	* 1 <= boxes[j][k] <= 10^5
	* sum(boxes[j].length) <= 10^5
	* The elements in boxes[j] are distinct."""

    def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:
        packages.sort()
        
        ans = inf 
        for box in boxes: 
            box.sort()
            if packages[-1] <= box[-1]: 
                kk = val = 0 
                for x in box: 
                    k = bisect_right(packages, x)
                    val += (k - kk) * x
                    kk = k
                ans = min(ans, val)
        return (ans - sum(packages)) % 1_000_000_007 if ans < inf else -1 


    """1891. Cutting Ribbons (Medium)
	You are given an integer array ribbons, where ribbons[i] represents the 
	length of the ith ribbon, and an integer k. You may cut any of the ribbons 
	into any number of segments of positive integer lengths, or perform no cuts 
	at all. For example, if you have a ribbon of length 4, you can:
	* Keep the ribbon of length 4,
	* Cut it into one ribbon of length 3 and one ribbon of length 1,
	* Cut it into two ribbons of length 2,
	* Cut it into one ribbon of length 2 and two ribbons of length 1, or
	* Cut it into four ribbons of length 1.
	Your goal is to obtain k ribbons of all the same positive integer length. 
	You are allowed to throw away any excess ribbon as a result of cutting.
	Return the maximum possible positive integer length that you can obtain k 
	ribbons of, or 0 if you cannot obtain k ribbons of the same length.

	Example 1:
	Input: ribbons = [9,7,5], k = 3
	Output: 5
	Explanation:
	- Cut the first ribbon to two ribbons, one of length 5 and one of length 4.
	- Cut the second ribbon to two ribbons, one of length 5 and one of length 2.
	- Keep the third ribbon as it is.
	Now you have 3 ribbons of length 5.
	
	Example 2:
	Input: ribbons = [7,5,9], k = 4
	Output: 4
	Explanation:
	- Cut the first ribbon to two ribbons, one of length 4 and one of length 3.
	- Cut the second ribbon to two ribbons, one of length 4 and one of length 1.
	- Cut the third ribbon to three ribbons, two of length 4 and one of length 1.
	Now you have 4 ribbons of length 4.

	Example 3:
	Input: ribbons = [5,7,9], k = 22
	Output: 0
	Explanation: You cannot obtain k ribbons of the same positive integer length.

	Constraints:
	* 1 <= ribbons.length <= 10^5
	* 1 <= ribbons[i] <= 10^5
	* 1 <= k <= 10^9"""

    def maxLength(self, ribbons: List[int], k: int) -> int:
        # last-true binary search 
        lo, hi = 0, 100_000
        while lo < hi: 
            mid = lo + hi + 1 >> 1
            if sum(ribbon//mid for ribbon in ribbons) < k: hi = mid - 1
            else: lo = mid
        return lo 


    """1893. Check if All the Integers in a Range Are Covered (Easy)
	You are given a 2D integer array ranges and two integers left and right. 
	Each ranges[i] = [starti, endi] represents an inclusive interval between 
	starti and endi. Return true if each integer in the inclusive range 
	[left, right] is covered by at least one interval in ranges. Return false 
	otherwise. An integer x is covered by an interval ranges[i] = [starti, endi] 
	if starti <= x <= endi.

	Example 1:
	Input: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5
	Output: true
	Explanation: Every integer between 2 and 5 is covered:
	             - 2 is covered by the first range.
	             - 3 and 4 are covered by the second range.
	             - 5 is covered by the third range.
	
	Example 2:
	Input: ranges = [[1,10],[10,20]], left = 21, right = 21
	Output: false
	Explanation: 21 is not covered by any range.

	Constraints:
	* 1 <= ranges.length <= 50
	* 1 <= starti <= endi <= 50
	* 1 <= left <= right <= 50"""

    def isCovered(self, ranges: List[List[int]], left: int, right: int) -> bool:
        vals = [0]*52 
        for x, y in ranges: 
            vals[x] += 1
            vals[y+1] -= 1
        prefix = 0 
        for i, x in enumerate(vals): 
            prefix += x
            if left <= i <= right and prefix == 0: return False 
        return True 


    """1894. Find the Student that Will Replace the Chalk (Medium)
	There are n students in a class numbered from 0 to n - 1. The teacher will 
	give each student a problem starting with the student number 0, then the 
	student number 1, and so on until the teacher reaches the student number 
	n - 1. After that, the teacher will restart the process, starting with the 
	student number 0 again. You are given a 0-indexed integer array chalk and 
	an integer k. There are initially k pieces of chalk. When the student 
	number i is given a problem to solve, they will use chalk[i] pieces of 
	chalk to solve that problem. However, if the current number of chalk pieces 
	is strictly less than chalk[i], then the student number i will be asked to 
	replace the chalk. Return the index of the student that will replace the 
	chalk.

	Example 1:
	Input: chalk = [5,1,5], k = 22
	Output: 0
	Explanation: The students go in turns as follows:
	             - Student number 0 uses 5 chalk, so k = 17.
	             - Student number 1 uses 1 chalk, so k = 16.
	             - Student number 2 uses 5 chalk, so k = 11.
	             - Student number 0 uses 5 chalk, so k = 6.
	             - Student number 1 uses 1 chalk, so k = 5.
	             - Student number 2 uses 5 chalk, so k = 0.
	             Student number 0 does not have enough chalk, so they will have 
	             to replace it.
	
	Example 2:
	Input: chalk = [3,4,1,2], k = 25
	Output: 1
	Explanation: The students go in turns as follows:
	             - Student number 0 uses 3 chalk so k = 22.
	             - Student number 1 uses 4 chalk so k = 18.
	             - Student number 2 uses 1 chalk so k = 17.
	             - Student number 3 uses 2 chalk so k = 15.
	             - Student number 0 uses 3 chalk so k = 12.
	             - Student number 1 uses 4 chalk so k = 8.
	             - Student number 2 uses 1 chalk so k = 7.
	             - Student number 3 uses 2 chalk so k = 5.
	             - Student number 0 uses 3 chalk so k = 2.
	             Student number 1 does not have enough chalk, so they will have 
	             to replace it.

	Constraints:
	* chalk.length == n
	* 1 <= n <= 10^5
	* 1 <= chalk[i] <= 10^5
	* 1 <= k <= 10^9"""

    def chalkReplacer(self, chalk: List[int], k: int) -> int:
        k %= sum(chalk)
        for i, x in enumerate(chalk): 
            k -= x
            if k < 0: return i 


    """1895. Largest Magic Square (Medium)
	A k x k magic square is a k x k grid filled with integers such that every 
	row sum, every column sum, and both diagonal sums are all equal. The 
	integers in the magic square do not have to be distinct. Every 1 x 1 grid 
	is trivially a magic square. Given an m x n integer grid, return the size 
	(i.e., the side length k) of the largest magic square that can be found 
	within this grid.

	Example 1:
	Input: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]
	Output: 3
	Explanation: The largest magic square has a size of 3. Every row sum, 
	             column sum, and diagonal sum of this magic square is equal to 
	             12.
	             - Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12
	             - Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12
	             - Diagonal sums: 5+4+3 = 6+4+2 = 12
	
	Example 2:
	Input: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]
	Output: 2

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 50
	* 1 <= grid[i][j] <= 10^6"""

    def largestMagicSquare(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0]) # dimensions 
        rows = [[0]*(n+1) for _ in range(m)]
        cols = [[0]*n for _ in range(m+1)]
        diag = [[0]*(n+1) for _ in range(m+1)]
        anti = [[0]*(n+1) for _ in range(m+1)]
        
        for i in range(m):
            for j in range(n): 
                rows[i][j+1] = grid[i][j] + rows[i][j]
                cols[i+1][j] = grid[i][j] + cols[i][j]
                diag[i+1][j+1] = grid[i][j] + diag[i][j]
                anti[i+1][j] = grid[i][j] + anti[i][j+1]
        
        ans = 1
        for i in range(m): 
            for j in range(n): 
                for k in range(1, min(i, j)+1): 
                    ii, jj = i-k, j-k
                    val = diag[i+1][j+1] - diag[ii][jj]
                    match = (val == anti[i+1][jj] - anti[ii][j+1])
                    for r in range(ii, i+1): match &= (val == rows[r][j+1] - rows[r][jj])
                    for c in range(jj, j+1): match &= (val == cols[i+1][c] - cols[ii][c])
                    if match: ans = max(ans, k+1)
        return ans 


    """1896. Minimum Cost to Change the Final Value of Expression (Hard)
	You are given a valid boolean expression as a string expression consisting 
	of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR 
	operator),'(', and ')'. For example, "()1|1" and "(1)&()" are not valid 
	while "1", "(((1))|(0))", and "1|(0&(1))" are valid expressions. Return the 
	minimum cost to change the final value of the expression. For example, if 
	expression = "1|1|(0&0)&1", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. 
	We want to apply operations so that the new expression evaluates to 0. The 
	cost of changing the final value of an expression is the number of 
	operations performed on the expression. The types of operations are 
	described as follows:
	* Turn a '1' into a '0'.
	* Turn a '0' into a '1'.
	* Turn a '&' into a '|'.
	* Turn a '|' into a '&'.
	Note: '&' does not take precedence over '|' in the order of calculation. 
	Evaluate parentheses first, then in left-to-right order.

	Example 1:
	Input: expression = "1&(0|1)"
	Output: 1
	Explanation: We can turn "1&(0|1)" into "1&(0&1)" by changing the '|' to a 
	             '&' using 1 operation. The new expression evaluates to 0. 
	
	Example 2:
	Input: expression = "(0&0)&(0&0&0)"
	Output: 3
	Explanation: We can turn "(0&0)&(0&0&0)" into "(0|1)|(0&0&0)" using 3 
	             operations. The new expression evaluates to 1.
	
	Example 3:
	Input: expression = "(0|(1|0&1))"
	Output: 1
	Explanation: We can turn "(0|(1|0&1))" into "(0|(0|0&1))" using 1 operation.
	             The new expression evaluates to 0.

	Constraints:
	* 1 <= expression.length <= 10^5
	* expression only contains '1','0','&','|','(', and ')'
	* All parentheses are properly matched.
	* There will be no empty parentheses (i.e: "()" is not a substring of 
	  expression)."""

    def minOperationsToFlip(self, expression: str) -> int:
        loc = {}
        stack = []
        for i in reversed(range(len(expression))):
            if expression[i] == ")": stack.append(i)
            elif expression[i] == "(": loc[stack.pop()] = i 
        
        def fn(lo, hi): 
            """Return value and min op to change value."""
            if lo == hi: return int(expression[lo]), 1
            if expression[hi] == ")" and loc[hi] == lo: return fn(lo+1, hi-1) # strip parenthesis 
            mid = loc.get(hi, hi) - 1 
            v, c = fn(mid+1, hi)
            vv, cc = fn(lo, mid-1)
            if expression[mid] == "|": 
                val = v | vv 
                if v == vv == 0: chg = min(c, cc)
                elif v == vv == 1: chg = 1 + min(c, cc)
                else: chg = 1 
            else: # expression[k] == "&"
                val = v & vv
                if v == vv == 0: chg = 1 + min(c, cc)
                elif v == vv == 1: chg = min(c, cc)
                else: chg = 1
            return val, chg
                    
        return fn(0, len(expression)-1)[1]


    """1897. Redistribute Characters to Make All Strings Equal (Easy)
	You are given an array of strings words (0-indexed). In one operation, pick 
	two distinct indices i and j, where words[i] is a non-empty string, and 
	move any character from words[i] to any position in words[j]. Return true 
	if you can make every string in words equal using any number of operations, 
	and false otherwise.

	Example 1:
	Input: words = ["abc","aabc","bc"]
	Output: true
	Explanation: Move the first 'a' in words[1] to the front of words[2], to 
	             make words[1] = "abc" and words[2] = "abc". All the strings 
	             are now equal to "abc", so return true.
	
	Example 2:
	Input: words = ["ab","a"]
	Output: false
	Explanation: It is impossible to make all the strings equal using the 
	             operation.

	Constraints:
	* 1 <= words.length <= 100
	* 1 <= words[i].length <= 100
	* words[i] consists of lowercase English letters."""

    def makeEqual(self, words: List[str]) -> bool:
        freq = defaultdict(int)
        for word in words: 
            for ch in word: freq[ord(ch)-97] += 1
        return all(x % len(words) == 0 for x in freq.values())


    """1898. Maximum Number of Removable Characters (Medium)
	You are given two strings s and p where p is a subsequence of s. You are 
	also given a distinct 0-indexed integer array removable containing a subset 
	of indices of s (s is also 0-indexed). You want to choose an integer k 
	(0 <= k <= removable.length) such that, after removing k characters from s 
	using the first k indices in removable, p is still a subsequence of s. More 
	formally, you will mark the character at s[removable[i]] for each 0 <= i < k, 
	then remove all marked characters and check if p is still a subsequence.
	Return the maximum k you can choose such that p is still a subsequence of s 
	after the removals. A subsequence of a string is a new string generated 
	from the original string with some characters (can be none) deleted without 
	changing the relative order of the remaining characters.

	Example 1:
	Input: s = "abcacb", p = "ab", removable = [3,1,0]
	Output: 2
	Explanation: After removing the characters at indices 3 and 1, "abcacb" 
	             becomes "accb". "ab" is a subsequence of "accb". If we remove 
	             the characters at indices 3, 1, and 0, "abcacb" becomes "ccb", 
	             and "ab" is no longer a subsequence. Hence, the maximum k is 2.
	
	Example 2:
	Input: s = "abcbddddd", p = "abcd", removable = [3,2,1,4,5,6]
	Output: 1
	Explanation: After removing the character at index 3, "abcbddddd" becomes 
	             "abcddddd". "abcd" is a subsequence of "abcddddd".
	
	Example 3:
	Input: s = "abcab", p = "abc", removable = [0,1,2,3,4]
	Output: 0
	Explanation: If you remove the first index in the array removable, "abc" is 
	             no longer a subsequence.

	Constraints:
	* 1 <= p.length <= s.length <= 10^5
	* 0 <= removable.length < s.length
	* 0 <= removable[i] < s.length
	* p is a subsequence of s.
	* s and p both consist of lowercase English letters.
	* The elements in removable are distinct."""

    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:
        mp = {x: i for i, x in enumerate(removable)}
        
        def fn(x):
            """Return True if p is a subseq of s after x removals."""
            k = 0 
            for i, ch in enumerate(s): 
                if mp.get(i, inf) < x: continue 
                if k < len(p) and ch == p[k]: k += 1
            return k == len(p)
        
        lo, hi = -1, len(removable)
        while lo < hi: 
            mid = lo + hi + 1 >> 1
            if fn(mid): lo = mid
            else: hi = mid - 1
        return lo 


    """1899. Merge Triplets to Form Target Triplet (Medium)
	A triplet is an array of three integers. You are given a 2D integer array 
	triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You 
	are also given an integer array target = [x, y, z] that describes the 
	triplet you want to obtain. To obtain target, you may apply the following 
	operation on triplets any number of times (possibly zero):
	* Choose two indices (0-indexed) i and j (i != j) and update triplets[j] to 
	  become [max(ai, aj), max(bi, bj), max(ci, cj)].
	* For example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], 
	  triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5].
	Return true if it is possible to obtain the target triplet [x, y, z] as an 
	element of triplets, or false otherwise.

	Example 1:
	Input: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]
	Output: true
	Explanation: Perform the following operations:
	             - Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. 
	               Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. 
	               triplets = [[2,5,3],[1,8,4],[2,7,5]]. 
	             The target triplet [2,7,5] is now an element of triplets.
	
	Example 2:
	Input: triplets = [[1,3,4],[2,5,8]], target = [2,5,8]
	Output: true
	Explanation: The target triplet [2,5,8] is already an element of triplets.

	Example 3:
	Input: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]
	Output: true
	Explanation: Perform the following operations:
	             - Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. 
	               Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. 
	               triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].
	             - Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. 
	               Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. 
	               triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].
	             The target triplet [5,5,5] is now an element of triplets.
	
	Example 4:
	Input: triplets = [[3,4,5],[4,5,6]], target = [3,2,5]
	Output: false
	Explanation: It is impossible to have [3,2,5] as an element because there 
	             is no 2 in any of the triplets.

	Constraints:
	* 1 <= triplets.length <= 10^5
	* triplets[i].length == target.length == 3
	* 1 <= ai, bi, ci, x, y, z <= 1000"""

    def mergeTriplets(self, triplets: List[List[int]], target: List[int]) -> bool:
        x = y = z = -inf 
        for a, b, c in triplets: 
            if a <= target[0] and b <= target[1] and c <= target[2]: 
                x, y, z = max(x, a), max(y, b), max(z, c)
        return [x, y, z] == target


    """1900. The Earliest and Latest Rounds Where Players Compete (Hard)
	There is a tournament where n players are participating. The players are 
	standing in a single row and are numbered from 1 to n based on their 
	initial standing position (player 1 is the first player in the row, player 
	2 is the second player in the row, etc.). The tournament consists of 
	multiple rounds (starting from round number 1). In each round, the ith 
	player from the front of the row competes against the ith player from the 
	end of the row, and the winner advances to the next round. When the number 
	of players is odd for the current round, the player in the middle 
	automatically advances to the next round.

	* For example, if the row consists of players 1, 2, 4, 6, 7
	  - Player 1 competes against player 7.
	  - Player 2 competes against player 6.
	  - Player 4 automatically advances to the next round.
	After each round is over, the winners are lined back up in the row based on 
	the original ordering assigned to them initially (ascending order). The 
	players numbered firstPlayer and secondPlayer are the best in the 
	tournament. They can win against any other player before they compete 
	against each other. If any two other players compete against each other, 
	either of them might win, and thus you may choose the outcome of this round.
	Given the integers n, firstPlayer, and secondPlayer, return an integer array 
	containing two values, the earliest possible round number and the latest 
	possible round number in which these two players will compete against each 
	other, respectively.

	Example 1:
	Input: n = 11, firstPlayer = 2, secondPlayer = 4
	Output: [3,4]
	Explanation: One possible scenario which leads to the earliest round number:
	             - First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
	             - Second round: 2, 3, 4, 5, 6, 11
	             - Third round: 2, 3, 4
	             One possible scenario which leads to the latest round number:
	             - First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
	             - Second round: 1, 2, 3, 4, 5, 6
	             - Third round: 1, 2, 4
	             - Fourth round: 2, 4
	
	Example 2:
	Input: n = 5, firstPlayer = 1, secondPlayer = 5
	Output: [1,1]
	Explanation: The players numbered 1 and 5 compete in the first round. There 
	             is no way to make them compete in any other round.

	Constraints:
	* 2 <= n <= 28
	* 1 <= firstPlayer < secondPlayer <= n"""

    def earliestAndLatest(self, n: int, firstPlayer: int, secondPlayer: int) -> List[int]:
        firstPlayer, secondPlayer = firstPlayer-1, secondPlayer-1 # 0-indexed
        
        @cache
        def fn(k, mask): 
            """Return earliest and latest rounds."""
            can = [i for i in range(n) if mask & (1 << i)]
            cand = [] # eliminated player
            for i in range(len(can)//2): 
                p1, p2 = can[i], can[~i]
                if p1 == firstPlayer and p2 == secondPlayer or p1 == secondPlayer and p2 == firstPlayer: return [k, k] # game of interest 
                if p1 in (firstPlayer, secondPlayer): cand.append([p2]) # p2 eliminated 
                elif p2 in (firstPlayer, secondPlayer): cand.append([p1]) # p1 eliminated 
                else: cand.append([p1, p2]) # both could be elimited 
            
            minn, maxx = inf, -inf
            for x in product(*cand): 
                mask0 = mask
                for i in x: mask0 ^= 1 << i
                mn, mx = fn(k+1, mask0)
                minn, maxx = min(minn, mn), max(maxx, mx)
            return minn, maxx
        
        return fn(1, (1<<n)-1)


    """1901. Find a Peak Element II (Medium)
	A peak element in a 2D grid is an element that is strictly greater than all 
	of its adjacent neighbors to the left, right, top, and bottom. Given a 
	0-indexed m x n matrix mat where no two adjacent cells are equal, find any 
	peak element mat[i][j] and return the length 2 array [i,j]. You may assume 
	that the entire matrix is surrounded by an outer perimeter with the value 
	-1 in each cell. You must write an algorithm that runs in O(m log(n)) or 
	O(n log(m)) time.

	Example 1:
	Input: mat = [[1,4],[3,2]]
	Output: [0,1]
	Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both 
	             acceptable answers.
	
	Example 2:
	Input: mat = [[10,20,15],[21,30,14],[7,16,32]]
	Output: [1,1]
	Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both 
	             acceptable answers.

	Constraints:
	* m == mat.length
	* n == mat[i].length
	* 1 <= m, n <= 500
	* 1 <= mat[i][j] <= 10^5
	* No two adjacent cells are equal."""

    def findPeakGrid(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0]) # dimensions 
        
        def fn(lo, hi): 
            """Return a peak element between column lo (inclusive) and hi (exlusive)."""
            if lo == hi: return 
            mid = lo + hi >> 1
            if left := fn(lo, mid): return left 
            if right := fn(mid+1, hi): return right 
            for i in range(m): 
                if (i == 0 or mat[i-1][mid] < mat[i][mid]) and (i+1 == m or mat[i][mid] > mat[i+1][mid]) and (mid == 0 or mat[i][mid-1] < mat[i][mid]) and (mid+1 == n or mat[i][mid] > mat[i][mid+1]): 
                    return [i, mid]
        
        return fn(0, n)


    """1902. Depth of BST Given Insertion Order (Medium)
	You are given a 0-indexed integer array order of length n, a permutation of 
	integers from 1 to n representing the order of insertion into a binary 
	search tree. A binary search tree is defined as follows:
	* The left subtree of a node contains only nodes with keys less than the 
	  node's key.
	* The right subtree of a node contains only nodes with keys greater than 
	  the node's key.
	* Both the left and right subtrees must also be binary search trees.
	The binary search tree is constructed as follows:
	* order[0] will be the root of the binary search tree.
	* All subsequent elements are inserted as the child of any existing node 
	  such that the binary search tree properties hold.
	Return the depth of the binary search tree. A binary tree's depth is the 
	number of nodes along the longest path from the root node down to the 
	farthest leaf node.

	Example 1:
	Input: order = [2,1,4,3]
	Output: 3
	Explanation: The binary search tree has a depth of 3 with path 2->3->4.

	Example 2:
	Input: order = [2,1,3,4]
	Output: 3
	Explanation: The binary search tree has a depth of 3 with path 2->3->4.

	Example 3:
	Input: order = [1,2,3,4]
	Output: 4
	Explanation: The binary search tree has a depth of 4 with path 1->2->3->4.

	Constraints:
	* n == order.length
	* 1 <= n <= 10^5
	* order is a permutation of integers between 1 and n."""

    def maxDepthBST(self, order: List[int]) -> int:
        sd = SortedDict()
        for x in order: 
            k = sd.bisect_left(x)
            val = 1
            if k: val = 1 + sd.values()[k-1]
            if k < len(sd): val = max(val, 1 + sd.values()[k])
            sd[x] = val
        return max(sd.values())


    """1903. Largest Odd Number in String (Easy)
	You are given a string num, representing a large integer. Return the 
	largest-valued odd integer (as a string) that is a non-empty substring of 
	num, or an empty string "" if no odd integer exists. A substring is a 
	contiguous sequence of characters within a string.

	Example 1:
	Input: num = "52"
	Output: "5"
	Explanation: The only non-empty substrings are "5", "2", and "52". "5" is 
	             the only odd number.
	
	Example 2:
	Input: num = "4206"Output: ""
	Explanation: There are no odd numbers in "4206".
	
	Example 3:
	Input: num = "35427"
	Output: "35427"
	Explanation: "35427" is already an odd number.

	Constraints:
	* 1 <= num.length <= 10^5
	* num only consists of digits and does not contain any leading zeros."""

    def largestOddNumber(self, num: str) -> str:
        for i in reversed(range(len(num))):
            if int(num[i]) & 1: return num[:i+1]
        return ""


    """1904. The Number of Full Rounds You Have Played (Medium)
	A new online video game has been released, and in this video game, there 
	are 15-minute rounds scheduled every quarter-hour period. This means that 
	at HH:00, HH:15, HH:30 and HH:45, a new round starts, where HH represents 
	an integer number from 00 to 23. A 24-hour clock is used, so the earliest 
	time in the day is 00:00 and the latest is 23:59. Given two strings 
	startTime and finishTime in the format "HH:MM" representing the exact time 
	you started and finished playing the game, respectively, calculate the 
	number of full rounds that you played during your game session. For example, 
	if startTime = "05:20" and finishTime = "05:59" this means you played only 
	one full round from 05:30 to 05:45. You did not play the full round from 
	05:15 to 05:30 because you started after the round began, and you did not 
	play the full round from 05:45 to 06:00 because you stopped before the 
	round ended. If finishTime is earlier than startTime, this means you have 
	played overnight (from startTime to the midnight and from midnight to 
	finishTime). Return the number of full rounds that you have played if you 
	had started playing at startTime and finished at finishTime.

	Example 1:
	Input: startTime = "12:01", finishTime = "12:44"
	Output: 1
	Explanation: You played one full round from 12:15 to 12:30. You did not 
	             play the full round from 12:00 to 12:15 because you started 
	             playing at 12:01 after it began. You did not play the full 
	             round from 12:30 to 12:45 because you stopped playing at 
	             12:44 before it ended.
	
	Example 2:
	Input: startTime = "20:00", finishTime = "06:00"
	Output: 40
	Explanation: You played 16 full rounds from 20:00 to 00:00 and 24 full 
	             rounds from 00:00 to 06:00. 16 + 24 = 40.
	
	Example 3:
	Input: startTime = "00:00", finishTime = "23:59"
	Output: 95
	Explanation: You played 4 full rounds each hour except for the last hour 
	             where you played 3 full rounds.

	Constraints:
	* startTime and finishTime are in the format HH:MM.
	* 00 <= HH <= 23
	* 00 <= MM <= 59
	* startTime and finishTime are not equal."""

    def numberOfRounds(self, startTime: str, finishTime: str) -> int:
        ts = 60 * int(startTime[:2]) + int(startTime[-2:])
        tf = 60 * int(finishTime[:2]) + int(finishTime[-2:])
        if 0 <= tf - ts < 15: return 0 # edge case 
        return tf//15 - (ts+14)//15 + (ts>tf)*96


    """1905. Count Sub Islands (Medium)
	You are given two m x n binary matrices grid1 and grid2 containing only 0's 
	(representing water) and 1's (representing land). An island is a group of 
	1's connected 4-directionally (horizontal or vertical). Any cells outside 
	of the grid are considered water cells. An island in grid2 is considered a 
	sub-island if there is an island in grid1 that contains all the cells that 
	make up this island in grid2. Return the number of islands in grid2 that 
	are considered sub-islands.

	Example 1:
	Input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], 
	       grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
	Output: 3
	Explanation: In the picture above, the grid on the left is grid1 and the 
	             grid on the right is grid2. The 1s colored red in grid2 are 
	             those considered to be part of a sub-island. There are three 
	             sub-islands.
	
	Example 2:
	Input: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], 
	       grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
	Output: 2 
	Explanation: In the picture above, the grid on the left is grid1 and the 
	             grid on the right is grid2. The 1s colored red in grid2 are 
	             those considered to be part of a sub-island. There are two 
	             sub-islands.

	Constraints:
	* m == grid1.length == grid2.length
	* n == grid1[i].length == grid2[i].length
	* 1 <= m, n <= 500
	* grid1[i][j] and grid2[i][j] are either 0 or 1."""

    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:
        m, n = len(grid1), len(grid1[0]) # dimensions 
        
        def fn(i, j): 
            """Return True if i, j is in a sub-island."""
            grid2[i][j] = 0 # mark as visited 
            ans = grid1[i][j]
            for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                if 0 <= ii < m and 0 <= jj < n and grid2[ii][jj]: 
                    ans &= fn(ii, jj)
            return ans 
            
        ans = 0 
        for i in range(m):
            for j in range(n): 
                if grid2[i][j] and fn(i, j): ans += 1
        return ans 


    """1906. Minimum Absolute Difference Queries (Medium)
	The minimum absolute difference of an array a is defined as the minimum 
	value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. If 
	all elements of a are the same, the minimum absolute difference is -1.
	For example, the minimum absolute difference of the array [5,2,3,7,2] is 
	|2 - 3| = 1. Note that it is not 0 because a[i] and a[j] must be different.
	You are given an integer array nums and the array queries where 
	queries[i] = [li, ri]. For each query i, compute the minimum absolute 
	difference of the subarray nums[li...ri] containing the elements of nums 
	between the 0-based indices li and ri (inclusive). Return an array ans 
	where ans[i] is the answer to the ith query. A subarray is a contiguous 
	sequence of elements in an array. The value of |x| is defined as:
	* x if x >= 0.
	* -x if x < 0.

	Example 1:
	Input: nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]
	Output: [2,1,4,1]
	Explanation: The queries are processed as follows:
	             - queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2.
	             - queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1.
	             - queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4.
	             - queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1.
	
	Example 2:
	Input: nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]
	Output: [-1,1,1,3]
	Explanation: The queries are processed as follows:
	             - queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the elements are the same.
	             - queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1.
	             - queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1.
	             - queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3.

	Constraints:
	* 2 <= nums.length <= 10^5
	* 1 <= nums[i] <= 100
	* 1 <= queries.length <= 2 * 10^4
	* 0 <= li < ri < nums.length"""

    def minDifference(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        loc = {}
        for i, x in enumerate(nums): loc.setdefault(x, []).append(i)
        keys = sorted(loc)
        
        ans = []
        for l, r in queries: 
            prev, val = 0, inf
            for x in keys: 
                i = bisect_left(loc[x], l)
                if i < len(loc[x]) and loc[x][i] <= r: 
                    if prev: val = min(val, x - prev)
                    prev = x 
            ans.append(val if val < inf else -1)
        return ans


    """1908. Game of Nim (Medium)
	Alice and Bob take turns playing a game with Alice starting first. In this 
	game, there are n piles of stones. On each player's turn, the player should 
	remove any positive number of stones from a non-empty pile of his or her 
	choice. The first player who cannot make a move loses, and the other player 
	wins. Given an integer array piles, where piles[i] is the number of stones 
	in the ith pile, return true if Alice wins, or false if Bob wins. Both 
	Alice and Bob play optimally.

	Example 1:
	Input: piles = [1]
	Output: true
	Explanation: There is only one possible scenario:
	- On the first turn, Alice removes one stone from the first pile. piles = [0].
	- On the second turn, there are no stones left for Bob to remove. Alice wins.

	Example 2:
	Input: piles = [1,1]
	Output: false
	Explanation: It can be proven that Bob will always win. One possible scenario is:
	- On the first turn, Alice removes one stone from the first pile. piles = [0,1].
	- On the second turn, Bob removes one stone from the second pile. piles = [0,0].
	- On the third turn, there are no stones left for Alice to remove. Bob wins.

	Example 3:
	Input: piles = [1,2,3]
	Output: false
	Explanation: It can be proven that Bob will always win. One possible scenario is:
	- On the first turn, Alice removes three stones from the third pile. piles = [1,2,0].
	- On the second turn, Bob removes one stone from the second pile. piles = [1,1,0].
	- On the third turn, Alice removes one stone from the first pile. piles = [0,1,0].
	- On the fourth turn, Bob removes one stone from the second pile. piles = [0,0,0].
	- On the fifth turn, there are no stones left for Alice to remove. Bob wins.
	 
	Constraints:
	* n == piles.length
	* 1 <= n <= 7
	* 1 <= piles[i] <= 7
	 

	Follow-up: Could you find a linear time solution? Although the linear time 
	           solution may be beyond the scope of an interview, it could be 
	           interesting to know."""

    def nimGame(self, piles: List[int]) -> bool:
        mask = 0
        for i, x in enumerate(piles): mask |= x << 3*i
        
        @cache
        def fn(mask): 
            """Return True if current player can win by playing optimally."""
            for i in range(len(piles)): 
                val = (mask >> 3*i) & 7
                for k in range(1, val+1): 
                    mask0 = mask - (k << 3*i)
                    if not fn(mask0): return True 
            return False 
        
        return fn(mask)


    """1909. Remove One Element to Make the Array Strictly Increasing (Easy)
	Given a 0-indexed integer array nums, return true if it can be made 
	strictly increasing after removing exactly one element, or false otherwise. 
	If the array is already strictly increasing, return true. The array nums is 
	strictly increasing if nums[i - 1] < nums[i] for each index 
	(1 <= i < nums.length).

	Example 1:
	Input: nums = [1,2,10,5,7]
	Output: true
	Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].
	             [1,2,5,7] is strictly increasing, so return true.
	
	Example 2:
	Input: nums = [2,3,1,2]
	Output: false
	Explanation: [3,1,2] is the result of removing the element at index 0.
	             [2,1,2] is the result of removing the element at index 1.
	             [2,3,2] is the result of removing the element at index 2.
	             [2,3,1] is the result of removing the element at index 3.
	             No resulting array is strictly increasing, so return false.
	
	Example 3:
	Input: nums = [1,1,1]
	Output: false
	Explanation: The result of removing any element is [1,1]. [1,1] is not 
	             strictly increasing, so return false.
	
	Example 4:
	Input: nums = [1,2,3]
	Output: true
	Explanation: [1,2,3] is already strictly increasing, so return true.

	Constraints:
	* 2 <= nums.length <= 1000
	* 1 <= nums[i] <= 1000"""

    def canBeIncreasing(self, nums: List[int]) -> bool:
        prev, seen = -inf, False
        for i, x in enumerate(nums): 
            if prev < x: prev = x
            else: 
                if seen: return False 
                seen = True 
                if i == 1 or nums[i-2] < x: prev = x
        return True 


    """1910. Remove All Occurrences of a Substring (Medium)
	Given two strings s and part, perform the following operation on s until 
	all occurrences of the substring part are removed:
	* Find the leftmost occurrence of the substring part and remove it from s.
	Return s after removing all occurrences of part. A substring is a 
	contiguous sequence of characters in a string.

	Example 1:
	Input: s = "daabcbaabcbc", part = "abc"
	Output: "dab"
	Explanation: The following operations are done:
	             - s = "daabcbaabcbc", remove "abc" starting at index 2, so s = "dabaabcbc".
	             - s = "dabaabcbc", remove "abc" starting at index 4, so s = "dababc".
	             - s = "dababc", remove "abc" starting at index 3, so s = "dab".
	             Now s has no occurrences of "abc".
	
	Example 2:
	Input: s = "axxxxyyyyb", part = "xy"
	Output: "ab"
	Explanation: The following operations are done:
	             - s = "axxxxyyyyb", remove "xy" starting at index 4 so s = "axxxyyyb".
	             - s = "axxxyyyb", remove "xy" starting at index 3 so s = "axxyyb".
	             - s = "axxyyb", remove "xy" starting at index 2 so s = "axyb".
	             - s = "axyb", remove "xy" starting at index 1 so s = "ab".
	             Now s has no occurrences of "xy".

	Constraints:
	* 1 <= s.length <= 1000
	* 1 <= part.length <= 1000
	* s and part consists of lowercase English letters."""

    def removeOccurrences(self, s: str, part: str) -> str:
        lps = [0]
        k = 0 
        for i in range(1, len(part)): 
            while k and part[k] != part[i]: k = lps[k-1]
            if part[k] == part[i]: k += 1
            lps.append(k)
        
        stack = [("", 0)]
        for ch in s: 
            k = stack[-1][1]
            while k and part[k] != ch: k = lps[k-1]
            if part[k] == ch: k += 1
            stack.append((ch, k))
            if k == len(part): 
                for _ in range(len(part)): stack.pop()
        return "".join(x for x, _ in stack)


    """1911. Maximum Alternating Subsequence Sum (Medium)
	The alternating sum of a 0-indexed array is defined as the sum of the 
	elements at even indices minus the sum of the elements at odd indices.
	For example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.
	Given an array nums, return the maximum alternating sum of any subsequence 
	of nums (after reindexing the elements of the subsequence). A subsequence 
	of an array is a new array generated from the original array by deleting 
	some elements (possibly none) without changing the remaining elements' 
	relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] 
	(the underlined elements), while [2,4,2] is not.

	Example 1:
	Input: nums = [4,2,5,3]
	Output: 7
	Explanation: It is optimal to choose the subsequence [4,2,5] with 
	             alternating sum (4 + 5) - 2 = 7.
	
	Example 2:
	Input: nums = [5,6,7,8]
	Output: 8
	Explanation: It is optimal to choose the subsequence [8] with alternating 
	             sum 8.
	
	Example 3:
	Input: nums = [6,2,1,2,4,5]
	Output: 10
	Explanation: It is optimal to choose the subsequence [6,1,5] with 
	             alternating sum (6 + 5) - 1 = 10.

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^5"""

    def maxAlternatingSum(self, nums: List[int]) -> int:
        return sum(max(0, nums[i-1] - nums[i]) for i in range(1, len(nums))) + nums[-1]


    """1918. Kth Smallest Subarray Sum (Medium)
	Given an integer array nums of length n and an integer k, return the kth 
	smallest subarray sum. A subarray is defined as a non-empty contiguous 
	sequence of elements in an array. A subarray sum is the sum of all elements 
	in the subarray.

	Example 1:
	Input: nums = [2,1,3], k = 4
	Output: 3
	Explanation: The subarrays of [2,1,3] are:
	             - [2] with sum 2
	             - [1] with sum 1
	             - [3] with sum 3
	             - [2,1] with sum 3
	             - [1,3] with sum 4
	             - [2,1,3] with sum 6 
	             Ordering the sums from smallest to largest gives 1, 2, 3, 3, 
	             4, 6. The 4th smallest is 3.
	
	Example 2:
	Input: nums = [3,3,5,5], k = 7
	Output: 10
	Explanation: The subarrays of [3,3,5,5] are:
	             - [3] with sum 3
	             - [3] with sum 3
	             - [5] with sum 5
	             - [5] with sum 5
	             - [3,3] with sum 6
	             - [3,5] with sum 8
	             - [5,5] with sum 10
	             - [3,3,5], with sum 11
	             - [3,5,5] with sum 13
	             - [3,3,5,5] with sum 16
	             Ordering the sums from smallest to largest gives 3, 3, 5, 5, 
	             6, 8, 10, 11, 13, 16. The 7th smallest is 10.

	Constraints:
	* n == nums.length
	* 1 <= n <= 2 * 10^4
	* 1 <= nums[i] <= 5 * 10^4
	* 1 <= k <= n * (n + 1) / 2"""

    def kthSmallestSubarraySum(self, nums: List[int], k: int) -> int:
        
        def fn(x):
            """Return number of subarrays sums <= x."""
            ans = rsm = ii = 0 
            for i in range(len(nums)): 
                rsm += nums[i]
                while rsm > x: # sliding window 
                    rsm -= nums[ii]
                    ii += 1
                ans += i - ii + 1
            return ans 
        
        lo, hi = 0, sum(nums)
        while lo < hi: 
            mid = lo + hi >> 1
            if fn(mid) < k: lo = mid + 1
            else: hi = mid
        return lo 


    """1925. Count Square Sum Triples (Easy)
	A square triple (a,b,c) is a triple where a, b, and c are integers and 
	a^2 + b^2 = c^2. Given an integer n, return the number of square triples 
	such that 1 <= a, b, c <= n.

	Example 1:
	Input: n = 5
	Output: 2
	Explanation: The square triples are (3,4,5) and (4,3,5).

	Example 2:
	Input: n = 10
	Output: 4
	Explanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).

	Constraints: 1 <= n <= 250"""

    def countTriples(self, n: int) -> int:
        ans = 0 
        for a in range(1, n): 
            for b in range(a+1, n): 
                cc = a*a + b*b
                if int(sqrt(cc))**2 == cc and cc <= n*n: ans += 2
        return ans 


    """1926. Nearest Exit from Entrance in Maze (Medium)
	You are given an m x n matrix maze (0-indexed) with empty cells 
	(represented as '.') and walls (represented as '+'). You are also given the 
	entrance of the maze, where entrance = [entrancerow, entrancecol] denotes 
	the row and column of the cell you are initially standing at. In one step, 
	you can move one cell up, down, left, or right. You cannot step into a cell 
	with a wall, and you cannot step outside the maze. Your goal is to find the 
	nearest exit from the entrance. An exit is defined as an empty cell that is 
	at the border of the maze. The entrance does not count as an exit. Return 
	the number of steps in the shortest path from the entrance to the nearest 
	exit, or -1 if no such path exists.

	Example 1:
	Input: maze = [["+","+",".","+"],[".",".",".","+"],["+","+","+","."]], entrance = [1,2]
	Output: 1
	Explanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3].
	             Initially, you are at the entrance cell [1,2].
	             - You can reach [1,0] by moving 2 steps left.
	             - You can reach [0,2] by moving 1 step up.
	             It is impossible to reach [2,3] from the entrance. Thus, the 
	             nearest exit is [0,2], which is 1 step away.
	
	Example 2:
	Input: maze = [["+","+","+"],[".",".","."],["+","+","+"]], entrance = [1,0]
	Output: 2
	Explanation: There is 1 exit in this maze at [1,2]. [1,0] does not count as 
	             an exit since it is the entrance cell. Initially, you are at 
	             the entrance cell [1,0].
	             - You can reach [1,2] by moving 2 steps right.
	             Thus, the nearest exit is [1,2], which is 2 steps away.
	
	Example 3:
	Input: maze = [[".","+"]], entrance = [0,0]
	Output: -1
	Explanation: There are no exits in this maze.

	Constraints:
	* maze.length == m
	* maze[i].length == n
	* 1 <= m, n <= 100
	* maze[i][j] is either '.' or '+'.
	* entrance.length == 2
	* 0 <= entrancerow < m
	* 0 <= entrancecol < n
	* entrance will always be an empty cell."""

    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:
        m, n = len(maze), len(maze[0]) 
        
        ans = 0
        queue = [entrance]
        while queue: 
            newq = []
            for i, j in queue: 
                if (i in (0, m-1) or j in (0, n-1)) and [i, j] != entrance: return ans 
                for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                    if 0 <= ii < m and 0 <= jj < n and maze[ii][jj] == ".": 
                        maze[ii][jj] = "+"
                        newq.append((ii, jj))
            ans += 1
            queue = newq
        return -1 


    """1927. Sum Game (Medium)
	Alice and Bob take turns playing a game, with Alice starting first. You are 
	given a string num of even length consisting of digits and '?' characters. 
	On each turn, a player will do the following if there is still at least one 
	'?' in num:
	* Choose an index i where num[i] == '?'.
	* Replace num[i] with any digit between '0' and '9'.
	The game ends when there are no more '?' characters in num. For Bob to win, 
	the sum of the digits in the first half of num must be equal to the sum of 
	the digits in the second half. For Alice to win, the sums must not be equal.
	* For example, if the game ended with num = "243801", then Bob wins because 
	  2+4+3 = 8+0+1. If the game ended with num = "243803", then Alice wins 
	  because 2+4+3 != 8+0+3.
	Assuming Alice and Bob play optimally, return true if Alice will win and 
	false if Bob will win.

	Example 1:
	Input: num = "5023"
	Output: false
	Explanation: There are no moves to be made. The sum of the first half is 
	             equal to the sum of the second half: 5 + 0 = 2 + 3.
	
	Example 2:
	Input: num = "25??"
	Output: true
	Explanation: Alice can replace one of the '?'s with '9' and it will be 
	             impossible for Bob to make the sums equal.
	
	Example 3:
	Input: num = "?3295???"
	Output: false
	Explanation: It can be proven that Bob will always win. One possible outcome is:
	             - Alice replaces the first '?' with '9'. num = "93295???".
	             - Bob replaces one of the '?' in the right half with '9'. num = "932959??".
	             - Alice replaces one of the '?' in the right half with '2'. num = "9329592?".
	             - Bob replaces the last '?' in the right half with '7'. num = "93295927".
	             Bob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.

	Constraints:
	* 2 <= num.length <= 10^5
	* num.length is even.
	* num consists of only digits and '?'."""

    def sumGame(self, num: str) -> bool:
        diff = qm = 0 
        for i, ch in enumerate(num): 
            if ch == "?": qm += 1 if i < len(num)//2 else -1
            else: diff += int(ch) if i < len(num)//2 else -int(ch)
        return diff * 2 + qm * 9 != 0


    """1928. Minimum Cost to Reach Destination in Time (Hard)
	There is a country of n cities numbered from 0 to n - 1 where all the 
	cities are connected by bi-directional roads. The roads are represented as 
	a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road 
	between cities xi and yi that takes timei minutes to travel. There may be 
	multiple roads of differing travel times connecting the same two cities, 
	but no road connects a city to itself. Each time you pass through a city, 
	you must pay a passing fee. This is represented as a 0-indexed integer 
	array passingFees of length n where passingFees[j] is the amount of dollars 
	you must pay when you pass through city j. In the beginning, you are at 
	city 0 and want to reach city n - 1 in maxTime minutes or less. The cost 
	of your journey is the summation of passing fees for each city that you 
	passed through at some moment of your journey (including the source and 
	destination cities). Given maxTime, edges, and passingFees, return the 
	minimum cost to complete your journey, or -1 if you cannot complete it 
	within maxTime minutes.

	Example 1:
	Input: maxTime = 30, 
	       edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], 
	       passingFees = [5,1,2,20,20,3]
	Output: 11
	Explanation: The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes 
	             and has $11 worth of passing fees.
	
	Example 2:
	Input: maxTime = 29, 
	       edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], 
	       passingFees = [5,1,2,20,20,3]
	Output: 48
	Explanation: The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes 
	             and has $48 worth of passing fees. You cannot take path 
	             0 -> 1 -> 2 -> 5 since it would take too long.
	
	Example 3:
	Input: maxTime = 25, 
	       edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], 
	       passingFees = [5,1,2,20,20,3]
	Output: -1
	Explanation: There is no way to reach city 5 from city 0 within 25 minutes.

	Constraints:
	* 1 <= maxTime <= 1000
	* n == passingFees.length
	* 2 <= n <= 1000
	* n - 1 <= edges.length <= 1000
	* 0 <= xi, yi <= n - 1
	* 1 <= timei <= 1000
	* 1 <= passingFees[j] <= 1000 
	* The graph may contain multiple edges between two nodes.
	* The graph does not contain self loops."""

    def minCost(self, maxTime: int, edges: List[List[int]], passingFees: List[int]) -> int:
        graph = {}
        for u, v, t in edges: 
            graph.setdefault(u, []).append((v, t))
            graph.setdefault(v, []).append((u, t))
        
        pq = [(passingFees[0], 0, 0)]
        dist = {0: 0}
        while pq: 
            cost, k, t = heappop(pq)
            if k == len(passingFees)-1: return cost
            for kk, tt in graph.get(k, []): 
                if t + tt <= maxTime and t + tt < dist.get(kk, inf): 
                    dist[kk] = t + tt
                    heappush(pq, (cost + passingFees[kk], kk, t + tt))
        return -1 


    """1929. Concatenation of Array (Easy)
	Given an integer array nums of length n, you want to create an array ans of 
	length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n 
	(0-indexed). Specifically, ans is the concatenation of two nums arrays. 
	Return the array ans.

	Example 1:
	Input: nums = [1,2,1]
	Output: [1,2,1,1,2,1]
	Explanation: The array ans is formed as follows:
	             - ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
	             - ans = [1,2,1,1,2,1]
	
	Example 2:
	Input: nums = [1,3,2,1]
	Output: [1,3,2,1,1,3,2,1]
	Explanation: The array ans is formed as follows:
	             - ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]
	             - ans = [1,3,2,1,1,3,2,1]

	Constraints:
	* n == nums.length
	* 1 <= n <= 1000
	* 1 <= nums[i] <= 1000"""

    def getConcatenation(self, nums: List[int]) -> List[int]:
        return nums * 2


    """1930. Unique Length-3 Palindromic Subsequences (Medium)
	Given a string s, return the number of unique palindromes of length three 
	that are a subsequence of s. Note that even if there are multiple ways to 
	obtain the same subsequence, it is still only counted once. A palindrome is 
	a string that reads the same forwards and backwards. A subsequence of a 
	string is a new string generated from the original string with some 
	characters (can be none) deleted without changing the relative order of the 
	remaining characters. For example, "ace" is a subsequence of "abcde".

	Example 1:
	Input: s = "aabca"
	Output: 3
	Explanation: The 3 palindromic subsequences of length 3 are:
	             - "aba" (subsequence of "aabca")
	             - "aaa" (subsequence of "aabca")
	             - "aca" (subsequence of "aabca")
	
	Example 2:
	Input: s = "adc"
	Output: 0
	Explanation: There are no palindromic subsequences of length 3 in "adc".

	Example 3:
	Input: s = "bbcbaba"
	Output: 4
	Explanation: The 4 palindromic subsequences of length 3 are:
	             - "bbb" (subsequence of "bbcbaba")
	             - "bcb" (subsequence of "bbcbaba")
	             - "bab" (subsequence of "bbcbaba")
	             - "aba" (subsequence of "bbcbaba")

	Constraints:
	* 3 <= s.length <= 10^5
	* s consists of only lowercase English letters."""

    def countPalindromicSubsequence(self, s: str) -> int:
        locs = defaultdict(list)
        for i, ch in enumerate(s): locs[ch].append(i)
        
        ans = 0 
        for x in ascii_lowercase: 
            if len(locs[x]) > 1: 
                if len(locs[x]) > 2: ans += 1
                for xx in ascii_lowercase:
                    if x != xx and bisect_left(locs[xx], locs[x][0]) != bisect_left(locs[xx], locs[x][-1]): ans += 1
        return ans 


    """1931. Painting a Grid With Three Different Colors (Hard)
	You are given two integers m and n. Consider an m x n grid where each cell 
	is initially white. You can paint each cell red, green, or blue. All cells 
	must be painted. Return the number of ways to color the grid with no two 
	adjacent cells having the same color. Since the answer can be very large, 
	return it modulo 10^9 + 7.

	Example 1:
	Input: m = 1, n = 1
	Output: 3
	Explanation: The three possible colorings are shown in the image above.

	Example 2:
	Input: m = 1, n = 2
	Output: 6
	Explanation: The six possible colorings are shown in the image above.

	Example 3:
	Input: m = 5, n = 5
	Output: 580986

	Constraints:
	* 1 <= m <= 5
	* 1 <= n <= 1000"""

    def colorTheGrid(self, m: int, n: int) -> int:
        
        @cache
        def fn(i, j, mask): 
            """Return number of ways to color grid."""
            if j == n: return 1 
            if i == m: return fn(0, j+1, mask)
            ans = 0 
            for x in 1<<2*i, 1<<2*i+1, 0b11<<2*i: 
                mask0 = mask ^ x
                if mask0 & 0b11<<2*i and (i == 0 or (mask0 >> 2*i) & 0b11 != (mask0 >> 2*i-2) & 0b11): 
                    ans += fn(i+1, j, mask0)
            return ans % 1_000_000_007
        
        return fn(0, 0, 0)


    """1932. Merge BSTs to Create Single BST (Hard)
	You are given n BST (binary search tree) root nodes for n separate BSTs 
	stored in an array trees (0-indexed). Each BST in trees has at most 3 nodes, 
	and no two roots have the same value. In one operation, you can:
	* Select two distinct indices i and j such that the value stored at one of 
	  the leaves of trees[i] is equal to the root value of trees[j].
	* Replace the leaf node in trees[i] with trees[j].
	* Remove trees[j] from trees.
	Return the root of the resulting BST if it is possible to form a valid BST 
	after performing n - 1 operations, or null if it is impossible to create a 
	valid BST. A BST (binary search tree) is a binary tree where each node 
	satisfies the following property:
	* Every node in the node's left subtree has a value strictly less than the 
	  node's value.
	* Every node in the node's right subtree has a value strictly greater than 
	  the node's value.
	A leaf is a node that has no children.

	Example 1:
	Input: trees = [[2,1],[3,2,5],[5,4]]
	Output: [3,2,5,1,null,4]
	Explanation: In the first operation, pick i=1 and j=0, and merge trees[0] 
	             into trees[1]. Delete trees[0], so trees = [[3,2,5,1],[5,4]].
	             In the second operation, pick i=0 and j=1, and merge trees[1] 
	             into trees[0]. Delete trees[1], so trees = [[3,2,5,1,null,4]].
	             The resulting tree is a valid BST, so return its root.
	
	Example 2:
	Input: trees = [[5,3,8],[3,2,6]]
	Output: []
	Explanation: Pick i=0 and j=1 and merge trees[1] into trees[0]. Delete 
	             trees[1], so trees = [[5,3,8,2,6]]. This is the only valid 
	             operation that can be performed, but the resulting tree is not 
	             a valid BST, so return null.
	
	Example 3:
	Input: trees = [[5,4],[3]]
	Output: []
	Explanation: It is impossible to perform any operations.

	Example 4:
	Input: trees = [[2,1,3]]
	Output: [2,1,3]
	Explanation: There is only one tree, and it is already a valid BST, so 
	             return its root.

	Constraints:
	* n == trees.length
	* 1 <= n <= 5 * 10^4
	* The number of nodes in each tree is in the range [1, 3].
	* Each node in the input may have children but no grandchildren.
	* No two roots of trees have the same value.
	* All the trees in the input are valid BSTs.
	* 1 <= TreeNode.val <= 5 * 10^4."""

    def canMerge(self, trees: List[TreeNode]) -> TreeNode:
        freq = defaultdict(int)
        for tree in trees: 
            stack = [tree]
            while stack: 
                x = stack.pop()
                if x: 
                    freq[x.val] += 1
                    stack.append(x.left)
                    stack.append(x.right)
        
        cnt, root = 0, None
        mp = {}
        for tree in trees: 
            if freq[tree.val] & 1: cnt, root = cnt+1, tree
            mp[tree.val] = tree
        if cnt != 1: return None 
        
        stack = [(root, None, 0)]
        total = len(trees)
        while stack: 
            node, parent, left = stack.pop()
            if not node.left and not node.right and node.val in mp: 
                total -= 1
                if not parent: 
                    if len(trees) > 1: return None 
                    return root
                if left: parent.left = node = mp[node.val]
                else: parent.right = node = mp[node.val]
            if node.left: stack.append((node.left, node, 1))
            if node.right: stack.append((node.right, node, 0))
        
        if total > 1: return None 
        
        # in-order traversal 
        prev = -inf
        node = root 
        stack = []
        while stack or node: 
            if node: 
                stack.append(node)
                node = node.left 
            else: 
                node = stack.pop()
                if prev >= node.val: return None
                prev = node.val
                node = node.right
        return root


    """1933. Check if String Is Decomposable Into Value-Equal Substrings (Easy)
	A value-equal string is a string where all characters are the same. 
	* For example, "1111" and "33" are value-equal strings.
	* In contrast, "123" is not a value-equal string.
	Given a digit string s, decompose the string into some number of 
	consecutive value-equal substrings where exactly one substring has a length 
	of 2 and the remaining substrings have a length of 3. Return true if you 
	can decompose s according to the above rules. Otherwise, return false. A 
	substring is a contiguous sequence of characters in a string.

	Example 1:
	Input: s = "000111000"
	Output: false
	Explanation: s cannot be decomposed according to the rules because 
	             ["000", "111", "000"] does not have a substring of length 2.
	
	Example 2:
	Input: s = "00011111222"
	Output: true
	Explanation: s can be decomposed into ["000", "111", "11", "222"].

	Example 3:
	Input: s = "011100022233"
	Output: false
	Explanation: s cannot be decomposed according to the rules because of the 
	             first '0'.

	Constraints:
	* 1 <= s.length <= 1000
	* s consists of only digits '0' through '9'."""

    def isDecomposable(self, s: str) -> bool:
        found = False 
        for _, grp in groupby(s): 
            r = len(list(grp)) % 3
            if r == 2 and not found: found = True 
            elif r != 0: return False 
        return found


    """1935. Maximum Number of Words You Can Type (Easy)
	There is a malfunctioning keyboard where some letter keys do not work. All 
	other keys on the keyboard work properly. Given a string text of words 
	separated by a single space (no leading or trailing spaces) and a string 
	brokenLetters of all distinct letter keys that are broken, return the 
	number of words in text you can fully type using this keyboard.

	Example 1:
	Input: text = "hello world", brokenLetters = "ad"
	Output: 1
	Explanation: We cannot type "world" because the 'd' key is broken.

	Example 2:
	Input: text = "leet code", brokenLetters = "lt"
	Output: 1
	Explanation: We cannot type "leet" because the 'l' and 't' keys are broken.

	Example 3:
	Input: text = "leet code", brokenLetters = "e"
	Output: 0
	Explanation: We cannot type either word because the 'e' key is broken.

	Constraints:
	* 1 <= text.length <= 10^4
	* 0 <= brokenLetters.length <= 26
	* text consists of words separated by a single space without any leading or 
	  trailing spaces.
	* Each word only consists of lowercase English letters.
	* brokenLetters consists of distinct lowercase English letters."""

    def canBeTypedWords(self, text: str, brokenLetters: str) -> int:
        ans = 0 
        brokenLetters = set(brokenLetters)
        for word in text.split(): 
            if not set(word) & brokenLetters: ans += 1
        return ans 


    """1936. Add Minimum Number of Rungs (Medium)
	You are given a strictly increasing integer array rungs that represents the 
	height of rungs on a ladder. You are currently on the floor at height 0, 
	and you want to reach the last rung. You are also given an integer dist. 
	You can only climb to the next highest rung if the distance between where 
	you are currently at (the floor or on a rung) and the next rung is at most 
	dist. You are able to insert rungs at any positive integer height if a rung 
	is not already there. Return the minimum number of rungs that must be added 
	to the ladder in order for you to climb to the last rung.

	Example 1:
	Input: rungs = [1,3,5,10], dist = 2
	Output: 2
	Explanation: You currently cannot reach the last rung. Add rungs at heights 
	             7 and 8 to climb this ladder. The ladder will now have rungs 
	             at [1,3,5,7,8,10].
	
	Example 2:
	Input: rungs = [3,6,8,10], dist = 3
	Output: 0
	Explanation: This ladder can be climbed without adding additional rungs.
	
	Example 3:
	Input: rungs = [3,4,6,7], dist = 2
	Output: 1
	Explanation: You currently cannot reach the first rung from the ground. Add 
	             a rung at height 1 to climb this ladder. The ladder will now 
	             have rungs at [1,3,4,6,7].
	
	Example 4:
	Input: rungs = [5], dist = 10
	Output: 0
	Explanation: This ladder can be climbed without adding additional rungs.

	Constraints:
	* 1 <= rungs.length <= 10^5
	* 1 <= rungs[i] <= 10^9
	* 1 <= dist <= 10^9
	* rungs is strictly increasing."""

    def addRungs(self, rungs: List[int], dist: int) -> int:
        ans = prev = 0 
        for x in rungs: 
            ans += (x - prev - 1) // dist
            prev = x 
        return ans 


    """1937. Maximum Number of Points with Cost (Medium)
	You are given an m x n integer matrix points (0-indexed). Starting with 0 
	points, you want to maximize the number of points you can get from the 
	matrix. To gain points, you must pick one cell in each row. Picking the 
	cell at coordinates (r, c) will add points[r][c] to your score. However, 
	you will lose points if you pick a cell too far from the cell that you 
	picked in the previous row. For every two adjacent rows r and r + 1 (where 
	0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will 
	subtract abs(c1 - c2) from your score. Return the maximum number of points 
	you can achieve.

	abs(x) is defined as:
	* x for x >= 0.
	* -x for x < 0.

	Example 1:
	Input: points = [[1,2,3],[1,5,1],[3,1,1]]
	Output: 9
	Explanation: The blue cells denote the optimal cells to pick, which have 
	             coordinates (0, 2), (1, 1), and (2, 0). You add 3 + 5 + 3 = 11 
	             to your score. However, you must subtract abs(2 - 1) + abs(1 - 0) = 2 
	             from your score. Your final score is 11 - 2 = 9.
	
	Example 2:
	Input: points = [[1,5],[2,3],[4,2]]
	Output: 11
	Explanation: The blue cells denote the optimal cells to pick, which have 
	             coordinates (0, 1), (1, 1), and (2, 0). You add 5 + 3 + 4 = 12 
	             to your score. However, you must subtract abs(1 - 1) + abs(1 - 0) = 1 
	             from your score. Your final score is 12 - 1 = 11.

	Constraints:
	* m == points.length
	* n == points[r].length
	* 1 <= m, n <= 10^5
	* 1 <= m * n <= 10^5
	* 0 <= points[r][c] <= 10^5"""

    def maxPoints(self, points: List[List[int]]) -> int:
        m, n = len(points), len(points[0])
        for i in range(1, m): 
            for j in range(n-2, -1, -1): 
                points[i-1][j] = max(points[i-1][j], points[i-1][j+1]-1)
            prefix = 0 
            for j in range(n): 
                points[i][j] += max(prefix, points[i-1][j])
                prefix = max(prefix, points[i-1][j]) - 1
        return max(points[-1])


    """1938. Maximum Genetic Difference Query (Hard)
	There is a rooted tree consisting of n nodes numbered 0 to n - 1. Each node's 
	number denotes its unique genetic value (i.e. the genetic value of node x 
	is x). The genetic difference between two genetic values is defined as the 
	bitwise-XOR of their values. You are given the integer array parents, where 
	parents[i] is the parent for node i. If node x is the root of the tree, then 
	parents[x] == -1. You are also given the array queries where 
	queries[i] = [nodei, vali]. For each query i, find the maximum genetic 
	difference between vali and pi, where pi is the genetic value of any node 
	that is on the path between nodei and the root (including nodei and the root). 
	More formally, you want to maximize vali XOR pi. Return an array ans where 
	ans[i] is the answer to the ith query.

	Example 1:
	Input: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]
	Output: [2,3,7]
	Explanation: The queries are processed as follows:
	- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.
	- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.
	- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.

	Example 2:
	Input: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]
	Output: [6,14,7]
	Explanation: The queries are processed as follows:
	- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.
	- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.
	- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.

	Constraints:
	* 2 <= parents.length <= 10^5
	* 0 <= parents[i] <= parents.length - 1 for every node i that is not the root.
	* parents[root] == -1
	* 1 <= queries.length <= 3 * 10^4
	* 0 <= nodei <= parents.length - 1
	* 0 <= vali <= 2 * 10^5

class Trie: 
    def __init__(self): 
        self.root = {}
    
    def insert(self, x): 
        node = self.root
        for i in range(18, -1, -1): 
            bit = (x >> i) & 1
            node = node.setdefault(bit, {})
            node["mult"] = 1 + node.get("mult", 0)
        node["#"] = x # sentinel 
        
    def search(self, x): 
        node = self.root
        for i in range(18, -1, -1): 
            bit = (x >> i) & 1
            if 1^bit in node: node = node[1^bit]
            else: node = node[bit]
        return x ^ node["#"]
    
    def remove(self, x): 
        node = self.root
        for i in range(18, -1, -1): 
            bit = (x >> i) & 1
            node[bit]["mult"] -= 1
            if node[bit]["mult"] == 0: 
                node.pop(bit)
                break 
            node = node[bit]"""       

    def maxGeneticDifference(self, parents: List[int], queries: List[List[int]]) -> List[int]:
        mp = {}
        for i, (node, val) in enumerate(queries): 
            mp.setdefault(node, []).append([val, i])
        
        tree, root = {}, -1
        for i, x in enumerate(parents): 
            if x == -1: root = i
            else: tree.setdefault(x, []).append(i)
        
        ans = [0]*len(queries)
        trie = Trie()
        
        def fn(x): 
            """Collect query results while traversing the tree."""
            trie.insert(x)
            for v, i in mp.get(x, []): ans[i] = trie.search(v)
            for xx in tree.get(x, []): fn(xx)
            trie.remove(x)
        
        fn(root)
        return ans 

    
    """1940. Longest Common Subsequence Between Sorted Arrays (Medium)
	Given an array of integer arrays arrays where each arrays[i] is sorted in 
	strictly increasing order, return an integer array representing the longest 
	common subsequence between all the arrays. A subsequence is a sequence that 
	can be derived from another sequence by deleting some elements (possibly 
	none) without changing the order of the remaining elements.

	Example 1:
	Input: arrays = [[1,3,4],
	                 [1,4,7,9]]
	Output: [1,4]
	Explanation: The longest common subsequence in the two arrays is [1,4].

	Example 2:
	Input: arrays = [[2,3,6,8],
	                 [1,2,3,5,6,7,10],
	                 [2,3,4,6,9]]
	Output: [2,3,6]
	Explanation: The longest common subsequence in all three arrays is [2,3,6].

	Example 3:
	Input: arrays = [[1,2,3,4,5],
	                 [6,7,8]]
	Output: []
	Explanation: There is no common subsequence between the two arrays.

	Constraints:
	* 2 <= arrays.length <= 100
	* 1 <= arrays[i].length <= 100
	* 1 <= arrays[i][j] <= 100
	* arrays[i] is sorted in strictly increasing order."""

    def longestCommomSubsequence(self, arrays: List[List[int]]) -> List[int]:
        ans = set(arrays[0])
        for i in range(1, len(arrays)): ans &= set(arrays[i])
        return sorted(ans)


    """1941. Check if All Characters Have Equal Number of Occurrences (Easy)
	Given a string s, return true if s is a good string, or false otherwise. A 
	string s is good if all the characters that appear in s have the same 
	number of occurrences (i.e., the same frequency).

	Example 1:
	Input: s = "abacbc"
	Output: true
	Explanation: The characters that appear in s are 'a', 'b', and 'c'. All 
	             characters occur 2 times in s.
	
	Example 2:
	Input: s = "aaabb"
	Output: false
	Explanation: The characters that appear in s are 'a' and 'b'. 'a' occurs 3 
	             times while 'b' occurs 2 times, which is not the same number 
	             of times.

	Constraints:
	* 1 <= s.length <= 1000
	* s consists of lowercase English letters."""

    def areOccurrencesEqual(self, s: str) -> bool:
        return len(set(Counter(s).values())) == 1


    """1942. The Number of the Smallest Unoccupied Chair (Medium)
	There is a party where n friends numbered from 0 to n - 1 are attending. 
	There is an infinite number of chairs in this party that are numbered from 
	0 to infinity. When a friend arrives at the party, they sit on the 
	unoccupied chair with the smallest number. For example, if chairs 0, 1, and 
	5 are occupied when a friend comes, they will sit on chair number 2. When a 
	friend leaves the party, their chair becomes unoccupied at the moment they 
	leave. If another friend arrives at that same moment, they can sit in that 
	chair. You are given a 0-indexed 2D integer array times where 
	times[i] = [arrivali, leavingi], indicating the arrival and leaving times 
	of the ith friend respectively, and an integer targetFriend. All arrival 
	times are distinct. Return the chair number that the friend numbered 
	targetFriend will sit on.

	Example 1:
	Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1
	Output: 1
	Explanation: - Friend 0 arrives at time 1 and sits on chair 0.
	             - Friend 1 arrives at time 2 and sits on chair 1.
	             - Friend 1 leaves at time 3 and chair 1 becomes empty.
	             - Friend 0 leaves at time 4 and chair 0 becomes empty.
	             - Friend 2 arrives at time 4 and sits on chair 0.
	             Since friend 1 sat on chair 1, we return 1.
	
	Example 2:
	Input: times = [[3,10],[1,5],[2,6]], targetFriend = 0
	Output: 2
	Explanation: - Friend 1 arrives at time 1 and sits on chair 0.
	             - Friend 2 arrives at time 2 and sits on chair 1.
	             - Friend 0 arrives at time 3 and sits on chair 2.
	             - Friend 1 leaves at time 5 and chair 0 becomes empty.
	             - Friend 2 leaves at time 6 and chair 1 becomes empty.
	             - Friend 0 leaves at time 10 and chair 2 becomes empty.
	             Since friend 0 sat on chair 2, we return 2.

	Constraints:
	* n == times.length
	* 2 <= n <= 10^4
	* times[i].length == 2
	* 1 <= arrivali < leavingi <= 10^5
	* 0 <= targetFriend <= n - 1
	* Each arrivali time is distinct."""

    def smallestChair(self, times: List[List[int]], targetFriend: int) -> int:
        vals = []
        for i, (arrival, leaving) in enumerate(times): 
            vals.append((arrival, 1, i))
            vals.append((leaving, 0, i))
        
        k = 0 
        pq = [] # available seats 
        mp = {} # player-to-seat mapping 
        for _, arrival, i in sorted(vals): 
            if arrival: 
                if pq: s = heappop(pq)
                else: 
                    s = k
                    k += 1
                if i == targetFriend: return s
                mp[i] = s
            else: heappush(pq, mp[i]) # new seat available


    """1943. Describe the Painting (Medium)
	There is a long and thin painting that can be represented by a number line. 
	The painting was painted with multiple overlapping segments where each 
	segment was painted with a unique color. You are given a 2D integer array 
	segments, where segments[i] = [starti, endi, colori] represents the half-
	closed segment [starti, endi) with colori as the color. The colors in the 
	overlapping segments of the painting were mixed when it was painted. When 
	two or more colors mix, they form a new color that can be represented as a 
	set of mixed colors.

	* For example, if colors 2, 4, and 6 are mixed, then the resulting mixed 
	  color is {2,4,6}.
	For the sake of simplicity, you should only output the sum of the elements 
	in the set rather than the full set. You want to describe the painting with 
	the minimum number of non-overlapping half-closed segments of these mixed 
	colors. These segments can be represented by the 2D array painting where 
	painting[j] = [leftj, rightj, mixj] describes a half-closed segment 
	[leftj, rightj) with the mixed color sum of mixj.

	* For example, the painting created with segments = [[1,4,5],[1,7,7]] can 
	  be described by painting = [[1,4,12],[4,7,7]] because:
	  + [1,4) is colored {5,7} (with a sum of 12) from both the first and 
	    second segments.
	  + [4,7) is colored {7} from only the second segment.
	Return the 2D array painting describing the finished painting (excluding 
	any parts that are not painted). You may return the segments in any order.
	A half-closed segment [a, b) is the section of the number line between 
	points a and b including point a and not including point b.

	Example 1:
	Input: segments = [[1,4,5],[4,7,7],[1,7,9]]
	Output: [[1,4,14],[4,7,16]]
	Explanation: The painting can be described as follows:
	             - [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.
	             - [4,7) is colored {7,9} (with a sum of 16) from the second and third segments.

	Example 2:
	Input: segments = [[1,7,9],[6,8,15],[8,10,7]]
	Output: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]
	Explanation: The painting can be described as follows:
	             - [1,6) is colored 9 from the first segment.
	             - [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.
	             - [7,8) is colored 15 from the second segment.
	             - [8,10) is colored 7 from the third segment.
	
	Example 3:
	Input: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]
	Output: [[1,4,12],[4,7,12]]
	Explanation: The painting can be described as follows:
	             - [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.
	             - [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.
	             Note that returning a single segment [1,7) is incorrect 
	             because the mixed color sets are different.

	Constraints:
	* 1 <= segments.length <= 2 * 10^4
	* segments[i].length == 3
	* 1 <= starti < endi <= 10^5
	* 1 <= colori <= 10^9
	* Each colori is distinct."""

    def splitPainting(self, segments: List[List[int]]) -> List[List[int]]:
        vals = []
        for start, end, color in segments: 
            vals.append((start, +color))
            vals.append((end, -color))
        
        ans = []
        prefix = prev = 0 
        for x, c in sorted(vals): 
            if prev < x and prefix: ans.append([prev, x, prefix])
            prev = x
            prefix += c 
        return ans 


    """1944. Number of Visible People in a Queue (Hard)
	There are n people standing in a queue, and they numbered from 0 to n - 1 
	in left to right order. You are given an array heights of distinct integers 
	where heights[i] represents the height of the ith person. A person can see 
	another person to their right in the queue if everybody in between is 
	shorter than both of them. More formally, the ith person can see the jth 
	person if 
	* i < j and 
	* min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]).
	Return an array answer of length n where answer[i] is the number of people 
	the ith person can see to their right in the queue.

	Example 1:
	Input: heights = [10,6,8,5,11,9]
	Output: [3,1,2,1,1,0]
	Explanation: Person 0 can see person 1, 2, and 4.
	             Person 1 can see person 2.
	             Person 2 can see person 3 and 4.
	             Person 3 can see person 4.
	             Person 4 can see person 5.
	             Person 5 can see no one since nobody is to the right of them.
	
	Example 2:
	Input: heights = [5,1,2,3,10]
	Output: [4,1,1,1,0]

	Constraints:
	* n == heights.length
	* 1 <= n <= 10^5
	* 1 <= heights[i] <= 10^5
	* All the values of heights are unique."""

    def canSeePersonsCount(self, heights: List[int]) -> List[int]:
        ans = [0]*len(heights)
        stack = [] # mono-stack 
        for i in reversed(range(len(heights))): 
            while stack and stack[-1] <= heights[i]: 
                ans[i] += 1
                stack.pop()
            if stack: ans[i] += 1
            stack.append(heights[i])
        return ans 

    
    """1945. Sum of Digits of String After Convert (Easy)
	You are given a string s consisting of lowercase English letters, and an 
	integer k. First, convert s into an integer by replacing each letter with 
	its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2, ..., 
	'z' with 26). Then, transform the integer by replacing it with the sum of 
	its digits. Repeat the transform operation k times in total. For example, 
	if s = "zbax" and k = 2, then the resulting integer would be 8 by the 
	following operations:
	* Convert: "zbax" ➝ "(26)(2)(1)(24)" ➝ "262124" ➝ 262124
	* Transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17
	* Transform #2: 17 ➝ 1 + 7 ➝ 8
	Return the resulting integer after performing the operations described 
	above.

	Example 1:
	Input: s = "iiii", k = 1
	Output: 36
	Explanation: The operations are as follows:
	             - Convert: "iiii" ➝ "(9)(9)(9)(9)" ➝ "9999" ➝ 9999
	             - Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36
	             Thus the resulting integer is 36.
	
	Example 2:
	Input: s = "leetcode", k = 2
	Output: 6
	Explanation: The operations are as follows:
	             - Convert: "leetcode" ➝ "(12)(5)(5)(20)(3)(15)(4)(5)" ➝ "12552031545" ➝ 12552031545
	             - Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33
	             - Transform #2: 33 ➝ 3 + 3 ➝ 6
	             Thus the resulting integer is 6.
	
	Example 3:
	Input: s = "zbax", k = 2
	Output: 8

	Constraints:
	* 1 <= s.length <= 100
	* 1 <= k <= 10
	* s consists of lowercase English letters."""

    def getLucky(self, s: str, k: int) -> int:
        s = "".join(str(ord(ch)-96) for ch in s)
        for _ in range(k): s = str(sum(int(ch) for ch in s))
        return s


    """1946. Largest Number After Mutating Substring (Medium)
	You are given a string num, which represents a large integer. You are also 
	given a 0-indexed integer array change of length 10 that maps each digit 
	0-9 to another digit. More formally, digit d maps to digit change[d]. You 
	may choose to mutate any substring of num. To mutate a substring, replace 
	each digit num[i] with the digit it maps to in change (i.e. replace num[i] 
	with change[num[i]]). Return a string representing the largest possible 
	integer after mutating (or choosing not to) any substring of num. A 
	substring is a contiguous sequence of characters within the string.

	Example 1:
	Input: num = "132", change = [9,8,5,0,3,6,4,2,6,8]
	Output: "832"
	Explanation: Replace the substring "1":
	             - 1 maps to change[1] = 8.
	             Thus, "132" becomes "832". "832" is the largest number that 
	             can be created, so return it.
	
	Example 2:
	Input: num = "021", change = [9,4,3,5,7,2,1,9,0,6]
	Output: "934"
	Explanation: Replace the substring "021":
	             - 0 maps to change[0] = 9.
	             - 2 maps to change[2] = 3.
	             - 1 maps to change[1] = 4.
	             Thus, "021" becomes "934". "934" is the largest number that 
	             can be created, so return it.
	
	Example 3:
	Input: num = "5", change = [1,4,7,5,3,2,5,6,9,4]
	Output: "5"
	Explanation: "5" is already the largest number that can be created, so 
	             return it.

	Constraints:
	* 1 <= num.length <= 10^5
	* num consists of only digits 0-9.
	* change.length == 10
	* 0 <= change[d] <= 9"""

    def maximumNumber(self, num: str, change: List[int]) -> str:
        num = list(num)
        on = False 
        for i, ch in enumerate(num): 
            x = int(ch)
            if x < change[x]: 
                on = True
                num[i] = str(change[x])
            elif x > change[x] and on: break
        return "".join(num)


    """1947. Maximum Compatibility Score Sum (Medium)
	There is a survey that consists of n questions where each question's answer 
	is either 0 (no) or 1 (yes). The survey was given to m students numbered 
	from 0 to m - 1 and m mentors numbered from 0 to m - 1. The answers of the 
	students are represented by a 2D integer array students where students[i] 
	is an integer array that contains the answers of the ith student (0-indexed). 
	The answers of the mentors are represented by a 2D integer array mentors 
	where mentors[j] is an integer array that contains the answers of the jth 
	mentor (0-indexed). Each student will be assigned to one mentor, and each 
	mentor will have one student assigned to them. The compatibility score of a 
	student-mentor pair is the number of answers that are the same for both the 
	student and the mentor.

	* For example, if the student's answers were [1, 0, 1] and the mentor's 
	  answers were [0, 0, 1], then their compatibility score is 2 because only 
	  the second and the third answers are the same.
	You are tasked with finding the optimal student-mentor pairings to maximize 
	the sum of the compatibility scores. Given students and mentors, return the 
	maximum compatibility score sum that can be achieved.

	Example 1:
	Input: students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]
	Output: 8
	Explanation: We assign students to mentors in the following way:
	             - student 0 to mentor 2 with a compatibility score of 3.
	             - student 1 to mentor 0 with a compatibility score of 2.
	             - student 2 to mentor 1 with a compatibility score of 3.
	             The compatibility score sum is 3 + 2 + 3 = 8.
	
	Example 2:
	Input: students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]
	Output: 0
	Explanation: The compatibility score of any student-mentor pair is 0.

	Constraints:
	* m == students.length == mentors.length
	* n == students[i].length == mentors[j].length
	* 1 <= m, n <= 8
	* students[i][k] is either 0 or 1.
	* mentors[j][k] is either 0 or 1."""

    def maxCompatibilitySum(self, students: List[List[int]], mentors: List[List[int]]) -> int:
        m = len(students)
        
        score = [[0]*m for _ in range(m)]
        for i in range(m): 
            for j in range(m): 
                score[i][j] = sum(x == y for x, y in zip(students[i], mentors[j]))
        
        @cache 
        def fn(mask, j): 
            """Return max score of assigning students in mask to first j mentors."""
            ans = 0 
            for i in range(m): 
                if not mask & (1<<i): 
                    ans = max(ans, fn(mask^(1<<i), j-1) + score[i][j])
            return ans 
        
        return fn(1<<m, m-1)


    """1948. Delete Duplicate Folders in System (Hard)
	Due to a bug, there are many duplicate folders in a file system. You are 
	given a 2D array paths, where paths[i] is an array representing an absolute 
	path to the ith folder in the file system.

	* For example, ["one", "two", "three"] represents the path "/one/two/three".
	Two folders (not necessarily on the same level) are identical if they 
	contain the same non-empty set of identical subfolders and underlying 
	subfolder structure. The folders do not need to be at the root level to be 
	identical. If two or more folders are identical, then mark the folders as 
	well as all their subfolders.

	* For example, folders "/a" and "/b" in the file structure below are 
	  identical. They (as well as their subfolders) should all be marked:
	  - /a
	  - /a/x
	  - /a/x/y
	  - /a/z
	  - /b
	  - /b/x
	  - /b/x/y
	  - /b/z
	* However, if the file structure also included the path "/b/w", then the 
	  folders "/a" and "/b" would not be identical. Note that "/a/x" and "/b/x" 
	  would still be considered identical even with the added folder.
	Once all the identical folders and their subfolders have been marked, the 
	file system will delete all of them. The file system only runs the deletion 
	once, so any folders that become identical after the initial deletion are 
	not deleted. Return the 2D array ans containing the paths of the remaining 
	folders after deleting all the marked folders. The paths may be returned in 
	any order.

	Example 1:
	Input: paths = [["a"],["c"],["d"],["a","b"],["c","b"],["d","a"]]
	Output: [["d"],["d","a"]]
	Explanation: Folders "/a" and "/c" (and their subfolders) are marked for 
	             deletion because they both contain an empty folder named "b".
	
	Example 2:
	Input: paths = [["a"],["c"],["a","b"],["c","b"],["a","b","x"],["a","b","x","y"],["w"],["w","y"]]
	Output: [["c"],["c","b"],["a"],["a","b"]]
	Explanation: Folders "/a/b/x" and "/w" (and their subfolders) are marked 
	             for deletion because they both contain an empty folder named 
	             "y". Note that folders "/a" and "/c" are identical after the 
	             deletion, but they are not deleted because they were not 
	             marked beforehand.
	
	Example 3:
	Input: paths = [["a","b"],["c","d"],["c"],["a"]]
	Output: [["c"],["c","d"],["a"],["a","b"]]
	Explanation: All folders are unique in the file system. Note that the 
	             returned array can be in a different order as the order does 
	             not matter.
	
	Example 4:
	Input: paths = [["a"],["a","x"],["a","x","y"],["a","z"],["b"],["b","x"],["b","x","y"],["b","z"]]
	Output: []
	Explanation: Folders "/a/x" and "/b/x" (and their subfolders) are marked 
	             for deletion because they both contain an empty folder named 
	             "y". Folders "/a" and "/b" (and their subfolders) are marked 
	             for deletion because they both contain an empty folder "z" and 
	             the folder "x" described above.
	
	Example 5:
	Input: paths = [["a"],["a","x"],["a","x","y"],["a","z"],["b"],["b","x"],["b","x","y"],["b","z"],["b","w"]]
	Output: [["b"],["b","w"],["b","z"],["a"],["a","z"]]
	Explanation: This has the same structure as the previous example, except 
	             with the added "/b/w". Folders "/a/x" and "/b/x" are still 
	             marked, but "/a" and "/b" are no longer marked because "/b" 
	             has the empty folder named "w" and "/a" does not. Note that 
	             "/a/z" and "/b/z" are not marked because the set of identical 
	             subfolders must be non-empty, but these folders are empty.

	Constraints:
	* 1 <= paths.length <= 2 * 10^4
	* 1 <= paths[i].length <= 500
	* 1 <= paths[i][j].length <= 10
	* 1 <= sum(paths[i][j].length) <= 2 * 10^5
	* path[i][j] consists of lowercase English letters.
	* No two paths lead to the same folder.
	* For any folder not at the root level, its parent folder will also be in the input."""

    def deleteDuplicateFolder(self, paths: List[List[str]]) -> List[List[str]]:
        paths.sort()
        
        tree = {"#": -1}
        for i, path in enumerate(paths): 
            node = tree
            for x in path: node = node.setdefault(x, {})
            node["#"] = i
        
        seen = {}
        mark = set()
        
        def fn(n): 
            """Return serialized value of sub-tree rooted at n."""
            if len(n) == 1: return "$" # leaf node 
            vals = []
            for k in n: 
                if k != "#": vals.append(f"${k}${fn(n[k])}")
            hs = "".join(vals)
            if hs in seen: 
                mark.add(n["#"])
                mark.add(seen[hs])
            if hs != "$": seen[hs] = n["#"]
            return hs
        
        fn(tree)
        
        ans = []
        stack = [tree]
        while stack: 
            n = stack.pop()
            if n["#"] >= 0: ans.append(paths[n["#"]])
            for k in n: 
                if k != "#" and n[k]["#"] not in mark: stack.append(n[k])
        return ans 


    """1950. Maximum of Minimum Values in All Subarrays (Medium)
	You are given an integer array nums of size n. You are asked to solve n 
	queries for each integer i in the range 0 <= i < n. To solve the ith query:
	* Find the minimum value in each possible subarray of size i + 1 of the 
	  array nums.
	* Find the maximum of those minimum values. This maximum is the answer to 
	  the query.
	Return a 0-indexed integer array ans of size n such that ans[i] is the 
	answer to the ith query. A subarray is a contiguous sequence of elements in 
	an array.

	Example 1:
	Input: nums = [0,1,2,4]
	Output: [4,2,1,0]
	Explanation: i=0:
	             - The subarrays of size 1 are [0], [1], [2], [4]. The minimum values are 0, 1, 2, 4.
	             - The maximum of the minimum values is 4.
	             i=1:
	             - The subarrays of size 2 are [0,1], [1,2], [2,4]. The minimum values are 0, 1, 2.
	             - The maximum of the minimum values is 2.
	             i=2:
	             - The subarrays of size 3 are [0,1,2], [1,2,4]. The minimum values are 0, 1.
	             - The maximum of the minimum values is 1.
	             i=3:
	             - There is one subarray of size 4, which is [0,1,2,4]. The minimum value is 0.
	             - There is only one value, so the maximum is 0.
	
	Example 2:
	Input: nums = [10,20,50,10]
	Output: [50,20,10,10]
	Explanation: i=0:
	             - The subarrays of size 1 are [10], [20], [50], [10]. The minimum values are 10, 20, 50, 10.
	             - The maximum of the minimum values is 50.
	             i=1:
	             - The subarrays of size 2 are [10,20], [20,50], [50,10]. The minimum values are 10, 20, 10.
	             - The maximum of the minimum values is 20.
	             i=2:
	             - The subarrays of size 3 are [10,20,50], [20,50,10]. The minimum values are 10, 10.
	             - The maximum of the minimum values is 10.
	             i=3:
	             - There is one subarray of size 4, which is [10,20,50,10]. The minimum value is 10.
	             - There is only one value, so the maximum is 10.

	Constraints:
	* n == nums.length
	* 1 <= n <= 10^5
	* 0 <= nums[i] <= 10^9"""

    def findMaximums(self, nums: List[int]) -> List[int]:
        ans = [0]*len(nums)
        stack = []
        for i, x in enumerate(nums + [0]): 
            while stack and stack[-1][1] >= x: 
                _, xx = stack.pop()
                k = i-stack[-1][0]-2 if stack else i-1
                ans[k] = max(ans[k], xx)
            stack.append((i, x))
        
        for i in reversed(range(len(nums)-1)): 
            ans[i] = max(ans[i], ans[i+1])
        return ans


    """1952. Three Divisors (Easy)
	Given an integer n, return true if n has exactly three positive divisors. 
	Otherwise, return false. An integer m is a divisor of n if there exists an 
	integer k such that n = k * m.

	Example 1:
	Input: n = 2
	Output: false
	Explantion: 2 has only two divisors: 1 and 2.

	Example 2:
	Input: n = 4
	Output: true
	Explantion: 4 has three divisors: 1, 2, and 4.

	Constraints: 1 <= n <= 10^4"""

    def isThree(self, n: int) -> bool:
        if n == 1: return False # edge case 
        
        x = int(sqrt(n))
        if x*x != n: return False 
        
        for i in range(2, int(sqrt(x))+1): 
            if x % i == 0: return False 
        return True


    """1953. Maximum Number of Weeks for Which You Can Work (Medium)
	There are n projects numbered from 0 to n - 1. You are given an integer 
	array milestones where each milestones[i] denotes the number of milestones 
	the ith project has. You can work on the projects following these two rules:
	* Every week, you will finish exactly one milestone of one project. You 
	  must work every week.
	* You cannot work on two milestones from the same project for two 
	  consecutive weeks.
	Once all the milestones of all the projects are finished, or if the only 
	milestones that you can work on will cause you to violate the above rules, 
	you will stop working. Note that you may not be able to finish every 
	project's milestones due to these constraints. Return the maximum number of 
	weeks you would be able to work on the projects without violating the rules 
	mentioned above.

	Example 1:
	Input: milestones = [1,2,3]
	Output: 6
	Explanation: One possible scenario is:
	             - During the 1st week, you will work on a milestone of project 0.
	             - During the 2nd week, you will work on a milestone of project 2.
	             - During the 3rd week, you will work on a milestone of project 1.
	             - During the 4th week, you will work on a milestone of project 2.
	             - During the 5th week, you will work on a milestone of project 1.
	             - During the 6th week, you will work on a milestone of project 2.
	             The total number of weeks is 6.
	
	Example 2:
	Input: milestones = [5,2,1]
	Output: 7
	Explanation: One possible scenario is:
	             - During the 1st week, you will work on a milestone of project 0.
	             - During the 2nd week, you will work on a milestone of project 1.
	             - During the 3rd week, you will work on a milestone of project 0.
	             - During the 4th week, you will work on a milestone of project 1.
	             - During the 5th week, you will work on a milestone of project 0.
	             - During the 6th week, you will work on a milestone of project 2.
	             - During the 7th week, you will work on a milestone of project 0.
	             The total number of weeks is 7. Note that you cannot work on 
	             the last milestone of project 0 on 8th week because it would 
	             violate the rules. Thus, one milestone in project 0 will 
	             remain unfinished.

	Constraints:
	* n == milestones.length
	* 1 <= n <= 10^5
	* 1 <= milestones[i] <= 10^9"""

    def numberOfWeeks(self, milestones: List[int]) -> int:
        m, s = max(milestones), sum(milestones)
        return s - max(0, 2*m - s - 1)


    """1954. Minimum Garden Perimeter to Collect Enough Apples (Medium)
	In a garden represented as an infinite 2D grid, there is an apple tree 
	planted at every integer coordinate. The apple tree planted at an integer 
	coordinate (i, j) has |i| + |j| apples growing on it. You will buy an axis-
	aligned square plot of land that is centered at (0, 0). Given an integer 
	neededApples, return the minimum perimeter of a plot such that at least 
	neededApples apples are inside or on the perimeter of that plot.

	The value of |x| is defined as:
	* x if x >= 0
	* -x if x < 0

	Example 1:
	Input: neededApples = 1
	Output: 8
	Explanation: A square plot of side length 1 does not contain any apples. 
	             However, a square plot of side length 2 has 12 apples inside 
	             (as depicted in the image above). The perimeter is 2 * 4 = 8.
	
	Example 2:
	Input: neededApples = 13
	Output: 16

	Example 3:
	Input: neededApples = 1000000000
	Output: 5040

	Constraints: 1 <= neededApples <= 10^15"""

    def minimumPerimeter(self, neededApples: int) -> int:
        lo, hi = 0, 10**5
        while lo < hi: 
            mid = lo + hi >> 1
            if 2*mid*(mid+1)*(2*mid+1) < neededApples: lo = mid + 1
            else: hi = mid
        return 8*lo


    """1955. Count Number of Special Subsequences (Hard)
	A sequence is special if it consists of a positive number of 0s, followed 
	by a positive number of 1s, then a positive number of 2s.
	* For example, [0,1,2] and [0,0,1,1,1,2] are special.
	* In contrast, [2,1,0], [1], and [0,1,2,0] are not special.
	Given an array nums (consisting of only integers 0, 1, and 2), return the 
	number of different subsequences that are special. Since the answer may be 
	very large, return it modulo 10^9 + 7. A subsequence of an array is a 
	sequence that can be derived from the array by deleting some or no elements 
	without changing the order of the remaining elements. Two subsequences are 
	different if the set of indices chosen are different.

	Example 1:
	Input: nums = [0,1,2,2]
	Output: 3
	Explanation: The special subsequences are [0,1,2,2], [0,1,2,2], and 
	             [0,1,2,2].

	Example 2:
	Input: nums = [2,2,0,0]
	Output: 0
	Explanation: There are no special subsequences in [2,2,0,0].

	Example 3:
	Input: nums = [0,1,2,0,1,2]
	Output: 7
	Explanation: The special subsequences are:
	             - [0,1,2,0,1,2]
	             - [0,1,2,0,1,2]
	             - [0,1,2,0,1,2]
	             - [0,1,2,0,1,2]
	             - [0,1,2,0,1,2]
	             - [0,1,2,0,1,2]
	             - [0,1,2,0,1,2]

	Constraints:
	* 1 <= nums.length <= 10^5
	* 0 <= nums[i] <= 2"""

    def countSpecialSubsequences(self, nums: List[int]) -> int:
        MOD = 1_000_000_007 
        s0 = s1 = s2 = 0 
        for x in nums: 
            if x == 0: s0 = (1 + 2*s0) % MOD
            elif x == 1: s1 = (s0 + 2*s1) % MOD
            else: s2 = (s1 + 2*s2) % MOD
        return s2


    """1957. Delete Characters to Make Fancy String (Easy)
	A fancy string is a string where no three consecutive characters are equal. 
	Given a string s, delete the minimum possible number of characters from s 
	to make it fancy. Return the final string after the deletion. It can be 
	shown that the answer will always be unique.

	Example 1:
	Input: s = "leeetcode"
	Output: "leetcode"
	Explanation: Remove an 'e' from the first group of 'e's to create 
	             "leetcode". No three consecutive characters are equal, so 
	             return "leetcode".
	
	Example 2:
	Input: s = "aaabaaaa"
	Output: "aabaa"
	Explanation: Remove an 'a' from the first group of 'a's to create "aabaaaa".
	             Remove two 'a's from the second group of 'a's to create "aabaa".
	             No three consecutive characters are equal, so return "aabaa".
	
	Example 3:
	Input: s = "aab"
	Output: "aab"
	Explanation: No three consecutive characters are equal, so return "aab".

	Constraints:
	* 1 <= s.length <= 10^5
	* s consists only of lowercase English letters."""

    def makeFancyString(self, s: str) -> str:
        stack = []
        for ch in s: 
            if len(stack) > 1 and stack[-2] == stack[-1] == ch: continue 
            stack.append(ch)
        return "".join(stack)


    """1958. Check if Move is Legal (Medium)
	You are given a 0-indexed 8 x 8 grid board, where board[r][c] represents 
	the cell (r, c) on a game board. On the board, free cells are represented 
	by '.', white cells are represented by 'W', and black cells are represented 
	by 'B'. Each move in this game consists of choosing a free cell and 
	changing it to the color you are playing as (either white or black). 
	However, a move is only legal if, after changing it, the cell becomes the 
	endpoint of a good line (horizontal, vertical, or diagonal). A good line is 
	a line of three or more cells (including the endpoints) where the endpoints 
	of the line are one color, and the remaining cells in the middle are the 
	opposite color (no cells in the line are free). Given two integers rMove 
	and cMove and a character color representing the color you are playing as 
	(white or black), return true if changing cell (rMove, cMove) to color 
	color is a legal move, or false if it is not legal.

	Example 1:
	Input: board = [[".",".",".","B",".",".",".","."],
	                [".",".",".","W",".",".",".","."],
	                [".",".",".","W",".",".",".","."],
	                [".",".",".","W",".",".",".","."],
	                ["W","B","B",".","W","W","W","B"],
	                [".",".",".","B",".",".",".","."],
	                [".",".",".","B",".",".",".","."],
	                [".",".",".","W",".",".",".","."]], 
	       rMove = 4, cMove = 3, color = "B"
	Output: true
	Explanation: '.', 'W', and 'B' are represented by the colors blue, white, 
	             and black respectively, and cell (rMove, cMove) is marked with 
	             an 'X'. The two good lines with the chosen cell as an endpoint 
	             are annotated above with the red rectangles.
	
	Example 2:
	Input: board = [[".",".",".",".",".",".",".","."],
	                [".","B",".",".","W",".",".","."],
	                [".",".","W",".",".",".",".","."],
	                [".",".",".","W","B",".",".","."],
	                [".",".",".",".",".",".",".","."],
	                [".",".",".",".","B","W",".","."],
	                [".",".",".",".",".",".","W","."],
	                [".",".",".",".",".",".",".","B"]], 
	       rMove = 4, cMove = 4, color = "W"
	Output: false
	Explanation: While there are good lines with the chosen cell as a middle 
	             cell, there are no good lines with the chosen cell as an 
	             endpoint.

	Constraints:
	* board.length == board[r].length == 8
	* 0 <= rMove, cMove < 8
	* board[rMove][cMove] == '.'
	* color is either 'B' or 'W'."""

    def checkMove(self, board: List[List[str]], rMove: int, cMove: int, color: str) -> bool:
        for di, dj in (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1): 
            i, j = rMove+di, cMove+dj
            step = 0
            while 0 <= i < 8 and 0 <= j < 8: 
                if board[i][j] == color and step: return True 
                if board[i][j] == "." or board[i][j] == color and not step: break 
                i, j = i+di, j+dj
                step += 1
        return False


    """1959. Minimum Total Space Wasted With K Resizing Operations (Medium)
	You are currently designing a dynamic array. You are given a 0-indexed 
	integer array nums, where nums[i] is the number of elements that will be in 
	the array at time i. In addition, you are given an integer k, the maximum 
	number of times you can resize the array (to any size). The size of the 
	array at time t, sizet, must be at least nums[t] because there needs to be 
	enough space in the array to hold all the elements. The space wasted at 
	time t is defined as sizet - nums[t], and the total space wasted is the sum 
	of the space wasted across every time t where 0 <= t < nums.length. Return 
	the minimum total space wasted if you can resize the array at most k times.
	Note: The array can have any size at the start and does not count towards 
	the number of resizing operations.

	Example 1:
	Input: nums = [10,20], k = 0
	Output: 10
	Explanation: size = [20,20]. We can set the initial size to be 20. The 
	             total wasted space is (20 - 10) + (20 - 20) = 10.
	
	Example 2:
	Input: nums = [10,20,30], k = 1
	Output: 10
	Explanation: size = [20,20,30]. We can set the initial size to be 20 and 
	             resize to 30 at time 2. The total wasted space is 
	             (20 - 10) + (20 - 20) + (30 - 30) = 10.
	
	Example 3:
	Input: nums = [10,20,15,30,20], k = 2
	Output: 15
	Explanation: size = [10,20,20,30,30]. We can set the initial size to 10, 
	             resize to 20 at time 1, and resize to 30 at time 3. The total 
	             wasted space is 
	             (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.

	Constraints:
	* 1 <= nums.length <= 200
	* 1 <= nums[i] <= 10^6
	* 0 <= k <= nums.length - 1"""

    def minSpaceWastedKResizing(self, nums: List[int], k: int) -> int:
        
        @cache
        def fn(i, k): 
            """Return min waste from i with k ops."""
            if i == len(nums): return 0
            if k < 0: return inf 
            ans = inf
            rmx = -inf # range max 
            rsm = 0 # range sum 
            for j in range(i, len(nums)): 
                rmx = max(rmx, nums[j])
                rsm += nums[j]
                ans = min(ans, rmx*(j-i+1) - rsm + fn(j+1, k-1))
            return ans 
        
        return fn(0, k)


    """1960. Maximum Product of the Length of Two Palindromic Substrings (Hard)
	You are given a 0-indexed string s and are tasked with finding two non-
	intersecting palindromic substrings of odd length such that the product of 
	their lengths is maximized. More formally, you want to choose four integers 
	i, j, k, l such that 0 <= i <= j < k <= l < s.length and both the 
	substrings s[i...j] and s[k...l] are palindromes and have odd lengths. 
	s[i...j] denotes a substring from index i to index j inclusive. Return the 
	maximum possible product of the lengths of the two non-intersecting 
	palindromic substrings. A palindrome is a string that is the same forward 
	and backward. A substring is a contiguous sequence of characters in a 
	string.

	Example 1:
	Input: s = "ababbb"
	Output: 9
	Explanation: Substrings "aba" and "bbb" are palindromes with odd length. 
	             product = 3 * 3 = 9.
	
	Example 2:
	Input: s = "zaaaxbbby"
	Output: 9
	Explanation: Substrings "aaa" and "bbb" are palindromes with odd length. 
	             product = 3 * 3 = 9.

	Constraints:
	* 2 <= s.length <= 10^5
	* s consists of lowercase English letters."""

    def maxProduct(self, s: str) -> int:
        n = len(s)
        
        # Manacher's algo
        hlen = [0]*n # half-length
        center = right = 0 
        for i in range(n): 
            if i < right: hlen[i] = min(right - i, hlen[2*center - i])
            while 0 <= i-1-hlen[i] and i+1+hlen[i] < len(s) and s[i-1-hlen[i]] == s[i+1+hlen[i]]: 
                hlen[i] += 1
            if right < i+hlen[i]: center, right = i, i+hlen[i]
        
        prefix = [0]*n
        suffix = [0]*n
        for i in range(n): 
            prefix[i+hlen[i]] = max(prefix[i+hlen[i]], 2*hlen[i]+1)
            suffix[i-hlen[i]] = max(suffix[i-hlen[i]], 2*hlen[i]+1)
        
        for i in range(1, n): 
            prefix[~i] = max(prefix[~i], prefix[~i+1]-2)
            suffix[i] = max(suffix[i], suffix[i-1]-2)
        
        for i in range(1, n): 
            prefix[i] = max(prefix[i-1], prefix[i])
            suffix[~i] = max(suffix[~i], suffix[~i+1])
        
        return max(prefix[i-1]*suffix[i] for i in range(1, n))


    """1961. Check If String Is a Prefix of Array (Easy)
	Given a string s and an array of strings words, determine whether s is a 
	prefix string of words. A string s is a prefix string of words if s can be 
	made by concatenating the first k strings in words for some positive k no 
	larger than words.length. Return true if s is a prefix string of words, or 
	false otherwise.

	Example 1:
	Input: s = "iloveleetcode", words = ["i","love","leetcode","apples"]
	Output: true
	Explanation: s can be made by concatenating "i", "love", and "leetcode" 
	             together.
	
	Example 2:
	Input: s = "iloveleetcode", words = ["apples","i","love","leetcode"]
	Output: false
	Explanation: It is impossible to make s using a prefix of arr.

	Constraints:
	* 1 <= words.length <= 100
	* 1 <= words[i].length <= 20
	* 1 <= s.length <= 1000
	* words[i] and s consist of only lowercase English letters."""

    def isPrefixString(self, s: str, words: List[str]) -> bool:
        i = 0
        for word in words: 
            if s[i:i+len(word)] != word: return False 
            i += len(word)
            if i == len(s): return True 
        return False 


    """1962. Remove Stones to Minimize the Total (Medium)
	You are given a 0-indexed integer array piles, where piles[i] represents 
	the number of stones in the ith pile, and an integer k. You should apply 
	the following operation exactly k times:
	* Choose any piles[i] and remove floor(piles[i] / 2) stones from it.
	Notice that you can apply the operation on the same pile more than once.
	Return the minimum possible total number of stones remaining after applying 
	the k operations. floor(x) is the greatest integer that is smaller than or 
	equal to x (i.e., rounds x down).

	Example 1:
	Input: piles = [5,4,9], k = 2
	Output: 12
	Explanation: Steps of a possible scenario are:
	             - Apply the operation on pile 2. The resulting piles are [5,4,5].
	             - Apply the operation on pile 0. The resulting piles are [3,4,5].
	             The total number of stones in [3,4,5] is 12.
	
	Example 2:
	Input: piles = [4,3,6,7], k = 3
	Output: 12
	Explanation: Steps of a possible scenario are:
	             - Apply the operation on pile 3. The resulting piles are [4,3,3,7].
	             - Apply the operation on pile 4. The resulting piles are [4,3,3,4].
	             - Apply the operation on pile 0. The resulting piles are [2,3,3,4].
	             The total number of stones in [2,3,3,4] is 12.

	Constraints:
	* 1 <= piles.length <= 10^5
	* 1 <= piles[i] <= 10^4
	* 1 <= k <= 10^5"""

    def minStoneSum(self, piles: List[int], k: int) -> int:
        pq = [-x for x in piles]
        heapify(pq)
        for _ in range(k): heapreplace(pq, pq[0]//2)
        return -sum(pq)


    """1963. Minimum Number of Swaps to Make the String Balanced (Medium)
	You are given a 0-indexed string s of even length n. The string consists of 
	exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'. A string 
	is called balanced if and only if:
	* It is the empty string, or
	* It can be written as AB, where both A and B are balanced strings, or
	* It can be written as [C], where C is a balanced string.
	You may swap the brackets at any two indices any number of times. Return 
	the minimum number of swaps to make s balanced.

	Example 1:
	Input: s = "][]["
	Output: 1
	Explanation: You can make the string balanced by swapping index 0 with 
	             index 3. The resulting string is "[[]]".
	
	Example 2:
	Input: s = "]]][[["
	Output: 2
	Explanation: You can do the following to make the string balanced:
	             - Swap index 0 with index 4. s = "[]][[]".
	             - Swap index 1 with index 5. s = "[[][]]".
	             The resulting string is "[[][]]".
	
	Example 3:
	Input: s = "[]"
	Output: 0
	Explanation: The string is already balanced.

	Constraints:
	* n == s.length
	* 2 <= n <= 106
	* n is even.
	* s[i] is either '[' or ']'.
	* The number of opening brackets '[' equals n / 2, and the number of 
	  closing brackets ']' equals n / 2."""

    def minSwaps(self, s: str) -> int:
        ans = prefix = 0 
        for ch in s:
            if ch == "[": prefix += 1
            else: prefix -= 1
            if prefix == -1:
                ans += 1
                prefix = 1
        return ans


    """1964. Find the Longest Valid Obstacle Course at Each Position (Hard)
	You want to build some obstacle courses. You are given a 0-indexed integer 
	array obstacles of length n, where obstacles[i] describes the height of the 
	ith obstacle. For every index i between 0 and n - 1 (inclusive), find the 
	length of the longest obstacle course in obstacles such that:
	* You choose any number of obstacles between 0 and i inclusive.
	* You must include the ith obstacle in the course.
	* You must put the chosen obstacles in the same order as they appear in 
	  obstacles.
	* Every obstacle (except the first) is taller than or the same height as 
	  the obstacle immediately before it.
	Return an array ans of length n, where ans[i] is the length of the longest 
	obstacle course for index i as described above.

	Example 1:
	Input: obstacles = [1,2,3,2]
	Output: [1,2,3,3]
	Explanation: The longest valid obstacle course at each position is:
	             - i = 0: [1], [1] has length 1.
	             - i = 1: [1,2], [1,2] has length 2.
	             - i = 2: [1,2,3], [1,2,3] has length 3.
	             - i = 3: [1,2,3,2], [1,2,2] has length 3.
	
	Example 2:
	Input: obstacles = [2,2,1]
	Output: [1,2,1]
	Explanation: The longest valid obstacle course at each position is:
	             - i = 0: [2], [2] has length 1.
	             - i = 1: [2,2], [2,2] has length 2.
	             - i = 2: [2,2,1], [1] has length 1.
	
	Example 3:
	Input: obstacles = [3,1,5,6,4,2]
	Output: [1,1,2,3,2,2]
	Explanation: The longest valid obstacle course at each position is:
	             - i = 0: [3], [3] has length 1.
	             - i = 1: [3,1], [1] has length 1.
	             - i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.
	             - i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.
	             - i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.
	             - i = 5: [3,1,5,6,4,2], [1,2] has length 2.

	Constraints:
	* n == obstacles.length
	* 1 <= n <= 10^5
	* 1 <= obstacles[i] <= 10^7"""

    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        ans, vals = [], []
        for i, x in enumerate(obstacles): 
            k = bisect_right(vals, x)
            ans.append(k+1)
            if k == len(vals): vals.append(x)
            else: vals[k] = x
        return ans 


    """1966. Binary Searchable Numbers in an Unsorted Array (Medium)
	Consider a function that implements an algorithm similar to Binary Search. 
	The function has two input parameters: sequence is a sequence of integers, 
	and target is an integer value. The purpose of the function is to find if 
	the target exists in the sequence. The pseudocode of the function is as 
	follows:

	func(sequence, target)
	  while sequence is not empty
	    randomly choose an element from sequence as the pivot
	    if pivot = target, return true
	    else if pivot < target, remove pivot and all elements to its left from the sequence
	    else, remove pivot and all elements to its right from the sequence
	  end while
	  return false
	
	When the sequence is sorted, the function works correctly for all values. 
	When the sequence is not sorted, the function does not work for all values, 
	but may still work for some values. Given an integer array nums, 
	representing the sequence, that contains unique numbers and may or may not 
	be sorted, return the number of values that are guaranteed to be found 
	using the function, for every possible pivot selection.

	Example 1:
	Input: nums = [7]
	Output: 1
	Explanation: Searching for value 7 is guaranteed to be found. Since the 
	             sequence has only one element, 7 will be chosen as the pivot. 
	             Because the pivot equals the target, the function will return 
	             true.
	
	Example 2:
	Input: nums = [-1,5,2]
	Output: 1
	Explanation: Searching for value -1 is guaranteed to be found. If -1 was 
	             chosen as the pivot, the function would return true. If 5 was 
	             chosen as the pivot, 5 and 2 would be removed. In the next 
	             loop, the sequence would have only -1 and the function would 
	             return true. If 2 was chosen as the pivot, 2 would be removed. 
	             In the next loop, the sequence would have -1 and 5. No matter 
	             which number was chosen as the next pivot, the function would 
	             find -1 and return true. Searching for value 5 is NOT 
	             guaranteed to be found. If 2 was chosen as the pivot, -1, 5 
	             and 2 would be removed. The sequence would be empty and the 
	             function would return false. Searching for value 2 is NOT 
	             guaranteed to be found. If 5 was chosen as the pivot, 5 and 2 
	             would be removed. In the next loop, the sequence would have 
	             only -1 and the function would return false. Because only -1 
	             is guaranteed to be found, you should return 1.
	 
	Constraints:
	* 1 <= nums.length <= 10^5
	* -10^5 <= nums[i] <= 10^5
	* All the values of nums are unique.

	Follow-up: If nums has duplicates, would you modify your algorithm? If so, 
	           how?"""

    def binarySearchableNumbers(self, nums: List[int]) -> int:
        suffix = [inf]
        for x in reversed(nums): suffix.append(min(suffix[-1], x))
        suffix = suffix[::-1]
        
        ans = 0
        prefix = -inf 
        for i, x in enumerate(nums): 
            prefix = max(prefix, x)
            if prefix == x == suffix[i]: ans += 1
        return ans 


    """1967. Number of Strings That Appear as Substrings in Word (Easy)
	Given an array of strings patterns and a string word, return the number of 
	strings in patterns that exist as a substring in word. A substring is a 
	contiguous sequence of characters within a string.

	Example 1:
	Input: patterns = ["a","abc","bc","d"], word = "abc"
	Output: 3
	Explanation: - "a" appears as a substring in "abc".
	             - "abc" appears as a substring in "abc".
	             - "bc" appears as a substring in "abc".
	             - "d" does not appear as a substring in "abc".
	             3 of the strings in patterns appear as a substring in word.
	
	Example 2:
	Input: patterns = ["a","b","c"], word = "aaaaabbbbb"
	Output: 2
	Explanation: - "a" appears as a substring in "aaaaabbbbb".
	             - "b" appears as a substring in "aaaaabbbbb".
	             - "c" does not appear as a substring in "aaaaabbbbb".
	             2 of the strings in patterns appear as a substring in word.
	
	Example 3:
	Input: patterns = ["a","a","a"], word = "ab"
	Output: 3
	Explanation: Each of the patterns appears as a substring in word "ab".

	Constraints:
	* 1 <= patterns.length <= 100
	* 1 <= patterns[i].length <= 100
	* 1 <= word.length <= 100
	* patterns[i] and word consist of lowercase English letters."""

    def numOfStrings(self, patterns: List[str], word: str) -> int:
        return sum(x in word for x in patterns)


    """1968. Array With Elements Not Equal to Average of Neighbors (Medium)
	You are given a 0-indexed array nums of distinct integers. You want to 
	rearrange the elements in the array such that every element in the 
	rearranged array is not equal to the average of its neighbors. More 
	formally, the rearranged array should have the property such that for every 
	i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not 
	equal to nums[i]. Return any rearrangement of nums that meets the 
	requirements.

	Example 1:
	Input: nums = [1,2,3,4,5]
	Output: [1,2,4,5,3]
	Explanation:
	When i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.
	When i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.
	When i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.

	Example 2:
	Input: nums = [6,2,0,9,7]
	Output: [9,7,6,2,0]
	Explanation:
	When i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.
	When i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.
	When i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.

	Constraints:
	* 3 <= nums.length <= 10^5
	* 0 <= nums[i] <= 10^5"""

    def rearrangeArray(self, nums: List[int]) -> List[int]:
        for i in range(1, len(nums)-1): 
            if nums[i-1] < nums[i] < nums[i+1] or nums[i-1] > nums[i] > nums[i+1]: 
                nums[i], nums[i+1] = nums[i+1], nums[i]
        return nums


    """1969. Minimum Non-Zero Product of the Array Elements (Medium)
	You are given a positive integer p. Consider an array nums (1-indexed) that 
	consists of the integers in the inclusive range [1, 2p - 1] in their binary 
	representations. You are allowed to do the following operation any number 
	of times:
	* Choose two elements x and y from nums.
	* Choose a bit in x and swap it with its corresponding bit in y. 
	  Corresponding bit refers to the bit that is in the same position in the 
	  other integer.
	For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the 
	right, we have x = 1111 and y = 0001. Find the minimum non-zero product of 
	nums after performing the above operation any number of times. Return this 
	product modulo 10^9 + 7. Note: The answer should be the minimum product 
	before the modulo operation is done.

	Example 1:
	Input: p = 1
	Output: 1
	Explanation: nums = [1]. There is only one element, so the product equals 
	             that element.
	
	Example 2:
	Input: p = 2
	Output: 6
	Explanation: nums = [01, 10, 11]. Any swap would either make the product 0 
	             or stay the same. Thus, the array product of 1 * 2 * 3 = 6 is 
	             already minimized.
	
	Example 3:
	Input: p = 3
	Output: 1512
	Explanation: nums = [001, 010, 011, 100, 101, 110, 111]
	             - In the first operation we can swap the leftmost bit of the second and fifth elements.
	                 - The resulting array is [001, 110, 011, 100, 001, 110, 111].
	             - In the second operation we can swap the middle bit of the third and fourth elements.
	                 - The resulting array is [001, 110, 001, 110, 001, 110, 111].
	             The array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.

	Constraints: 1 <= p <= 60"""

    def minNonZeroProduct(self, p: int) -> int:
        x = (1 << p) - 1
        return pow(x-1, (x-1)//2, 1_000_000_007) * x % 1_000_000_007


    """1970. Last Day Where You Can Still Cross (Hard)
	There is a 1-based binary matrix where 0 represents land and 1 represents 
	water. You are given integers row and col representing the number of rows 
	and columns in the matrix, respectively. Initially on day 0, the entire 
	matrix is land. However, each day a new cell becomes flooded with water. 
	You are given a 1-based 2D array cells, where cells[i] = [ri, ci] 
	represents that on the ith day, the cell on the rith row and cith column 
	(1-based coordinates) will be covered with water (i.e., changed to 1).You 
	want to find the last day that it is possible to walk from the top to the 
	bottom by only walking on land cells. You can start from any cell in the 
	top row and end at any cell in the bottom row. You can only travel in the 
	four cardinal directions (left, right, up, and down). Return the last day 
	where it is possible to walk from the top to the bottom by only walking on 
	land cells.

	Example 1:
	Input: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]
	Output: 2
	Explanation: The above image depicts how the matrix changes each day 
	             starting from day 0. The last day where it is possible to 
	             cross from top to bottom is on day 2.
	
	Example 2:
	Input: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]
	Output: 1
	Explanation: The above image depicts how the matrix changes each day 
	             starting from day 0. The last day where it is possible to 
	             cross from top to bottom is on day 1.
	
	Example 3:
	Input: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]
	Output: 3
	Explanation: The above image depicts how the matrix changes each day 
	             starting from day 0. The last day where it is possible to 
	             cross from top to bottom is on day 3.

	Constraints:
	* 2 <= row, col <= 2 * 10^4
	* 4 <= row * col <= 2 * 10^4
	* cells.length == row * col
	* 1 <= ri <= row
	* 1 <= ci <= col
	* All the values of cells are unique.

class UnionFind: 
    def __init__(self, n): 
        self.parent = list(range(n))
        self.rank = [1] * n
        
    def find(self, p): 
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p]) # find w/ path compression 
        return self.parent[p]
    
    def union(self, p, q): 
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False # already connected 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt # union by rank 
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True """
    
    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:
        grid = [[0]*col for _ in range(row)]
        
        n = row * col
        uf = UnionFind(n)
        span = [[n, 0] for _ in range(n)]
        
        for step, (i, j) in enumerate(cells): 
            i, j = i-1, j-1
            grid[i][j] = 1
            x = i*col + j
            for ii, jj in (i-1, j-1), (i-1, j), (i-1, j+1), (i, j-1), (i, j+1), (i+1, j-1), (i+1, j), (i+1, j+1): 
                if 0 <= ii < row and 0 <= jj < col and grid[ii][jj]: 
                    xx = ii*col + jj 
                    r, rr = uf.find(x), uf.find(xx)
                    span[r][0] = span[rr][0] = min(span[r][0], span[rr][0], j, jj)
                    span[r][1] = span[rr][1] = max(span[r][1], span[rr][1], j, jj)
                    if span[r] == [0, col-1]: return step 
                    uf.union(x, xx)


    """1971. Find if Path Exists in Graph (Easy)
	There is a bi-directional graph with n vertices, where each vertex is 
	labeled from 0 to n - 1 (inclusive). The edges in the graph are represented 
	as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a 
	bi-directional edge between vertex ui and vertex vi. Every vertex pair is 
	connected by at most one edge, and no vertex has an edge to itself. You 
	want to determine if there is a valid path that exists from vertex start to 
	vertex end. Given edges and the integers n, start, and end, return true if 
	there is a valid path from start to end, or false otherwise.

	Example 1:
	Input: n = 3, edges = [[0,1],[1,2],[2,0]], start = 0, end = 2
	Output: true
	Explanation: There are two paths from vertex 0 to vertex 2:
	             - 0 → 1 → 2
	             - 0 → 2
	
	Example 2:
	Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], start = 0, end = 5
	Output: false
	Explanation: There is no path from vertex 0 to vertex 5.

	Constraints:
	* 1 <= n <= 2 * 10^5
	* 0 <= edges.length <= 2 * 10^5
	* edges[i].length == 2
	* 1 <= ui, vi <= n - 1
	* ui != vi
	* 1 <= start, end <= n - 1
	* There are no duplicate edges.
	* There are no self edges."""

    def validPath(self, n: int, edges: List[List[int]], start: int, end: int) -> bool:
        graph = {}
        for u, v in edges: 
            graph.setdefault(u, []).append(v)
            graph.setdefault(v, []).append(u)
        
        seen = {start}
        stack = [start]
        while stack: 
            n = stack.pop()
            if n == end: return True 
            for nn in graph.get(n, []): 
                if nn not in seen: 
                    seen.add(nn)
                    stack.append(nn)
        return False 


    """1973. Count Nodes Equal to Sum of Descendants (Medium)
	Given the root of a binary tree, return the number of nodes where the value 
	of the node is equal to the sum of the values of its descendants. A 
	descendant of a node x is any node that is on the path from node x to some 
	leaf node. The sum is considered to be 0 if the node has no descendants.

	Example 1:
	Input: root = [10,3,4,2,1]
	Output: 2
	Explanation: For the node with value 10: The sum of its descendants is 
	             3+4+2+1 = 10. For the node with value 3: The sum of its 
	             descendants is 2+1 = 3.
	
	Example 2:
	Input: root = [2,3,null,2,null]
	Output: 0
	Explanation: No node has a value that is equal to the sum of its descendants.
	
	Example 3:
	Input: root = [0]
	Output: 1
	Explanation: For the node with value 0: The sum of its descendants is 0 
	             since it has no descendants.

	Constraints:
	* The number of nodes in the tree is in the range [1, 10^5].
	* 0 <= Node.val <= 10^5"""

    def equalToDescendants(self, root: Optional[TreeNode]) -> int:
        
        def fn(node):
            """Return sum of nodes' value on sub-tree."""
            nonlocal ans
            if not node: return 0 
            sm = fn(node.left) + fn(node.right)
            if sm == node.val: ans += 1
            return sm + node.val 
        
        ans = 0 
        fn(root)
        return ans


    """1974. Minimum Time to Type Word Using Special Typewriter (Easy)
	There is a special typewriter with lowercase English letters 'a' to 'z' 
	arranged in a circle with a pointer. A character can only be typed if the 
	pointer is pointing to that character. The pointer is initially pointing to 
	the character 'a'. Each second, you may perform one of the following 
	operations:
	* Move the pointer one character counterclockwise or clockwise.
	* Type the character the pointer is currently on.
	Given a string word, return the minimum number of seconds to type out the 
	characters in word.

	Example 1:
	Input: word = "abc"
	Output: 5
	Explanation: The characters are printed as follows:
	             - Type the character 'a' in 1 second since the pointer is 
	               initially on 'a'.
	             - Move the pointer clockwise to 'b' in 1 second.
	             - Type the character 'b' in 1 second.
	             - Move the pointer clockwise to 'c' in 1 second.
	             - Type the character 'c' in 1 second.
	
	Example 2:
	Input: word = "bza"
	Output: 7
	Explanation: The characters are printed as follows:
	             - Move the pointer clockwise to 'b' in 1 second.
	             - Type the character 'b' in 1 second.
	             - Move the pointer counterclockwise to 'z' in 2 seconds.
	             - Type the character 'z' in 1 second.
	             - Move the pointer clockwise to 'a' in 1 second.
	             - Type the character 'a' in 1 second.
	
	Example 3:
	Input: word = "zjpc"
	Output: 34
	Explanation: The characters are printed as follows:
	             - Move the pointer counterclockwise to 'z' in 1 second.
	             - Type the character 'z' in 1 second.
	             - Move the pointer clockwise to 'j' in 10 seconds.
	             - Type the character 'j' in 1 second.
	             - Move the pointer clockwise to 'p' in 6 seconds.
	             - Type the character 'p' in 1 second.
	             - Move the pointer counterclockwise to 'c' in 13 seconds.
	             - Type the character 'c' in 1 second.

	Constraints:
	* 1 <= word.length <= 100
	* word consists of lowercase English letters."""

    def minTimeToType(self, word: str) -> int:
        ans = len(word)
        prev = "a"
        for ch in word: 
            val = (ord(ch) - ord(prev)) % 26 
            ans += min(val, 26 - val)
            prev = ch
        return ans 


    """1975. Maximum Matrix Sum (Medium)
	You are given an n x n integer matrix. You can do the following operation 
	any number of times:
	* Choose any two adjacent elements of matrix and multiply each of them by 
	  -1.
	Two elements are considered adjacent if and only if they share a border.
	Your goal is to maximize the summation of the matrix's elements. Return the 
	maximum sum of the matrix's elements using the operation mentioned above.

	Example 1:
	Input: matrix = [[1,-1],[-1,1]]
	Output: 4
	Explanation: We can follow the following steps to reach sum equals 4:
	             - Multiply the 2 elements in the first row by -1.
	             - Multiply the 2 elements in the first column by -1.

	Example 2:
	Input: matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]
	Output: 16
	Explanation: We can follow the following step to reach sum equals 16:
	             - Multiply the 2 last elements in the second row by -1.

	Constraints:
	* n == matrix.length == matrix[i].length
	* 2 <= n <= 250
	* -10^5 <= matrix[i][j] <= 10^5"""

    def maxMatrixSum(self, matrix: List[List[int]]) -> int:
        ans = mult = 0
        val = inf 
        for i in range(len(matrix)): 
            for j in range(len(matrix)):
                ans += abs(matrix[i][j])
                val = min(val, abs(matrix[i][j]))
                if matrix[i][j] < 0: mult ^= 1
        return ans - 2*mult*val


    """1976. Number of Ways to Arrive at Destination (Medium)
	You are in a city that consists of n intersections numbered from 0 to n - 1 
	with bi-directional roads between some intersections. The inputs are 
	generated such that you can reach any intersection from any other 
	intersection and that there is at most one road between any two 
	intersections. You are given an integer n and a 2D integer array roads 
	where roads[i] = [ui, vi, timei] means that there is a road between 
	intersections ui and vi that takes timei minutes to travel. You want to 
	know in how many ways you can travel from intersection 0 to intersection 
	n - 1 in the shortest amount of time. Return the number of ways you can 
	arrive at your destination in the shortest amount of time. Since the answer 
	may be large, return it modulo 10^9 + 7.

	Example 1:
	Input: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]
	Output: 4
	Explanation: The shortest amount of time it takes to go from intersection 0 
	             to intersection 6 is 7 minutes. The four ways to get there in 
	             7 minutes are:
	             - 0 ➝ 6
	             - 0 ➝ 4 ➝ 6
	             - 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6
	             - 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6
	
	Example 2:
	Input: n = 2, roads = [[1,0,10]]
	Output: 1
	Explanation: There is only one way to go from intersection 0 to 
	             intersection 1, and it takes 10 minutes.

	Constraints:
	* 1 <= n <= 200
	* n - 1 <= roads.length <= n * (n - 1) / 2
	* roads[i].length == 3
	* 0 <= ui, vi <= n - 1
	* 1 <= timei <= 10^9
	* ui != vi
	* There is at most one road connecting any two intersections.
	* You can reach any intersection from any other intersection."""

    def countPaths(self, n: int, roads: List[List[int]]) -> int:
        graph = {}
        for u, v, time in roads: 
            graph.setdefault(u, []).append((v, time))
            graph.setdefault(v, []).append((u, time))
        
        # modified Dijkstra's algo
        dist = [inf] * n
        dist[0] = 0
        ways = [0] * n
        ways[0] = 1
        
        pq = [(0, 0)]
        while pq: 
            d, u = heappop(pq)
            if d > dist[-1]: break
            if d == dist[u]: 
                for v, time in graph.get(u, []): 
                    if dist[u] + time < dist[v]: 
                        dist[v] = dist[u] + time
                        ways[v] = ways[u]
                        heappush(pq, (dist[v], v))
                    elif dist[u] + time == dist[v]: ways[v] += ways[u]
        return ways[-1] % 1_000_000_007


    """1977. Number of Ways to Separate Numbers (Hard)
	You wrote down many positive integers in a string called num. However, you 
	realized that you forgot to add commas to seperate the different numbers. 
	You remember that the list of integers was non-decreasing and that no 
	integer had leading zeros. Return the number of possible lists of integers 
	that you could have written down to get the string num. Since the answer 
	may be large, return it modulo 10^9 + 7.

	Example 1:
	Input: num = "327"
	Output: 2
	Explanation: You could have written down the numbers:
	             3, 27
	             327
	
	Example 2:
	Input: num = "094"
	Output: 0
	Explanation: No numbers can have leading zeros and all numbers must be 
	             positive.
	
	Example 3:
	Input: num = "0"
	Output: 0
	Explanation: No numbers can have leading zeros and all numbers must be 
	             positive.
	
	Example 4:
	Input: num = "9999999999999"
	Output: 101
	 
	Constraints:
	* 1 <= num.length <= 3500
	* num consists of digits '0' through '9'."""

    def numberOfCombinations(self, num: str) -> int:
        n = len(num)
        lcs = [[0]*(n+1) for _ in range(n)]
        for i in reversed(range(n)): 
            for j in reversed(range(i+1, n)): 
                if num[i] == num[j]: lcs[i][j] = 1 + lcs[i+1][j+1]
        
        def cmp(i, j, d): 
            """Return True if """
            m = lcs[i][j]
            if m >= d: return True 
            return num[i+m] <= num[j+m]
        
        dp = [[0]*(n+1) for _ in range(n)]
        for i in range(n): 
            if num[i] != "0": 
                for j in range(i+1, n+1): 
                    if i == 0: dp[i][j] = 1
                    else: 
                        dp[i][j] = dp[i][j-1]
                        if 2*i-j >= 0 and cmp(2*i-j, i, j-i): dp[i][j] += dp[2*i-j][i]
                        if 2*i-j+1 >= 0 and not cmp(2*i-j+1, i, j-i-1): dp[i][j] += dp[2*i-j+1][i]
        return sum(dp[i][n] for i in range(n)) % 1_000_000_007


    """1979. Find Greatest Common Divisor of Array (Easy)
	Given an integer array nums, return the greatest common divisor of the 
	smallest number and largest number in nums. The greatest common divisor of 
	two numbers is the largest positive integer that evenly divides both 
	numbers.

	Example 1:
	Input: nums = [2,5,6,9,10]
	Output: 2
	Explanation: The smallest number in nums is 2. The largest number in nums 
	             is 10. The greatest common divisor of 2 and 10 is 2.
	
	Example 2:
	Input: nums = [7,5,6,8,3]
	Output: 1
	Explanation: The smallest number in nums is 3. The largest number in nums 
	             is 8. The greatest common divisor of 3 and 8 is 1.
	
	Example 3:
	Input: nums = [3,3]
	Output: 3
	Explanation: The smallest number in nums is 3. The largest number in nums 
	             is 3. The greatest common divisor of 3 and 3 is 3.

	Constraints:
	* 2 <= nums.length <= 1000
	* 1 <= nums[i] <= 1000"""

    def findGCD(self, nums: List[int]) -> int:
        return gcd(min(nums), max(nums))


    """1980. Find Unique Binary String (Medium)
	Given an array of strings nums containing n unique binary strings each of 
	length n, return a binary string of length n that does not appear in nums. 
	If there are multiple answers, you may return any of them.

	Example 1:
	Input: nums = ["01","10"]
	Output: "11"
	Explanation: "11" does not appear in nums. "00" would also be correct.

	Example 2:
	Input: nums = ["00","01"]
	Output: "11"
	Explanation: "11" does not appear in nums. "10" would also be correct.

	Example 3:
	Input: nums = ["111","011","001"]
	Output: "101"
	Explanation: "101" does not appear in nums. "000", "010", "100", and "110" 
	             would also be correct.

	Constraints:
	* n == nums.length
	* 1 <= n <= 16
	* nums[i].length == n
	* nums[i] is either '0' or '1'.
	* All the strings of nums are unique."""

    def findDifferentBinaryString(self, nums: List[str]) -> str:
        ans = []
        for i, x in enumerate(nums): 
            if x[i] == "1": ans.append("0")
            else: ans.append("1")
        return "".join(ans)


    """1981. Minimize the Difference Between Target and Chosen Elements (Medium)
	You are given an m x n integer matrix mat and an integer target. Choose one 
	integer from each row in the matrix such that the absolute difference 
	between target and the sum of the chosen elements is minimized. Return the 
	minimum absolute difference. The absolute difference between two numbers a 
	and b is the absolute value of a - b.

	Example 1:
	Input: mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13
	Output: 0
	Explanation: One possible choice is to:
	             - Choose 1 from the first row.
	             - Choose 5 from the second row.
	             - Choose 7 from the third row.
	             The sum of the chosen elements is 13, which equals the target, 
	             so the absolute difference is 0.
	
	Example 2:
	Input: mat = [[1],[2],[3]], target = 100
	Output: 94
	Explanation: The best possible choice is to:
	             - Choose 1 from the first row.
	             - Choose 2 from the second row.
	             - Choose 3 from the third row.
	             The sum of the chosen elements is 6, and the absolute 
	             difference is 94.
	
	Example 3:
	Input: mat = [[1,2,9,8,7]], target = 6
	Output: 1
	Explanation: The best choice is to choose 7 from the first row. The 
	             absolute difference is 1.

	Constraints:
	* m == mat.length
	* n == mat[i].length
	* 1 <= m, n <= 70
	* 1 <= mat[i][j] <= 70
	* 1 <= target <= 800"""

    def minimizeTheDifference(self, mat: List[List[int]], target: int) -> int:
        bits = 0b1
        for row in mat: 
            temp = 0
            for x in row: temp |= bits << x
            bits = temp 
        
        for x in range(5000): 
            if bits >> (target+x) & 1 or x <= target and bits >> (target-x) & 1: return x


    """1982. Find Array Given Subset Sums (Hard)
	You are given an integer n representing the length of an unknown array that 
	you are trying to recover. You are also given an array sums containing the 
	values of all 2n subset sums of the unknown array (in no particular order).
	Return the array ans of length n representing the unknown array. If 
	multiple answers exist, return any of them. An array sub is a subset of an 
	array arr if sub can be obtained from arr by deleting some (possibly zero 
	or all) elements of arr. The sum of the elements in sub is one possible 
	subset sum of arr. The sum of an empty array is considered to be 0. Note 
	that test cases are generated such that there will always be at least one 
	correct answer.

	Example 1:
	Input: n = 3, sums = [-3,-2,-1,0,0,1,2,3]
	Output: [1,2,-3]
	Explanation: [1,2,-3] is able to achieve the given subset sums:
	             - []: sum is 0
	             - [1]: sum is 1
	             - [2]: sum is 2
	             - [1,2]: sum is 3
	             - [-3]: sum is -3
	             - [1,-3]: sum is -2
	             - [2,-3]: sum is -1
	             - [1,2,-3]: sum is 0
	             Note that any permutation of [1,2,-3] and also any permutation 
	             of [-1,-2,3] will also be accepted.
	
	Example 2:
	Input: n = 2, sums = [0,0,0,0]
	Output: [0,0]
	Explanation: The only correct answer is [0,0].

	Example 3:
	Input: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]
	Output: [0,-1,4,5]
	Explanation: [0,-1,4,5] is able to achieve the given subset sums.

	Constraints:
	* 1 <= n <= 15
	* sums.length == 2n
	* -10^4 <= sums[i] <= 10^4"""

    def recoverArray(self, n: int, sums: List[int]) -> List[int]:
        sums.sort()
        ans = []
        for _ in range(n): 
            diff = sums[1] - sums[0]
            ss0, ss1 = [], []
            freq = defaultdict(int)
            on = False 
            for i, x in enumerate(sums): 
                if not freq[x]: 
                    ss0.append(x)
                    freq[x+diff] += 1
                    if x == 0: on = True 
                else: 
                    ss1.append(x)
                    freq[x] -= 1
            if on: 
                ans.append(diff)
                sums = ss0 
            else: 
                ans.append(-diff)
                sums = ss1
        return ans 


    """1983. Widest Pair of Indices With Equal Range Sum (Medium)
	You are given two 0-indexed binary arrays nums1 and nums2. Find the widest 
	pair of indices (i, j) such that i <= j and 
	nums1[i] + nums1[i+1] + ... + nums1[j] == nums2[i] + nums2[i+1] + ... + nums2[j].
	The widest pair of indices is the pair with the largest distance between i 
	and j. The distance between a pair of indices is defined as j - i + 1. 
	Return the distance of the widest pair of indices. If no pair of indices 
	meets the conditions, return 0.

	Example 1:
	Input: nums1 = [1,1,0,1], nums2 = [0,1,1,0]
	Output: 3
	Explanation: If i = 1 and j = 3:
	             nums1[1] + nums1[2] + nums1[3] = 1 + 0 + 1 = 2.
	             nums2[1] + nums2[2] + nums2[3] = 1 + 1 + 0 = 2.
	             The distance between i and j is j - i + 1 = 3 - 1 + 1 = 3.
	
	Example 2:
	Input: nums1 = [0,1], nums2 = [1,1]
	Output: 1
	Explanation: If i = 1 and j = 1:
	             nums1[1] = 1.
	             nums2[1] = 1.
	             The distance between i and j is j - i + 1 = 1 - 1 + 1 = 1.
	
	Example 3:
	Input: nums1 = [0], nums2 = [1]
	Output: 0
	Explanation: There are no pairs of indices that meet the requirements.

	Constraints:
	* n == nums1.length == nums2.length
	* 1 <= n <= 105
	* nums1[i] is either 0 or 1.
	* nums2[i] is either 0 or 1."""

    def widestPairOfIndices(self, nums1: List[int], nums2: List[int]) -> int:
        ans = prefix = 0
        seen = {0: -1}
        for i in range(len(nums1)): 
            prefix += nums1[i] - nums2[i]
            if prefix in seen: ans = max(ans, i - seen[prefix])
            seen.setdefault(prefix, i)
        return ans 


    """1984. Minimum Difference Between Highest and Lowest of K Scores (Easy)
	You are given a 0-indexed integer array nums, where nums[i] represents the 
	score of the ith student. You are also given an integer k. Pick the scores 
	of any k students from the array so that the difference between the highest 
	and the lowest of the k scores is minimized. Return the minimum possible 
	difference.

	Example 1:
	Input: nums = [90], k = 1
	Output: 0
	Explanation: There is one way to pick score(s) of one student:
	             - [90]. The difference between the highest and lowest score is 90 - 90 = 0.
	             The minimum possible difference is 0.
	
	Example 2:
	Input: nums = [9,4,1,7], k = 2
	Output: 2
	Explanation: There are six ways to pick score(s) of two students:
	             - [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.
	             - [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.
	             - [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.
	             - [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.
	             - [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.
	             - [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.
	             The minimum possible difference is 2.

	Constraints:
	* 1 <= k <= nums.length <= 1000
	* 0 <= nums[i] <= 10^5"""

    def minimumDifference(self, nums: List[int], k: int) -> int:
        nums.sort()
        return min(nums[i+k-1]-nums[i] for i in range(len(nums)-k+1))


    """1985. Find the Kth Largest Integer in the Array (Medium)
	You are given an array of strings nums and an integer k. Each string in 
	nums represents an integer without leading zeros. Return the string that 
	represents the kth largest integer in nums. Note: Duplicate numbers should 
	be counted distinctly. For example, if nums is ["1","2","2"], "2" is the 
	first largest integer, "2" is the second-largest integer, and "1" is the 
	third-largest integer.

	Example 1:
	Input: nums = ["3","6","7","10"], k = 4
	Output: "3"
	Explanation: The numbers in nums sorted in non-decreasing order are 
	             ["3","6","7","10"]. The 4th largest integer in nums is "3".
	
	Example 2:
	Input: nums = ["2","21","12","1"], k = 3
	Output: "2"
	Explanation: The numbers in nums sorted in non-decreasing order are 
	             ["1","2","12","21"]. The 3rd largest integer in nums is "2".
	
	Example 3:
	Input: nums = ["0","0"], k = 2
	Output: "0"
	Explanation: The numbers in nums sorted in non-decreasing order are 
	             ["0","0"]. The 2nd largest integer in nums is "0".

	Constraints:
	* 1 <= k <= nums.length <= 10^4
	* 1 <= nums[i].length <= 100
	* nums[i] consists of only digits.
	* nums[i] will not have any leading zeros."""

    def kthLargestNumber(self, nums: List[str], k: int) -> str:
        nums = [int(x) for x in nums]
        shuffle(nums)
        
        def part(lo, hi): 
            """Return partition of nums[lo:hi]."""
            i, j = lo+1, hi-1
            while i <= j: 
                if nums[i] < nums[lo]: i += 1
                elif nums[lo] < nums[j]: j -= 1
                else: 
                    nums[i], nums[j] = nums[j], nums[i]
                    i += 1
                    j -= 1
            nums[lo], nums[j] = nums[j], nums[lo]
            return j 
        
        lo, hi = 0, len(nums)
        while lo < hi: 
            mid = part(lo, hi)
            if mid == len(nums)-k: return str(nums[mid])
            elif mid < len(nums)-k: lo = mid + 1
            else: hi = mid


    """1986. Minimum Number of Work Sessions to Finish the Tasks (Medium)
	There are n tasks assigned to you. The task times are represented as an 
	integer array tasks of length n, where the ith task takes tasks[i] hours to 
	finish. A work session is when you work for at most sessionTime consecutive 
	hours and then take a break. You should finish the given tasks in a way 
	that satisfies the following conditions:
	* If you start a task in a work session, you must complete it in the same 
	  work session.
	* You can start a new task immediately after finishing the previous one.
	* You may complete the tasks in any order.
	Given tasks and sessionTime, return the minimum number of work sessions 
	needed to finish all the tasks following the conditions above. The tests 
	are generated such that sessionTime is greater than or equal to the maximum 
	element in tasks[i].

	Example 1:
	Input: tasks = [1,2,3], sessionTime = 3
	Output: 2
	Explanation: You can finish the tasks in two work sessions.
	             - First work session: finish the first and the second tasks in 
	               1 + 2 = 3 hours.
	             - Second work session: finish the third task in 3 hours.
	
	Example 2:
	Input: tasks = [3,1,3,1,1], sessionTime = 8
	Output: 2
	Explanation: You can finish the tasks in two work sessions.
	             - First work session: finish all the tasks except the last one 
	               in 3 + 1 + 3 + 1 = 8 hours.
	             - Second work session: finish the last task in 1 hour.
	
	Example 3:
	Input: tasks = [1,2,3,4,5], sessionTime = 15
	Output: 1
	Explanation: You can finish all the tasks in one work session.

	Constraints:
	* n == tasks.length
	* 1 <= n <= 14
	* 1 <= tasks[i] <= 10
	* max(tasks[i]) <= sessionTime <= 15"""

    def minSessions(self, tasks: List[int], sessionTime: int) -> int:
        
        @cache
        def fn(mask, rem):
            """Return minimum work sessions to finish tasks indicated by set bits in mask."""
            if not mask: return 0 # done 
            ans = inf 
            for i, x in enumerate(tasks): 
                if mask & (1<<i): 
                    if x <= rem: ans = min(ans, fn(mask ^ (1<<i), rem - x))
                    else: ans = min(ans, 1 + fn(mask ^ (1<<i), sessionTime - x))
            return ans
        
        return fn((1<<len(tasks))-1, 0)


    """1987. Number of Unique Good Subsequences (Hard)
	You are given a binary string binary. A subsequence of binary is considered 
	good if it is not empty and has no leading zeros (with the exception of "0").
	Find the number of unique good subsequences of binary. For example, if 
	binary = "001", then all the good subsequences are ["0", "0", "1"], so the 
	unique good subsequences are "0" and "1". Note that subsequences "00", "01", 
	and "001" are not good because they have leading zeros. Return the number 
	of unique good subsequences of binary. Since the answer may be very large, 
	return it modulo 10^9 + 7. A subsequence is a sequence that can be derived 
	from another sequence by deleting some or no elements without changing the 
	order of the remaining elements.

	Example 1:
	Input: binary = "001"
	Output: 2
	Explanation: The good subsequences of binary are ["0", "0", "1"]. The 
	             unique good subsequences are "0" and "1".
	
	Example 2:
	Input: binary = "11"
	Output: 2
	Explanation: The good subsequences of binary are ["1", "1", "11"]. The 
	             unique good subsequences are "1" and "11".
	
	Example 3:
	Input: binary = "101"
	Output: 5
	Explanation: The good subsequences of binary are ["1", "0", "1", "10", "11", 
	             "101"]. The unique good subsequences are "0", "1", "10", "11", 
	             and "101".

	Constraints:
	* 1 <= binary.length <= 10^5
	* binary consists of only '0's and '1's."""

    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:
        f0 = f1 = 0
        for ch in binary: 
            if ch == "0": f0 += f1
            else: f1 += f0 + 1
        return (f0 + f1 + int("0" in binary)) % 1_000_000_007


    """1989. Maximum Number of People That Can Be Caught in Tag (Medium)
	You are playing a game of tag with your friends. In tag, people are divided 
	into two teams: people who are "it", and people who are not "it". The 
	people who are "it" want to catch as many people as possible who are not 
	"it". You are given a 0-indexed integer array team containing only zeros 
	(denoting people who are not "it") and ones (denoting people who are "it"), 
	and an integer dist. A person who is "it" at index i can catch any one 
	person whose index is in the range [i - dist, i + dist] (inclusive) and is 
	not "it". Return the maximum number of people that the people who are "it" 
	can catch.

	Example 1:
	Input: team = [0,1,0,1,0], dist = 3
	Output: 2
	Explanation: The person who is "it" at index 1 can catch people in the 
	             range [i-dist, i+dist] = [1-3, 1+3] = [-2, 4]. They can catch 
	             the person who is not "it" at index 2. The person who is "it" 
	             at index 3 can catch people in the range [i-dist, i+dist] = 
	             [3-3, 3+3] = [0, 6]. They can catch the person who is not "it" 
	             at index 0. The person who is not "it" at index 4 will not be 
	             caught because the people at indices 1 and 3 are already 
	             catching one person.
	
	Example 2:
	Input: team = [1], dist = 1
	Output: 0
	Explanation: There are no people who are not "it" to catch.
	
	Example 3:
	Input: team = [0], dist = 1
	Output: 0
	Explanation: There are no people who are "it" to catch people.

	Constraints:
	* 1 <= team.length <= 10^5
	* 0 <= team[i] <= 1
	* 1 <= dist <= team.length"""

    def catchMaximumAmountofPeople(self, team: List[int], dist: int) -> int:
        ans = 0 
        q0, q1 = deque(), deque()
        for i, x in enumerate(team): 
            if q0 and q0[0] < i-dist: q0.popleft()
            if q1 and q1[0] < i-dist: q1.popleft()
            if x == 0: 
                if q1: 
                    ans += 1
                    q1.popleft()
                else: q0.append(i)
            else: 
                if q0: 
                    ans += 1
                    q0.popleft()
                else: q1.append(i)
        return ans 


    """1991. Find the Middle Index in Array (Easy)
	Given a 0-indexed integer array nums, find the leftmost middleIndex (i.e., 
	the smallest amongst all the possible ones). A middleIndex is an index 
	where 
	nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1].
	If middleIndex == 0, the left side sum is considered to be 0. Similarly, if 
	middleIndex == nums.length - 1, the right side sum is considered to be 0. 
	Return the leftmost middleIndex that satisfies the condition, or -1 if 
	there is no such index.

	Example 1:
	Input: nums = [2,3,-1,8,4]
	Output: 3
	Explanation: The sum of the numbers before index 3 is: 2 + 3 + -1 = 4
	             The sum of the numbers after index 3 is: 4 = 4
	
	Example 2:
	Input: nums = [1,-1,4]
	Output: 2
	Explanation: The sum of the numbers before index 2 is: 1 + -1 = 0
	             The sum of the numbers after index 2 is: 0
	
	Example 3:
	Input: nums = [2,5]
	Output: -1
	Explanation: There is no valid middleIndex.
	
	Example 4:
	Input: nums = [1]
	Output: 0
	Explantion: The sum of the numbers before index 0 is: 0
	            The sum of the numbers after index 0 is: 0

	Constraints:
	* 1 <= nums.length <= 100
	* -1000 <= nums[i] <= 1000"""

    def findMiddleIndex(self, nums: List[int]) -> int:
        total = sum(nums)
        prefix = 0
        for i, x in enumerate(nums): 
            if 2*prefix == total - x: return i
            prefix += x
        return -1


    """1992. Find All Groups of Farmland (Medium)
	You are given a 0-indexed m x n binary matrix land where a 0 represents a 
	hectare of forested land and a 1 represents a hectare of farmland. To keep 
	the land organized, there are designated rectangular areas of hectares that 
	consist entirely of farmland. These rectangular areas are called groups. No 
	two groups are adjacent, meaning farmland in one group is not four-
	directionally adjacent to another farmland in a different group. land can 
	be represented by a coordinate system where the top left corner of land is 
	(0, 0) and the bottom right corner of land is (m-1, n-1). Find the 
	coordinates of the top left and bottom right corner of each group of 
	farmland. A group of farmland with a top left corner at (r1, c1) and a 
	bottom right corner at (r2, c2) is represented by the 4-length array 
	[r1, c1, r2, c2]. Return a 2D array containing the 4-length arrays 
	described above for each group of farmland in land. If there are no groups 
	of farmland, return an empty array. You may return the answer in any order.

	Example 1:
	Input: land = [[1,0,0],[0,1,1],[0,1,1]]
	Output: [[0,0,0,0],[1,1,2,2]]
	Explanation: The first group has a top left corner at land[0][0] and a 
	             bottom right corner at land[0][0]. The second group has a top 
	             left corner at land[1][1] and a bottom right corner at 
	             land[2][2].
	
	Example 2:
	Input: land = [[1,1],[1,1]]
	Output: [[0,0,1,1]]
	Explanation: The first group has a top left corner at land[0][0] and a 
	             bottom right corner at land[1][1].
	
	Example 3:
	Input: land = [[0]]
	Output: []
	Explanation: There are no groups of farmland.

	Constraints:
	* m == land.length
	* n == land[i].length
	* 1 <= m, n <= 300
	* land consists of only 0's and 1's.
	* Groups of farmland are rectangular in shape."""

    def findFarmland(self, land: List[List[int]]) -> List[List[int]]:
        m, n = len(land), len(land[0])
        ans = []
        for i in range(m):
            for j in range(n): 
                if land[i][j]: # found farmland
                    mini, minj = i, j 
                    maxi, maxj = i, j 
                    stack = [(i, j)]
                    land[i][j] = 0 # mark as visited 
                    while stack: 
                        i, j = stack.pop()
                        for ii, jj in (i-1, j), (i, j-1), (i, j+1), (i+1, j): 
                            if 0 <= ii < m and 0 <= jj < n and land[ii][jj]: 
                                stack.append((ii, jj))
                                land[ii][jj] = 0 
                                maxi = max(maxi, ii)
                                maxj = max(maxj, jj)
                    ans.append([mini, minj, maxi, maxj])
        return ans 


    """1994. The Number of Good Subsets (Hard)
	You are given an integer array nums. We call a subset of nums good if its 
	product can be represented as a product of one or more distinct prime 
	numbers. 
	* For example, if nums = [1, 2, 3, 4]:
	  + [2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 
	    6 = 2*3, and 3 = 3 respectively.
	  + [1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 
	    respectively.
	Return the number of different good subsets in nums modulo 10^9 + 7. A 
	subset of nums is any array that can be obtained by deleting some (possibly 
	none or all) elements from nums. Two subsets are different if and only if 
	the chosen indices to delete are different.

	Example 1:
	Input: nums = [1,2,3,4]
	Output: 6
	Explanation: The good subsets are:
	             - [1,2]: product is 2, which is the product of distinct prime 2.
	             - [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.
	             - [1,3]: product is 3, which is the product of distinct prime 3.
	             - [2]: product is 2, which is the product of distinct prime 2.
	             - [2,3]: product is 6, which is the product of distinct primes 2 and 3.
	             - [3]: product is 3, which is the product of distinct prime 3.
	
	Example 2:
	Input: nums = [4,2,3,15]
	Output: 5
	Explanation: The good subsets are:
	             - [2]: product is 2, which is the product of distinct prime 2.
	             - [2,3]: product is 6, which is the product of distinct primes 2 and 3.
	             - [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.
	             - [3]: product is 3, which is the product of distinct prime 3.
	             - [15]: product is 15, which is the product of distinct primes 3 and 5.

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 30"""

    def numberOfGoodSubsets(self, nums: List[int]) -> int:
        freq = [0] * 31
        for x in nums: freq[x] += 1
        
        masks = [0] * 31
        for x in range(1, 31): 
            if x == 1: masks[x] = 0b10
            else: 
                bits = 0
                xx = x
                for k in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29): 
                    while xx % k == 0: 
                        if (bits >> k) & 1: break # repeated factors 
                        bits ^= 1 << k
                        xx //= k
                    else: continue 
                    break 
                else: masks[x] = bits
                    
        @cache
        def fn(x, m): 
            """Return number of good subsets."""
            if x == 31: return int(m > 2)
            ans = fn(x+1, m)
            if freq[x] and masks[x]: 
                if x == 1: ans *= 2**freq[x]
                elif not m & masks[x]: ans += freq[x] * fn(x+1, m | masks[x])
            return ans % 1_000_000_007
        
        return fn(1, 0)


    """1995. Count Special Quadruplets (Easy)
	Given a 0-indexed integer array nums, return the number of distinct 
	quadruplets (a, b, c, d) such that:
	* nums[a] + nums[b] + nums[c] == nums[d], and
	* a < b < c < d

	Example 1:
	Input: nums = [1,2,3,6]
	Output: 1
	Explanation: The only quadruplet that satisfies the requirement is 
	             (0, 1, 2, 3) because 1 + 2 + 3 == 6.
	
	Example 2:
	Input: nums = [3,3,6,4,5]
	Output: 0
	Explanation: There are no such quadruplets in [3,3,6,4,5].

	Example 3:
	Input: nums = [1,1,1,3,5]
	Output: 4
	Explanation: The 4 quadruplets that satisfy the requirement are:
	             - (0, 1, 2, 3): 1 + 1 + 1 == 3
	             - (0, 1, 3, 4): 1 + 1 + 3 == 5
	             - (0, 2, 3, 4): 1 + 1 + 3 == 5
	             - (1, 2, 3, 4): 1 + 1 + 3 == 5

	Constraints:
	* 4 <= nums.length <= 50
	* 1 <= nums[i] <= 100"""

    def countQuadruplets(self, nums: List[int]) -> int:
        ans = 0
        freq = defaultdict(int)
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                for k in range(j+1, len(nums)):
                    ans += freq[nums[k] - nums[i] - nums[j]]
            freq[nums[i]] += 1
        return ans 


    """1996. The Number of Weak Characters in the Game (Medium)
	You are playing a game that contains multiple characters, and each of the 
	characters has two main properties: attack and defense. You are given a 2D 
	integer array properties where properties[i] = [attacki, defensei] 
	represents the properties of the ith character in the game. A character is 
	said to be weak if any other character has both attack and defense levels 
	strictly greater than this character's attack and defense levels. More 
	formally, a character i is said to be weak if there exists another 
	character j where attackj > attacki and defensej > defensei. Return the 
	number of weak characters.

	Example 1:
	Input: properties = [[5,5],[6,3],[3,6]]
	Output: 0
	Explanation: No character has strictly greater attack and defense than the 
	             other.
	
	Example 2:
	Input: properties = [[2,2],[3,3]]
	Output: 1
	Explanation: The first character is weak because the second character has a 
	             strictly greater attack and defense.
	
	Example 3:
	Input: properties = [[1,5],[10,4],[4,3]]
	Output: 1
	Explanation: The third character is weak because the second character has a 
	             strictly greater attack and defense.

	Constraints:
	* 2 <= properties.length <= 10^5
	* properties[i].length == 2
	* 1 <= attacki, defensei <= 10^5"""

    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:
        ans = prefix = 0 
        for _, d in sorted(properties, key=lambda x: (-x[0], x[1])):
            if d < prefix: ans += 1
            prefix = max(prefix, d)
        return ans


    """1997. First Day Where You Have Been in All the Rooms (Medium)
	There are n rooms you need to visit, labeled from 0 to n - 1. Each day is 
	labeled, starting from 0. You will go in and visit one room a day. 
	Initially on day 0, you visit room 0. The order you visit the rooms for the 
	coming days is determined by the following rules and a given 0-indexed 
	array nextVisit of length n:
	* Assuming that on a day, you visit room i,
	* if you have been in room i an odd number of times (including the current 
	  visit), on the next day you will visit the room specified by nextVisit[i] 
	  where 0 <= nextVisit[i] <= i;
	* if you have been in room i an even number of times (including the current 
	  visit), on the next day you will visit room (i + 1) mod n.
	Return the label of the first day where you have been in all the rooms. It 
	can be shown that such a day exists. Since the answer may be very large, 
	return it modulo 10^9 + 7.

	Example 1:
	Input: nextVisit = [0,0]
	Output: 2
	Explanation:
	- On day 0, you visit room 0. The total times you have been in room 0 is 1, 
	  which is odd. On the next day you will visit room nextVisit[0] = 0
	- On day 1, you visit room 0, The total times you have been in room 0 is 2, 
	  which is even. On the next day you will visit room (0 + 1) mod 2 = 1
	- On day 2, you visit room 1. This is the first day where you have been in 
	  all the rooms.
	
	Example 2:
	Input: nextVisit = [0,0,2]
	Output: 6
	Explanation: Your room visiting order for each day is: [0,0,1,0,0,1,2,...]. 
	             Day 6 is the first day where you have been in all the rooms.
	
	Example 3:
	Input: nextVisit = [0,1,2,0]
	Output: 6
	Explanation: Your room visiting order for each day is: [0,0,1,1,2,2,3,...].
	             Day 6 is the first day where you have been in all the rooms.

	Constraints:
	* n == nextVisit.length
	* 2 <= n <= 10^5
	* 0 <= nextVisit[i] <= i"""

    def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:
        odd = [0]
        even = [1]
        for i in range(1, len(nextVisit)): 
            odd.append((even[-1] + 1) % 1_000_000_007)
            even.append((2*odd[-1] - odd[nextVisit[i]] + 1) % 1_000_000_007)
        return odd[-1] 


    """1998. GCD Sort of an Array (Hard)
	You are given an integer array nums, and you can perform the following 
	operation any number of times on nums:
	* Swap the positions of two elements nums[i] and nums[j] if 
	  gcd(nums[i], nums[j]) > 1 where gcd(nums[i], nums[j]) is the greatest 
	  common divisor of nums[i] and nums[j].
	Return true if it is possible to sort nums in non-decreasing order using 
	the above swap method, or false otherwise.

	Example 1:
	Input: nums = [7,21,3]
	Output: true
	Explanation: We can sort [7,21,3] by performing the following operations:
	             - Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]
	             - Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]
	
	Example 2:
	Input: nums = [5,2,6,2]
	Output: false
	Explanation: It is impossible to sort the array because 5 cannot be swapped 
	             with any other element.
	
	Example 3:
	Input: nums = [10,5,9,3,15]
	Output: true
	We can sort [10,5,9,3,15] by performing the following operations:
	- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]
	- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]
	- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]

	Constraints:
	* 1 <= nums.length <= 3 * 10^4
	* 2 <= nums[i] <= 10^5

class UnionFind:
    
    def __init__(self, n): 
        self.parent = list(range(n))
        self.rank = [1] * n
        
    def find(self, p): 
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]

    def union(self, p, q):
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True"""
        
    def gcdSort(self, nums: List[int]) -> bool:
        m = max(nums)
        uf = UnionFind(m+1)
        
        seen = set(nums)
        
        # modified sieve of eratosthenes
        sieve = [1]*(m+1)
        sieve[0] = sieve[1] = 0
        for k in range(m//2 + 1): 
            if sieve[k]: 
                for x in range(2*k, m+1, k): 
                    sieve[x] = 0
                    if x in seen: uf.union(k, x)
        return all(uf.find(x) == uf.find(y) for x, y in zip(nums, sorted(nums)))


    """2000. Reverse Prefix of Word (Easy)
	Given a 0-indexed string word and a character ch, reverse the segment of 
	word that starts at index 0 and ends at the index of the first occurrence 
	of ch (inclusive). If the character ch does not exist in word, do nothing.
	For example, if word = "abcdefd" and ch = "d", then you should reverse the 
	segment that starts at 0 and ends at 3 (inclusive). The resulting string 
	will be "dcbaefd". Return the resulting string.

	Example 1:
	Input: word = "abcdefd", ch = "d"
	Output: "dcbaefd"
	Explanation: The first occurrence of "d" is at index 3. Reverse the part of 
	             word from 0 to 3 (inclusive), the resulting string is "dcbaefd".
	
	Example 2:
	Input: word = "xyxzxe", ch = "z"
	Output: "zxyxxe"
	Explanation: The first and only occurrence of "z" is at index 3. Reverse 
	             the part of word from 0 to 3 (inclusive), the resulting string 
	             is "zxyxxe".
	
	Example 3:
	Input: word = "abcd", ch = "z"
	Output: "abcd"
	Explanation: "z" does not exist in word. You should not do any reverse 
	             operation, the resulting string is "abcd".

	Constraints:
	* 1 <= word.length <= 250
	* word consists of lowercase English letters.
	* ch is a lowercase English letter."""

    def reversePrefix(self, word: str, ch: str) -> str:
        k = word.find(ch)
        return word[:k+1][::-1] + word[k+1:]


    """2001. Number of Pairs of Interchangeable Rectangles (Medium)
	You are given n rectangles represented by a 0-indexed 2D integer array 
	rectangles, where rectangles[i] = [widthi, heighti] denotes the width and 
	height of the ith rectangle. Two rectangles i and j (i < j) are considered 
	interchangeable if they have the same width-to-height ratio. More formally, 
	two rectangles are interchangeable if widthi/heighti == widthj/heightj 
	(using decimal division, not integer division). Return the number of pairs 
	of interchangeable rectangles in rectangles.

	Example 1:
	Input: rectangles = [[4,8],[3,6],[10,20],[15,30]]
	Output: 6
	Explanation: The following are the interchangeable pairs of rectangles by 
	             index (0-indexed):
	             - Rectangle 0 with rectangle 1: 4/8 == 3/6.
	             - Rectangle 0 with rectangle 2: 4/8 == 10/20.
	             - Rectangle 0 with rectangle 3: 4/8 == 15/30.
	             - Rectangle 1 with rectangle 2: 3/6 == 10/20.
	             - Rectangle 1 with rectangle 3: 3/6 == 15/30.
	             - Rectangle 2 with rectangle 3: 10/20 == 15/30.
	Example 2:
	Input: rectangles = [[4,5],[7,8]]
	Output: 0
	Explanation: There are no interchangeable pairs of rectangles.

	Constraints:
	* n == rectangles.length
	* 1 <= n <= 105
	* rectangles[i].length == 2
	* 1 <= widthi, heighti <= 10^5"""

    def interchangeableRectangles(self, rectangles: List[List[int]]) -> int:
        ans = 0
        freq = defaultdict(int)
        for w, h in rectangles: 
            ans += freq[w/h]
            freq[w/h] += 1
        return ans 


    """2002. Maximum Product of the Length of Two Palindromic Subsequences (Medium)
	Given a string s, find two disjoint palindromic subsequences of s such that 
	the product of their lengths is maximized. The two subsequences are 
	disjoint if they do not both pick a character at the same index. Return the 
	maximum possible product of the lengths of the two palindromic subsequences.
	A subsequence is a string that can be derived from another string by 
	deleting some or no characters without changing the order of the remaining 
	characters. A string is palindromic if it reads the same forward and 
	backward.

	Example 1:
	example-1
	Input: s = "leetcodecom"
	Output: 9
	Explanation: An optimal solution is to choose "ete" for the 1st subsequence 
	             and "cdc" for the 2nd subsequence. The product of their 
	             lengths is: 3 * 3 = 9.
	
	Example 2:
	Input: s = "bb"
	Output: 1
	Explanation: An optimal solution is to choose "b" (the first character) for 
	             the 1st subsequence and "b" (the second character) for the 2nd 
	             subsequence. The product of their lengths is: 1 * 1 = 1.
	
	Example 3:
	Input: s = "accbcaxxcxx"
	Output: 25
	Explanation: An optimal solution is to choose "accca" for the 1st 
	             subsequence and "xxcxx" for the 2nd subsequence. The product 
	             of their lengths is: 5 * 5 = 25.

	Constraints:
	* 2 <= s.length <= 12
	* s consists of lowercase English letters only."""

    def maxProduct(self, s: str) -> int:
        
        @cache
        def lps(mask): 
            """Return length of longest palindromic sequence."""
            if not mask: return 0
            if not mask & (mask-1): return 1
            lo = int(log2(mask & ~(mask-1))) # least significant set bi
            hi = int(log2(mask)) # most significant set bit 
            if s[lo] == s[hi]: return 2 + lps(mask^(1<<lo)^(1<<hi))
            return max(lps(mask^(1<<lo)), lps(mask^(1<<hi)))
        
        ans = 0
        for mask in range(1 << len(s)): 
            comp = (1 << len(s)) - 1 ^ mask
            ans = max(ans, lps(mask) * lps(comp))
        return ans 


    """2003. Smallest Missing Genetic Value in Each Subtree (Hard)
	There is a family tree rooted at 0 consisting of n nodes numbered 0 to 
	n - 1. You are given a 0-indexed integer array parents, where parents[i] is 
	the parent for node i. Since node 0 is the root, parents[0] == -1. There 
	are 10^5 genetic values, each represented by an integer in the inclusive 
	range [1, 10^5]. You are given a 0-indexed integer array nums, where nums[i] 
	is a distinct genetic value for node i. Return an array ans of length n 
	where ans[i] is the smallest genetic value that is missing from the subtree 
	rooted at node i. The subtree rooted at a node x contains node x and all of 
	its descendant nodes.

	Example 1:
	Input: parents = [-1,0,0,2], nums = [1,2,3,4]
	Output: [5,1,1,1]
	Explanation: The answer for each subtree is calculated as follows:
	             - 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.
	             - 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.
	             - 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.
	             - 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value.
	
	Example 2:
	Input: parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]
	Output: [7,1,1,4,2,1]
	Explanation: The answer for each subtree is calculated as follows:
	             - 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.
	             - 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.
	             - 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.
	             - 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.
	             - 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.
	             - 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value.
	
	Example 3:
	Input: parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]
	Output: [1,1,1,1,1,1,1]
	Explanation: The value 1 is missing from all the subtrees.

	Constraints:
	* n == parents.length == nums.length
	* 2 <= n <= 10^5
	* 0 <= parents[i] <= n - 1 for i != 0
	* parents[0] == -1
	* parents represents a valid tree.
	* 1 <= nums[i] <= 105
	* Each nums[i] is distinct."""

    def smallestMissingValueSubtree(self, parents: List[int], nums: List[int]) -> List[int]:
        ans = [1] * len(parents)
        if 1 in nums: 
            tree = {}
            for i, x in enumerate(parents): 
                tree.setdefault(x, []).append(i)
                
            k = nums.index(1)
            val = 1
            seen = set()
            
            while k != -1: 
                stack = [k]
                while stack: 
                    x = stack.pop()
                    seen.add(nums[x])
                    for xx in tree.get(x, []): 
                        if nums[xx] not in seen: 
                            stack.append(xx)
                            seen.add(nums[xx])
                while val in seen: val += 1
                ans[k] = val
                k = parents[k]
        return ans 


    """2006. Count Number of Pairs With Absolute Difference K (Easy)
	Given an integer array nums and an integer k, return the number of pairs 
	(i, j) where i < j such that |nums[i] - nums[j]| == k. The value of |x| is 
	defined as:
	* x if x >= 0.
	* -x if x < 0.

	Example 1:
	Input: nums = [1,2,2,1], k = 1
	Output: 4
	Explanation: The pairs with an absolute difference of 1 are:
	             - [1,2,2,1]
	             - [1,2,2,1]
	             - [1,2,2,1]
	             - [1,2,2,1]
	
	Example 2:
	Input: nums = [1,3], k = 3
	Output: 0
	Explanation: There are no pairs with an absolute difference of 3.

	Example 3:
	Input: nums = [3,2,1,5,4], k = 2
	Output: 3
	Explanation: The pairs with an absolute difference of 2 are:
	             - [3,2,1,5,4]
	             - [3,2,1,5,4]
	             - [3,2,1,5,4]

	Constraints:
	* 1 <= nums.length <= 200
	* 1 <= nums[i] <= 100
	* 1 <= k <= 99"""

    def countKDifference(self, nums: List[int], k: int) -> int:
        ans = 0 
        freq = defaultdict(int)
        for x in nums: 
            ans += freq[x - k] + freq[x + k]
            freq[x] += 1
        return ans 


    """2007. Find Original Array From Doubled Array (Medium)
	An integer array original is transformed into a doubled array changed by 
	appending twice the value of every element in original, and then randomly 
	shuffling the resulting array. Given an array changed, return original if 
	changed is a doubled array. If changed is not a doubled array, return an 
	empty array. The elements in original may be returned in any order.

	Example 1:
	Input: changed = [1,3,4,2,6,8]
	Output: [1,3,4]
	Explanation: One possible original array could be [1,3,4]:
	             - Twice the value of 1 is 1 * 2 = 2.
	             - Twice the value of 3 is 3 * 2 = 6.
	             - Twice the value of 4 is 4 * 2 = 8.
	             Other original arrays could be [4,3,1] or [3,1,4].
	
	Example 2:
	Input: changed = [6,3,0,1]
	Output: []
	Explanation: changed is not a doubled array.

	Example 3:
	Input: changed = [1]
	Output: []
	Explanation: changed is not a doubled array.

	Constraints:
	* 1 <= changed.length <= 10^5
	* 0 <= changed[i] <= 10^5"""

    def findOriginalArray(self, changed: List[int]) -> List[int]:
        freq = Counter(changed)
        ans = []
        for x in sorted(freq): 
            if freq[x]: 
                if x and freq[x] <= freq[2*x]: 
                    ans.extend([x] * freq[x])
                    freq[2*x] -= freq[x]
                elif x == 0 and freq[x] % 2 == 0: 
                    ans.extend([0] * (freq[x]//2))
                else: return []
        return ans 


    """2008. Maximum Earnings From Taxi (Medium)
	There are n points on a road you are driving your taxi on. The n points on 
	the road are labeled from 1 to n in the direction you are going, and you 
	want to drive from point 1 to point n to make money by picking up 
	passengers. You cannot change the direction of the taxi. The passengers are 
	represented by a 0-indexed 2D integer array rides, where 
	rides[i] = [starti, endi, tipi] denotes the ith passenger requesting a ride 
	from point starti to point endi who is willing to give a tipi dollar tip.
	For each passenger i you pick up, you earn endi - starti + tipi dollars. 
	You may only drive at most one passenger at a time. Given n and rides, 
	return the maximum number of dollars you can earn by picking up the 
	passengers optimally. Note: You may drop off a passenger and pick up a 
	different passenger at the same point.

	Example 1:
	Input: n = 5, rides = [[2,5,4],[1,5,1]]
	Output: 7
	Explanation: We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.

	Example 2:
	Input: n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]
	Output: 20
	Explanation: We will pick up the following passengers:
	             - Drive passenger 1 from point 3 to point 10 for a profit of 
	               10 - 3 + 2 = 9 dollars.
	             - Drive passenger 2 from point 10 to point 12 for a profit of 
	               12 - 10 + 3 = 5 dollars.
	             - Drive passenger 5 from point 13 to point 18 for a profit of 
	               18 - 13 + 1 = 6 dollars.
	             We earn 9 + 5 + 6 = 20 dollars in total.

	Constraints:
	* 1 <= n <= 10^5
	* 1 <= rides.length <= 3 * 10^4
	* rides[i].length == 3
	* 1 <= starti < endi <= n
	* 1 <= tipi <= 10^5"""

    def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:
        mp = {}
        for start, end, tip in rides: 
            mp.setdefault(start, []).append((end, tip))
        
        dp = [0]*(n+1)
        for x in range(n-1, 0, -1): 
            dp[x] = dp[x+1]
            for xx, tip in mp.get(x, []): 
                dp[x] = max(dp[x], xx - x + tip + dp[xx])
        return dp[1]


    """2009. Minimum Number of Operations to Make Array Continuous (Hard)
	You are given an integer array nums. In one operation, you can replace any 
	element in nums with any integer. nums is considered continuous if both of 
	the following conditions are fulfilled:
	* All elements in nums are unique.
	* The difference between the maximum element and the minimum element in 
	  nums equals nums.length - 1.
	For example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] 
	is not continuous. Return the minimum number of operations to make nums 
	continuous.

	Example 1:
	Input: nums = [4,2,5,3]
	Output: 0
	Explanation: nums is already continuous.

	Example 2:
	Input: nums = [1,2,3,5,6]
	Output: 1
	Explanation: One possible solution is to change the last element to 4. The 
	             resulting array is [1,2,3,5,4], which is continuous.
	
	Example 3:
	Input: nums = [1,10,100,1000]
	Output: 3
	Explanation: One possible solution is to:
	             - Change the second element to 2.
	             - Change the third element to 3.
	             - Change the fourth element to 4.
	             The resulting array is [1,2,3,4], which is continuous.

	Constraints:
	* 1 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^9"""

    def minOperations(self, nums: List[int]) -> int:
        n = len(nums)
        nums = sorted(set(nums))
        
        ans = ii = 0
        for i, x in enumerate(nums): 
            if x - nums[ii] >= n: ii += 1
            ans = max(ans, i - ii + 1)
        return n - ans 


    """2011. Final Value of Variable After Performing Operations (Easy)
	There is a programming language with only four operations and one variable 
	X:
	* ++X and X++ increments the value of the variable X by 1.
	* --X and X-- decrements the value of the variable X by 1.
	Initially, the value of X is 0. Given an array of strings operations 
	containing a list of operations, return the final value of X after 
	performing all the operations.

	Example 1:
	Input: operations = ["--X","X++","X++"]
	Output: 1
	Explanation: The operations are performed as follows:
	             Initially, X = 0.
	             --X: X is decremented by 1, X =  0 - 1 = -1.
	             X++: X is incremented by 1, X = -1 + 1 =  0.
	             X++: X is incremented by 1, X =  0 + 1 =  1.
	
	Example 2:
	Input: operations = ["++X","++X","X++"]
	Output: 3
	Explanation: The operations are performed as follows:
	             Initially, X = 0.
	             ++X: X is incremented by 1, X = 0 + 1 = 1.
	             ++X: X is incremented by 1, X = 1 + 1 = 2.
	             X++: X is incremented by 1, X = 2 + 1 = 3.
	
	Example 3:
	Input: operations = ["X++","++X","--X","X--"]
	Output: 0
	Explanation: The operations are performed as follows:
	             Initially, X = 0.
	             X++: X is incremented by 1, X = 0 + 1 = 1.
	             ++X: X is incremented by 1, X = 1 + 1 = 2.
	             --X: X is decremented by 1, X = 2 - 1 = 1.
	             X--: X is decremented by 1, X = 1 - 1 = 0.

	Constraints:
	* 1 <= operations.length <= 100
	* operations[i] will be either "++X", "X++", "--X", or "X--"."""

    def finalValueAfterOperations(self, operations: List[str]) -> int:
        ans = 0 
        for op in operations: 
            if op in ("++X", "X++"): ans += 1
            else: ans -= 1
        return ans


    """2012. Sum of Beauty in the Array (Medium)
	You are given a 0-indexed integer array nums. For each index i 
	(1 <= i <= nums.length - 2) the beauty of nums[i] equals:
	* 2, if nums[j] < nums[i] < nums[k], for all 0 <= j < i and for all 
	  i < k <= nums.length - 1.
	* 1, if nums[i - 1] < nums[i] < nums[i + 1], and the previous condition is 
	  not satisfied.
	* 0, if none of the previous conditions holds.
	Return the sum of beauty of all nums[i] where 1 <= i <= nums.length - 2.

	Example 1:
	Input: nums = [1,2,3]
	Output: 2
	Explanation: For each index i in the range 1 <= i <= 1:
	             - The beauty of nums[1] equals 2.
	
	Example 2:
	Input: nums = [2,4,6,4]
	Output: 1
	Explanation: For each index i in the range 1 <= i <= 2:
	             - The beauty of nums[1] equals 1.
	             - The beauty of nums[2] equals 0.
	
	Example 3:
	Input: nums = [3,2,1]
	Output: 0
	Explanation: For each index i in the range 1 <= i <= 1:
	             - The beauty of nums[1] equals 0.

	Constraints:
	* 3 <= nums.length <= 10^5
	* 1 <= nums[i] <= 10^5"""

    def sumOfBeauties(self, nums: List[int]) -> int:
        suffix = [inf] * len(nums) # suffix of min
        for i in range(len(nums)-2, 0, -1): 
            suffix[i] = min(suffix[i+1], nums[i+1])
            
        ans = prefix = 0
        for i in range(1, len(nums)-1): 
            prefix = max(prefix, nums[i-1])
            if prefix < nums[i] < suffix[i]: ans += 2
            elif nums[i-1] < nums[i] < nums[i+1]: ans += 1
        return ans 


    """2014. Longest Subsequence Repeated k Times (Hard)
	You are given a string s of length n, and an integer k. You are tasked to 
	find the longest subsequence repeated k times in string s. A subsequence is 
	a string that can be derived from another string by deleting some or no 
	characters without changing the order of the remaining characters. A 
	subsequence seq is repeated k times in the string s if seq * k is a 
	subsequence of s, where seq * k represents a string constructed by 
	concatenating seq k times. For example, "bba" is repeated 2 times in the 
	string "bababcba", because the string "bbabba", constructed by 
	concatenating "bba" 2 times, is a subsequence of the string "bababcba". 
	Return the longest subsequence repeated k times in string s. If multiple 
	such subsequences are found, return the lexicographically largest one. If 
	there is no such subsequence, return an empty string.

	Example 1:
	example 1
	Input: s = "letsleetcode", k = 2
	Output: "let"
	Explanation: There are two longest subsequences repeated 2 times: "let" and 
	             "ete". "let" is the lexicographically largest one.
	
	Example 2:
	Input: s = "bb", k = 2
	Output: "b"
	Explanation: The longest subsequence repeated 2 times is "b".

	Example 3:
	Input: s = "ab", k = 2
	Output: ""
	Explanation: There is no subsequence repeated 2 times. Empty string is 
	             returned.
	
	Example 4:
	Input: s = "bbabbabbbbabaababab", k = 3
	Output: "bbbb"
	Explanation: The longest subsequence "bbbb" is repeated 3 times in 
	             "bbabbabbbbabaababab".

	Constraints:
	* n == s.length
	* 2 <= n, k <= 2000
	* 2 <= n < k * 8
	* s consists of lowercase English letters."""

    def longestSubsequenceRepeatedK(self, s: str, k: int) -> str:
        freq = [0] * 26
        for ch in s: freq[ord(ch)-97] += 1
        
        cand = [chr(i+97) for i, x in enumerate(freq) if x >= k] # valid candidates 
        
        def fn(ss): 
            """Return True if ss is a k-repeated sub-sequence of s."""
            i = cnt = 0
            for ch in s: 
                if ss[i] == ch: 
                    i += 1
                    if i == len(ss): 
                        if (cnt := cnt + 1) == k: return True  
                        i = 0
            return False 
        
        ans = ""
        queue = deque([""])
        while queue: 
            x = queue.popleft()
            for ch in cand:  
                xx = x + ch
                if fn(xx): 
                    ans = xx
                    queue.append(xx)
        return ans


    """2016. Maximum Difference Between Increasing Elements (Easy)
	Given a 0-indexed integer array nums of size n, find the maximum difference 
	between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 
	0 <= i < j < n and nums[i] < nums[j]. Return the maximum difference. If no 
	such i and j exists, return -1.

	Example 1:
	Input: nums = [7,1,5,4]
	Output: 4
	Explanation: The maximum difference occurs with i = 1 and j = 2, 
	             nums[j] - nums[i] = 5 - 1 = 4. Note that with i = 1 and j = 0, 
	             the difference nums[j] - nums[i] = 7 - 1 = 6, but i > j, so it 
	             is not valid.
	
	Example 2:
	Input: nums = [9,4,3,2]
	Output: -1
	Explanation: There is no i and j such that i < j and nums[i] < nums[j].
	
	Example 3:
	Input: nums = [1,5,2,10]
	Output: 9
	Explanation: The maximum difference occurs with i = 0 and j = 3, 
	             nums[j] - nums[i] = 10 - 1 = 9.

	Constraints:
	* n == nums.length
	* 2 <= n <= 1000
	* 1 <= nums[i] <= 10^9"""

    def maximumDifference(self, nums: List[int]) -> int:
        ans = -1 
        prefix = inf
        for i, x in enumerate(nums): 
            if i and x > prefix: ans = max(ans, x - prefix)
            prefix = min(prefix, x)
        return ans 


    """2017. Grid Game (Medium)
	You are given a 0-indexed 2D array grid of size 2 x n, where grid[r][c] 
	represents the number of points at position (r, c) on the matrix. Two 
	robots are playing a game on this matrix. Both robots initially start at 
	(0, 0) and want to reach (1, n-1). Each robot may only move to the right 
	((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)). At the start of the 
	game, the first robot moves from (0, 0) to (1, n-1), collecting all the 
	points from the cells on its path. For all cells (r, c) traversed on the 
	path, grid[r][c] is set to 0. Then, the second robot moves from (0, 0) to 
	(1, n-1), collecting the points on its path. Note that their paths may 
	intersect with one another. The first robot wants to minimize the number of 
	points collected by the second robot. In contrast, the second robot wants 
	to maximize the number of points it collects. If both robots play optimally, 
	return the number of points collected by the second robot.

	Example 1:
	Input: grid = [[2,5,4],[1,5,1]]
	Output: 4
	Explanation: The optimal path taken by the first robot is shown in red, and 
	             the optimal path taken by the second robot is shown in blue. 
	             The cells visited by the first robot are set to 0. The second 
	             robot will collect 0 + 0 + 4 + 0 = 4 points.
	
	Example 2:
	Input: grid = [[3,3,1],[8,5,2]]
	Output: 4
	Explanation: The optimal path taken by the first robot is shown in red, and 
	             the optimal path taken by the second robot is shown in blue. 
	             The cells visited by the first robot are set to 0. The second 
	             robot will collect 0 + 3 + 1 + 0 = 4 points.
	
	Example 3:
	Input: grid = [[1,3,1,15],[1,3,3,1]]
	Output: 7
	Explanation: The optimal path taken by the first robot is shown in red, and 
	             the optimal path taken by the second robot is shown in blue. 
	             The cells visited by the first robot are set to 0. The second 
	             robot will collect 0 + 1 + 3 + 3 + 0 = 7 points.

	Constraints:
	* grid.length == 2
	* n == grid[r].length
	* 1 <= n <= 5 * 10^4
	* 1 <= grid[r][c] <= 10^5"""

    def gridGame(self, grid: List[List[int]]) -> int:
        ans = inf
        prefix = 0
        suffix = sum(grid[0])
        for i in range(len(grid[0])): 
            suffix -= grid[0][i]
            ans = min(ans, max(prefix, suffix))
            prefix += grid[1][i]
        return ans 


    """2018. Check if Word Can Be Placed In Crossword (Medium)
	You are given an m x n matrix board, representing the current state of a 
	crossword puzzle. The crossword contains lowercase English letters (from 
	solved words), ' ' to represent any empty cells, and '#' to represent any 
	blocked cells. A word can be placed horizontally (left to right or right to 
	left) or vertically (top to bottom or bottom to top) in the board if:
	* It does not occupy a cell containing the character '#'.
	* The cell each letter is placed in must either be ' ' (empty) or match the 
	  letter already on the board.
	* There must not be any empty cells ' ' or other lowercase letters directly 
	  left or right of the word if the word was placed horizontally.
	* There must not be any empty cells ' ' or other lowercase letters directly 
	  above or below the word if the word was placed vertically.
	Given a string word, return true if word can be placed in board, or false 
	otherwise.

	Example 1:
	Input: board = [["#", " ", "#"], [" ", " ", "#"], ["#", "c", " "]], word = "abc"
	Output: true
	Explanation: The word "abc" can be placed as shown above (top to bottom).

	Example 2:
	Input: board = [[" ", "#", "a"], [" ", "#", "c"], [" ", "#", "a"]], word = "ac"
	Output: false
	Explanation: It is impossible to place the word because there will always 
	             be a space/letter above or below it.
	
	Example 3:
	Input: board = [["#", " ", "#"], [" ", " ", "#"], ["#", " ", "c"]], word = "ca"
	Output: true
	Explanation: The word "ca" can be placed as shown above (right to left). 

	Constraints:
	* m == board.length
	* n == board[i].length
	* 1 <= m * n <= 2 * 10^5
	* board[i][j] will be ' ', '#', or a lowercase English letter.
	* 1 <= word.length <= max(m, n)
	* word will contain only lowercase English letters."""

    def placeWordInCrossword(self, board: List[List[str]], word: str) -> bool:
        for x in board, zip(*board): 
            for row in x: 
                for s in "".join(row).split("#"): 
                    for w in word, word[::-1]: 
                        if len(s) == len(w) and all(ss in (" ", ww) for ss, ww in zip(s, w)): return True 
        return False


    """2019. The Score of Students Solving Math Expression (Hard)
	You are given a string s that contains digits 0-9, addition symbols '+', 
	and multiplication symbols '*' only, representing a valid math expression 
	of single digit numbers (e.g., 3+5*2). This expression was given to n 
	elementary school students. The students were instructed to get the answer 
	of the expression by following this order of operations:
	* Compute multiplication, reading from left to right; Then,
	* Compute addition, reading from left to right.
	You are given an integer array answers of length n, which are the submitted 
	answers of the students in no particular order. You are asked to grade the 
	answers, by following these rules:
	* If an answer equals the correct answer of the expression, this student 
	  will be rewarded 5 points;
	* Otherwise, if the answer could be interpreted as if the student used the 
	  incorrect order of operations, once or multiple times, this student will 
	  be rewarded 2 points;
	* Otherwise, this student will be rewarded 0 points.
	Return the sum of the points of the students.

	Example 1:
	Input: s = "7+3*1*2", answers = [20,13,42]
	Output: 7
	Explanation: As illustrated above, the correct answer of the expression is 
	             13, therefore one student is rewarded 5 points: [20,13,42]. A 
	             student might have used this incorrect order of operations: 
	             7+3=10, 10*1=10, 10*2=20. Therefore one student is rewarded 2 
	             points: [20,13,42]. The points for the students are: [2,5,0]. 
	             The sum of the points is 2+5+0=7.
	
	Example 2:
	Input: s = "3+5*2", answers = [13,0,10,13,13,16,16]
	Output: 19
	Explanation: The correct answer of the expression is 13, therefore three 
	             students are rewarded 5 points each: [13,0,10,13,13,16,16]. 
	             A student might have used this incorrect order of operations: 
	             3+5=8, 8*2=16. Therefore two students are rewarded 2 points: 
	             [13,0,10,13,13,16,16]. The points for the students are: 
	             [5,0,0,5,5,2,2]. The sum of the points is 5+0+0+5+5+2+2=19.
	
	Example 3:
	Input: s = "6+0*1", answers = [12,9,6,4,8,6]
	Output: 10
	Explanation: The correct answer of the expression is 6. If a student had 
	             used some incorrect order of operations, the answer would also 
	             be 6. By the rules of grading, the students will still be 
	             rewarded 5 points (as they got the correct answer), not 2 
	             points. The points for the students are: [0,0,5,0,0,5]. The 
	             sum of the points is 10.

	Constraints:
	* 3 <= s.length <= 31
	* s represents a valid expression that contains only digits 0-9, '+', and '*' only.
	* All the integer operands in the expression are in the inclusive range [0, 9].
	* 1 <= The count of all operators ('+' and '*') in the math expression <= 15
	* Test data are generated such that the correct answer of the expression is in the range of [0, 1000].
	* n == answers.length
	* 1 <= n <= 10^4
	* 0 <= answers[i] <= 1000"""

    def scoreOfStudents(self, s: str, answers: List[int]) -> int:
        
        @cache
        def fn(lo, hi): 
            """Return possible answers of s[lo:hi]."""
            if lo+1 == hi: return {int(s[lo])}
            ans = set()
            for mid in range(lo+1, hi, 2): 
                for x in fn(lo, mid): 
                    for y in fn(mid+1, hi): 
                        if s[mid] == "+" and x + y <= 1000: ans.add(x + y)
                        elif s[mid] == "*" and x * y <= 1000: ans.add(x * y)
            return ans 
                
        target = eval(s)
        cand = fn(0, len(s))
        ans = 0 
        for x in answers: 
            if x == target: ans += 5
            elif x in cand: ans += 2
        return ans 


    """2022. Convert 1D Array Into 2D Array (Easy)
	You are given a 0-indexed 1-dimensional (1D) integer array original, and 
	two integers, m and n. You are tasked with creating a 2-dimensional (2D) 
	array with m rows and n columns using all the elements from original. The 
	elements from indices 0 to n - 1 (inclusive) of original should form the 
	first row of the constructed 2D array, the elements from indices n to 
	2 * n - 1 (inclusive) should form the second row of the constructed 2D 
	array, and so on. Return an m x n 2D array constructed according to the 
	above procedure, or an empty 2D array if it is impossible.

	Example 1:
	Input: original = [1,2,3,4], m = 2, n = 2
	Output: [[1,2],[3,4]]
	Explanation: The constructed 2D array should contain 2 rows and 2 columns.
	             The first group of n=2 elements in original, [1,2], becomes 
	             the first row in the constructed 2D array. The second group of 
	             n=2 elements in original, [3,4], becomes the second row in the 
	             constructed 2D array.
	
	Example 2:
	Input: original = [1,2,3], m = 1, n = 3
	Output: [[1,2,3]]
	Explanation: The constructed 2D array should contain 1 row and 3 columns. 
	             Put all three elements in original into the first row of the 
	             constructed 2D array.
	
	Example 3:
	Input: original = [1,2], m = 1, n = 1
	Output: []
	Explanation: There are 2 elements in original. It is impossible to fit 2 
	             elements in a 1x1 2D array, so return an empty 2D array.
	
	Example 4:
	Input: original = [3], m = 1, n = 2
	Output: []
	Explanation: There is 1 element in original. It is impossible to make 1 
	             element fill all the spots in a 1x2 2D array, so return an 
	             empty 2D array.

	Constraints:
	* 1 <= original.length <= 5 * 10^4
	* 1 <= original[i] <= 10^5
	* 1 <= m, n <= 4 * 10^4"""

    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:
        ans = []
        if len(original) == m*n: 
            for i in range(0, len(original), n): 
                ans.append(original[i:i+n])
        return ans 


    """2023. Number of Pairs of Strings With Concatenation Equal to Target (Medium)
	Given an array of digit strings nums and a digit string target, return the 
	number of pairs of indices (i, j) (where i != j) such that the 
	concatenation of nums[i] + nums[j] equals target.

	Example 1:
	Input: nums = ["777","7","77","77"], target = "7777"
	Output: 4
	Explanation: Valid pairs are:
	             - (0, 1): "777" + "7"
	             - (1, 0): "7" + "777"
	             - (2, 3): "77" + "77"
	             - (3, 2): "77" + "77"
	
	Example 2:
	Input: nums = ["123","4","12","34"], target = "1234"
	Output: 2
	Explanation: Valid pairs are:
	             - (0, 1): "123" + "4"
	             - (2, 3): "12" + "34"
	
	Example 3:
	Input: nums = ["1","1","1"], target = "11"
	Output: 6
	Explanation: Valid pairs are:
	             - (0, 1): "1" + "1"
	             - (1, 0): "1" + "1"
	             - (0, 2): "1" + "1"
	             - (2, 0): "1" + "1"
	             - (1, 2): "1" + "1"
	             - (2, 1): "1" + "1"

	Constraints:
	* 2 <= nums.length <= 100
	* 1 <= nums[i].length <= 100
	* 2 <= target.length <= 100
	* nums[i] and target consist of digits.
	* nums[i] and target do not have leading zeros."""

    def numOfPairs(self, nums: List[str], target: str) -> int:
        freq = Counter(nums)
        ans = 0 
        for k, v in freq.items(): 
            if target.startswith(k): 
                suffix = target[len(k):]
                ans += v * freq[suffix]
                if k == suffix: ans -= freq[suffix]
        return ans 


    """2024. Maximize the Confusion of an Exam (Medium)
	A teacher is writing a test with n true/false questions, with 'T' denoting 
	true and 'F' denoting false. He wants to confuse the students by maximizing 
	the number of consecutive questions with the same answer (multiple trues or 
	multiple falses in a row). You are given a string answerKey, where 
	answerKey[i] is the original answer to the ith question. In addition, you 
	are given an integer k, the maximum number of times you may perform the 
	following operation:
	* Change the answer key for any question to 'T' or 'F' (i.e., set 
	  answerKey[i] to 'T' or 'F').
	Return the maximum number of consecutive 'T's or 'F's in the answer key 
	after performing the operation at most k times.

	Example 1:
	Input: answerKey = "TTFF", k = 2
	Output: 4
	Explanation: We can replace both the 'F's with 'T's to make 
	             answerKey = "TTTT". There are four consecutive 'T's.
	
	Example 2:
	Input: answerKey = "TFFT", k = 1
	Output: 3
	Explanation: We can replace the first 'T' with an 'F' to make 
	             answerKey = "FFFT". Alternatively, we can replace the second 
	             'T' with an 'F' to make answerKey = "TFFF". In both cases, 
	             there are three consecutive 'F's.
	
	Example 3:
	Input: answerKey = "TTFTTFTT", k = 1
	Output: 5
	Explanation: We can replace the first 'F' to make answerKey = "TTTTTFTT"
	             Alternatively, we can replace the second 'F' to make 
	             answerKey = "TTFTTTTT". In both cases, there are five 
	             consecutive 'T's.

	Constraints:
	* n == answerKey.length
	* 1 <= n <= 5 * 10^4
	* answerKey[i] is either 'T' or 'F'
	* 1 <= k <= n"""

    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:
        
        def fn(target): 
            """Return max consecutive target."""
            ans = cnt = ii = 0 
            for i, x in enumerate(answerKey): 
                if x == target: cnt += 1 
                while cnt > k: 
                    if answerKey[ii] == target: cnt -= 1
                    ii += 1
                ans = max(ans, i - ii + 1)
            return ans 
        
        return max(fn("T"), fn("F"))


    """2025. Maximum Number of Ways to Partition an Array (Hard)
	You are given a 0-indexed integer array nums of length n. The number of 
	ways to partition nums is the number of pivot indices that satisfy both 
	conditions:
	* 1 <= pivot < n
	* nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]
	You are also given an integer k. You can choose to change the value of one 
	element of nums to k, or to leave the array unchanged. Return the maximum 
	possible number of ways to partition nums to satisfy both conditions after 
	changing at most one element.

	Example 1:
	Input: nums = [2,-1,2], k = 3
	Output: 1
	Explanation: One optimal approach is to change nums[0] to k. The array 
	             becomes [3,-1,2]. There is one way to partition the array:
	             - For pivot = 2, we have the partition [3,-1 | 2]: 
	               3 + -1 == 2.
	
	Example 2:
	Input: nums = [0,0,0], k = 1
	Output: 2
	Explanation: The optimal approach is to leave the array unchanged. There 
	             are two ways to partition the array:
	             - For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0.
	             - For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0.
	
	Example 3:
	Input: nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33
	Output: 4
	Explanation: One optimal approach is to change nums[2] to k. The array 
	             becomes [22,4,-33,-20,-15,15,-16,7,19,-10,0,-13,-14]. There 
	             are four ways to partition the array.

	Constraints:
	* n == nums.length
	* 2 <= n <= 10^5
	* -10^5 <= k, nums[i] <= 10^5"""

    def waysToPartition(self, nums: List[int], k: int) -> int:
        prefix = [0]
        loc = defaultdict(list)
        for i, x in enumerate(nums): 
            prefix.append(prefix[-1] + x)
            if i < len(nums)-1: loc[prefix[-1]].append(i)
        
        ans = 0 
        if prefix[-1] % 2 == 0: ans = len(loc[prefix[-1]//2]) # unchanged 
        
        total = prefix[-1]
        for i, x in enumerate(nums): 
            cnt = 0 
            diff = k - x
            target = total + diff 
            if target % 2 == 0: 
                target //= 2
                cnt += bisect_left(loc[target], i)
                cnt += len(loc[target-diff]) - bisect_left(loc[target-diff], i)
            ans = max(ans, cnt)
        return ans 

    
    """2027. Minimum Moves to Convert String (Easy)
	You are given a string s consisting of n characters which are either 'X' or 
	'O'. A move is defined as selecting three consecutive characters of s and 
	converting them to 'O'. Note that if a move is applied to the character 'O', 
	it will stay the same. Return the minimum number of moves required so that 
	all the characters of s are converted to 'O'.

	Example 1:
	Input: s = "XXX"
	Output: 1
	Explanation: XXX -> OOO. We select all the 3 characters and convert them in 
	             one move.
	
	Example 2:
	Input: s = "XXOX"
	Output: 2
	Explanation: XXOX -> OOOX -> OOOO. We select the first 3 characters in the 
	             first move, and convert them to 'O'. Then we select the last 3 
	             characters and convert them so that the final string contains 
	             all 'O's.
	
	Example 3:
	Input: s = "OOOO"
	Output: 0
	Explanation: There are no 'X's in s to convert.

	Constraints:
	* 3 <= s.length <= 1000
	* s[i] is either 'X' or 'O'."""

    def minimumMoves(self, s: str) -> int:
        ans = i = 0
        while i < len(s): 
            if s[i] == "X": 
                ans += 1
                i += 3
            else: i += 1
        return ans 


    """2028. Find Missing Observations (Medium)
	You have observations of n + m 6-sided dice rolls with each face numbered 
	from 1 to 6. n of the observations went missing, and you only have the 
	observations of m rolls. Fortunately, you have also calculated the average 
	value of the n + m rolls. You are given an integer array rolls of length m 
	where rolls[i] is the value of the ith observation. You are also given the 
	two integers mean and n. Return an array of length n containing the missing 
	observations such that the average value of the n + m rolls is exactly mean. 
	If there are multiple valid answers, return any of them. If no such array 
	exists, return an empty array. The average value of a set of k numbers is 
	the sum of the numbers divided by k. Note that mean is an integer, so the 
	sum of the n + m rolls should be divisible by n + m.

	Example 1:
	Input: rolls = [3,2,4,3], mean = 4, n = 2
	Output: [6,6]
	Explanation: The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4.

	Example 2:
	Input: rolls = [1,5,6], mean = 3, n = 4
	Output: [2,3,2,2]
	Explanation: The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3.

	Example 3:
	Input: rolls = [1,2,3,4], mean = 6, n = 4
	Output: []
	Explanation: It is impossible for the mean to be 6 no matter what the 4 
	             missing rolls are.
	
	Example 4:
	Input: rolls = [1], mean = 3, n = 1
	Output: [5]
	Explanation: The mean of all n + m rolls is (1 + 5) / 2 = 3.

	Constraints:
	* m == rolls.length
	* 1 <= n, m <= 10^5
	* 1 <= rolls[i], mean <= 6"""

    def missingRolls(self, rolls: List[int], mean: int, n: int) -> List[int]:
        total = mean * (len(rolls) + n) - sum(rolls)
        if not n <= total <= 6*n: return []
        q, r = divmod(total, n)
        return [q]*(n-r) + [q+1]*r


    """2029. Stone Game IX (Medium)
	Alice and Bob continue their games with stones. There is a row of n stones, 
	and each stone has an associated value. You are given an integer array 
	stones, where stones[i] is the value of the ith stone. Alice and Bob take 
	turns, with Alice starting first. On each turn, the player may remove any 
	stone from stones. The player who removes a stone loses if the sum of the 
	values of all removed stones is divisible by 3. Bob will win automatically 
	if there are no remaining stones (even if it is Alice's turn). Assuming 
	both players play optimally, return true if Alice wins and false if Bob 
	wins.

	Example 1:
	Input: stones = [2,1]
	Output: true
	Explanation: The game will be played as follows:
	             - Turn 1: Alice can remove either stone.
	             - Turn 2: Bob removes the remaining stone. 
	             The sum of the removed stones is 1 + 2 = 3 and is divisible by 
	             3. Therefore, Bob loses and Alice wins the game.
	
	Example 2:
	Input: stones = [2]
	Output: false
	Explanation: Alice will remove the only stone, and the sum of the values on 
	             the removed stones is 2. Since all the stones are removed and 
	             the sum of values is not divisible by 3, Bob wins the game.
	
	Example 3:
	Input: stones = [5,1,2,4,3]
	Output: false
	Explanation: Bob will always win. One possible way for Bob to win is shown 
	             below:
	             - Turn 1: Alice can remove the second stone with value 1. Sum 
	               of removed stones = 1.
	             - Turn 2: Bob removes the fifth stone with value 3. Sum of 
	               removed stones = 1 + 3 = 4.
	             - Turn 3: Alices removes the fourth stone with value 4. Sum of 
	               removed stones = 1 + 3 + 4 = 8.
	             - Turn 4: Bob removes the third stone with value 2. Sum of 
	               removed stones = 1 + 3 + 4 + 2 = 10.
	             - Turn 5: Alice removes the first stone with value 5. Sum of 
	               removed stones = 1 + 3 + 4 + 2 + 5 = 15.
	             Alice loses the game because the sum of the removed stones (15) 
	             is divisible by 3. Bob wins the game.

	Constraints:
	* 1 <= stones.length <= 10^5
	* 1 <= stones[i] <= 10^4"""

    def stoneGameIX(self, stones: List[int]) -> bool:
        freq = defaultdict(int)
        for x in stones: freq[x % 3] += 1
        if freq[0]%2 == 0: return freq[1] and freq[2]
        return abs(freq[1] - freq[2]) >= 3


    """2030. Smallest K-Length Subsequence With Occurrences of a Letter (Hard)
	You are given a string s, an integer k, a letter letter, and an integer 
	repetition. Return the lexicographically smallest subsequence of s of 
	length k that has the letter letter appear at least repetition times. The 
	test cases are generated so that the letter appears in s at least 
	repetition times. A subsequence is a string that can be derived from 
	another string by deleting some or no characters without changing the order 
	of the remaining characters. A string a is lexicographically smaller than a 
	string b if in the first position where a and b differ, string a has a 
	letter that appears earlier in the alphabet than the corresponding letter 
	in b.

	Example 1:
	Input: s = "leet", k = 3, letter = "e", repetition = 1
	Output: "eet"
	Explanation: There are four subsequences of length 3 that have the letter 
	             'e' appear at least 1 time:
	             - "lee" (from "leet")
	             - "let" (from "leet")
	             - "let" (from "leet")
	             - "eet" (from "leet")
	             The lexicographically smallest subsequence among them is "eet".
	
	Example 2:
	example-2
	Input: s = "leetcode", k = 4, letter = "e", repetition = 2
	Output: "ecde"
	Explanation: "ecde" is the lexicographically smallest subsequence of length 
	             4 that has the letter "e" appear at least 2 times.
	
	Example 3:
	Input: s = "bb", k = 2, letter = "b", repetition = 2
	Output: "bb"
	Explanation: "bb" is the only subsequence of length 2 that has the letter 
	             "b" appear at least 2 times.

	Constraints:
	* 1 <= repetition <= k <= s.length <= 5 * 10^4
	* s consists of lowercase English letters.
	* letter is a lowercase English letter, and appears in s at least 
	  repetition times."""

    def smallestSubsequence(self, s: str, k: int, letter: str, repetition: int) -> str:
        rest = sum(x == letter for x in s)
        stack = []
        for i, x in enumerate(s): 
            while stack and stack[-1] > x and len(stack) + len(s) - i > k and (stack[-1] != letter or repetition < rest): 
                if stack.pop() == letter: repetition += 1
            if len(stack) < k and (x == letter or len(stack) + repetition < k): 
                stack.append(x)
                if x == letter: repetition -= 1
            if x == letter: rest -= 1
        return "".join(stack)


    """2032. Two Out of Three (Easy)
	Given three integer arrays nums1, nums2, and nums3, return a distinct array 
	containing all the values that are present in at least two out of the three 
	arrays. You may return the values in any order.

	Example 1:
	Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
	Output: [3,2]
	Explanation: The values that are present in at least two arrays are:
	             - 3, in all three arrays.
	             - 2, in nums1 and nums2.
	
	Example 2:
	Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
	Output: [2,3,1]
	Explanation: The values that are present in at least two arrays are:
	             - 2, in nums2 and nums3.
	             - 3, in nums1 and nums2.
	             - 1, in nums1 and nums3.
	
	Example 3:
	Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
	Output: []
	Explanation: No value is present in at least two arrays.

	Constraints:
	* 1 <= nums1.length, nums2.length, nums3.length <= 100
	* 1 <= nums1[i], nums2[j], nums3[k] <= 100"""

    def twoOutOfThree(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> List[int]:
        s1, s2, s3 = set(nums1), set(nums2), set(nums3)
        return (s1&s2) | (s2&s3) | (s1&s3)


    """2033. Minimum Operations to Make a Uni-Value Grid (Medium)
	You are given a 2D integer grid of size m x n and an integer x. In one 
	operation, you can add x to or subtract x from any element in the grid. A 
	uni-value grid is a grid where all the elements of it are equal. Return the 
	minimum number of operations to make the grid uni-value. If it is not 
	possible, return -1.

	Example 1:
	Input: grid = [[2,4],[6,8]], x = 2
	Output: 4
	Explanation: We can make every element equal to 4 by doing the following: 
	             - Add x to 2 once.
	             - Subtract x from 6 once.
	             - Subtract x from 8 twice.
	             A total of 4 operations were used.
	
	Example 2:
	Input: grid = [[1,5],[2,3]], x = 1
	Output: 5
	Explanation: We can make every element equal to 3.

	Example 3:
	Input: grid = [[1,2],[3,4]], x = 2
	Output: -1
	Explanation: It is impossible to make every element equal.

	Constraints:
	* m == grid.length
	* n == grid[i].length
	* 1 <= m, n <= 10^5
	* 1 <= m * n <= 10^5
	* 1 <= x, grid[i][j] <= 10^4"""

    def minOperations(self, grid: List[List[int]], x: int) -> int:
        vals = [x for row in grid for x in row]
        if len(set(val%x for val in vals)) > 1: return -1 # impossible
        median = sorted(vals)[len(vals)//2] # O(N) possible via "quick select"
        return sum(abs(val - median)//x for val in vals)


    """2035. Partition Array Into Two Arrays to Minimize Sum Difference (Hard)
	You are given an integer array nums of 2 * n integers. You need to 
	partition nums into two arrays of length n to minimize the absolute 
	difference of the sums of the arrays. To partition nums, put each element 
	of nums into one of the two arrays. Return the minimum possible absolute 
	difference.

	Example 1:
	Input: nums = [3,9,7,3]
	Output: 2
	Explanation: One optimal partition is: [3,9] and [7,3]. The absolute 
	             difference between the sums of the arrays is 
	             abs((3 + 9) - (7 + 3)) = 2.
	
	Example 2:
	Input: nums = [-36,36]
	Output: 72
	Explanation: One optimal partition is: [-36] and [36]. The absolute 
	             difference between the sums of the arrays is 
	             abs((-36) - (36)) = 72.
	
	Example 3:
	Input: nums = [2,-1,0,4,-2,-9]
	Output: 0
	Explanation: One optimal partition is: [2,4,-9] and [-1,0,-2]. The absolute 
	             difference between the sums of the arrays is 
	             abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0.

	Constraints:
	* 1 <= n <= 15
	* nums.length == 2 * n
	* -10^7 <= nums[i] <= 10^7"""

    def minimumDifference(self, nums: List[int]) -> int:
        n = len(nums)//2
        left, right = nums[:n], nums[n:]
        lsum, rsum = sum(left), sum(right)
        
        ans = inf
        for i in range(n+1): 
            vals = sorted(2*sum(combo)-lsum for combo in combinations(left, i))
            for combo in combinations(right, n-i): 
                diff = 2*sum(combo) - rsum
                k = bisect_left(vals, -diff)
                if k: ans = min(ans, abs(vals[k-1] + diff))
                if k < len(vals): ans = min(ans, abs(vals[k] + diff))
        return ans 


    """2037. Minimum Number of Moves to Seat Everyone (Easy)
	There are n seats and n students in a room. You are given an array seats of 
	length n, where seats[i] is the position of the ith seat. You are also 
	given the array students of length n, where students[j] is the position of 
	the jth student. You may perform the following move any number of times:
	* Increase or decrease the position of the ith student by 1 (i.e., moving 
	  the ith student from position x to x + 1 or x - 1)
	* Return the minimum number of moves required to move each student to a 
	  seat such that no two students are in the same seat.
	Note that there may be multiple seats or students in the same position at 
	the beginning.

	Example 1:
	Input: seats = [3,1,5], students = [2,7,4]
	Output: 4
	Explanation: The students are moved as follows:
	             - The first student is moved from from position 2 to position 1 using 1 move.
	             - The second student is moved from from position 7 to position 5 using 2 moves.
	             - The third student is moved from from position 4 to position 3 using 1 move.
	             In total, 1 + 2 + 1 = 4 moves were used.
	
	Example 2:
	Input: seats = [4,1,5,9], students = [1,3,2,6]
	Output: 7
	Explanation: The students are moved as follows:
	             - The first student is not moved.
	             - The second student is moved from from position 3 to position 4 using 1 move.
	             - The third student is moved from from position 2 to position 5 using 3 moves.
	             - The fourth student is moved from from position 6 to position 9 using 3 moves.
	             In total, 0 + 1 + 3 + 3 = 7 moves were used.
	
	Example 3:
	Input: seats = [2,2,6,6], students = [1,3,2,6]
	Output: 4
	Explanation: The students are moved as follows:
	             - The first student is moved from from position 1 to position 2 using 1 move.
	             - The second student is moved from from position 3 to position 6 using 3 moves.
	             - The third student is not moved.
	             - The fourth student is not moved.
	             In total, 1 + 3 + 0 + 0 = 4 moves were used.

	Constraints:
	* n == seats.length == students.length
	* 1 <= n <= 100
	* 1 <= seats[i], students[j] <= 100"""

    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:
        return sum(abs(x-y) for x, y in zip(sorted(seats), sorted(students)))


    """2038. Remove Colored Pieces if Both Neighbors are the Same Color (Medium)
	There are n pieces arranged in a line, and each piece is colored either by 
	'A' or by 'B'. You are given a string colors of length n where colors[i] is 
	the color of the ith piece. Alice and Bob are playing a game where they 
	take alternating turns removing pieces from the line. In this game, Alice 
	moves first.
	* Alice is only allowed to remove a piece colored 'A' if both its neighbors 
	  are also colored 'A'. She is not allowed to remove pieces that are 
	  colored 'B'.
	* Bob is only allowed to remove a piece colored 'B' if both its neighbors 
	  are also colored 'B'. He is not allowed to remove pieces that are colored 
	  'A'.
	* Alice and Bob cannot remove pieces from the edge of the line.
	* If a player cannot make a move on their turn, that player loses and the 
	  other player wins.
	Assuming Alice and Bob play optimally, return true if Alice wins, or return 
	false if Bob wins.

	Example 1:
	Input: colors = "AAABABB"
	Output: true
	Explanation: AAABABB -> AABABB
	             Alice moves first. She removes the second 'A' from the left 
	             since that is the only 'A' whose neighbors are both 'A'. Now 
	             it's Bob's turn. Bob cannot make a move on his turn since 
	             there are no 'B's whose neighbors are both 'B'. Thus, Alice 
	             wins, so return true.
	
	Example 2:
	Input: colors = "AA"
	Output: false
	Explanation: Alice has her turn first. There are only two 'A's and both are 
	             on the edge of the line, so she cannot move on her turn. Thus, 
	             Bob wins, so return false.
	
	Example 3:
	Input: colors = "ABBBBBBBAAA"
	Output: false
	Explanation: ABBBBBBBAAA -> ABBBBBBBAA
	             Alice moves first. Her only option is to remove the second to 
	             last 'A' from the right. 
	             ABBBBBBBAA -> ABBBBBBAA
	             Next is Bob's turn. He has many options for which 'B' piece to 
	             remove. He can pick any. On Alice's second turn, she has no 
	             more pieces that she can remove. Thus, Bob wins, so return 
	             false.

	Constraints:
	* 1 <= colors.length <= 10^5
	* colors consists of only the letters 'A' and 'B'"""

    def winnerOfGame(self, colors: str) -> bool:
        diff = 0 
        for k, grp in groupby(colors): 
            if k == "A": diff += max(0, len(list(grp)) - 2)
            else: diff -= max(0, len(list(grp)) - 2)
        return diff > 0 


    """2039. The Time When the Network Becomes Idle (Medium)
	There is a network of n servers, labeled from 0 to n - 1. You are given a 
	2D integer array edges, where edges[i] = [ui, vi] indicates there is a 
	message channel between servers ui and vi, and they can pass any number of 
	messages to each other directly in one second. You are also given a 
	0-indexed integer array patience of length n. All servers are connected, 
	i.e., a message can be passed from one server to any other server(s) 
	directly or indirectly through the message channels. The server labeled 0 
	is the master server. The rest are data servers. Each data server needs to 
	send its message to the master server for processing and wait for a reply. 
	Messages move between servers optimally, so every message takes the least 
	amount of time to arrive at the master server. The master server will 
	process all newly arrived messages instantly and send a reply to the 
	originating server via the reversed path the message had gone through. At 
	the beginning of second 0, each data server sends its message to be 
	processed. Starting from second 1, at the beginning of every second, each 
	data server will check if it has received a reply to the message it sent 
	(including any newly arrived replies) from the master server:
	* If it has not, it will resend the message periodically. The data server 
	  i will resend the message every patience[i] second(s), i.e., the data 
	  server i will resend the message if patience[i] second(s) have elapsed 
	  since the last time the message was sent from this server.
	* Otherwise, no more resending will occur from this server.
	The network becomes idle when there are no messages passing between servers 
	or arriving at servers. Return the earliest second starting from which the 
	network becomes idle.

	Example 1:
	Input: edges = [[0,1],[1,2]], patience = [0,2,1]
	Output: 8
	Explanation: At (the beginning of) second 0,
	             - Data server 1 sends its message (denoted 1A) to the master server.
	             - Data server 2 sends its message (denoted 2A) to the master server.
	             At second 1,
	             - Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.
	             - Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.
	             - Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).
	             At second 2,
	             - The reply 1A arrives at server 1. No more resending will occur from server 1.
	             - Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.
	             - Server 2 resends the message (denoted 2C).
	             ...
	             At second 4,
	             - The reply 2A arrives at server 2. No more resending will occur from server 2.
	             ...
	             At second 7, reply 2D arrives at server 2.
	             Starting from the beginning of the second 8, there are no 
	             messages passing between servers or arriving at servers. This 
	             is the time when the network becomes idle.
	
	Example 2:
	Input: edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]
	Output: 3
	Explanation: Data servers 1 and 2 receive a reply back at the beginning of 
	             second 2. From the beginning of the second 3, the network 
	             becomes idle.

	Constraints:
	* n == patience.length
	* 2 <= n <= 10^5
	* patience[0] == 0
	* 1 <= patience[i] <= 10^5 for 1 <= i < n
	* 1 <= edges.length <= min(10^5, n * (n - 1) / 2)
	* edges[i].length == 2
	* 0 <= ui, vi < n
	* ui != vi
	* There are no duplicate edges.
	* Each server can directly or indirectly reach another server."""

    def networkBecomesIdle(self, edges: List[List[int]], patience: List[int]) -> int:
        graph = {}
        for u, v in edges: 
            graph.setdefault(u, []).append(v)
            graph.setdefault(v, []).append(u)
        
        dist = [-1]*len(graph)
        dist[0] = 0 
        val = 0
        queue = [0]
        while queue: 
            val += 2
            newq = []
            for u in queue: 
                for v in graph[u]: 
                    if dist[v] == -1: 
                        dist[v] = val
                        newq.append(v)
            queue = newq
        
        ans = 0
        for d, p in zip(dist, patience): 
            if p: 
                k = d//p - int(d%p == 0)
                ans = max(ans, d + k*p)
        return ans + 1


    """2040. Kth Smallest Product of Two Sorted Arrays (Hard)
	Given two sorted 0-indexed integer arrays nums1 and nums2 as well as an 
	integer k, return the kth (1-based) smallest product of nums1[i] * nums2[j] 
	where 0 <= i < nums1.length and 0 <= j < nums2.length.

	Example 1:
	Input: nums1 = [2,5], nums2 = [3,4], k = 2
	Output: 8
	Explanation: The 2 smallest products are:
	             - nums1[0] * nums2[0] = 2 * 3 = 6
	             - nums1[0] * nums2[1] = 2 * 4 = 8
	             The 2nd smallest product is 8.
	
	Example 2:
	Input: nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6
	Output: 0
	Explanation: The 6 smallest products are:
	             - nums1[0] * nums2[1] = (-4) * 4 = -16
	             - nums1[0] * nums2[0] = (-4) * 2 = -8
	             - nums1[1] * nums2[1] = (-2) * 4 = -8
	             - nums1[1] * nums2[0] = (-2) * 2 = -4
	             - nums1[2] * nums2[0] = 0 * 2 = 0
	             - nums1[2] * nums2[1] = 0 * 4 = 0
	             The 6th smallest product is 0.
	
	Example 3:
	Input: nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3
	Output: -6
	Explanation: The 3 smallest products are:
	             - nums1[0] * nums2[4] = (-2) * 5 = -10
	             - nums1[0] * nums2[3] = (-2) * 4 = -8
	             - nums1[4] * nums2[0] = 2 * (-3) = -6
	             The 3rd smallest product is -6.

	Constraints:
	* 1 <= nums1.length, nums2.length <= 5 * 10^4
	* -10^5 <= nums1[i], nums2[j] <= 10^5
	* 1 <= k <= nums1.length * nums2.length
	* nums1 and nums2 are sorted."""

    def kthSmallestProduct(self, nums1: List[int], nums2: List[int], k: int) -> int:
        neg = [x for x in nums1 if x < 0]
        pos = [x for x in nums1 if x >= 0]
        
        def fn(val):
            """Return count of products <= val."""
            ans = 0
            lo, hi = 0, len(nums2)-1
            for x in neg[::-1] + pos if val >= 0 else neg + pos[::-1]: 
                if x < 0: 
                    while lo < len(nums2) and x*nums2[lo] > val: lo += 1
                    ans += len(nums2) - lo
                elif x == 0: 
                    if 0 <= val: ans += len(nums2)
                else: 
                    while 0 <= hi and x*nums2[hi] > val: hi -= 1
                    ans += hi+1
            return ans 
        
        lo, hi = -10**10, 10**10 + 1
        while lo < hi: 
            mid = lo + hi >> 1
            if fn(mid) < k: lo = mid + 1
            else: hi = mid
        return lo 


    """2042. Check if Numbers Are Ascending in a Sentence (Easy)
	A sentence is a list of tokens separated by a single space with no leading 
	or trailing spaces. Every token is either a positive number consisting of 
	digits 0-9 with no leading zeros, or a word consisting of lowercase English 
	letters. For example, "a puppy has 2 eyes 4 legs" is a sentence with seven 
	tokens: "2" and "4" are numbers and the other tokens such as "puppy" are 
	words. Given a string s representing a sentence, you need to check if all 
	the numbers in s are strictly increasing from left to right (i.e., other 
	than the last number, each number is strictly smaller than the number on 
	its right in s). Return true if so, or false otherwise.

	Example 1:
	Input: s = "1 box has 3 blue 4 red 6 green and 12 yellow marbles"
	Output: true
	Explanation: The numbers in s are: 1, 3, 4, 6, 12. They are strictly 
	             increasing from left to right: 1 < 3 < 4 < 6 < 12.
	
	Example 2:
	Input: s = "hello world 5 x 5"
	Output: false
	Explanation: The numbers in s are: 5, 5. They are not strictly increasing.
	
	Example 3:
	Input: s = "sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s"
	Output: false
	Explanation: The numbers in s are: 7, 51, 50, 60. They are not strictly increasing.

	Example 4:
	Input: s = "4 5 11 26"
	Output: true
	Explanation: The numbers in s are: 4, 5, 11, 26. They are strictly 
	             increasing from left to right: 4 < 5 < 11 < 26.

	Constraints:
	* 3 <= s.length <= 200
	* s consists of lowercase English letters, spaces, and digits from 0 to 9, 
	  inclusive.
	* The number of tokens in s is between 2 and 100, inclusive.
	* The tokens in s are separated by a single space.
	* There are at least two numbers in s.
	* Each number in s is a positive number less than 100, with no leading 
	  zeros.
	* s contains no leading or trailing spaces."""

    def areNumbersAscending(self, s: str) -> bool:
        nums = [int(w) for w in s.split() if w.isdigit()]
        return all(nums[i-1] < nums[i] for i in range(1, len(nums)))


    """2044. Count Number of Maximum Bitwise-OR Subsets (Medium)
	Given an integer array nums, find the maximum possible bitwise OR of a 
	subset of nums and return the number of different non-empty subsets with 
	the maximum bitwise OR. An array a is a subset of an array b if a can be 
	obtained from b by deleting some (possibly zero) elements of b. Two subsets 
	are considered different if the indices of the elements chosen are 
	different. The bitwise OR of an array a is equal to 
	a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).

	Example 1:
	Input: nums = [3,1]
	Output: 2
	Explanation: The maximum possible bitwise OR of a subset is 3. There are 2 
	             subsets with a bitwise OR of 3:
 	             - [3]
 	             - [3,1]
	
	Example 2:
	Input: nums = [2,2,2]
	Output: 7
	Explanation: All non-empty subsets of [2,2,2] have a bitwise OR of 2. There 
	             are 2^3 - 1 = 7 total subsets.
	
	Example 3:
	Input: nums = [3,2,1,5]
	Output: 6
	Explanation: The maximum possible bitwise OR of a subset is 7. There are 6 
	             subsets with a bitwise OR of 7:
	             - [3,5]
	             - [3,1,5]
	             - [3,2,5]
	             - [3,2,1,5]
	             - [2,5]
	             - [2,1,5]

	Constraints:
	* 1 <= nums.length <= 16
	* 1 <= nums[i] <= 10^5"""

    def countMaxOrSubsets(self, nums: List[int]) -> int:
        target = reduce(or_, nums)
        
        @cache
        def fn(i, mask): 
            """Return number of subsets to get target."""
            if mask == target: return 2**(len(nums)-i)
            if i == len(nums): return 0 
            return fn(i+1, mask | nums[i]) + fn(i+1, mask)
        
        return fn(0, 0)


    """2045. Second Minimum Time to Reach Destination (Hard)
	A city is represented as a bi-directional connected graph with n vertices 
	where each vertex is labeled from 1 to n (inclusive). The edges in the 
	graph are represented as a 2D integer array edges, where each 
	edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and 
	vertex vi. Every vertex pair is connected by at most one edge, and no 
	vertex has an edge to itself. The time taken to traverse any edge is time 
	minutes. Each vertex has a traffic signal which changes its color from 
	green to red and vice versa every change minutes. All signals change at the 
	same time. You can enter a vertex at any time, but can leave a vertex only 
	when the signal is green. You cannot wait at a vertex if the signal is 
	green. The second minimum value is defined as the smallest value strictly 
	larger than the minimum value. For example the second minimum value of 
	[2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4. Given n, 
	edges, time, and change, return the second minimum time it will take to go 
	from vertex 1 to vertex n.

	Notes:
	* You can go through any vertex any number of times, including 1 and n.
	* You can assume that when the journey starts, all signals have just turned 
	  green.

	Example 1:
	Input: n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5
	Output: 13
	Explanation: The figure on the left shows the given graph. The blue path in 
	             the figure on the right is the minimum time path. The time 
	             taken is:
	             - Start at 1, time elapsed=0
	             - 1 -> 4: 3 minutes, time elapsed=3
	             - 4 -> 5: 3 minutes, time elapsed=6
	             Hence the minimum time needed is 6 minutes. The red path shows 
	             the path to get the second minimum time.
	             - Start at 1, time elapsed=0
	             - 1 -> 3: 3 minutes, time elapsed=3
	             - 3 -> 4: 3 minutes, time elapsed=6
	             - Wait at 4 for 4 minutes, time elapsed=10
	             - 4 -> 5: 3 minutes, time elapsed=13
	             Hence the second minimum time is 13 minutes.      
	
	Example 2:
	Input: n = 2, edges = [[1,2]], time = 3, change = 2
	Output: 11
	Explanation: The minimum time path is 1 -> 2 with time = 3 minutes. The 
	             second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 
	             minutes.

	Constraints:
	* 2 <= n <= 10^4
	* n - 1 <= edges.length <= min(2 * 104, n * (n - 1) / 2)
	* edges[i].length == 2
	* 1 <= ui, vi <= n
	* ui != vi
	* There are no duplicate edges.
	* Each vertex can be reached directly or indirectly from every other vertex.
	* 1 <= time, change <= 10^3"""

    def secondMinimum(self, n: int, edges: List[List[int]], time: int, change: int) -> int:
        graph = [[] for _ in range(n)]
        for u, v in edges: 
            graph[u-1].append(v-1)
            graph[v-1].append(u-1)
        
        least = None
        queue = deque([(0, 0)])
        seen = [[] for _ in range(n)]
        while queue: 
            t, u = queue.popleft()
            if u == n-1: 
                if least is None: least = t
                elif least < t: return t 
            if (t//change) & 1: t = (t//change+1)*change # waiting for green
            t += time
            for v in graph[u]: 
                if not seen[v] or len(seen[v]) == 1 and seen[v][0] != t: 
                    seen[v].append(t)
                    queue.append((t, v))


    """2047. Number of Valid Words in a Sentence (Easy)
	A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), 
	hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. 
	Each sentence can be broken down into one or more tokens separated by one 
	or more spaces ' '. A token is a valid word if:
	* It only contains lowercase letters, hyphens, and/or punctuation (no 
	  digits).
	* There is at most one hyphen '-'. If present, it should be surrounded by 
	  lowercase characters ("a-b" is valid, but "-ab" and "ab-" are not valid).
	* There is at most one punctuation mark. If present, it should be at the 
	  end of the token.
	Examples of valid words include "a-b.", "afad", "ba-c", "a!", and "!". 
	Given a string sentence, return the number of valid words in sentence.

	Example 1:
	Input: sentence = "cat and  dog"
	Output: 3
	Explanation: The valid words in the sentence are "cat", "and", and "dog".

	Example 2:
	Input: sentence = "!this  1-s b8d!"
	Output: 0
	Explanation: There are no valid words in the sentence. "!this" is invalid 
	             because it starts with a punctuation mark. "1-s" and "b8d" are 
	             invalid because they contain digits.
	
	Example 3:
	Input: sentence = "alice and  bob are playing stone-game10"
	Output: 5
	Explanation: The valid words in the sentence are "alice", "and", "bob", 
	             "are", and "playing". "stone-game10" is invalid because it 
	             contains digits.
	
	Example 4:
	Input: sentence = "he bought 2 pencils, 3 erasers, and 1  pencil-sharpener."
	Output: 6
	Explanation: The valid words in the sentence are "he", "bought", "pencils,", 
	             "erasers,", "and", and "pencil-sharpener.".

	Constraints:
	* 1 <= sentence.length <= 1000
	* sentence only contains lowercase English letters, digits, ' ', '-', '!', 
	  '.', and ','.
	* There will be at least 1 token."""

    def countValidWords(self, sentence: str) -> int:
        pattern = re.compile('(^[a-z]+(-[a-z]+)?)?[,.!]?$')
        return sum(bool(pattern.match(word)) for word in sentence.split())


    """2048. Next Greater Numerically Balanced Number (Medium)
	An integer x is numerically balanced if for every digit d in the number x, 
	there are exactly d occurrences of that digit in x. Given an integer n, 
	return the smallest numerically balanced number strictly greater than n.

	Example 1:
	Input: n = 1
	Output: 22
	Explanation: 22 is numerically balanced since:
	             - The digit 2 occurs 2 times. 
	             It is also the smallest numerically balanced number strictly 
	             greater than 1.
	
	Example 2:
	Input: n = 1000
	Output: 1333
	Explanation: 1333 is numerically balanced since:
	             - The digit 1 occurs 1 time.
	             - The digit 3 occurs 3 times. 
	             It is also the smallest numerically balanced number strictly 
	             greater than 1000. Note that 1022 cannot be the answer because 
	             0 appeared more than 0 times.
	
	Example 3:
	Input: n = 3000
	Output: 3133
	Explanation: 3133 is numerically balanced since:
	             - The digit 1 occurs 1 time.
	             - The digit 3 occurs 3 times.
	             It is also the smallest numerically balanced number strictly 
	             greater than 3000.

	Constraints: 0 <= n <= 10^6"""

    def nextBeautifulNumber(self, n: int) -> int:
        
        def fn(i, x):
            if i == k:
                if all(d == v for d, v in freq.items() if v): yield x
            else: 
                for d in range(1, k+1):
                    if freq[d] < d <= freq[d] + k - i: 
                        freq[d] += 1
                        yield from fn(i+1, 10*x+d)
                        freq[d] -= 1

        for k in (len(str(n)), len(str(n))+1):
            freq = Counter()
            for val in fn(0, 0):
                if val > n: return val


    """2049. Count Nodes With the Highest Score (Medium)
	There is a binary tree rooted at 0 consisting of n nodes. The nodes are 
	labeled from 0 to n - 1. You are given a 0-indexed integer array parents 
	representing the tree, where parents[i] is the parent of node i. Since node 
	0 is the root, parents[0] == -1. Each node has a score. To find the score 
	of a node, consider if the node and the edges connected to it were removed. 
	The tree would become one or more non-empty subtrees. The size of a subtree 
	is the number of the nodes in it. The score of the node is the product of 
	the sizes of all those subtrees. Return the number of nodes that have the 
	highest score.

	Example 1:
	Input: parents = [-1,2,0,2,0]
	Output: 3
	Explanation: - The score of node 0 is: 3 * 1 = 3
	             - The score of node 1 is: 4 = 4
	             - The score of node 2 is: 1 * 1 * 2 = 2
	             - The score of node 3 is: 4 = 4
	             - The score of node 4 is: 4 = 4
	             The highest score is 4, and three nodes (node 1, node 3, and 
	             ode 4) have the highest score.
	
	Example 2:
	Input: parents = [-1,2,0]
	Output: 2
	Explanation: - The score of node 0 is: 2 = 2
	             - The score of node 1 is: 2 = 2
	             - The score of node 2 is: 1 * 1 = 1
	             The highest score is 2, and two nodes (node 0 and node 1) have 
	             the highest score.

	Constraints:
	* n == parents.length
	* 2 <= n <= 10^5
	* parents[0] == -1
	* 0 <= parents[i] <= n - 1 for i != 0
	* parents represents a valid binary tree."""

    def countHighestScoreNodes(self, parents: List[int]) -> int:
        tree = [[] for _ in parents]
        for i, x in enumerate(parents): 
            if x >= 0: tree[x].append(i)
        
        def fn(x): 
            """Return count of tree nodes."""
            count = score = 1
            for xx in tree[x]: 
                cc = fn(xx)
                count += cc
                score *= cc
            score *= len(parents) - count or 1
            freq[score] += 1
            return count
        
        freq = defaultdict(int)
        fn(0)
        return freq[max(freq)]


    """2050. Parallel Courses III (Hard)
	You are given an integer n, which indicates that there are n courses 
	labeled from 1 to n. You are also given a 2D integer array relations where 
	relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej 
	has to be completed before course nextCoursej (prerequisite relationship). 
	Furthermore, you are given a 0-indexed integer array time where time[i] 
	denotes how many months it takes to complete the (i+1)th course. You must 
	find the minimum number of months needed to complete all the courses 
	following these rules:
	* You may start taking a course at any time if the prerequisites are met.
	* Any number of courses can be taken at the same time.
	Return the minimum number of months needed to complete all the courses. 
	Note: The test cases are generated such that it is possible to complete 
	every course (i.e., the graph is a directed acyclic graph).

	Example 1:
	Input: n = 3, relations = [[1,3],[2,3]], time = [3,2,5]
	Output: 8
	Explanation: The figure above represents the given graph and the time 
	             required to complete each course. We start course 1 and course 
	             2 simultaneously at month 0. Course 1 takes 3 months and 
	             course 2 takes 2 months to complete respectively. Thus, the 
	             earliest time we can start course 3 is at month 3, and the 
	             total time required is 3 + 5 = 8 months.
	
	Example 2:
	Input: n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]
	Output: 12
	Explanation: The figure above represents the given graph and the time 
	             required to complete each course. You can start courses 1, 2, 
	             and 3 at month 0. You can complete them after 1, 2, and 3 
	             months respectively. Course 4 can be taken only after course 3 
	             is completed, i.e., after 3 months. It is completed after 
	             3 + 4 = 7 months. Course 5 can be taken only after courses 1, 
	             2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 
	             months. Thus, the minimum time needed to complete all the 
	             courses is 7 + 5 = 12 months.

	Constraints:
	* 1 <= n <= 5 * 10^4
	* 0 <= relations.length <= min(n * (n - 1) / 2, 5 * 10^4)
	* relations[j].length == 2
	* 1 <= prevCoursej, nextCoursej <= n
	* prevCoursej != nextCoursej
	* All the pairs [prevCoursej, nextCoursej] are unique.
	* time.length == n
	* 1 <= time[i] <= 10^4
	* The given graph is a directed acyclic graph."""

    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:
        graph = [[] for _ in range(n)]
        indeg = [0]*n 
        for u, v in relations: 
            graph[u-1].append(v-1)
            indeg[v-1] += 1
        
        start = [0]*n
        queue = deque((i, time[i]) for i, x in enumerate(indeg) if x == 0)
        
        while queue: 
            u, t = queue.popleft() # earlist to finish course u
            for v in graph[u]: 
                start[v] = max(start[v], t) # earlist to start course v
                indeg[v] -= 1
                if indeg[v] == 0: queue.append((v, start[v] + time[v]))
        return max(s+t for s, t in zip(start, time))


    """2053. Kth Distinct String in an Array (Easy)
	A distinct string is a string that is present only once in an array. Given 
	an array of strings arr, and an integer k, return the kth distinct string 
	present in arr. If there are fewer than k distinct strings, return an empty 
	string "". Note that the strings are considered in the order in which they 
	appear in the array.

	Example 1:
	Input: arr = ["d","b","c","b","c","a"], k = 2
	Output: "a"
	Explanation: The only distinct strings in arr are "d" and "a". "d" appears 
	             1st, so it is the 1st distinct string. "a" appears 2nd, so it 
	             is the 2nd distinct string. Since k == 2, "a" is returned. 
	
	Example 2:
	Input: arr = ["aaa","aa","a"], k = 1
	Output: "aaa"
	Explanation: All strings in arr are distinct, so the 1st string "aaa" is 
	             returned.
	
	Example 3:
	Input: arr = ["a","b","a"], k = 3
	Output: ""
	Explanation: The only distinct string is "b". Since there are fewer than 3 
	             distinct strings, we return an empty string "".

	Constraints:
	* 1 <= k <= arr.length <= 1000
	* 1 <= arr[i].length <= 5
	* arr[i] consists of lowercase English letters."""

    def kthDistinct(self, arr: List[str], k: int) -> str:
        freq = Counter(arr)
        for x in arr: 
            if freq[x] == 1: k -= 1
            if k == 0: return x
        return ""


    """2054. Two Best Non-Overlapping Events (Medium)
	You are given a 0-indexed 2D integer array of events where 
	events[i] = [startTimei, endTimei, valuei]. The ith event starts at 
	startTimei and ends at endTimei, and if you attend this event, you will 
	receive a value of valuei. You can choose at most two non-overlapping 
	events to attend such that the sum of their values is maximized. Return 
	this maximum sum. Note that the start time and end time is inclusive: that 
	is, you cannot attend two events where one of them starts and the other 
	ends at the same time. More specifically, if you attend an event with end 
	time t, the next event must start at or after t + 1.

	Example 1:
	Input: events = [[1,3,2],[4,5,2],[2,4,3]]
	Output: 4
	Explanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.

	Example 2:
	Example 1 Diagram
	Input: events = [[1,3,2],[4,5,2],[1,5,5]]
	Output: 5
	Explanation: Choose event 2 for a sum of 5.

	Example 3:
	Input: events = [[1,5,3],[1,5,1],[6,6,5]]
	Output: 8
	Explanation: Choose events 0 and 2 for a sum of 3 + 5 = 8.

	Constraints:
	* 2 <= events.length <= 10^5
	* events[i].length == 3
	* 1 <= startTimei <= endTimei <= 10^9
	* 1 <= valuei <= 10^6"""

    def maxTwoEvents(self, events: List[List[int]]) -> int:
        ans = most = 0 
        pq = []
        for st, et, val in sorted(events): 
            heappush(pq, (et, val))
            while pq and pq[0][0] < st: 
                _, vv = heappop(pq)
                most = max(most, vv)
            ans = max(ans, most + val)
        return ans 


    """2055. Plates Between Candles (Medium)
	There is a long table with a line of plates and candles arranged on top of 
	it. You are given a 0-indexed string s consisting of characters '*' and '|' 
	only, where a '*' represents a plate and a '|' represents a candle. You are 
	also given a 0-indexed 2D integer array queries where 
	queries[i] = [lefti, righti] denotes the substring s[lefti...righti] 
	(inclusive). For each query, you need to find the number of plates between 
	candles that are in the substring. A plate is considered between candles if 
	there is at least one candle to its left and at least one candle to its 
	right in the substring. For example, s = "||**||**|*", and a query [3, 8] 
	denotes the substring "*||**|". The number of plates between candles in 
	this substring is 2, as each of the two plates has at least one candle in 
	the substring to its left and right. Return an integer array answer where 
	answer[i] is the answer to the ith query.

	Example 1:
	Input: s = "**|**|***|", queries = [[2,5],[5,9]]
	Output: [2,3]
	Explanation: - queries[0] has two plates between candles.
	             - queries[1] has three plates between candles.
	
	Example 2:
	Input: s = "***|**|*****|**||**|*", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]
	Output: [9,0,0,0,0]
	Explanation: - queries[0] has nine plates between candles.
	             - The other queries have zero plates between candles.

	Constraints:
	* 3 <= s.length <= 10^5
	* s consists of '*' and '|' characters.
	* 1 <= queries.length <= 10^5
	* queries[i].length == 2
	* 0 <= lefti <= righti < s.length"""

    def platesBetweenCandles(self, s: str, queries: List[List[int]]) -> List[int]:
        prefix = [0]
        stack = []
        upper = [-1]*len(s)
        lower = [-1]*len(s)
        lo = -1
        for i, ch in enumerate(s): 
            prefix.append(prefix[-1] + (ch == '*'))
            stack.append(i)
            if ch == '|': 
                while stack: upper[stack.pop()] = i 
                lo = i 
            lower[i] = lo 
        
        ans = []
        for x, y in queries: 
            lo = upper[x]
            hi = lower[y]
            if hi != -1 and lo != -1 and lo <= hi: ans.append(prefix[hi+1] - prefix[lo])
            else: ans.append(0)
        return ans 


    """2056. Number of Valid Move Combinations On Chessboard (Hard)
	There is an 8 x 8 chessboard containing n pieces (rooks, queens, or 
	bishops). You are given a string array pieces of length n, where pieces[i] 
	describes the type (rook, queen, or bishop) of the ith piece. In addition, 
	you are given a 2D integer array positions also of length n, where 
	positions[i] = [ri, ci] indicates that the ith piece is currently at the 
	1-based coordinate (ri, ci) on the chessboard. When making a move for a 
	piece, you choose a destination square that the piece will travel toward 
	and stop on.
	* A rook can only travel horizontally or vertically from (r, c) to the 
	  direction of (r+1, c), (r-1, c), (r, c+1), or (r, c-1).
	* A queen can only travel horizontally, vertically, or diagonally from 
	  (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), (r, c-1), 
	  (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).
	* A bishop can only travel diagonally from (r, c) to the direction of 
	  (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).
	You must make a move for every piece on the board simultaneously. A move 
	combination consists of all the moves performed on all the given pieces. 
	Every second, each piece will instantaneously travel one square towards 
	their destination if they are not already at it. All pieces start 
	traveling at the 0th second. A move combination is invalid if, at a given 
	time, two or more pieces occupy the same square. Return the number of valid 
	move combinations.

	Notes:
	* No two pieces will start in the same square.
	* You may choose the square a piece is already on as its destination.
	* If two pieces are directly adjacent to each other, it is valid for them 
	  to move past each other and swap positions in one second.

	Example 1:
	Input: pieces = ["rook"], positions = [[1,1]]
	Output: 15
	Explanation: The image above shows the possible squares the piece can move to.

	Example 2:
	Input: pieces = ["queen"], positions = [[1,1]]
	Output: 22
	Explanation: The image above shows the possible squares the piece can move to.

	Example 3:
	Input: pieces = ["bishop"], positions = [[4,3]]
	Output: 12
	Explanation: The image above shows the possible squares the piece can move to.

	Example 4:
	Input: pieces = ["rook","rook"], positions = [[1,1],[8,8]]
	Output: 223
	Explanation: There are 15 moves for each rook which results in 15 * 15 = 225 
	             move combinations. However, there are two invalid move 
	             combinations:
	             - Move both rooks to (8, 1), where they collide.
	             - Move both rooks to (1, 8), where they collide.
	             Thus there are 225 - 2 = 223 valid move combinations. Note that 
	             there are two valid move combinations that would result in one 
	             rook at (1, 8) and the other at (8, 1). Even though the board 
	             state is the same, these two move combinations are considered 
	             different since the moves themselves are different.
	
	Example 5:
	Input: pieces = ["queen","bishop"], positions = [[5,7],[3,4]]
	Output: 281
	Explanation: There are 12 * 24 = 288 move combinations. However, there are 
	             several invalid move combinations:
	             - If the queen stops at (6, 7), it blocks the bishop from 
	               moving to (6, 7) or (7, 8).
	             - If the queen stops at (5, 6), it blocks the bishop from 
	               moving to (5, 6), (6, 7), or (7, 8).
	             - If the bishop stops at (5, 2), it blocks the queen from 
	               moving to (5, 2) or (5, 1).
	             Of the 288 move combinations, 281 are valid.

	Constraints:
	* n == pieces.length
	* n == positions.length
	* 1 <= n <= 4
	* pieces only contains the strings "rook", "queen", and "bishop".
	* There will be at most one queen on the chessboard.
	* 1 <= xi, yi <= 8
	* Each positions[i] is distinct."""

    def countCombinations(self, pieces: List[str], positions: List[List[int]]) -> int:
        n = len(pieces)
        mp = {"bishop": ((-1, -1), (-1, 1), (1, -1), (1, 1)),
              "queen" : ((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)), 
              "rook"  : ((-1, 0), (0, -1), (0, 1), (1, 0))}
        
        dirs = [[]] # directions
        for piece in pieces: dirs = [x+[xx] for x in dirs for xx in mp[piece]]
        
        positions = tuple(map(tuple, positions))
        
        def fn(*args): 
            """Return possible moves along given direction."""
            stack = [((1<<n)-1, positions)]
            while stack: 
                mask, pos = stack.pop()
                ans.add(pos)
                m = mask
                while m: 
                    p = []
                    for i in range(n): 
                        if m & (1 << i): 
                            p.append((pos[i][0] + args[i][0], pos[i][1] + args[i][1]))
                            if not (1 <= p[i][0] <= 8 and 1 <= p[i][1] <= 8): break 
                        else: p.append(pos[i])
                    else: 
                        cand = tuple(p)
                        if len(set(cand)) == len(cand) and m: stack.append((m, cand))
                    m = mask & (m-1)

        ans = set()
        for d in dirs: fn(*d)
        return len(ans)


    """2057. Smallest Index With Equal Value (Easy)
	Given a 0-indexed integer array nums, return the smallest index i of nums 
	such that i mod 10 == nums[i], or -1 if such index does not exist. x mod y 
	denotes the remainder when x is divided by y.

	Example 1:
	Input: nums = [0,1,2]
	Output: 0
	Explanation: i=0: 0 mod 10 = 0 == nums[0].
	             i=1: 1 mod 10 = 1 == nums[1].
	             i=2: 2 mod 10 = 2 == nums[2].
	             All indices have i mod 10 == nums[i], so we return the 
	             smallest index 0.
	
	Example 2:
	Input: nums = [4,3,2,1]
	Output: 2
	Explanation: i=0: 0 mod 10 = 0 != nums[0].
	             i=1: 1 mod 10 = 1 != nums[1].
	             i=2: 2 mod 10 = 2 == nums[2].
	             i=3: 3 mod 10 = 3 != nums[3].
	             2 is the only index which has i mod 10 == nums[i].
	
	Example 3:
	Input: nums = [1,2,3,4,5,6,7,8,9,0]
	Output: -1
	Explanation: No index satisfies i mod 10 == nums[i].

	Example 4:
	Input: nums = [2,1,3,5,2]
	Output: 1
	Explanation: 1 is the only index with i mod 10 == nums[i].

	Constraints:
	* 1 <= nums.length <= 100
	* 0 <= nums[i] <= 9"""

    def smallestEqual(self, nums: List[int]) -> int:
        return next((i for i, x in enumerate(nums) if i%10 == x), -1)


    """2058. Find the Minimum and Maximum Number of Nodes Between Critical Points (Medium)
	A critical point in a linked list is defined as either a local maxima or a 
	local minima. A node is a local maxima if the current node has a value 
	strictly greater than the previous node and the next node. A node is a 
	local minima if the current node has a value strictly smaller than the 
	previous node and the next node. Note that a node can only be a local 
	maxima/minima if there exists both a previous node and a next node. Given a 
	linked list head, return an array of length 2 containing 
	[minDistance, maxDistance] where minDistance is the minimum distance 
	between any two distinct critical points and maxDistance is the maximum 
	distance between any two distinct critical points. If there are fewer than 
	two critical points, return [-1, -1].

	Example 1:
	Input: head = [3,1]
	Output: [-1,-1]
	Explanation: There are no critical points in [3,1].

	Example 2:
	Input: head = [5,3,1,2,5,1,2]
	Output: [1,3]
	Explanation: There are three critical points:
	             - [5,3,1,2,5,1,2]: The third node is a local minima because 1 
	               is less than 3 and 2.
	             - [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 
	               is greater than 2 and 1.
	             - [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 
	               is less than 5 and 2.
	             The minimum distance is between the fifth and the sixth node. 
	             minDistance = 6 - 5 = 1. The maximum distance is between the 
	             third and the sixth node. maxDistance = 6 - 3 = 3.
	
	Example 3:
	Input: head = [1,3,2,2,3,2,2,2,7]
	Output: [3,3]
	Explanation: There are two critical points:
	             - [1,3,2,2,3,2,2,2,7]: The second node is a local maxima 
	               because 3 is greater than 1 and 2.
	             - [1,3,2,2,3,2,2,2,7]: The fifth node is a local maxima 
	               because 3 is greater than 2 and 2.
	             Both the minimum and maximum distances are between the second 
	             and the fifth node. Thus, minDistance and maxDistance is 
	             5 - 2 = 3. Note that the last node is not considered a local 
	             maxima because it does not have a next node.
	
	Example 4:
	Input: head = [2,3,3,2]
	Output: [-1,-1]
	Explanation: There are no critical points in [2,3,3,2].

	Constraints:
	* The number of nodes in the list is in the range [2, 10^5].
	* 1 <= Node.val <= 10^5"""

    def nodesBetweenCriticalPoints(self, head: Optional[ListNode]) -> List[int]:
        prev = head.val 
        node = head.next 
        dmin = inf 
        first = i = last = 0
        while node and node.next: 
            i += 1
            if prev < node.val > node.next.val or prev > node.val < node.next.val: 
                if last : dmin = min(dmin, i - last)
                last = i # last critical point 
                if not first: first = i # first critical point 
            prev = node.val 
            node = node.next 
        return [dmin, last - first] if dmin < inf else [-1, -1]


    """2059. Minimum Operations to Convert Number (Medium)
	You are given a 0-indexed integer array nums containing distinct numbers, 
	an integer start, and an integer goal. There is an integer x that is 
	initially set to start, and you want to perform operations on x such that 
	it is converted to goal. You can perform the following operation repeatedly 
	on the number x: 

	If 0 <= x <= 1000, then for any index i in the array (0 <= i < nums.length), 
	you can set x to any of the following:
	* x + nums[i]
	* x - nums[i]
	* x ^ nums[i] (bitwise-XOR)
	Note that you can use each nums[i] any number of times in any order. 
	Operations that set x to be out of the range 0 <= x <= 1000 are valid, but 
	no more operations can be done afterward. Return the minimum number of 
	operations needed to convert x = start into goal, and -1 if it is not 
	possible.

	Example 1:
	Input: nums = [1,3], start = 6, goal = 4
	Output: 2
	Explanation: We can go from 6 → 7 → 4 with the following 2 operations.
	             - 6 ^ 1 = 7
	             - 7 ^ 3 = 4
	
	Example 2:
	Input: nums = [2,4,12], start = 2, goal = 12
	Output: 2
	Explanation: We can go from 2 → 14 → 12 with the following 2 operations.
	             - 2 + 12 = 14
	             - 14 - 2 = 12
	
	Example 3:
	Input: nums = [3,5,7], start = 0, goal = -4
	Output: 2
	Explanation: We can go from 0 → 3 → -4 with the following 2 operations. 
	             - 0 + 3 = 3
	             - 3 - 7 = -4
	             Note that the last operation sets x out of the range 
	             0 <= x <= 1000, which is valid.
	
	Example 4:
	Input: nums = [2,8,16], start = 0, goal = 1
	Output: -1
	Explanation: There is no way to convert 0 into 1.
	
	Example 5:
	Input: nums = [1], start = 0, goal = 3
	Output: 3
	Explanation: We can go from 0 → 1 → 2 → 3 with the following 3 operations. 
	             - 0 + 1 = 1 
	             - 1 + 1 = 2
	             - 2 + 1 = 3

	Constraints:
	* 1 <= nums.length <= 1000
	* -10^9 <= nums[i], goal <= 10^9
	* 0 <= start <= 1000
	* start != goal
	* All the integers in nums are distinct."""

    def minimumOperations(self, nums: List[int], start: int, goal: int) -> int:
        ans = 0
        queue = deque([start])
        visited = [False]*1001
        while queue: 
            for _ in range(len(queue)): 
                val = queue.popleft()
                if val == goal: return ans 
                if 0 <= val <= 1000 and not visited[val]: 
                    visited[val] = True
                    for x in nums: 
                        for xx in (val+x, val-x, val^x):
                            queue.append(xx)
            ans += 1
        return -1 


    """2060. Check if an Original String Exists Given Two Encoded Strings (Hard)
	An original string, consisting of lowercase English letters, can be encoded 
	by the following steps:
	* Arbitrarily split it into a sequence of some number of non-empty substrings.
	* Arbitrarily choose some elements (possibly none) of the sequence, and 
	  replace each with its length (as a numeric string).
	* Concatenate the sequence as the encoded string.
	For example, one way to encode an original string "abcdefghijklmnop" might 
	be:
	* Split it as a sequence: ["ab", "cdefghijklmn", "o", "p"].
	* Choose the second and third elements to be replaced by their lengths, 
	  respectively. The sequence becomes ["ab", "12", "1", "p"].
	* Concatenate the elements of the sequence to get the encoded string: 
	  "ab121p".
	Given two encoded strings s1 and s2, consisting of lowercase English 
	letters and digits 1-9 (inclusive), return true if there exists an original 
	string that could be encoded as both s1 and s2. Otherwise, return false.
	Note: The test cases are generated such that the number of consecutive 
	digits in s1 and s2 does not exceed 3.

	Example 1:
	Input: s1 = "internationalization", s2 = "i18n"
	Output: true
	Explanation: It is possible that "internationalization" was the original 
	             string.
	             - "internationalization" 
	               -> Split:       ["internationalization"]
	               -> Do not replace any element
	               -> Concatenate:  "internationalization", which is s1.
	             - "internationalization"
	               -> Split:       ["i", "nternationalizatio", "n"]
	               -> Replace:     ["i", "18",                 "n"]
	               -> Concatenate:  "i18n", which is s2
	
	Example 2:
	Input: s1 = "l123e", s2 = "44"
	Output: true
	Explanation: It is possible that "leetcode" was the original string.
	             - "leetcode" 
	               -> Split:      ["l", "e", "et", "cod", "e"]
	               -> Replace:    ["l", "1", "2",  "3",   "e"]
	               -> Concatenate: "l123e", which is s1.
	             - "leetcode" 
	               -> Split:      ["leet", "code"]
	               -> Replace:    ["4",    "4"]
	               -> Concatenate: "44", which is s2.
	
	Example 3:
	Input: s1 = "a5b", s2 = "c5b"
	Output: false
	Explanation: It is impossible.
	             - The original string encoded as s1 must start with the letter 'a'.
	             - The original string encoded as s2 must start with the letter 'c'.
	
	Example 4:
	Input: s1 = "112s", s2 = "g841"
	Output: true
	Explanation: It is possible that "gaaaaaaaaaaaas" was the original string
	             - "gaaaaaaaaaaaas"
	               -> Split:      ["g", "aaaaaaaaaaaa", "s"]
	               -> Replace:    ["1", "12",           "s"]
	               -> Concatenate: "112s", which is s1.
	             - "gaaaaaaaaaaaas"
	               -> Split:      ["g", "aaaaaaaa", "aaaa", "s"]
	               -> Replace:    ["g", "8",        "4",    "1"]
	               -> Concatenate: "g841", which is s2.
	
	Example 5:
	Input: s1 = "ab", s2 = "a2"
	Output: false
	Explanation: It is impossible.
	             - The original string encoded as s1 has two letters.
	             - The original string encoded as s2 has three letters.

	Constraints:
	* 1 <= s1.length, s2.length <= 40
	* s1 and s2 consist of digits 1-9 (inclusive), and lowercase English 
	 l etters only.
	* The number of consecutive digits in s1 and s2 does not exceed 3."""

    def possiblyEquals(self, s1: str, s2: str) -> bool:
        
        def gg(s): 
            """Return possible length."""
            ans = {int(s)}
            for i in range(1, len(s)): 
                ans |= {x+y for x in gg(s[:i]) for y in gg(s[i:])}
            return ans
        
        @cache
        def fn(i, j, diff): 
            """Return True if s1[i:] matches s2[j:] with given differences."""
            if i == len(s1) and j == len(s2): return diff == 0
            if i < len(s1) and s1[i].isdigit(): 
                ii = i
                while ii < len(s1) and s1[ii].isdigit(): ii += 1
                for x in gg(s1[i:ii]): 
                    if fn(ii, j, diff-x): return True 
            elif j < len(s2) and s2[j].isdigit(): 
                jj = j 
                while jj < len(s2) and s2[jj].isdigit(): jj += 1
                for x in gg(s2[j:jj]): 
                    if fn(i, jj, diff+x): return True 
            elif diff == 0: 
                if i < len(s1) and j < len(s2) and s1[i] == s2[j]: return fn(i+1, j+1, 0)
            elif diff > 0: 
                if i < len(s1): return fn(i+1, j, diff-1)
            else: 
                if j < len(s2): return fn(i, j+1, diff+1)
            return False 
            
        return fn(0, 0, 0)


    """2062. Count Vowel Substrings of a String (Easy)
	A substring is a contiguous (non-empty) sequence of characters within a 
	string. A vowel substring is a substring that only consists of vowels 
	('a', 'e', 'i', 'o', and 'u') and has all five vowels present in it. Given 
	a string word, return the number of vowel substrings in word.

	Example 1:
	Input: word = "aeiouu"
	Output: 2
	Explanation: The vowel substrings of word are as follows (underlined):
	             - "aeiouu"
	             - "aeiouu"
	
	Example 2:
	Input: word = "unicornarihan"
	Output: 0
	Explanation: Not all 5 vowels are present, so there are no vowel substrings.

	Example 3:
	Input: word = "cuaieuouac"
	Output: 7
	Explanation: The vowel substrings of word are as follows (underlined):
	             - "cuaieuouac"
	             - "cuaieuouac"
	             - "cuaieuouac"
	             - "cuaieuouac"
	             - "cuaieuouac"
	             - "cuaieuouac"
	             - "cuaieuouac"
	
	Example 4:
	Input: word = "bbaeixoubb"
	Output: 0
	Explanation: The only substrings that contain all five vowels also contain 
	             consonants, so there are no vowel substrings.

	Constraints:
	* 1 <= word.length <= 100
	* word consists of lowercase English letters only."""

    def countVowelSubstrings(self, word: str) -> int:
        ans = 0 
        freq = defaultdict(int)
        for i, x in enumerate(word): 
            if x in "aeiou": 
                if not i or word[i-1] not in "aeiou": 
                    jj = j = i # set anchor
                    freq.clear()
                freq[x] += 1
                while len(freq) == 5 and all(freq.values()): 
                    freq[word[j]] -= 1
                    j += 1
                ans += j - jj
        return ans 


    """2063. Vowels of All Substrings (Medium)
	Given a string word, return the sum of the number of vowels ('a', 'e', 'i', 
	'o', and 'u') in every substring of word. A substring is a contiguous (non-
	empty) sequence of characters within a string. Note: Due to the large 
	constraints, the answer may not fit in a signed 32-bit integer. Please be 
	careful during the calculations.

	Example 1:
	Input: word = "aba"
	Output: 6
	Explanation: All possible substrings are: "a", "ab", "aba", "b", "ba", and 
	             "a".
	             - "b" has 0 vowels in it
	             - "a", "ab", "ba", and "a" have 1 vowel each
	             - "aba" has 2 vowels in it
	             Hence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6. 
	
	Example 2:
	Input: word = "abc"
	Output: 3
	Explanation: All possible substrings are: "a", "ab", "abc", "b", "bc", and 
	             "c".
	             - "a", "ab", and "abc" have 1 vowel each
	             - "b", "bc", and "c" have 0 vowels each
	             Hence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3. 
	
	Example 3:
	Input: word = "ltcd"
	Output: 0
	Explanation: There are no vowels in any substring of "ltcd".

	Example 4:
	Input: word = "noosabasboosa"
	Output: 237
	Explanation: There are a total of 237 vowels in all the substrings.

	Constraints:
	* 1 <= word.length <= 10^5
	* word consists of lowercase English letters."""

    def countVowels(self, word: str) -> int:
        return sum((i+1)*(len(word)-i) for i, x in enumerate(word) if x in "aeiou")


    """2064. Minimized Maximum of Products Distributed to Any Store (Medium)
	You are given an integer n indicating there are n specialty retail stores. 
	There are m product types of varying amounts, which are given as a 0-
	indexed integer array quantities, where quantities[i] represents the number 
	of products of the ith product type. You need to distribute all products to 
	the retail stores following these rules:
	* A store can only be given at most one product type but can be given any 
	  amount of it.
	* After distribution, each store will be given some number of products 
	  (possibly 0). Let x represent the maximum number of products given to any 
	  store. You want x to be as small as possible, i.e., you want to minimize 
	  the maximum number of products that are given to any store.
	Return the minimum possible x.

	Example 1:
	Input: n = 6, quantities = [11,6]
	Output: 3
	Explanation: One optimal way is:
	             - The 11 products of type 0 are distributed to the first four 
	               stores in these amounts: 2, 3, 3, 3
	             - The 6 products of type 1 are distributed to the other two 
	               stores in these amounts: 3, 3
	             The maximum number of products given to any store is 
	             max(2, 3, 3, 3, 3, 3) = 3.
	
	Example 2:
	Input: n = 7, quantities = [15,10,10]
	Output: 5
	Explanation: One optimal way is:
	             - The 15 products of type 0 are distributed to the first three 
	               stores in these amounts: 5, 5, 5
	             - The 10 products of type 1 are distributed to the next two 
	               stores in these amounts: 5, 5
	             - The 10 products of type 2 are distributed to the last two 
	               stores in these amounts: 5, 5
	             The maximum number of products given to any store is 
	             max(5, 5, 5, 5, 5, 5, 5) = 5.
	
	Example 3:
	Input: n = 1, quantities = [100000]
	Output: 100000
	Explanation: The only optimal way is:
	             - The 100000 products of type 0 are distributed to the only 
	               store.
	             The maximum number of products given to any store is 
	             max(100000) = 100000.

	Constraints:
	* m == quantities.length
	* 1 <= m <= n <= 10^5
	* 1 <= quantities[i] <= 10^5"""

    def minimizedMaximum(self, n: int, quantities: List[int]) -> int:
        lo, hi = 1, max(quantities)
        while lo < hi: 
            mid = lo + hi >> 1
            if sum(ceil(qty/mid) for qty in quantities) <= n: hi = mid 
            else: lo = mid + 1
        return lo


    """2065. Maximum Path Quality of a Graph (Hard)
	There is an undirected graph with n nodes numbered from 0 to n - 1 
	(inclusive). You are given a 0-indexed integer array values where values[i] 
	is the value of the ith node. You are also given a 0-indexed 2D integer 
	array edges, where each edges[j] = [uj, vj, timej] indicates that there is 
	an undirected edge between the nodes uj and vj, and it takes timej seconds 
	to travel between the two nodes. Finally, you are given an integer maxTime.
	A valid path in the graph is any path that starts at node 0, ends at node 0, 
	and takes at most maxTime seconds to complete. You may visit the same node 
	multiple times. The quality of a valid path is the sum of the values of the 
	unique nodes visited in the path (each node's value is added at most once 
	to the sum). Return the maximum quality of a valid path. Note: There are at 
	most four edges connected to each node.

	Example 1:
	Input: values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49
	Output: 75
	Explanation: One possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time 
	             taken is 10 + 10 + 10 + 10 = 40 <= 49. The nodes visited are 
	             0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.
	
	Example 2:
	Input: values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30
	Output: 25
	Explanation: One possible path is 0 -> 3 -> 0. The total time taken is 
	             10 + 10 = 20 <= 30. The nodes visited are 0 and 3, giving a 
	             maximal path quality of 5 + 20 = 25.
	
	Example 3:
	Input: values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50
	Output: 7
	Explanation: One possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time 
	             taken is 10 + 13 + 13 + 10 = 46 <= 50. The nodes visited are 
	             0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.
	
	Example 4:
	Input: values = [0,1,2], edges = [[1,2,10]], maxTime = 10
	Output: 0
	Explanation: The only path is 0. The total time taken is 0. The only node 
	             visited is 0, giving a maximal path quality of 0.

	Constraints:
	* n == values.length
	* 1 <= n <= 1000
	* 0 <= values[i] <= 108
	* 0 <= edges.length <= 2000
	* edges[j].length == 3
	* 0 <= uj < vj <= n - 1
	* 10 <= timej, maxTime <= 100
	* All the pairs [uj, vj] are unique.
	* There are at most four edges connected to each node.
	* The graph may not be connected."""

    def maximalPathQuality(self, values: List[int], edges: List[List[int]], maxTime: int) -> int:
        graph = [[] for _ in values]
        for u, v, t in edges: 
            graph[u].append((v, t))
            graph[v].append((u, t))
        
        ans = 0 
        stack = [(0, values[0], 0, 1)]
        while stack: 
            time, val, u, mask = stack.pop()
            if u == 0: ans = max(ans, val)
            for v, t in graph[u]: 
                if time + t <= maxTime: 
                    if not mask & 1<<v: stack.append((time+t, val+values[v], v, mask ^ 1<<v))
                    else: stack.append((time+t, val, v, mask))
        return ans 


"""146. LRU Cache (Medium)
Design and implement a data structure for Least Recently Used (LRU) cache. It 
should support the following operations: get and put. 
get(key)        - Get the value (will always be positive) of the key if the key 
                  exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. 

When the cache reached its capacity, it should invalidate the least recently 
used item before inserting a new item. The cache is initialized with a positive 
capacity.

Follow up: Could you do both operations in O(1) time complexity?

Example:
LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4"""

class ListNode:
    def __init__(self, key=0, val=0, prev=None, next=None):
        self.key = key
        self.val = val
        self.prev = prev
        self.next = next
        

class LRUCache:

    def __init__(self, capacity: int):
        """Initialize hash table & dll"""
        self.cpty = capacity
        self.htab = dict() #hash table 
        self.head = ListNode() #doubly linked list
        self.tail = ListNode()
        self.head.next = self.tail
        self.tail.prev = self.head 
        
    def _del(self, key: int) -> int: 
        """Delete given key from hash table & dll"""
        node = self.htab.pop(key)
        node.prev.next = node.next
        node.next.prev = node.prev
        return node.val

    def _ins(self, key: int, value: int) -> None: 
        """Insert at tail"""
        node = ListNode(key, value, self.tail.prev, self.tail)
        self.tail.prev.next = self.tail.prev = node
        self.htab[key] = node
        
    def get(self, key: int) -> int:
        if key not in self.htab: return -1
        value = self._del(key)
        self._ins(key, value)
        return value

    def put(self, key: int, value: int) -> None:
        if key in self.htab: self._del(key)
        self._ins(key, value)
        if len(self.htab) > self.cpty: 
            self._del(self.head.next.key)


"""155. Min Stack (Easy)
Design a stack that supports push, pop, top, and retrieving the minimum element 
in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 
Example 1:
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

Constraints:
Methods pop, top and getMin operations will always be called on non-empty stacks."""

class MinStack:

    def __init__(self):
        self.stack = []

    def push(self, val: int) -> None:
        if self.stack: self.stack.append((val, min(val, self.stack[-1][1])))
        else: self.stack.append((val, val))

    def pop(self) -> None:
        self.stack.pop()

    def top(self) -> int:
        return self.stack[-1][0]

    def getMin(self) -> int:
        return self.stack[-1][1]


"""170. Two Sum III - Data structure design (Easy)
Design a data structure that accepts a stream of integers and checks if it has 
a pair of integers that sum up to a particular value.

Implement the TwoSum class:
* TwoSum() Initializes the TwoSum object, with an empty array initially.
* void add(int number) Adds number to the data structure.
* boolean find(int value) Returns true if there exists any pair of numbers whose sum is equal to value, otherwise, it returns false.

Example 1:
Input: ["TwoSum", "add", "add", "add", "find", "find"]
       [[], [1], [3], [5], [4], [7]]
Output: [null, null, null, null, true, false]
Explanation: 
TwoSum twoSum = new TwoSum();
twoSum.add(1);   // [] --> [1]
twoSum.add(3);   // [1] --> [1,3]
twoSum.add(5);   // [1,3] --> [1,3,5]
twoSum.find(4);  // 1 + 3 = 4, return true
twoSum.find(7);  // No two integers sum up to 7, return false

Constraints:
* -10^5 <= number <= 10^5
* -2^31 <= value <= 2^31 - 1
* At most 5 * 10^4 calls will be made to add and find."""

class TwoSum:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.freq = {}

    def add(self, number: int) -> None:
        """
        Add the number to an internal data structure..
        """
        self.freq[number] = 1 + self.freq.get(number, 0)

    def find(self, value: int) -> bool:
        """
        Find if there exists any pair of numbers which sum is equal to the value.
        """
        for x in self.freq: 
            if value - x != x and value - x in self.freq: return True 
            elif value - x == x and self.freq[x] > 1: return True 
        return False 


"""173. Binary Search Tree Iterator (Medium)
Implement an iterator over a binary search tree (BST). Your iterator will be 
initialized with the root node of a BST. Calling next() will return the next 
smallest number in the BST.

Example:

BSTIterator iterator = new BSTIterator(root);
iterator.next();    // return 3
iterator.next();    // return 7
iterator.hasNext(); // return true
iterator.next();    // return 9
iterator.hasNext(); // return true
iterator.next();    // return 15
iterator.hasNext(); // return true
iterator.next();    // return 20
iterator.hasNext(); // return false
 
Note:
next() and hasNext() should run in average O(1) time and uses O(h) memory, 
where h is the height of the tree. You may assume that next() call will always 
be valid, that is, there will be at least a next smallest number in the BST 
when next() is called."""

class BSTIterator:

    def __init__(self, root: TreeNode):
        self.stack = []
        self.node = root

    def next(self) -> int:
        while self.node: 
            self.stack.append(self.node)
            self.node = self.node.left
        self.node = node = self.stack.pop()
        self.node = self.node.right
        return node.val

    def hasNext(self) -> bool:
        return self.stack or self.node 


"""208. Implement Trie (Prefix Tree) (Medium)
Implement a trie with insert, search, and startsWith methods.

Example:
Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

Note:
You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings."""

class Trie:

    def __init__(self):
        self.root = {}

    def insert(self, word: str) -> None:
        node = self.root
        for ch in word: node = node.setdefault(ch, {})
        node["$"] = word

    def search(self, word: str) -> bool:
        node = self.root
        for ch in word: 
            if ch not in node: return False 
            node = node[ch]
        return node.get("$")

    def startsWith(self, prefix: str) -> bool:
        node = self.root
        for ch in prefix: 
            if ch not in node: return False 
            node = node[ch]
        return True


"""211. Add and Search Word - Data structure design (Medium)
Design a data structure that supports the following two operations:
void addWord(word)
bool search(word)

search(word) can search a literal word or a regular expression string 
containing only letters a-z or .. A . means it can represent any one letter.

Example:
addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true

Note: You may assume that all words are consist of lowercase letters a-z."""

class WordDictionary:

    def __init__(self):
        self.root = {}

    def addWord(self, word: str) -> None:
        node = self.root
        for letter in word:
            node = node.setdefault(letter, {})
        node["#"] = True #sentinel 

    def search(self, word: str) -> bool:
        
        def fn(node, i): 
            """Return True if word[i:] is found at trie rooted at n"""
            if not node: return False 
            if i == len(word): return node.get("#", False)
            if word[i] == ".": 
                return any(fn(node[k], i+1) for k in node if k != "#")
            else: 
                return fn(node.get(word[i]), i+1)
        
        return fn(self.root, 0)


"""225. Implement Stack using Queues (Easy)
Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop()   -- Removes the element on top of the stack.
top()   -- Get the top element.
empty() -- Return whether the stack is empty.

Example:
MyStack stack = new MyStack();

stack.push(1);
stack.push(2);  
stack.top();   // returns 2
stack.pop();   // returns 2
stack.empty(); // returns false

Notes:
You must use only standard operations of a queue -- which means only push to 
back, peek/pop from front, size, and is empty operations are valid. Depending 
on your language, queue may not be supported natively. You may simulate a queue 
by using a list or deque (double-ended queue), as long as you use only standard 
operations of a queue. You may assume that all operations are valid (for 
example, no pop or top operations will be called on an empty stack)."""

class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.queue = deque()

    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        self.queue.append(x)
        for _ in range(len(self.queue)-1):
            self.queue.append(self.queue.popleft())

    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        return self.queue.popleft()

    def top(self) -> int:
        """
        Get the top element.
        """
        return self.queue[0] 

    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        return not self.queue 


"""232. Implement Queue using Stacks (Easy)
Implement the following operations of a queue using stacks.
push(x) -- Push element x to the back of queue.
pop()   -- Removes the element from in front of queue.
peek()  -- Get the front element.
empty() -- Return whether the queue is empty.

Example:
MyQueue queue = new MyQueue();
queue.push(1);
queue.push(2);  
queue.peek();  // returns 1
queue.pop();   // returns 1
queue.empty(); // returns false

Notes:
You must use only standard operations of a stack -- which means only push to 
top, peek/pop from top, size, and is empty operations are valid. Depending on 
your language, stack may not be supported natively. You may simulate a stack by 
using a list or deque (double-ended queue), as long as you use only standard 
operations of a stack. You may assume that all operations are valid (for 
example, no pop or peek operations will be called on an empty queue)."""

class MyQueue:

    def __init__(self):
        self.in_ = []
        self.out = []

    def push(self, x: int) -> None:
        self.in_.append(x)

    def pop(self) -> int:
        self.peek()
        return self.out.pop()

    def peek(self) -> int:
        if not self.out: 
            while self.in_: self.out.append(self.in_.pop())
        return self.out[-1]

    def empty(self) -> bool:
        return not self.in_ and not self.out


"""244. Shortest Word Distance II (Medium)
Design a class which receives a list of words in the constructor, and implements 
a method that takes two words word1 and word2 and return the shortest distance 
between these two words in the list. Your method will be called repeatedly many 
times with different parameters. 

Example:
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Input: word1 = “coding”, word2 = “practice”
Output: 3
Input: word1 = "makes", word2 = "coding"
Output: 1
Note: You may assume that word1 does not equal to word2, and word1 and word2 
      are both in the list."""

class WordDistance:

    def __init__(self, words: List[str]):
        self.loc = {}
        for i, w in enumerate(words):
            self.loc.setdefault(w, []).append(i)

    def shortest(self, word1: str, word2: str) -> int:
        ans = inf
        loc1, loc2 = self.loc[word1], self.loc[word2]
        i1 = i2 = 0 
        while i1 < len(loc1) and i2 < len(loc2):
            ans = min(ans, abs(loc1[i1] - loc2[i2]))
            if loc1[i1] < loc2[i2]: i1 += 1
            else: i2 += 1
        return ans 


"""251. Flatten 2D Vector (Medium)
Design and implement an iterator to flatten a 2d vector. It should support the 
following operations: next and hasNext.

Example:
Vector2D iterator = new Vector2D([[1,2],[3],[4]]);

iterator.next(); // return 1
iterator.next(); // return 2
iterator.next(); // return 3
iterator.hasNext(); // return true
iterator.hasNext(); // return true
iterator.next(); // return 4
iterator.hasNext(); // return false
 
Notes: Please remember to RESET your class variables declared in Vector2D, as 
       static/class variables are persisted across multiple test cases. Please 
       see here for more details. You may assume that next() call will always 
       be valid, that is, there will be at least a next element in the 2d vector 
       when next() is called.
 
Follow up: As an added challenge, try to code it using only iterators in C++ or 
           iterators in Java."""

class Vector2D:

    def __init__(self, v: List[List[int]]):
        
        def fn(arr):
            """Return flattened array."""
            ans = []
            for x in arr:
                if isinstance(x, int): ans.append(x)
                else: ans.extend(fn(x))
            return ans 
        
        self.vals = fn(v)
        self.i = 0                 

    def next(self) -> int:
        i, self.i = self.i, self.i+1
        return self.vals[i]

    def hasNext(self) -> bool:
        return self.i < len(self.vals)


"""271. Encode and Decode Strings (Medium)
Design an algorithm to encode a list of strings to a string. The encoded string 
is then sent over the network and is decoded back to the original list of strings.

Machine 1 (sender) has the function:

string encode(vector<string> strs) {
  // ... your code
  return encoded_string;
}
Machine 2 (receiver) has the function:
vector<string> decode(string s) {
  //... your code
  return strs;
}
So Machine 1 does:

string encoded_string = encode(strs);
and Machine 2 does:

vector<string> strs2 = decode(encoded_string);
strs2 in Machine 2 should be the same as strs in Machine 1. Implement the encode 
and decode methods.

Note:
* The string may contain any possible characters out of 256 valid ascii 
  characters. Your algorithm should be generalized enough to work on any 
  possible characters.
* Do not use class member/global/static variables to store states. Your encode 
  and decode algorithms should be stateless.
* Do not rely on any library method such as eval or serialize methods. You 
  should implement your own encode/decode algorithm."""

class Codec:
    def encode(self, strs: [str]) -> str:
        return "".join(f"{len(ss)}|{ss}" for ss in strs)

    def decode(self, s: str) -> [str]:
        ans = []
        i = 0
        while i < len(s):
            ii = s.find("|", i)
            i = ii+1+int(s[i:ii])
            ans.append(s[ii+1:i])
        return ans 


"""297. Serialize and Deserialize Binary Tree (Hard)
Serialization is the process of converting a data structure or object into a 
sequence of bits so that it can be stored in a file or memory buffer, or 
transmitted across a network connection link to be reconstructed later in the 
same or another computer environment. Design an algorithm to serialize and 
deserialize a binary tree. There is no restriction on how your 
serialization/deserialization algorithm should work. You just need to ensure 
that a binary tree can be serialized to a string and this string can be 
deserialized to the original tree structure. Clarification: The input/output 
format is the same as how LeetCode serializes a binary tree. You do not 
necessarily need to follow this format, so please be creative and come up with 
different approaches yourself.

Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [1,2]

Constraints:
* The number of nodes in the tree is in the range [0, 10^4].
* -1000 <= Node.val <= 1000"""

class Codec:

    def serialize(self, root):
        ans = []
        queue = [root]
        for node in queue: 
            if node: ans.append(node.val)
            else: ans.append('$')
            if node: 
                queue.append(node.left)
                queue.append(node.right)
        return ",".join(map(str, ans))

    def deserialize(self, data):
        root = parent = None 
        queue = deque()
        for x in data.split(','): 
            if x == '$': node = None
            else: node = TreeNode(int(x))
            if not root: root = node 
            elif parent: 
                parent.right = node 
                parent = None 
            else: 
                parent = queue.popleft()
                parent.left = node 
            if node: queue.append(node)
        return root 


"""281. Zigzag Iterator (Medium)
Given two 1d vectors, implement an iterator to return their elements alternately.

Example:
Input:
v1 = [1,2]
v2 = [3,4,5,6] 
Output: [1,3,2,4,5,6]
Explanation: By calling next repeatedly until hasNext returns false, the order 
             of elements returned by next should be: [1,3,2,4,5,6].

Follow up: What if you are given k 1d vectors? How well can your code be 
           extended to such cases?

Clarification for the follow up question: The "Zigzag" order is not clearly 
defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to 
you, replace "Zigzag" with "Cyclic". For example:

Input:
[1,2,3]
[4,5,6,7]
[8,9]
Output: [1,4,8,2,5,9,3,6,7]."""

class ZigzagIterator:
    def __init__(self, v1: List[int], v2: List[int]):
        self.vals = deque()
        if v1: self.vals.append(deque(v1))
        if v2: self.vals.append(deque(v2))

    def next(self) -> int:
        v = self.vals.popleft()
        ans = v.popleft()
        if v: self.vals.append(v)
        return ans 

    def hasNext(self) -> bool:
        return self.vals


"""284. Peeking Iterator (Medium)
Given an Iterator class interface with methods: next() and hasNext(), design 
and implement a PeekingIterator that support the peek() operation -- it 
essentially peek() at the element that will be returned by the next call to 
next().

Example:
Assume that the iterator is initialized to the beginning of the list: [1,2,3].
Call next() gets you 1, the first element in the list.
Now you call peek() and it returns 2, the next element. Calling next() after 
that still return 2. 
You call next() the final time and it returns 3, the last element. 
Calling hasNext() after that should return false.

Follow up: How would you extend your design to be generic and work with all 
           types, not just integer?"""

class PeekingIterator:
    def __init__(self, iterator):
        self.iter = iterator
        self._fill() #fill the buffer 
        
    def _fill(self):
        if self.iter.hasNext(): self.buff = self.iter.next()
        else: self.buff = None

    def peek(self):
        return self.buff

    def next(self):
        tmp = self.buff
        self._fill()
        return tmp

    def hasNext(self):
        return self.buff is not None


"""288. Unique Word Abbreviation (Medium)
The abbreviation of a word is a concatenation of its first letter, the number 
of characters between the first and last letter, and its last letter. If a word 
has only two characters, then it is an abbreviation of itself.

For example:
* dog --> d1g because there is one letter between the first letter 'd' and the 
  last letter 'g'.
* internationalization --> i18n because there are 18 letters between the first 
  letter 'i' and the last letter 'n'.
* it --> it because any word with only two characters is an abbreviation of 
  itself.

Implement the ValidWordAbbr class:
* ValidWordAbbr(String[] dictionary) Initializes the object with a dictionary 
  of words.
* boolean isUnique(string word) Returns true if either of the following 
  conditions are met (otherwise returns false):
  + There is no word in dictionary whose abbreviation is equal to word's 
    abbreviation.
  + For any word in dictionary whose abbreviation is equal to word's 
    abbreviation, that word and word are the same.

Example 1:
Input: ["ValidWordAbbr", "isUnique", "isUnique", "isUnique", "isUnique"]
       [[["deer", "door", "cake", "card"]], ["dear"], ["cart"], ["cane"], ["make"]]
Output: [null, false, true, false, true]

Explanation: 
ValidWordAbbr validWordAbbr = new ValidWordAbbr(["deer", "door", "cake", "card"]);
validWordAbbr.isUnique("dear"); // return false, dictionary word "deer" and word "dear" have the same abbreviation
                                // "d2r" but are not the same.
validWordAbbr.isUnique("cart"); // return true, no words in the dictionary have the abbreviation "c2t".
validWordAbbr.isUnique("cane"); // return false, dictionary word "cake" and word "cane" have the same abbreviation 
                                // "c2e" but are not the same.
validWordAbbr.isUnique("make"); // return true, no words in the dictionary have the abbreviation "m2e".
validWordAbbr.isUnique("cake"); // return true, because "cake" is already in the dictionary and no other word in the dictionary has "c2e" abbreviation.
 
Constraints:
* 1 <= dictionary.length <= 3 * 104
* 1 <= dictionary[i].length <= 20
* dictionary[i] consists of lowercase English letters.
* 1 <= word.length <= 20
* word consists of lowercase English letters.
* At most 5000 calls will be made to isUnique."""

class ValidWordAbbr:

    def __init__(self, dictionary: List[str]):
        self.mp = {}
        for word in set(dictionary): 
            key = word[0] + str(len(word)) + word[-1]
            self.mp.setdefault(key, set()).add(word)

    def isUnique(self, word: str) -> bool:
        key = word[0] + str(len(word)) + word[-1]
        return self.mp.get(key, set()) <= {word}


"""295. Find Median from Data Stream (Hard)
Median is the middle value in an ordered integer list. If the size of the list 
is even, there is no middle value. So the median is the mean of the two middle 
value.

For example, [2,3,4], the median is 3; [2,3], the median is (2 + 3) / 2 = 2.5

Design a data structure that supports the following two operations:
* void addNum(int num) - Add a integer number from the data stream to the data 
  structure.
* double findMedian() - Return the median of all elements so far.

Example:
addNum(1)
addNum(2)
findMedian() -> 1.5
addNum(3) 
findMedian() -> 2

Follow up:
* If all integer numbers from the stream are between 0 and 100, how would you 
  optimize it?
* If 99% of all integer numbers from the stream are between 0 and 100, how 
  would you optimize it?"""

class MedianFinder:

    def __init__(self):
        self.small = [] # min-heap
        self.large = [] # max-heap

    def addNum(self, num: int) -> None:
        if not self.small or num >= self.small[0]: heappush(self.small, num)
        else: heappush(self.large, -num)
        if len(self.small) > 1 + len(self.large): heappush(self.large, -heappop(self.small))
        elif len(self.small) < len(self.large): heappush(self.small, -heappop(self.large))

    def findMedian(self) -> float:
        if len(self.small) > len(self.large): return self.small[0]
        return (self.small[0] - self.large[0])/2


"""303. Range Sum Query - Immutable (Easy)
Given an integer array nums, handle multiple queries of the following type:
* Calculate the sum of the elements of nums between indices left and right 
  inclusive where left <= right.
Implement the NumArray class:
* NumArray(int[] nums) Initializes the object with the integer array nums.
* int sumRange(int left, int right) Returns the sum of the elements of nums 
  between indices left and right inclusive (i.e. 
  nums[left] + nums[left + 1] + ... + nums[right]).

Example 1:
Input: ["NumArray", "sumRange", "sumRange", "sumRange"]
       [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output: [null, 1, -1, -3]
Explanation: 
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3

Constraints:
* 1 <= nums.length <= 10^4
* -10^5 <= nums[i] <= 10^5
* 0 <= left <= right < nums.length
* At most 10^4 calls will be made to sumRange."""

class NumArray:

    def __init__(self, nums: List[int]):
        self.prefix = [0]
        for x in nums: self.prefix.append(self.prefix[-1] + x)

    def sumRange(self, i: int, j: int) -> int:
        return self.prefix[j+1] - self.prefix[i]


"""304. Range Sum Query 2D - Immutable (Medium)
Given a 2D matrix matrix, find the sum of the elements inside the rectangle 
defined by its upper left corner (row1, col1) and lower right corner (row2, 
col2).

Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12

Note:
You may assume that the matrix does not change.
There are many calls to sumRegion function.
You may assume that row1 ≤ row2 and col1 ≤ col2."""

class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        if not matrix: return 
        m, n = len(matrix), len(matrix[0])
        self.prefix = [[0]*(n+1) for _ in range(m+1)]
        for i in range(m):
            for j in range(n):
                self.prefix[i+1][j+1] = matrix[i][j] + self.prefix[i][j+1] + self.prefix[i+1][j] - self.prefix[i][j]
        
    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        return self.prefix[row2+1][col2+1] - self.prefix[row1][col2+1] - self.prefix[row2+1][col1] + self.prefix[row1][col1]


"""341. Flatten Nested List Iterator (Medium)
Given a nested list of integers, implement an iterator to flatten it. Each 
element is either an integer, or a list -- whose elements may also be integers 
or other lists.

Example 1:
Input: [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,1,2,1,1].

Example 2:
Input: [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,4,6]."""

class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.stack = []
        if nestedList: self.stack.append((nestedList, 0))
        self.val = self._get()
            
    def _get(self) -> int: 
        """Get next value in queue."""
        while self.stack: 
            data, i = self.stack.pop()
            if i+1 < len(data): self.stack.append((data, i+1)) #backtracking point 
            if data[i].isInteger(): return data[i].getInteger()
            if not data[i].getList(): continue #empty list 
            self.stack.append((data[i].getList(), 0)) #push nested list on stack
        return None
    
    def next(self) -> int:
        ans, self.val = self.val, self._get()
        return ans 
    
    def hasNext(self) -> bool:
        return self.val is not None 


"""346. Moving Average from Data Stream (Easy)
Given a stream of integers and a window size, calculate the moving average of 
all integers in the sliding window. 

Implement the MovingAverage class:
* MovingAverage(int size) Initializes the object with the size of the window size.
* double next(int val) Returns the moving average of the last size values of the stream.

Example 1:
Input: ["MovingAverage", "next", "next", "next", "next"]
       [[3], [1], [10], [3], [5]]
Output: [null, 1.0, 5.5, 4.66667, 6.0]
Explanation: 
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // return 1.0 = 1 / 1
movingAverage.next(10); // return 5.5 = (1 + 10) / 2
movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3

Constraints:
* 1 <= size <= 1000
* -10^5 <= val <= 10^5
* At most 104 calls will be made to next."""

class MovingAverage:

    def __init__(self, size: int):
        """
        Initialize your data structure here.
        """
        self.nums = deque()
        self.size = size 
        self.rsm = 0

    def next(self, val: int) -> float:
        self.nums.append(val)
        self.rsm += val
        if len(self.nums) > self.size: 
            self.rsm -= self.nums.popleft()
        return self.rsm/len(self.nums)


"""348. Design Tic-Tac-Toe (Medium)
Assume the following rules are for the tic-tac-toe game on an n x n board 
between two players:
* A move is guaranteed to be valid and is placed on an empty block.
* Once a winning condition is reached, no more moves are allowed.
* A player who succeeds in placing n of their marks in a horizontal, vertical, 
  or diagonal row wins the game.

Implement the TicTacToe class:
* TicTacToe(int n) Initializes the object the size of the board n.
* int move(int row, int col, int player) Indicates that player with id player 
  plays at the cell (row, col) of the board. The move is guaranteed to be a valid move.

Follow up: Could you do better than O(n2) per move() operation?

Example 1:
Input: ["TicTacToe", "move", "move", "move", "move", "move", "move", "move"]
       [[3], [0, 0, 1], [0, 2, 2], [2, 2, 1], [1, 1, 2], [2, 0, 1], [1, 0, 2], [2, 1, 1]]
Output: [null, 0, 0, 0, 0, 0, 0, 1]
Explanation: 
TicTacToe ticTacToe = new TicTacToe(3);
Assume that player 1 is "X" and player 2 is "O" in the board.
ticTacToe.move(0, 0, 1); // return 0 (no one wins)
|X| | |
| | | |    // Player 1 makes a move at (0, 0).
| | | |

ticTacToe.move(0, 2, 2); // return 0 (no one wins)
|X| |O|
| | | |    // Player 2 makes a move at (0, 2).
| | | |

ticTacToe.move(2, 2, 1); // return 0 (no one wins)
|X| |O|
| | | |    // Player 1 makes a move at (2, 2).
| | |X|

ticTacToe.move(1, 1, 2); // return 0 (no one wins)
|X| |O|
| |O| |    // Player 2 makes a move at (1, 1).
| | |X|

ticTacToe.move(2, 0, 1); // return 0 (no one wins)
|X| |O|
| |O| |    // Player 1 makes a move at (2, 0).
|X| |X|

ticTacToe.move(1, 0, 2); // return 0 (no one wins)
|X| |O|
|O|O| |    // Player 2 makes a move at (1, 0).
|X| |X|

ticTacToe.move(2, 1, 1); // return 1 (player 1 wins)
|X| |O|
|O|O| |    // Player 1 makes a move at (2, 1).
|X|X|X|
 
Constraints:
* 2 <= n <= 100
* player is 1 or 2.
* 1 <= row, col <= n
* (row, col) are unique for each different call to move.
* At most n2 calls will be made to move."""

class TicTacToe:

    def __init__(self, n: int):
        self.n = n
        self.rows = [[0]*n for _ in range(2)]
        self.cols = [[0]*n for _ in range(2)]
        self.diag = [0]*2
        self.anti = [0]*2

    def move(self, row: int, col: int, player: int) -> int:
        self.rows[player-1][row] += 1
        self.cols[player-1][col] += 1
        if row == col: self.diag[player-1] += 1
        if row + col == self.n-1: self.anti[player-1] += 1
        if self.n in (self.rows[player-1][row], self.cols[player-1][col], self.diag[player-1], self.anti[player-1]): return player
        return 0 


"""352. Data Stream as Disjoint Intervals (Hard)
Given a data stream input of non-negative integers a1, a2, ..., an, summarize 
the numbers seen so far as a list of disjoint intervals. Implement the 
SummaryRanges class:
* SummaryRanges() Initializes the object with an empty stream.
* void addNum(int val) Adds the integer val to the stream.
* int[][] getIntervals() Returns a summary of the integers in the stream 
  currently as a list of disjoint intervals [starti, endi].

Example 1:
Input: ["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals"]
       [[], [1], [], [3], [], [7], [], [2], [], [6], []]
Output: [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]
Explanation
SummaryRanges summaryRanges = new SummaryRanges();
summaryRanges.addNum(1);      // arr = [1]
summaryRanges.getIntervals(); // return [[1, 1]]
summaryRanges.addNum(3);      // arr = [1, 3]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]
summaryRanges.addNum(7);      // arr = [1, 3, 7]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]
summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]
summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]
summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]
summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]

Constraints:
* 0 <= val <= 10^4
* At most 3 * 10^4 calls will be made to addNum and getIntervals.

Follow up: What if there are lots of merges and the number of disjoint 
           intervals is small compared to the size of the data stream?"""

class SummaryRanges:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.data = SortedList() 

    def addNum(self, val: int) -> None:
        k = self.data.bisect_left([val, val])
        if k and val <= self.data[k-1][1] or k < len(self.data) and self.data[k][0] == val: return 
        if (k == 0 or self.data[k-1][1]+1 < val) and (k == len(self.data) or val+1 < self.data[k][0]): self.data.add([val, val])
        elif k and self.data[k-1][1]+1 == val: 
            self.data[k-1][1] += 1
            if k < len(self.data) and val+1 == self.data[k][0]: 
                self.data[k-1][1] = self.data.pop(k)[1]
        elif k < len(self.data) and val+1 == self.data[k][0]: self.data[k][0] -= 1

    def getIntervals(self) -> List[List[int]]:
        return list(self.data)


"""353. Design Snake Game (Medium)
Design a Snake game that is played on a device with screen size height x width. 
Play the game online if you are not familiar with the game. The snake is 
initially positioned at the top left corner (0, 0) with a length of 1 unit. You 
are given an array food where food[i] = (ri, ci) is the row and column position 
of a piece of food that the snake can eat. When a snake eats a piece of food, 
its length and the game's score both increase by 1. Each piece of food appears 
one by one on the screen, meaning the second piece of food will not appear 
until the snake eats the first piece of food. When a piece of food appears on 
the screen, it is guaranteed that it will not appear on a block occupied by the 
snake. The game is over if the snake goes out of bounds (hits a wall) or if its 
head occupies a space that its body occupies after moving (i.e. a snake of 
length 4 cannot run into itself).

Implement the SnakeGame class:
* SnakeGame(int width, int height, int[][] food) Initializes the object with a 
  screen of size height x width and the positions of the food.
* int move(String direction) Returns the score of the game after applying one 
  direction move by the snake. If the game is over, return -1.

Example 1:
Input: ["SnakeGame", "move", "move", "move", "move", "move", "move"]
       [[3, 2, [[1, 2], [0, 1]]], ["R"], ["D"], ["R"], ["U"], ["L"], ["U"]]
Output: [null, 0, 0, 1, 1, 2, -1]
Explanation:
SnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);
snakeGame.move("R"); // return 0
snakeGame.move("D"); // return 0
snakeGame.move("R"); // return 1, snake eats the first piece of food. The second piece of food appears
                     // at (0, 1).
snakeGame.move("U"); // return 1
snakeGame.move("L"); // return 2, snake eats the second food. No more food appears.
snakeGame.move("U"); // return -1, game over because snake collides with border
 
Constraints:
* 1 <= width, height <= 104
* 1 <= food.length <= 50
* food[i].length == 2
* 0 <= ri < height
* 0 <= ci < width
* direction.length == 1
* direction is 'U', 'D', 'L', or 'R'.
* At most 104 calls will be made to move."""

class SnakeGame:

    def __init__(self, width: int, height: int, food: List[List[int]]):
        """
        Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].
        """
        self.width = width
        self.height = height 
        self.food = deque(food)
        self.position = OrderedDict({(0,0): 0})

    def move(self, direction: str) -> int:
        """
        Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body.
        """
        (i, j), _ = self.position.popitem(last=True) # current position
        self.position[(i, j)] = 0 # add back 
        if direction == "U": i -= 1
        elif direction == "L": j -= 1
        elif direction == "R": j += 1
        else: i += 1
        if self.food and self.food[0] == [i, j]: self.food.popleft()
        else: self.position.popitem(last=False)
        if not (0 <= i < self.height and 0 <= j < self.width) or (i, j) in self.position: return -1 # game over 
        self.position[(i, j)] = 0
        return len(self.position)-1


"""355. Design Twitter (Medium)
Design a simplified version of Twitter where users can post tweets, 
follow/unfollow another user and is able to see the 10 most recent tweets in 
the user's news feed. Your design should support the following methods:
+ postTweet(userId, tweetId): Compose a new tweet.
+ getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user's news 
  feed. Each item in the news feed must be posted by users who the user followed 
  or by the user herself. Tweets must be ordered from most recent to least recent.
+ follow(followerId, followeeId): Follower follows a followee.
+ unfollow(followerId, followeeId): Follower unfollows a followee.

Example:
Twitter twitter = new Twitter();
// User 1 posts a new tweet (id = 5).
twitter.postTweet(1, 5);
// User 1's news feed should return a list with 1 tweet id -> [5].
twitter.getNewsFeed(1);
// User 1 follows user 2.
twitter.follow(1, 2);
// User 2 posts a new tweet (id = 6).
twitter.postTweet(2, 6);
// User 1's news feed should return a list with 2 tweet ids -> [6, 5].
// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
twitter.getNewsFeed(1);
// User 1 unfollows user 2.
twitter.unfollow(1, 2);
// User 1's news feed should return a list with 1 tweet id -> [5],
// since user 1 is no longer following user 2.
twitter.getNewsFeed(1);"""

class Twitter:

    def __init__(self):
        self.cnt = 0 # global counter 
        self.tweets = {} # mapping from user to tweets
        self.followers = {} # mapping from user to followers

    def postTweet(self, userId: int, tweetId: int) -> None:
        self.cnt += 1
        self.tweets.setdefault(userId, deque()).appendleft((self.cnt, tweetId))

    def getNewsFeed(self, userId: int) -> List[int]:
        hp = [] # max heap 
        for fid in self.followers.get(userId, set()) | {userId}: 
            if fid in self.tweets: # has tweeted 
                cnt, tid = self.tweets[fid][0]
                heappush(hp, (-cnt, tid, fid, 0)) # push follower's tweet on heap 
        ans = []
        for _ in range(10): 
            if not hp: break 
            _, tid, uid, i = heappop(hp)
            ans.append(tid)
            if i+1 < len(self.tweets[uid]): 
                cnt, tid = self.tweets[uid][i+1]
                heappush(hp, (-cnt, tid, uid, i+1))
        return ans 

    def follow(self, followerId: int, followeeId: int) -> None:
        self.followers.setdefault(followerId, set()).add(followeeId)

    def unfollow(self, followerId: int, followeeId: int) -> None:
        self.followers.setdefault(followerId, set()).discard(followeeId)


"""359. Logger Rate Limiter (Easy)
Design a logger system that receives a stream of messages along with their 
timestamps. Each unique message should only be printed at most every 10 seconds 
(i.e. a message printed at timestamp t will prevent other identical messages 
from being printed until timestamp t + 10). All messages will come in 
chronological order. Several messages may arrive at the same timestamp.

Implement the Logger class:
* Logger() Initializes the logger object.
* bool shouldPrintMessage(int timestamp, string message) Returns true if the message should be printed in the given timestamp, otherwise returns false.

Example 1:
Input: ["Logger", "shouldPrintMessage", "shouldPrintMessage", "shouldPrintMessage", "shouldPrintMessage", "shouldPrintMessage", "shouldPrintMessage"]
       [[], [1, "foo"], [2, "bar"], [3, "foo"], [8, "bar"], [10, "foo"], [11, "foo"]]
Output: [null, true, true, false, false, false, true]
Explanation:
Logger logger = new Logger();
logger.shouldPrintMessage(1, "foo");  // return true, next allowed timestamp for "foo" is 1 + 10 = 11
logger.shouldPrintMessage(2, "bar");  // return true, next allowed timestamp for "bar" is 2 + 10 = 12
logger.shouldPrintMessage(3, "foo");  // 3 < 11, return false
logger.shouldPrintMessage(8, "bar");  // 8 < 12, return false
logger.shouldPrintMessage(10, "foo"); // 10 < 11, return false
logger.shouldPrintMessage(11, "foo"); // 11 >= 11, return true, next allowed timestamp for "foo" is
                                      // 11 + 10 = 21
 
Constraints:
* 0 <= timestamp <= 10^9
* Every timestamp will be passed in non-decreasing order (chronological order).
* 1 <= message.length <= 30
* At most 10^4 calls will be made to shouldPrintMessage."""

class Logger:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.seen = {}

    def shouldPrintMessage(self, timestamp: int, message: str) -> bool:
        """
        Returns true if the message should be printed in the given timestamp, otherwise returns false.
        If this method returns false, the message will not be printed.
        The timestamp is in seconds granularity.
        """
        if timestamp - self.seen.get(message, -inf) >= 10: 
            self.seen[message] = timestamp
            return True
        return False 


"""362. Design Hit Counter (Medium)
Design a hit counter which counts the number of hits received in the past 5 
minutes. Each function accepts a timestamp parameter (in seconds granularity) 
and you may assume that calls are being made to the system in chronological 
order (ie, the timestamp is monotonically increasing). You may assume that the 
earliest timestamp starts at 1. It is possible that several hits arrive roughly 
at the same time.

Example:
HitCounter counter = new HitCounter();

// hit at timestamp 1.
counter.hit(1);

// hit at timestamp 2.
counter.hit(2);

// hit at timestamp 3.
counter.hit(3);

// get hits at timestamp 4, should return 3.
counter.getHits(4);

// hit at timestamp 300.
counter.hit(300);

// get hits at timestamp 300, should return 4.
counter.getHits(300);

// get hits at timestamp 301, should return 3.
counter.getHits(301); 
Follow up:
What if the number of hits per second could be very large? Does your design scale?"""

class HitCounter:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.queue = deque()
        self.val = 0

    def hit(self, timestamp: int) -> None:
        """
        Record a hit.
        @param timestamp - The current timestamp (in seconds granularity).
        """
        if self.queue and self.queue[-1][0] == timestamp: self.queue[-1][1] += 1
        else: self.queue.append([timestamp, 1])
        self.val += 1

    def getHits(self, timestamp: int) -> int:
        """
        Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity).
        """
        while self.queue and self.queue[0][0] + 300 <= timestamp: 
            self.val -= self.queue.popleft()[1]
        return self.val 


"""379. Design Phone Directory (Medium)
Design a Phone Directory which supports the following operations:
* get: Provide a number which is not assigned to anyone.
* check: Check if a number is available or not.
* release: Recycle or release a number.

Example:
// Init a phone directory containing a total of 3 numbers: 0, 1, and 2.
PhoneDirectory directory = new PhoneDirectory(3);

// It can return any available phone number. Here we assume it returns 0.
directory.get();

// Assume it returns 1.
directory.get();

// The number 2 is available, so return true.
directory.check(2);

// It returns 2, the only number that is left.
directory.get();

// The number 2 is no longer available, so return false.
directory.check(2);

// Release number 2 back to the pool.
directory.release(2);

// Number 2 is available again, return true.
directory.check(2);
 
Constraints:
* 1 <= maxNumbers <= 10^4
* 0 <= number < maxNumbers
* The total number of call of the methods is between [0 - 20000]"""

class PhoneDirectory:

    def __init__(self, maxNumbers: int):
        """
        Initialize your data structure here
        @param maxNumbers - The maximum numbers that can be stored in the phone directory.
        """
        self.nums = set(range(maxNumbers))

    def get(self) -> int:
        """
        Provide a number which is not assigned to anyone.
        @return - Return an available number. Return -1 if none is available.
        """
        return self.nums.pop() if self.nums else -1 

    def check(self, number: int) -> bool:
        """
        Check if a number is available or not.
        """
        return number in self.nums

    def release(self, number: int) -> None:
        """
        Recycle or release a number.
        """
        self.nums.add(number)


"""380. Insert Delete GetRandom O(1) (Medium)
Design a data structure that supports all following operations in average O(1) 
time.
+ insert(val): Inserts an item val to the set if not already present.
+ remove(val): Removes an item val from the set if present.
+ getRandom: Returns a random element from current set of elements (it's 
             guaranteed that at least one element exists when this method is 
             called). Each element must have the same probability of being 
             returned.
Example:
// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();
// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);
// Returns false as 2 does not exist in the set.
randomSet.remove(2);
// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);
// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();
// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);
// 2 was already in the set, so return false.
randomSet.insert(2);
// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();"""

class RandomizedSet:

    def __init__(self):
        self.loc = {} # val-to-index mapping
        self.vals = []

    def insert(self, val: int) -> bool:
        if val in self.loc: return False 
        self.loc[val] = len(self.vals)
        self.vals.append(val)
        return True 

    def remove(self, val: int) -> bool:
        if val not in self.loc: return False 
        i = self.loc[val] 
        self.loc[self.vals[-1]] = i 
        self.loc.pop(val)
        self.vals[i] = self.vals[-1]
        self.vals.pop()
        return True 
 
    def getRandom(self) -> int:
        return choice(self.vals)


"""381. Insert Delete GetRandom O(1) - Duplicates allowed (Hard)
Design a data structure that supports all following operations in average O(1) 
time. Note: Duplicate elements are allowed.
+ insert(val): Inserts an item val to the collection.
+ remove(val): Removes an item val from the collection if present.
+ getRandom: Returns a random element from current collection of elements. The 
             probability of each element being returned is linearly related to 
             the number of same value the collection contains.
Example:
// Init an empty collection.
RandomizedCollection collection = new RandomizedCollection();
// Inserts 1 to the collection. Returns true as the collection did not contain 1.
collection.insert(1);
// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].
collection.insert(1);
// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].
collection.insert(2);
// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.
collection.getRandom();
// Removes 1 from the collection, returns true. Collection now contains [1,2].
collection.remove(1);
// getRandom should return 1 and 2 both equally likely.
collection.getRandom();"""

class RandomizedCollection:

    def __init__(self):
        self.val = [] # val 
        self.mpp = {} # val to set of indices 

    def insert(self, val: int) -> bool:
        self.mpp.setdefault(val, set()).add(len(self.val))
        self.val.append(val)
        return len(self.mpp[val]) == 1

    def remove(self, val: int) -> bool:
        if val not in self.mpp or not self.mpp[val]: return False  # flag 
        i = self.mpp[val].pop()
        self.mpp[self.val[-1]].add(i)
        self.mpp[self.val[-1]].remove(len(self.val)-1)
        self.val[i] = self.val[-1]
        self.val.pop()
        return True

    def getRandom(self) -> int:
        return choice(self.val)


"""382. Linked List Random Node (Medium)
Given a singly linked list, return a random node's value from the linked list. 
Each node must have the same probability of being chosen.

Follow up: What if the linked list is extremely large and its length is unknown 
           to you? Could you solve this efficiently without using extra space?

Example:
// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);

// getRandom() should return either 1, 2, or 3 randomly. Each element should 
// have equal probability of returning.
solution.getRandom();"""

class Solution:

    def __init__(self, head: ListNode):
        self.head = head # store head of linked list 

    def getRandom(self) -> int:
        cnt = 0
        node = self.head 
        while node: 
            cnt += 1
            if randint(1, cnt) == cnt: ans = node.val # reservoir sampling 
            node = node.next 
        return ans 


"""384. Shuffle an Array (Medium)
Shuffle a set of numbers without duplicates.

Example:
// Init an array with set 1, 2, and 3.
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
solution.shuffle();

// Resets the array back to its original configuration [1,2,3].
solution.reset();

// Returns the random shuffling of array [1,2,3].
solution.shuffle();"""

class Solution:
	"""Knuth shuffle aka Fisher-Yates shuffle"""

    def __init__(self, nums: List[int]):
        self.orig = nums.copy()
        self.nums = nums

    def reset(self) -> List[int]:
        return self.orig

    def shuffle(self) -> List[int]:
        for i in range(1, len(self.nums)): 
            ii = randint(0, i)
            self.nums[ii], self.nums[i] = self.nums[i], self.nums[ii]
        return self.nums


"""398. Random Pick Index (Medium)
Given an array of integers with possible duplicates, randomly output the index 
of a given target number. You can assume that the given target number must 
exist in the array. Note that the array size can be very large. Solution that 
uses too much extra space will not pass the judge.

Example:
int[] nums = new int[] {1,2,3,3,3};
Solution solution = new Solution(nums);
// pick(3) should return either index 2, 3, or 4 randomly. Each index should 
// have equal probability of returning.
solution.pick(3);
// pick(1) should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(1);"""

class Solution:

    def __init__(self, nums: List[int]):
        self.nums = nums # store nums

    def pick(self, target: int) -> int:
        """Sample index of target via resevoir sampling."""
		ans = None
        cnt = 0
        for i, x in enumerate(self.nums): 
            if x == target: 
                cnt += 1
                if randint(1, cnt) == cnt: ans = i # prob 1/cnt
        return ans 


"""432. All O`one Data Structure (Hard)
Design a data structure to store the strings' count with the ability to return 
the strings with minimum and maximum counts. Implement the AllOne class:
* AllOne() Initializes the object of the data structure.
* inc(String key) Increments the count of the string key by 1. If key does not 
  exist in the data structure, insert it with count 1.
* dec(String key) Decrements the count of the string key by 1. If the count of 
  key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.
* getMaxKey() Returns one of the keys with the maximal count. If no element 
  exists, return an empty string "".
* getMinKey() Returns one of the keys with the minimum count. If no element 
  exists, return an empty string "".

Example 1:
Input: ["AllOne", "inc", "inc", "getMaxKey", "getMinKey", "inc", "getMaxKey", "getMinKey"]
       [[], ["hello"], ["hello"], [], [], ["leet"], [], []]
Output: [null, null, null, "hello", "hello", null, "hello", "leet"]
Explanation
AllOne allOne = new AllOne();
allOne.inc("hello");
allOne.inc("hello");
allOne.getMaxKey(); // return "hello"
allOne.getMinKey(); // return "hello"
allOne.inc("leet");
allOne.getMaxKey(); // return "hello"
allOne.getMinKey(); // return "leet"

Constraints:
* 1 <= key.length <= 10
* key consists of lowercase English letters.
* It is guaranteed that for each call to dec, key is existing in the data structure.
* At most 5 * 10^4 calls will be made to inc, dec, getMaxKey, and getMinKey."""

class ListNode: 
    
    def __init__(self, keys, freq=0, next=None, prev=None):
        self.keys = keys
        self.freq = freq
        self.next = next
        self.prev = prev 
        

class AllOne:

    def __init__(self):
        self.mp = {}
        self.head = ListNode(set())
        self.tail = ListNode(set())
        self.head.next = self.tail
        self.tail.prev = self.head 

    def inc(self, key: str) -> None:
        if key in self.mp: 
            node = self.mp[key]
            node.keys.remove(key)
        else: node = self.head 
        if node.next.freq == node.freq + 1: 
            self.mp[key] = node.next 
            node.next.keys.add(key)
        else: 
            newn = ListNode({key}, node.freq+1, next=node.next, prev=node)
            node.next.prev = node.next = newn
            self.mp[key] = newn
        if node != self.head and not node.keys: 
            node.prev.next = node.next
            node.next.prev = node.prev

    def dec(self, key: str) -> None:
        node = self.mp[key] 
        node.keys.remove(key)
        if node.freq == 1: self.mp.pop(key)
        elif node.prev.freq + 1 == node.freq: 
            node.prev.keys.add(key)
            self.mp[key] = node.prev 
        else: 
            newn = ListNode({key}, node.freq-1, next=node, prev=node.prev)
            node.prev.next = node.prev = newn
            self.mp[key] = newn
        if not node.keys: 
            node.prev.next = node.next
            node.next.prev = node.prev 

    def getMaxKey(self) -> str:
        if self.tail.prev == self.head: return ""
        ans = self.tail.prev.keys.pop()
        self.tail.prev.keys.add(ans)
        return ans 

    def getMinKey(self) -> str:
        if self.head.next == self.tail: return ""
        ans = self.head.next.keys.pop()
        self.head.next.keys.add(ans)
        return ans 


"""519. Random Flip Matrix (Medium)
You are given the number of rows n_rows and number of columns n_cols of a 2D 
binary matrix where all values are initially 0. Write a function flip which 
chooses a 0 value uniformly at random, changes it to 1, and then returns the 
position [row.id, col.id] of that value. Also, write a function reset which 
sets all values back to 0. Try to minimize the number of calls to system's 
Math.random() and optimize the time and space complexity.

Note:
* 1 <= n_rows, n_cols <= 10000
* 0 <= row.id < n_rows and 0 <= col.id < n_cols
* flip will not be called when the matrix has no 0 values left.
* the total number of calls to flip and reset will not exceed 1000.

Example 1:
Input: 
["Solution","flip","flip","flip","flip"]
[[2,3],[],[],[],[]]
Output: [null,[0,1],[1,2],[1,0],[1,1]]

Example 2:
Input: 
["Solution","flip","flip","reset","flip"]
[[1,2],[],[],[],[]]
Output: [null,[0,0],[0,1],null,[0,0]]

Explanation of Input Syntax: The input is two lists: the subroutines called and 
their arguments. Solution's constructor has two arguments, n_rows and n_cols. 
flip and reset have no arguments. Arguments are always wrapped with a list, 
even if there aren't any."""

class Solution:

    def __init__(self, n_rows: int, n_cols: int):
        self.mp = {}
        self.cols = n_cols
        self.size = self.cpty = n_rows * n_cols 

    def flip(self) -> List[int]:
        self.size -= 1
        r = randint(0, self.size) 
        rr = self.mp.get(r, r) # mapped random number (remove duplicates)
        self.mp[r] = self.mp.get(self.size, self.size) # move rn at self.size to r
        return rr//self.cols, rr%self.cols

    def reset(self) -> None:
        self.mp = {}
        self.size = self.cpty 


"""528. Random Pick with Weight (Medium)
You are given an array of positive integers w where w[i] describes the weight 
of ith index (0-indexed). We need to call the function pickIndex() which 
randomly returns an integer in the range [0, w.length - 1]. pickIndex() should 
return the integer proportional to its weight in the w array. For example, for 
w = [1, 3], the probability of picking the index 0 is 1 / (1 + 3) = 0.25 
(i.e 25%) while the probability of picking the index 1 is 3 / (1 + 3) = 0.75 
(i.e 75%). More formally, the probability of picking index i is w[i] / sum(w).

Example 1:
Input:
["Solution","pickIndex"]
[[[1]],[]]
Output: [null,0]

Explanation:
Solution solution = new Solution([1]);
solution.pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.

Example 2:
Input:
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output: [null,1,1,1,1,0]
Explanation: 
Solution solution = new Solution([1, 3]);
solution.pickIndex(); // return 1. It's returning the second element (index = 1) that has probability of 3/4.
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 0. It's returning the first element (index = 0) that has probability of 1/4.

Since this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
......
and so on.

Constraints:
* 1 <= w.length <= 10000
* 1 <= w[i] <= 10^5
* pickIndex will be called at most 10000 times."""

class Solution:

    def __init__(self, w: List[int]):
        self.prefix = [0]
        for x in w: self.prefix.append(self.prefix[-1] + x)

    def pickIndex(self) -> int:
        r = randint(1, self.prefix[-1])
        
        def fn(arr, x):
            """Return the position of x in arr."""
            lo, hi = 0, len(arr)
            while lo < hi: 
                mid = lo + hi >> 1
                if arr[mid] < x: lo = mid+1
                else: hi = mid
            return lo
        
        return fn(self.prefix, r)-1


"""535. Encode and Decode TinyURL (Medium)
Note: This is a companion problem to the System Design problem: Design TinyURL. 
TinyURL is a URL shortening service where you enter a URL such as 
https://leetcode.com/problems/design-tinyurl and it returns a short URL such as 
http://tinyurl.com/4e9iAk. Design the encode and decode methods for the TinyURL 
service. There is no restriction on how your encode/decode algorithm should 
work. You just need to ensure that a URL can be encoded to a tiny URL and the 
tiny URL can be decoded to the original URL."""

class Codec:
    
    def __init__(self): 
        self.lookup = {}

    def encode(self, longUrl: str) -> str:
        """Encodes a URL to a shortened URL."""
        ans = "http://tinyurl.com/" + hex(abs(hash(longUrl)))
        self.lookup[ans] = longUrl
        return ans 
        

    def decode(self, shortUrl: str) -> str:
        """Decodes a shortened URL to its original URL."""
        return self.lookup[shortUrl]


"""604. Design Compressed String Iterator (Easy)
Design and implement a data structure for a compressed string iterator. The 
given compressed string will be in the form of each letter followed by a 
positive integer representing the number of this letter existing in the original 
uncompressed string.

Implement the StringIterator class:
* next() Returns the next character if the original string still has uncompressed characters, otherwise returns a white space.
* hasNext() Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns false.

Example 1:
Input: ["StringIterator", "next", "next", "next", "next", "next", "next", "hasNext", "next", "hasNext"]
       [["L1e2t1C1o1d1e1"], [], [], [], [], [], [], [], [], []]
Output: [null, "L", "e", "e", "t", "C", "o", true, "d", true]
Explanation:
StringIterator stringIterator = new StringIterator("L1e2t1C1o1d1e1");
stringIterator.next(); // return "L"
stringIterator.next(); // return "e"
stringIterator.next(); // return "e"
stringIterator.next(); // return "t"
stringIterator.next(); // return "C"
stringIterator.next(); // return "o"
stringIterator.hasNext(); // return True
stringIterator.next(); // return "d"
stringIterator.hasNext(); // return True

Constraints:
* 1 <= compressedString.length <= 1000
* compressedString consists of lower-case an upper-case English letters and digits.
* The number of a single character repetitions in compressedString is in the range [1, 10^9]
* At most 100 calls will be made to next and hasNext."""

class StringIterator:

    def __init__(self, compressedString: str):
        self.data = compressedString 
        self.char = None
        self.i = self.n = 0

    def next(self) -> str:
        if not self.hasNext(): return " "
        if not self.n: 
            self.char = self.data[self.i]
            self.i = ii = self.i+1
            while self.i < len(self.data) and self.data[self.i].isdigit(): self.i += 1
            self.n = int(self.data[ii:self.i])
        self.n -= 1
        return self.char 

    def hasNext(self) -> bool:
        return self.i < len(self.data) or self.n 


"""635. Design Log Storage System (Medium)
You are given several logs, where each log contains a unique ID and timestamp. 
Timestamp is a string that has the following format: 
Year:Month:Day:Hour:Minute:Second, for example, 2017:01:01:23:59:59. All 
domains are zero-padded decimal numbers. Implement the LogSystem class:
* LogSystem() Initializes the LogSystem object.
* void put(int id, string timestamp) Stores the given log (id, timestamp) in 
  your storage system.
* int[] retrieve(string start, string end, string granularity) Returns the IDs 
  of the logs whose timestamps are within the range from start to end inclusive. 
  start and end all have the same format as timestamp, and granularity means 
  how precise the range should be (i.e. to the exact Day, Minute, etc.). For 
  example, start = "2017:01:01:23:59:59", end = "2017:01:02:23:59:59", and 
  granularity = "Day" means that we need to find the logs within the inclusive 
  range from Jan. 1st 2017 to Jan. 2nd 2017, and the Hour, Minute, and Second 
  for each log entry can be ignored.

Example 1:
Input: ["LogSystem", "put", "put", "put", "retrieve", "retrieve"]
       [[], [1, "2017:01:01:23:59:59"], [2, "2017:01:01:22:59:59"], [3, "2016:01:01:00:00:00"], ["2016:01:01:01:01:01", "2017:01:01:23:00:00", "Year"], ["2016:01:01:01:01:01", "2017:01:01:23:00:00", "Hour"]]
Output: [null, null, null, null, [3, 2, 1], [2, 1]]
Explanation: 
LogSystem logSystem = new LogSystem();
logSystem.put(1, "2017:01:01:23:59:59");
logSystem.put(2, "2017:01:01:22:59:59");
logSystem.put(3, "2016:01:01:00:00:00");

// return [3,2,1], because you need to return all logs between 2016 and 2017.
logSystem.retrieve("2016:01:01:01:01:01", "2017:01:01:23:00:00", "Year");

// return [2,1], because you need to return all logs between Jan. 1, 2016 01:XX:XX and Jan. 1, 2017 23:XX:XX.
// Log 3 is not returned because Jan. 1, 2016 00:00:00 comes before the start of the range.
logSystem.retrieve("2016:01:01:01:01:01", "2017:01:01:23:00:00", "Hour");

Constraints:
* 1 <= id <= 500
* 2000 <= Year <= 2017
* 1 <= Month <= 12
* 1 <= Day <= 31
* 0 <= Hour <= 23
* 0 <= Minute, Second <= 59
* granularity is one of the values ["Year", "Month", "Day", "Hour", "Minute", "Second"].
* At most 500 calls will be made to put and retrieve."""

class LogSystem:

    def __init__(self):
        self.vals = []
        self.mp = {"Year": 4, "Month": 7, "Day": 10, "Hour": 13, "Minute": 16, "Second": 19}

    def put(self, id: int, timestamp: str) -> None:
        self.vals.append((id, timestamp))

    def retrieve(self, start: str, end: str, granularity: str) -> List[int]:
        k = self.mp[granularity]
        ans = []
        for id, timestamp in self.vals: 
            if start[:k] <= timestamp[:k] <= end[:k]: ans.append(id)
        return ans 


"""677. Map Sum Pairs (Medium)
Implement the MapSum class:
* MapSum() Initializes the MapSum object.
* void insert(String key, int val) Inserts the key-val pair into the map. If 
  the key already existed, the original key-value pair will be overridden to 
  the new one.
* int sum(string prefix) Returns the sum of all the pairs' value whose key 
  starts with the prefix.

Example 1:
Input: ["MapSum", "insert", "sum", "insert", "sum"]
       [[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]
Output: [null, null, 3, null, 5]
Explanation:
MapSum mapSum = new MapSum();
mapSum.insert("apple", 3);  
mapSum.sum("ap");           // return 3 (apple = 3)
mapSum.insert("app", 2);    
mapSum.sum("ap");           // return 5 (apple + app = 3 + 2 = 5)

Constraints:
* 1 <= key.length, prefix.length <= 50
* key and prefix consist of only lowercase English letters.
* 1 <= val <= 1000
* At most 50 calls will be made to insert and sum."""

class MapSum:

    def __init__(self):
        self.trie = {}
        self.seen = defaultdict(int)

    def insert(self, key: str, val: int) -> None:
        val -= self.seen[key]
        node = self.trie
        for ch in key: 
            node = node.setdefault(ch, {})
            node["#"] = node.get("#", 0) + val
        self.seen[key] += val
    
    def sum(self, prefix: str) -> int:
        node = self.trie
        for ch in prefix: 
            if ch not in node: return 0
            node = node[ch]
        return node["#"]


"""684. Redundant Connection (Medium)
In this problem, a tree is an undirected graph that is connected and has no 
cycles. You are given a graph that started as a tree with n nodes labeled from 
1 to n, with one additional edge added. The added edge has two different 
vertices chosen from 1 to n, and was not an edge that already existed. The 
graph is represented as an array edges of length n where edges[i] = [ai, bi] 
indicates that there is an edge between nodes ai and bi in the graph. Return an 
edge that can be removed so that the resulting graph is a tree of n nodes. If 
there are multiple answers, return the answer that occurs last in the input.

Example 1:
Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]

Example 2:
Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]

Constraints:
* n == edges.length
* 3 <= n <= 1000
* edges[i].length == 2
* 1 <= ai < bi <= edges.length
* ai != bi
* There are no repeated edges.
* The given graph is connected."""

class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1]*n
        
    def find(self, p): 
        """Find with path compression"""
        if self.parent[p] != p: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q): 
        """Union with rank"""
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True 
    

class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        uf = UnionFind(len(edges))
        for u, v in edges: 
            if not uf.union(u-1, v-1): return [u, v]


"""706. Design HashMap (Easy)
Design a HashMap without using any built-in hash table libraries. To be 
specific, your design should include these functions:
* put(key, value) : Insert a (key, value) pair into the HashMap. If the value 
  already exists in the HashMap, update the value.
* get(key): Returns the value to which the specified key is mapped, or -1 if 
  this map contains no mapping for the key.
* remove(key) : Remove the mapping for the value key if this map contains the 
  mapping for the key.

Example:
MyHashMap hashMap = new MyHashMap();
hashMap.put(1, 1);          
hashMap.put(2, 2);         
hashMap.get(1);            // returns 1
hashMap.get(3);            // returns -1 (not found)
hashMap.put(2, 1);         // update the existing value
hashMap.get(2);            // returns 1 
hashMap.remove(2);         // remove the mapping for 2
hashMap.get(2);            // returns -1 (not found) 

Note:
* All keys and values will be in the range of [0, 1000000].
* The number of operations will be in the range of [1, 10000].
* Please do not use the built-in HashMap library."""

class ListNode:
    def __init__(self, key=None, val=None, next=None): 
        self.key = key
        self.val = val
        self.next = next
        
        
class MyHashMap:

    def __init__(self):
        self.data = [ListNode()] * 1000

    def put(self, key: int, value: int) -> None:
        node = self.data[key % len(self.data)]
        while node.next: 
            if node.next.key == key: 
                node.next.val = value
                return 
            node = node.next 
        node.next = ListNode(key, value)

    def get(self, key: int) -> int:
        node = self.data[key % len(self.data)]
        while node: 
            if node.key == key: return node.val
            node = node.next 
        return -1 

    def remove(self, key: int) -> None:
        node = self.data[key % len(self.data)]
        while node.next: 
            if node.next.key == key: 
                node.next = node.next.next
                return 
            node = node.next 


"""707. Design Linked List (Medium)
Design your implementation of the linked list. You can choose to use a singly 
or doubly linked list. A node in a singly linked list should have two 
attributes: val and next. val is the value of the current node, and next is a 
pointer/reference to the next node. If you want to use the doubly linked list, 
you will need one more attribute prev to indicate the previous node in the 
linked list. Assume all nodes in the linked list are 0-indexed. Implement the 
MyLinkedList class:
* MyLinkedList() Initializes the MyLinkedList object.
* int get(int index) Get the value of the indexth node in the linked list. If 
  the index is invalid, return -1.
* void addAtHead(int val) Add a node of value val before the first element of 
  the linked list. After the insertion, the new node will be the first node of 
  the linked list.
* void addAtTail(int val) Append a node of value val as the last element of the 
  linked list.
* void addAtIndex(int index, int val) Add a node of value val before the 
  indexth node in the linked list. If index equals the length of the linked 
  list, the node will be appended to the end of the linked list. If index is 
  greater than the length, the node will not be inserted.
* void deleteAtIndex(int index) Delete the indexth node in the linked list, if 
  the index is valid.

Example 1:
Input: ["MyLinkedList", "addAtHead", "addAtTail", "addAtIndex", "get", "deleteAtIndex", "get"]
       [[], [1], [3], [1, 2], [1], [1], [1]]
Output: [null, null, null, null, 2, null, 3]
Explanation: 
MyLinkedList myLinkedList = new MyLinkedList();
myLinkedList.addAtHead(1);
myLinkedList.addAtTail(3);
myLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3
myLinkedList.get(1);              // return 2
myLinkedList.deleteAtIndex(1);    // now the linked list is 1->3
myLinkedList.get(1);              // return 3
 
Constraints:
* 0 <= index, val <= 1000
* Please do not use the built-in LinkedList library.
* At most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and 
  deleteAtIndex."""

class ListNode: 
    
    def __init__(self, val=0, prev=None, next=None):
        self.val = val
        self.prev = prev
        self.next = next
        

class MyLinkedList:

    def __init__(self):
        self.head = ListNode(-1)
        self.tail = ListNode(-1)
        self.head.next = self.tail
        self.tail.prev = self.head 
        self.size = 0

    def _moveTo(self, index: int) -> ListNode: 
        if 0 <= index <= self.size: 
            if index <= self.size//2: 
                node = self.head.next 
                for _ in range(index): node = node.next 
            else: 
                node = self.tail
                for _ in range(self.size-index): node = node.prev 
            return node 
    
    def get(self, index: int) -> int:
        node = self._moveTo(index)
        return node.val if node else -1 

    def addAtHead(self, val: int) -> None:
        self.addAtIndex(0, val)

    def addAtTail(self, val: int) -> None:
        self.addAtIndex(self.size, val)

    def addAtIndex(self, index: int, val: int) -> None:
        node = self._moveTo(index)
        if node: 
            self.size += 1
            node.prev.next = node.prev = ListNode(val, node.prev, node)

    def deleteAtIndex(self, index: int) -> None:
        node = self._moveTo(index)
        if node and node != self.tail: 
            self.size -= 1
            node.prev.next = node.next
            node.next.prev = node.prev


"""716. Max Stack (Easy)
Design a max stack data structure that supports the stack operations and 
supports finding the stack's maximum element.

Implement the MaxStack class:
* MaxStack() Initializes the stack object.
* void push(int x) Pushes element x onto the stack.
* int pop() Removes the element on top of the stack and returns it.
* int top() Gets the element on the top of the stack without removing it.
* int peekMax() Retrieves the maximum element in the stack without removing it.
* int popMax() Retrieves the maximum element in the stack and removes it. If 
  there is more than one maximum element, only remove the top-most one.
 
Example 1:
Input: ["MaxStack", "push", "push", "push", "top", "popMax", "top", "peekMax", "pop", "top"]
       [[], [5], [1], [5], [], [], [], [], [], []]
Output: [null, null, null, null, 5, 5, 1, 5, 1, 5]
Explanation
MaxStack stk = new MaxStack();
stk.push(5);   // [5] the top of the stack and the maximum number is 5.
stk.push(1);   // [5, 1] the top of the stack is 1, but the maximum is 5.
stk.push(5);   // [5, 1, 5] the top of the stack is 5, which is also the maximum, because it is the top most one.
stk.top();     // return 5, [5, 1, 5] the stack did not change.
stk.popMax();  // return 5, [5, 1] the stack is changed now, and the top is different from the max.
stk.top();     // return 1, [5, 1] the stack did not change.
stk.peekMax(); // return 5, [5, 1] the stack did not change.
stk.pop();     // return 1, [5] the top of the stack and the max element is now 5.
stk.top();     // return 5, [5] the stack did not change.
 
Constraints:
* -10^7 <= x <= 10^7
* At most 104 calls will be made to push, pop, top, peekMax, and popMax.
* There will be at least one element in the stack when pop, top, peekMax, or 
  popMax is called.

Follow up: Could you come up with a solution that supports O(1) for each top 
           call and O(logn) for each other call? """

class MaxStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.k = 0              # key
        self.pq = []            # priority queue 
        self.od = OrderedDict() # ordered dict 

    def push(self, x: int) -> None:
        heappush(self.pq, (-x, self.k))
        self.od[self.k] = x
        self.k -= 1

    def pop(self) -> int:
        k, x = self.od.popitem(last=True)
        return x

    def top(self) -> int:
        k, x = self.od.popitem(last=True)
        self.od[k] = x
        return x

    def peekMax(self) -> int:
        while self.pq: 
            x, k = heappop(self.pq)
            if k in self.od: break 
        heappush(self.pq, (x, k))
        return -x

    def popMax(self) -> int:
        while self.pq: 
            x, k = heappop(self.pq)
            if k in self.od: break 
        self.od.pop(k)
        return -x 


"""729. My Calendar I (Medium)
Implement a MyCalendar class to store your events. A new event can be added if 
adding the event will not cause a double booking. Your class will have the 
method, book(int start, int end). Formally, this represents a booking on the 
half open interval [start, end), the range of real numbers x such that 
start <= x < end. A double booking happens when two events have some non-empty 
intersection (ie., there is some time that is common to both events.) For each 
call to the method MyCalendar.book, return true if the event can be added to 
the calendar successfully without causing a double booking. Otherwise, return 
false and do not add the event to the calendar. Your class will be called like 
this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)

Example 1:
MyCalendar();
MyCalendar.book(10, 20); // returns true
MyCalendar.book(15, 25); // returns false
MyCalendar.book(20, 30); // returns true
Explanation: 
The first event can be booked. The second can't because time 15 is already 
booked by another event. The third event can be booked, as the first event 
takes every time less than 20, but not including 20.

Note:
* The number of calls to MyCalendar.book per test case will be at most 1000.
* In calls to MyCalendar.book(start, end), start and end are integers in the 
  range [0, 10^9].

class Node: 
    def __init__(self, val=(0,0), left=None, right=None): 
        self.val = val
        self.left = left
        self.right = right 
"""        

class MyCalendar:

    def __init__(self):
        self.root = None

    def book(self, start: int, end: int) -> bool:
        if not self.root: self.root = Node((start, end))
        else: 
            node = self.root 
            while node: 
                if end <= node.val[0]: 
                    if node.left: node = node.left 
                    else: 
                        node.left = Node((start, end))
                        break 
                elif node.val[1] <= start: 
                    if node.right: node = node.right
                    else: 
                        node.right = Node((start, end))
                        break 
                else: return False # double booking 
        return True 


"""745. Prefix and Suffix Search (Hard)
Design a special dictionary with some words that searchs the words in it by a 
prefix and a suffix. Implement the WordFilter class:
* WordFilter(string[] words) Initializes the object with the words in the 
  dictionary.
* f(string prefix, string suffix) Returns the index of the word in the 
  dictionary, which has the prefix prefix and the suffix suffix. If there is 
  more than one valid index, return the largest of them. If there is no such 
  word in the dictionary, return -1.

Example 1:
Input: ["WordFilter", "f"]
       [[["apple"]], ["a", "e"]]
Output: [null, 0]
Explanation:
WordFilter wordFilter = new WordFilter(["apple"]);
wordFilter.f("a", "e"); // return 0, because the word at index 0 has prefix = "a" and suffix = 'e".

Constraints:
* 1 <= words.length <= 15000
* 1 <= words[i].length <= 10
* 1 <= prefix.length, suffix.length <= 10
* words[i], prefix and suffix consist of lower-case English letters only.
* At most 15000 calls will be made to the function f.

class Trie: 
    def __init__(self): 
        self.root = {}
    
    def insert(self, i, word): 
        node = self.root 
        for c in word: 
            node = node.setdefault(c, {})
            node["#"] = i
        
    def search(self, word): 
        node = self.root
        for c in word: 
            if c in node: node = node[c]
            else: return -1 
        return node["#"]
"""

class WordFilter:

    def __init__(self, words: List[str]):
        self.trie = Trie()
        for i, word in enumerate(words): 
            for k in range(len(word)): 
                key = word[k:] + "$" + word
                self.trie.insert(i, key)

    def f(self, prefix: str, suffix: str) -> int:
        key = suffix + "$" + prefix
        return self.trie.search(key)


"""900. RLE Iterator (Medium)
We can use run-length encoding (i.e., RLE) to encode a sequence of integers. 
In a run-length encoded array of even length encoding (0-indexed), for all even 
i, encoding[i] tells us the number of times that the non-negative integer value 
encoding[i + 1] is repeated in the sequence. 

For example, the sequence arr = [8,8,8,5,5] can be encoded to be 
encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are 
also valid RLE of arr. Given a run-length encoded array, design an iterator that 
iterates through it. Implement the RLEIterator class:
* RLEIterator(int[] encoded) Initializes the object with the encoded array 
  encoded.
* int next(int n) Exhausts the next n elements and returns the last element 
  exhausted in this way. If there is no element left to exhaust, return -1 
  instead.

Example 1:
Input: ["RLEIterator", "next", "next", "next", "next"]
       [[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]
Output: [null, 8, 8, 5, -1]
Explanation: 
RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].
rLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].
rLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].
rLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].
rLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,
but the second term did not exist. Since the last term exhausted does not exist, we return -1.

Constraints:
* 2 <= encoding.length <= 1000
* encoding.length is even.
* 0 <= encoding[i] <= 10^9
* 1 <= n <= 10^9
* At most 1000 calls will be made to next."""

class RLEIterator:

    def __init__(self, A: List[int]):
        self.rle = A
        self.k = 0 

    def next(self, n: int) -> int:
        while self.k < len(self.rle) and n > self.rle[self.k]: 
            n -= self.rle[self.k]
            self.k += 2 
        if self.k < len(self.rle): 
            self.rle[self.k] -= n
            return self.rle[self.k+1]
        return -1 


"""911. Online Election (Medium)
In an election, the i-th vote was cast for persons[i] at time times[i]. Now, we 
would like to implement the following query function: TopVotedCandidate.q(int t) 
will return the number of the person that was leading the election at time t. 
Votes cast at time t will count towards our query.  In the case of a tie, the 
most recent vote (among tied candidates) wins.

Example 1:
Input: ["TopVotedCandidate","q","q","q","q","q","q"], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]
Output: [null,0,1,1,0,0,1]
Explanation: 
At time 3, the votes are [0], and 0 is leading.
At time 12, the votes are [0,1,1], and 1 is leading.
At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)
This continues for 3 more queries at time 15, 24, and 8.

Note:
* 1 <= persons.length = times.length <= 5000
* 0 <= persons[i] <= persons.length
* times is a strictly increasing array with all elements in [0, 10^9].
* TopVotedCandidate.q is called at most 10000 times per test case.
* TopVotedCandidate.q(int t) is always called with t >= times[0]."""

class TopVotedCandidate:

    def __init__(self, persons: List[int], times: List[int]):
        self.times = times 
        self.winner = []
        
        pp = 0 
        freq = {} # frequency table 
        for p in persons: 
            freq[p] = 1 + freq.get(p, 0)
            if freq[p] >= freq.get(pp, 0): pp = p
            self.winner.append(pp)


    def q(self, t: int) -> int:
        """Standard last-true binary search."""
        lo, hi = -1, len(self.times)-1
        while lo < hi: 
            mid = lo + hi + 1 >> 1
            if self.times[mid] <= t: lo = mid
            else: hi = mid - 1
        return self.winner[lo]


"""919. Complete Binary Tree Inserter (Medium)
A complete binary tree is a binary tree in which every level, except possibly 
the last, is completely filled, and all nodes are as far left as possible. 
Write a data structure CBTInserter that is initialized with a complete binary 
tree and supports the following operations:
* CBTInserter(TreeNode root) initializes the data structure on a given tree 
  with head node root;
* CBTInserter.insert(int v) will insert a TreeNode into the tree with value 
  node.val = v so that the tree remains complete, and returns the value of the 
  parent of the inserted TreeNode;
* CBTInserter.get_root() will return the head node of the tree.

Example 1:
Input: inputs = ["CBTInserter","insert","get_root"], inputs = [[[1]],[2],[]]
Output: [null,1,[1,2]]

Example 2:
Input: inputs = ["CBTInserter","insert","insert","get_root"], 
       inputs = [[[1,2,3,4,5,6]],[7],[8],[]]
Output: [null,3,4,[1,2,3,4,5,6,7,8]]

Note:
* The initial given tree is complete and contains between 1 and 1000 nodes.
* CBTInserter.insert is called at most 10000 times per test case.
* Every value of a given or inserted node is between 0 and 5000."""

class CBTInserter:

    def __init__(self, root: TreeNode):
        self.root = root
        self.nodes = deque([]) # nodes with None child
        queue = deque([root])
        while queue: # bfs 
            node = queue.popleft()
            if node.left: queue.append(node.left)
            if node.right: queue.append(node.right)
            else: self.nodes.append(node)

    def insert(self, v: int) -> int:
        node = self.nodes[0]
        ans = node.val
        if not node.left: node.left = node = TreeNode(v)
        else: 
            node.right = node = TreeNode(v)
            self.nodes.popleft()
        self.nodes.append(node)
        return ans 

    def get_root(self) -> TreeNode:
        return self.root


"""1115. Print FooBar Alternately (Medium)
Suppose you are given the following code:

class FooBar {
  public void foo() {
    for (int i = 0; i < n; i++) {
      print("foo");
    }
  }

  public void bar() {
    for (int i = 0; i < n; i++) {
      print("bar");
    }
  }
}
The same instance of FooBar will be passed to two different threads. Thread A 
will call foo() while thread B will call bar(). Modify the given program to 
output "foobar" n times.

Example 1:
Input: n = 1
Output: "foobar"
Explanation: There are two threads being fired asynchronously. One of them 
             calls foo(), while the other calls bar(). "foobar" is being output 
             1 time.

Example 2:
Input: n = 2
Output: "foobarfoobar"
Explanation: "foobar" is being output 2 times."""

class FooBar:
    def __init__(self, n):
        self.n = n
        self.lock0 = Lock()
        self.lock1 = Lock()
        self.lock1.acquire()


    def foo(self, printFoo: 'Callable[[], None]') -> None:
        for i in range(self.n):
            # printFoo() outputs "foo". Do not change or remove this line.
            self.lock0.acquire()
            printFoo()
            self.lock1.release()


    def bar(self, printBar: 'Callable[[], None]') -> None:
        for i in range(self.n):
            # printBar() outputs "bar". Do not change or remove this line.
            self.lock1.acquire()
            printBar()
            self.lock0.release()


"""1117. Building H2O (Medium)
There are two kinds of threads, oxygen and hydrogen. Your goal is to group 
these threads to form water molecules. There is a barrier where each thread 
has to wait until a complete molecule can be formed. Hydrogen and oxygen 
threads will be given releaseHydrogen and releaseOxygen methods respectively, 
which will allow them to pass the barrier. These threads should pass the 
barrier in groups of three, and they must be able to immediately bond with 
each other to form a water molecule. You must guarantee that all the threads 
from one molecule bond before any other threads from the next molecule do.

In other words:
* If an oxygen thread arrives at the barrier when no hydrogen threads are 
  present, it has to wait for two hydrogen threads.
* If a hydrogen thread arrives at the barrier when no other threads are 
  present, it has to wait for an oxygen thread and another hydrogen thread.
We don’t have to worry about matching the threads up explicitly; that is, the 
threads do not necessarily know which other threads they are paired up with. 
The key is just that threads pass the barrier in complete sets; thus, if we 
examine the sequence of threads that bond and divide them into groups of three, 
each group should contain one oxygen and two hydrogen threads. Write 
synchronization code for oxygen and hydrogen molecules that enforces these 
constraints.

Example 1:
Input: "HOH"
Output: "HHO"
Explanation: "HOH" and "OHH" are also valid answers.

Example 2:
Input: "OOHHHH"
Output: "HHOHHO"
Explanation: "HOHHHO", "OHHHHO", "HHOHOH", "HOHHOH", "OHHHOH", "HHOOHH", "HOHOHH" and "OHHOHH" are also valid answers.
 
Constraints:
* Total length of input string will be 3n, where 1 ≤ n ≤ 20.
* Total number of H will be 2n in the input string.
* Total number of O will be n in the input string."""

from threading import Barrier, Semaphore

class H2O:
    def __init__(self):
        self.bar = Barrier(3)
        self.semH = Semaphore(2)
        self.semO = Semaphore(1)


    def hydrogen(self, releaseHydrogen: 'Callable[[], None]') -> None:
        self.semH.acquire()
        self.bar.wait()
        # releaseHydrogen() outputs "H". Do not change or remove this line.
        releaseHydrogen()
        self.semH.release()


    def oxygen(self, releaseOxygen: 'Callable[[], None]') -> None:
        self.semO.acquire()
        self.bar.wait()
        # releaseOxygen() outputs "O". Do not change or remove this line.
        releaseOxygen()
        self.semO.release()


"""1146. Snapshot Array (Medium)
Implement a SnapshotArray that supports the following interface:
* SnapshotArray(int length) initializes an array-like data structure with the 
  given length. Initially, each element equals 0.
* void set(index, val) sets the element at the given index to be equal to val.
* int snap() takes a snapshot of the array and returns the snap_id: the total 
  number of times we called snap() minus 1.
* int get(index, snap_id) returns the value at the given index, at the time we 
  took the snapshot with the given snap_id

Example 1:
Input: ["SnapshotArray","set","snap","set","get"]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5

Constraints:
* 1 <= length <= 50000
* At most 50000 calls will be made to set, snap, and get.
* 0 <= index < length
* 0 <= snap_id < (the total number of times we call snap())
* 0 <= val <= 10^9"""

class SnapshotArray:

    def __init__(self, length: int):
        self.data = [[[0, 0]] for _ in range(length)]
        self.id = 0 

    def set(self, index: int, val: int) -> None:
        if self.data[index][-1][0] == self.id: self.data[index][-1][1] = val 
        else: self.data[index].append([self.id, val])

    def snap(self) -> int:
        self.id += 1
        return self.id - 1        

    def get(self, index: int, snap_id: int) -> int:
        lo, hi = 0, len(self.data[index])
        while lo < hi: 
            mid = lo + hi >> 1
            if self.data[index][mid][0] <= snap_id: lo = mid + 1
            else: hi = mid
        return self.data[index][lo-1][1]


"""1166. Design File System (Medium)
You are asked to design a file system that allows you to create new paths and 
associate them with different values. The format of a path is one or more 
concatenated strings of the form: / followed by one or more lowercase English 
letters. For example, "/leetcode" and "/leetcode/problems" are valid paths 
while an empty string "" and "/" are not. Implement the FileSystem class:
* bool createPath(string path, int value) Creates a new path and associates a 
  value to it if possible and returns true. Returns false if the path already 
  exists or its parent path doesn't exist.
* int get(string path) Returns the value associated with path or returns -1 if 
  the path doesn't exist.

Example 1:
Input: ["FileSystem","createPath","get"]
       [[],["/a",1],["/a"]]
Output: [null,true,1]
Explanation: 
FileSystem fileSystem = new FileSystem();
fileSystem.createPath("/a", 1); // return true
fileSystem.get("/a"); // return 1

Example 2:
Input: ["FileSystem","createPath","createPath","get","createPath","get"]
       [[],["/leet",1],["/leet/code",2],["/leet/code"],["/c/d",1],["/c"]]
Output: [null,true,true,2,false,-1]
Explanation: 
FileSystem fileSystem = new FileSystem();
fileSystem.createPath("/leet", 1); // return true
fileSystem.createPath("/leet/code", 2); // return true
fileSystem.get("/leet/code"); // return 2
fileSystem.createPath("/c/d", 1); // return false because the parent path "/c" doesn't exist.
fileSystem.get("/c"); // return -1 because this path doesn't exist.

Constraints:
* The number of calls to the two functions is less than or equal to 104 in total.
* 2 <= path.length <= 100
* 1 <= value <= 10^9"""

class FileSystem:

    def __init__(self):
        self.mp = {}

    def createPath(self, path: str, value: int) -> bool:
        if path in self.mp: return False
        parent = path[:path.rfind("/")]
        if parent and parent not in self.mp: return False
        self.mp[path] = value
        return True 

    def get(self, path: str) -> int:
        return self.mp.get(path, -1)


"""1195. Fizz Buzz Multithreaded (Medium)
Write a program that outputs the string representation of numbers from 1 to n, 
however:
* If the number is divisible by 3, output "fizz".
* If the number is divisible by 5, output "buzz".
* If the number is divisible by both 3 and 5, output "fizzbuzz".
For example, for n = 15, we output: 1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 
11, fizz, 13, 14, fizzbuzz. Suppose you are given the following code:

class FizzBuzz {
  public FizzBuzz(int n) { ... }               // constructor
  public void fizz(printFizz) { ... }          // only output "fizz"
  public void buzz(printBuzz) { ... }          // only output "buzz"
  public void fizzbuzz(printFizzBuzz) { ... }  // only output "fizzbuzz"
  public void number(printNumber) { ... }      // only output the numbers
}

Implement a multithreaded version of FizzBuzz with four threads. The same 
instance of FizzBuzz will be passed to four different threads:
* Thread A will call fizz() to check for divisibility of 3 and outputs fizz.
* Thread B will call buzz() to check for divisibility of 5 and outputs buzz.
* Thread C will call fizzbuzz() to check for divisibility of 3 and 5 and outputs fizzbuzz.
* Thread D will call number() which should only output the numbers."""

class FizzBuzz:
    def __init__(self, n: int):
        self.n = n
        self.fizzLock = Lock(); self.fizzLock.acquire()
        self.buzzLock = Lock(); self.buzzLock.acquire()
        self.fzbzLock = Lock(); self.fzbzLock.acquire()
        self.numberLock = Lock()

    # printFizz() outputs "fizz"
    def fizz(self, printFizz: 'Callable[[], None]') -> None:
    	while True: 
            self.fizzLock.acquire()
            if self.n == 0: break 
            printFizz()
            self.numberLock.release()

    # printBuzz() outputs "buzz"
    def buzz(self, printBuzz: 'Callable[[], None]') -> None:
    	while True: 
            self.buzzLock.acquire()
            if self.n == 0: break 
            printBuzz()
            self.numberLock.release()

    # printFizzBuzz() outputs "fizzbuzz"
    def fizzbuzz(self, printFizzBuzz: 'Callable[[], None]') -> None:
        while True: 
            self.fzbzLock.acquire()
            if self.n == 0: break  
            printFizzBuzz()
            self.numberLock.release()

    # printNumber(x) outputs "x", where x is an integer.
    def number(self, printNumber: 'Callable[[int], None]') -> None:
        for x in range(1, self.n+1):
            self.numberLock.acquire()
            if x % 15 == 0: 
                self.fzbzLock.release()
            elif x % 3 == 0: 
                self.fizzLock.release()
            elif x % 5 == 0: 
                self.buzzLock.release()
            else: 
                printNumber(x)
                self.numberLock.release()
                
        self.numberLock.acquire()
        self.n = 0 
        self.fizzLock.release()
        self.buzzLock.release()
        self.fzbzLock.release()


"""1206. Design Skiplist (Hard)
Design a Skiplist without using any built-in libraries. A Skiplist is a data 
structure that takes O(log(n)) time to add, erase and search. Comparing with 
treap and red-black tree which has the same function and performance, the code 
length of Skiplist can be comparatively short and the idea behind Skiplists are 
just simple linked lists. For example: we have a Skiplist containing 
[30,40,50,60,70,90] and we want to add 80 and 45 into it. You can see there are 
many layers in the Skiplist. Each layer is a sorted linked list. With the help 
of the top layers, add , erase and search can be faster than O(n). It can be 
proven that the average time complexity for each operation is O(log(n)) and 
space complexity is O(n). To be specific, your design should include these 
functions:
* bool search(int target) : Return whether the target exists in the Skiplist or 
  not.
* void add(int num): Insert a value into the SkipList. 
* bool erase(int num): Remove a value in the Skiplist. If num does not exist in 
  the Skiplist, do nothing and return false. If there exists multiple num 
  values, removing any one of them is fine.
See more about Skiplist : https://en.wikipedia.org/wiki/Skip_list. Note that 
duplicates may exist in the Skiplist, your code needs to handle this situation.

Example:
Skiplist skiplist = new Skiplist();
skiplist.add(1);
skiplist.add(2);
skiplist.add(3);
skiplist.search(0);   // return false.
skiplist.add(4);
skiplist.search(1);   // return true.
skiplist.erase(0);    // return false, 0 is not in skiplist.
skiplist.erase(1);    // return true.
skiplist.search(1);   // return false, 1 has already been erased.

Constraints:
* 0 <= num, target <= 20000
* At most 50000 calls will be made to search, add, and erase."""

class ListNode: 
    def __init__(self, val, cnt=1, next=None, down=None): 
        self.val = val
        self.cnt = cnt
        self.next = next
        self.down = down

        
class Skiplist:

    def __init__(self):
        self.head = ListNode(-inf)
        self.p = 1/4 
            
    def search(self, target: int) -> bool:
        node = self.head 
        while node and node.val < target: 
            if node.next and node.next.val <= target: node = node.next 
            else: node = node.down 
        return node

    def add(self, num: int) -> None:
        node = self.head 
        stack = []
        while node and node.val < num: 
            if node.next and node.next.val <= num: node = node.next 
            else: 
                stack.append(node)
                node = node.down
        if node: 
            while node: 
                node.cnt += 1
                node = node.down 
        else: 
            prev = None
            while True: 
                if stack: 
                    node = stack.pop()
                    node.next = prev = ListNode(num, down=prev, next=node.next)
                else: 
                    self.head = ListNode(-inf, down=self.head)
                    self.head.next = prev = ListNode(num, down=prev)
                if random.random() >= self.p: break 

    def erase(self, num: int) -> bool:
        node = self.head 
        stack = []
        ans = False
        while node: 
            if node.next and node.next.val < num: node = node.next
            else: 
                stack.append(node)
                node = node.down 
        while stack: 
            node = stack.pop()
            if node.next and node.next.val == num: 
                ans = True
                if node.next.cnt > 1: node.next.cnt -= 1
                else: node.next = node.next.next 
            else: break 
        return ans 


"""1226. The Dining Philosophers (Medium)
Five silent philosophers sit at a round table with bowls of spaghetti. Forks 
are placed between each pair of adjacent philosophers. Each philosopher must 
alternately think and eat. However, a philosopher can only eat spaghetti when 
they have both left and right forks. Each fork can be held by only one 
philosopher and so a philosopher can use the fork only if it is not being used 
by another philosopher. After an individual philosopher finishes eating, they 
need to put down both forks so that the forks become available to others. A 
philosopher can take the fork on their right or the one on their left as they 
become available, but cannot start eating before getting both forks. Eating is 
not limited by the remaining amounts of spaghetti or stomach space; an infinite 
supply and an infinite demand are assumed. Design a discipline of behaviour (a 
concurrent algorithm) such that no philosopher will starve; i.e., each can 
forever continue to alternate between eating and thinking, assuming that no 
philosopher can know when others may want to eat or think. The problem 
statement and the image above are taken from wikipedia.org. 

The philosophers' ids are numbered from 0 to 4 in a clockwise order. Implement 
the function void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, 
putLeftFork, putRightFork) where:
* philosopher is the id of the philosopher who wants to eat.
* pickLeftFork and pickRightFork are functions you can call to pick the 
  corresponding forks of that philosopher.
* eat is a function you can call to let the philosopher eat once he has picked 
  both forks.
* putLeftFork and putRightFork are functions you can call to put down the 
  corresponding forks of that philosopher.
* The philosophers are assumed to be thinking as long as they are not asking to 
  eat (the function is not being called with their number).
Five threads, each representing a philosopher, will simultaneously use one 
object of your class to simulate the process. The function may be called for 
the same philosopher more than once, even before the last call ends.

Example 1:
Input: n = 1
Output: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]
Explanation: n is the number of times each philosopher will call the function. 
             The output array describes the calls you made to the functions 
             controlling the forks and the eat function, its format is:
             output[i] = [a, b, c] (three integers)
             - a is the id of a philosopher.
             - b specifies the fork: {1 : left, 2 : right}.
             - c specifies the operation: {1 : pick, 2 : put, 3 : eat}.

Constraints: 1 <= n <= 60"""

class DiningPhilosophers:
    
    def __init__(self):
        self.locks = [Lock() for _ in range(5)]

    # call the functions directly to execute, for example, eat()
    def wantsToEat(self,
                   philosopher: int,
                   pickLeftFork: 'Callable[[], None]',
                   pickRightFork: 'Callable[[], None]',
                   eat: 'Callable[[], None]',
                   putLeftFork: 'Callable[[], None]',
                   putRightFork: 'Callable[[], None]') -> None:
        small, large = min(philosopher, (philosopher + 1) % 5), max(philosopher, (philosopher + 1) % 5)
        with self.locks[small]: 
            with self.locks[large]: 
                pickLeftFork()
                pickRightFork()
                eat()
                putLeftFork()
                putRightFork()


"""1244. Design A Leaderboard (Medium)
Design a Leaderboard class, which has 3 functions:
* addScore(playerId, score): Update the leaderboard by adding score to the 
  given player's score. If there is no player with such id in the leaderboard, 
  add him to the leaderboard with the given score.
* top(K): Return the score sum of the top K players.
* reset(playerId): Reset the score of the player with the given id to 0 (in 
  other words erase it from the leaderboard). It is guaranteed that the player 
  was added to the leaderboard before calling this function.
Initially, the leaderboard is empty.

Example 1:
Input: ["Leaderboard","addScore","addScore","addScore","addScore","addScore","top","reset","reset","addScore","top"]
       [[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]
Output: [null,null,null,null,null,null,73,null,null,null,141]
Explanation: 
Leaderboard leaderboard = new Leaderboard ();
leaderboard.addScore(1,73);   // leaderboard = [[1,73]];
leaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];
leaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];
leaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];
leaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];
leaderboard.top(1);           // returns 73;
leaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];
leaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];
leaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];
leaderboard.top(3);           // returns 141 = 51 + 51 + 39;
 
Constraints:
* 1 <= playerId, K <= 10000
* It's guaranteed that K is less than or equal to the current number of players.
* 1 <= score <= 100
* There will be at most 1000 function calls."""

class Leaderboard:

    def __init__(self):
        self.mp = {}
        self.data = []

    def addScore(self, playerId: int, score: int) -> None:
        if playerId in self.mp: 
            self.data.remove(self.mp[playerId])
            self.mp[playerId] += score 
        else: self.mp[playerId] = score
        insort(self.data, self.mp[playerId])

    def top(self, K: int) -> int:
        return sum(self.data[-K:])

    def reset(self, playerId: int) -> None:
        self.data.remove(self.mp[playerId])
        self.mp.pop(playerId)


"""1357. Apply Discount Every n Orders (Medium)
There is a sale in a supermarket, there will be a discount every n customer. 
There are some products in the supermarket where the id of the i-th product is 
products[i] and the price per unit of this product is prices[i]. The system 
will count the number of customers and when the n-th customer arrive he/she 
will have a discount on the bill. (i.e if the cost is x the new cost is 
x - (discount * x) / 100). Then the system will start counting customers again. 
The customer orders a certain amount of each product where product[i] is the id 
of the i-th product the customer ordered and amount[i] is the number of units 
the customer ordered of that product. Implement the Cashier class:
* Cashier(int n, int discount, int[] products, int[] prices) Initializes the 
  object with n, the discount, the products and their prices.
* double getBill(int[] product, int[] amount) returns the value of the bill and 
  apply the discount if needed. Answers within 10^-5 of the actual value will 
  be accepted as correct.

Example 1:
Input
["Cashier","getBill","getBill","getBill","getBill","getBill","getBill","getBill"]
[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]
Output
[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]
Explanation
Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);
cashier.getBill([1,2],[1,2]);                        // return 500.0, bill = 1 * 100 + 2 * 200 = 500.
cashier.getBill([3,7],[10,10]);                      // return 4000.0
cashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0, The bill was 1600.0 but as this is the third customer, he has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) = 800.
cashier.getBill([4],[10]);                           // return 4000.0
cashier.getBill([7,3],[10,10]);                      // return 4000.0
cashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, Bill was 14700.0 but as the system counted three more customers, he will have a 50% discount and the bill becomes 7350.0
cashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0
 
Constraints:
* 1 <= n <= 10^4
* 0 <= discount <= 100
* 1 <= products.length <= 200
* 1 <= products[i] <= 200
* There are not repeated elements in the array products.
* prices.length == products.length
* 1 <= prices[i] <= 1000
* 1 <= product.length <= products.length
* product[i] exists in products.
* amount.length == product.length
* 1 <= amount[i] <= 1000
* At most 1000 calls will be made to getBill.
* Answers within 10^-5 of the actual value will be accepted as correct."""

class Cashier:

    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):
        self.k = 0 # counter 
        self.n = n
        self.discount = discount
        self.prices = dict(zip(products, prices))

    def getBill(self, product: List[int], amount: List[int]) -> float:
        self.k += 1
        cost = sum(self.prices[i]*amt for i, amt in zip(product, amount))
        if self.k == self.n: 
            cost *= 1 - self.discount/100
            self.k = 0
        return cost 


"""1396. Design Underground System (Medium)
Implement the UndergroundSystem class:
* void checkIn(int id, string stationName, int t)
  + A customer with a card id equal to id, gets in the station stationName at time t.
  + A customer can only be checked into one place at a time.
* void checkOut(int id, string stationName, int t)
  + A customer with a card id equal to id, gets out from the station stationName at time t.
* double getAverageTime(string startStation, string endStation)
  + Returns the average time to travel between the startStation and the endStation.
  + The average time is computed from all the previous traveling from startStation to endStation that happened directly.
  + Call to getAverageTime is always valid.
You can assume all calls to checkIn and checkOut methods are consistent. If a 
customer gets in at time t1 at some station, they get out at time t2 with 
t2 > t1. All events happen in chronological order.

Example 1:
Input: ["UndergroundSystem","checkIn","checkIn","checkIn","checkOut","checkOut","checkOut","getAverageTime","getAverageTime","checkIn","getAverageTime","checkOut","getAverageTime"]
       [[],[45,"Leyton",3],[32,"Paradise",8],[27,"Leyton",10],[45,"Waterloo",15],[27,"Waterloo",20],[32,"Cambridge",22],["Paradise","Cambridge"],["Leyton","Waterloo"],[10,"Leyton",24],["Leyton","Waterloo"],[10,"Waterloo",38],["Leyton","Waterloo"]]
Output: [null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]
Explanation:
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(45, "Leyton", 3);
undergroundSystem.checkIn(32, "Paradise", 8);
undergroundSystem.checkIn(27, "Leyton", 10);
undergroundSystem.checkOut(45, "Waterloo", 15);
undergroundSystem.checkOut(27, "Waterloo", 20);
undergroundSystem.checkOut(32, "Cambridge", 22);
undergroundSystem.getAverageTime("Paradise", "Cambridge");       // return 14.00000. There was only one travel from "Paradise" (at time 8) to "Cambridge" (at time 22)
undergroundSystem.getAverageTime("Leyton", "Waterloo");          // return 11.00000. There were two travels from "Leyton" to "Waterloo", a customer with id=45 from time=3 to time=15 and a customer with id=27 from time=10 to time=20. So the average time is ( (15-3) + (20-10) ) / 2 = 11.00000
undergroundSystem.checkIn(10, "Leyton", 24);
undergroundSystem.getAverageTime("Leyton", "Waterloo");          // return 11.00000
undergroundSystem.checkOut(10, "Waterloo", 38);
undergroundSystem.getAverageTime("Leyton", "Waterloo");          // return 12.00000

Example 2:
Input: ["UndergroundSystem","checkIn","checkOut","getAverageTime","checkIn","checkOut","getAverageTime","checkIn","checkOut","getAverageTime"]
       [[],[10,"Leyton",3],[10,"Paradise",8],["Leyton","Paradise"],[5,"Leyton",10],[5,"Paradise",16],["Leyton","Paradise"],[2,"Leyton",21],[2,"Paradise",30],["Leyton","Paradise"]]
Output: [null,null,null,5.00000,null,null,5.50000,null,null,6.66667]
Explanation:
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(10, "Leyton", 3);
undergroundSystem.checkOut(10, "Paradise", 8);
undergroundSystem.getAverageTime("Leyton", "Paradise"); // return 5.00000
undergroundSystem.checkIn(5, "Leyton", 10);
undergroundSystem.checkOut(5, "Paradise", 16);
undergroundSystem.getAverageTime("Leyton", "Paradise"); // return 5.50000
undergroundSystem.checkIn(2, "Leyton", 21);
undergroundSystem.checkOut(2, "Paradise", 30);
undergroundSystem.getAverageTime("Leyton", "Paradise"); // return 6.66667
 
Constraints:
* There will be at most 20000 operations.
* 1 <= id, t <= 10^6
* All strings consist of uppercase and lowercase English letters, and digits.
* 1 <= stationName.length <= 10
* Answers within 10-5 of the actual value will be accepted as correct."""

class UndergroundSystem:

    def __init__(self):
        self.in_ = {}
        self.out = defaultdict(lambda: defaultdict(lambda: [0, 0]))

    def checkIn(self, id: int, stationName: str, t: int) -> None:
        self.in_[id] = (stationName, t)

    def checkOut(self, id: int, stationName: str, t: int) -> None:
        ss, tt = self.in_[id]
        self.out[stationName][ss][0] += t - tt
        self.out[stationName][ss][1] += 1

    def getAverageTime(self, startStation: str, endStation: str) -> float:
        s, c = self.out[endStation][startStation]
        return s/c 


"""1476. Subrectangle Queries (Medium)
Implement the class SubrectangleQueries which receives a rows x cols rectangle 
as a matrix of integers in the constructor and supports two methods:
1. updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)
  * Updates all values with newValue in the subrectangle whose upper left 
    coordinate is (row1,col1) and bottom right coordinate is (row2,col2).
2. getValue(int row, int col)
  * Returns the current value of the coordinate (row,col) from the rectangle.

Example 1:
Input
["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue","updateSubrectangle","getValue","getValue"]
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
Output
[null,1,null,5,5,null,10,5]
Explanation
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  
// The initial rectangle (4x3) looks like:
// 1 2 1
// 4 3 4
// 3 2 1
// 1 1 1
subrectangleQueries.getValue(0, 2); // return 1
subrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);
// After this update the rectangle looks like:
// 5 5 5
// 5 5 5
// 5 5 5
// 5 5 5 
subrectangleQueries.getValue(0, 2); // return 5
subrectangleQueries.getValue(3, 1); // return 5
subrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);
// After this update the rectangle looks like:
// 5   5   5
// 5   5   5
// 5   5   5
// 10  10  10 
subrectangleQueries.getValue(3, 1); // return 10
subrectangleQueries.getValue(0, 2); // return 5

Example 2:
Input
["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue","updateSubrectangle","getValue"]
[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]
Output
[null,1,null,100,100,null,20]
Explanation
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);
subrectangleQueries.getValue(0, 0); // return 1
subrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);
subrectangleQueries.getValue(0, 0); // return 100
subrectangleQueries.getValue(2, 2); // return 100
subrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);
subrectangleQueries.getValue(2, 2); // return 20
 
Constraints:
* There will be at most 500 operations considering both methods: updateSubrectangle and getValue.
* 1 <= rows, cols <= 100
* rows == rectangle.length
* cols == rectangle[i].length
* 0 <= row1 <= row2 < rows
* 0 <= col1 <= col2 < cols
* 1 <= newValue, rectangle[i][j] <= 10^9
* 0 <= row < rows
* 0 <= col < cols"""

class SubrectangleQueries:

    def __init__(self, rectangle: List[List[int]]):
        self.rectangle = rectangle
        self.ops = []

    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:
        self.ops.append([row1, col1, row2, col2, newValue])

    def getValue(self, row: int, col: int) -> int:
        for r1, c1, r2, c2, val in reversed(self.ops): 
            if r1 <= row <= r2 and c1 <= col <= c2: return val
        return self.rectangle[row][col]


"""1500. Design a File Sharing System (Medium)
We will use a file-sharing system to share a very large file which consists of 
m small chunks with IDs from 1 to m. When users join the system, the system 
should assign a unique ID to them. The unique ID should be used once for each 
user, but when a user leaves the system, the ID can be reused again. Users can 
request a certain chunk of the file, the system should return a list of IDs of 
all the users who own this chunk. If the user receives a non-empty list of IDs, 
they receive the requested chunk successfully.

Implement the FileSharing class:
* FileSharing(int m) Initializes the object with a file of m chunks.
* int join(int[] ownedChunks): A new user joined the system owning some chunks 
  of the file, the system should assign an id to the user which is the smallest 
  positive integer not taken by any other user. Return the assigned id.
* void leave(int userID): The user with userID will leave the system, you 
  cannot take file chunks from them anymore.
* int[] request(int userID, int chunkID): The user userID requested the file 
  chunk with chunkID. Return a list of the IDs of all users that own this chunk 
  sorted in ascending order.

Example:
Input: ["FileSharing","join","join","join","request","request","leave","request","leave","join"]
       [[4],[[1,2]],[[2,3]],[[4]],[1,3],[2,2],[1],[2,1],[2],[[]]]
Output: [null,1,2,3,[2],[1,2],null,[],null,1]
Explanation:
FileSharing fileSharing = new FileSharing(4); // We use the system to share a file of 4 chunks.
fileSharing.join([1, 2]);    // A user who has chunks [1,2] joined the system, assign id = 1 to them and return 1.
fileSharing.join([2, 3]);    // A user who has chunks [2,3] joined the system, assign id = 2 to them and return 2.
fileSharing.join([4]);       // A user who has chunk [4] joined the system, assign id = 3 to them and return 3.
fileSharing.request(1, 3);   // The user with id = 1 requested the third file chunk, as only the user with id = 2 has the file, return [2] . Notice that user 1 now has chunks [1,2,3].
fileSharing.request(2, 2);   // The user with id = 2 requested the second file chunk, users with ids [1,2] have this chunk, thus we return [1,2].
fileSharing.leave(1);        // The user with id = 1 left the system, all the file chunks with them are no longer available for other users.
fileSharing.request(2, 1);   // The user with id = 2 requested the first file chunk, no one in the system has this chunk, we return empty list [].
fileSharing.leave(2);        // The user with id = 2 left the system.
fileSharing.join([]);        // A user who doesn't have any chunks joined the system, assign id = 1 to them and return 1. Notice that ids 1 and 2 are free and we can reuse them.

Constraints:
* 1 <= m <= 10^5
* 0 <= ownedChunks.length <= min(100, m)
* 1 <= ownedChunks[i] <= m
* Values of ownedChunks are unique.
* 1 <= chunkID <= m
* userID is guaranteed to be a user in the system if you assign the IDs 
  correctly.
* At most 10^4 calls will be made to join, leave and request.
* Each call to leave will have a matching call for join.

Follow-up:
* What happens if the system identifies the user by their IP address instead of 
  their unique ID and users disconnect and connect from the system with the 
  same IP?
* If the users in the system join and leave the system frequently without 
  requesting any chunks, will your solution still be efficient?
* If all users join the system one time, request all files, and then leave, 
  will your solution still be efficient?
* If the system will be used to share n files where the ith file consists of 
  m[i], what are the changes you have to make?"""

class FileSharing:

    def __init__(self, m: int):
        self.n = 1
        self.pq = [] # available id's below n (min-heap)
        self.chunks = {} # chunk-to-owner mapping
        self.owners = {} # owner-to-chunk mapping

    def join(self, ownedChunks: List[int]) -> int:
        if self.pq: userID = heappop(self.pq)
        else: 
            userID = self.n
            self.n += 1
        self.owners[userID] = set(ownedChunks)
        for chunkID in ownedChunks: 
            self.chunks.setdefault(chunkID, set()).add(userID)
        return userID

    def leave(self, userID: int) -> None:
        heappush(self.pq, userID)
        for chunkID in self.owners.pop(userID): 
            self.chunks[chunkID].remove(userID)

    def request(self, userID: int, chunkID: int) -> List[int]:
        ans = sorted(self.chunks.get(chunkID, set()))
        if ans: 
            self.chunks[chunkID].add(userID)
            self.owners[userID].add(chunkID)
        return ans 


"""1586. Binary Search Tree Iterator II (Medium)
Implement the BSTIterator class that represents an iterator over the in-order 
traversal of a binary search tree (BST):
* BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. 
  The root of the BST is given as part of the constructor. The pointer should 
  be initialized to a non-existent number smaller than any element in the BST.
* boolean hasNext() Returns true if there exists a number in the traversal to 
  the right of the pointer, otherwise returns false.
* int next() Moves the pointer to the right, then returns the number at the 
  pointer.
* boolean hasPrev() Returns true if there exists a number in the traversal to 
  the left of the pointer, otherwise returns false.
* int prev() Moves the pointer to the left, then returns the number at the 
  pointer.
Notice that by initializing the pointer to a non-existent smallest number, the 
first call to next() will return the smallest element in the BST. You may 
assume that next() and prev() calls will always be valid. That is, there will 
be at least a next/previous number in the in-order traversal when next()/prev() 
is called.

Example 1:
Input: ["BSTIterator", "next", "next", "prev", "next", "hasNext", "next", "next", "next", "hasNext", "hasPrev", "prev", "prev"]
       [[[7, 3, 15, null, null, 9, 20]], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null]]
Output: [null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9]
Explanation: 
// The underlined element is where the pointer currently is.
BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); // state is   [3, 7, 9, 15, 20]
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 3
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7
bSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 3
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7
bSTIterator.hasNext(); // return true
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 9
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 15
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 20
bSTIterator.hasNext(); // return false
bSTIterator.hasPrev(); // return true
bSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 15
bSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 9

Constraints:
* The number of nodes in the tree is in the range [1, 10^5].
* 0 <= Node.val <= 10^6
* At most 105 calls will be made to hasNext, next, hasPrev, and prev.

Follow up: Could you solve the problem without precalculating the values of the 
           tree?"""

class BSTIterator:

    def __init__(self, root: Optional[TreeNode]):
        self.i = -1 
        self.vals = []
        self.stack = []
        while root: 
            self.stack.append(root)
            root = root.left 

    def hasNext(self) -> bool:
        return self.i+1 < len(self.vals) or self.stack

    def next(self) -> int:
        self.i += 1
        if self.i == len(self.vals): 
            node = self.stack.pop()
            self.vals.append(node.val)
            node = node.right 
            while node: 
                self.stack.append(node)
                node = node.left 
        return self.vals[self.i]

    def hasPrev(self) -> bool:
        return 0 <= self.i-1

    def prev(self) -> int:
        self.i -= 1
        return self.vals[self.i]


"""1603. Design Parking System (Easy)
Design a parking system for a parking lot. The parking lot has three kinds of 
parking spaces: big, medium, and small, with a fixed number of slots for each 
size. Implement the ParkingSystem class:
* ParkingSystem(int big, int medium, int small) Initializes object of the 
  ParkingSystem class. The number of slots for each parking space are given as 
  part of the constructor.
* bool addCar(int carType) Checks whether there is a parking space of carType 
  for the car that wants to get into the parking lot. carType can be of three 
  kinds: big, medium, or small, which are represented by 1, 2, and 3 
  respectively. A car can only park in a parking space of its carType. If there 
  is no space available, return false, else park the car in that size space and 
  return true.

Example 1:
Input: ["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]
       [[1, 1, 0], [1], [2], [3], [1]]
Output: [null, true, true, false, false]
Explanation:
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // return true because there is 1 available slot for a big car
parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car
parkingSystem.addCar(3); // return false because there is no available slot for a small car
parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.

Constraints:
* 0 <= big, medium, small <= 1000
* carType is 1, 2, or 3
* At most 1000 calls will be made to addCar"""

class ParkingSystem:

    def __init__(self, big: int, medium: int, small: int):
        self.space = [big, medium, small]

    def addCar(self, carType: int) -> bool:
        self.space[carType-1] -= 1 # space taken 
        return self.space[carType-1] >= 0


"""1622. Fancy Sequence (Hard)
Write an API that generates fancy sequences using the append, addAll, and 
multAll operations. Implement the Fancy class:
* Fancy() Initializes the object with an empty sequence.
* void append(val) Appends an integer val to the end of the sequence.
* void addAll(inc) Increments all existing values in the sequence by an integer 
  inc.
* void multAll(m) Multiplies all existing values in the sequence by an integer 
  m.
* int getIndex(idx) Gets the current value at index idx (0-indexed) of the 
  sequence modulo 109 + 7. If the index is greater or equal than the length of 
  the sequence, return -1.

Example 1:
Input: ["Fancy", "append", "addAll", "append", "multAll", "getIndex", "addAll", "append", "multAll", "getIndex", "getIndex", "getIndex"]
       [[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]
Output: [null, null, null, null, null, 10, null, null, null, 26, 34, 20]
Explanation
Fancy fancy = new Fancy();
fancy.append(2);   // fancy sequence: [2]
fancy.addAll(3);   // fancy sequence: [2+3] -> [5]
fancy.append(7);   // fancy sequence: [5, 7]
fancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]
fancy.getIndex(0); // return 10
fancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]
fancy.append(10);  // fancy sequence: [13, 17, 10]
fancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]
fancy.getIndex(0); // return 26
fancy.getIndex(1); // return 34
fancy.getIndex(2); // return 20

Constraints:
* 1 <= val, inc, m <= 100
* 0 <= idx <= 10^5
* At most 10^5 calls total will be made to append, addAll, multAll, and getIndex."""

class Fancy:
    
    def __init__(self):
        self.data = []
        self.cmul = [1]
        self.csum = [0]
        self.mod = 1_000_000_007

    def append(self, val: int) -> None:
        self.data.append(val)
        self.cmul.append(self.cmul[-1])
        self.csum.append(self.csum[-1])

    def addAll(self, inc: int) -> None:
        self.csum[-1] += inc

    def multAll(self, m: int) -> None:
        self.cmul[-1] = (self.cmul[-1] * m) % self.mod
        self.csum[-1] = (self.csum[-1] * m) % self.mod
        
    def getIndex(self, idx: int) -> int:
        if idx < len(self.data): 
            ratio = self.cmul[-1] * pow(self.cmul[idx], self.mod-2, self.mod) # Fermat's little theorem
            return ((self.data[idx] - self.csum[idx]) * ratio + self.csum[-1]) % self.mod
        return -1 


"""1656. Design an Ordered Stream (Easy)
There are n (id, value) pairs, where id is an integer between 1 and n and value 
is a string. No two pairs have the same id. Design a stream that takes the n 
pairs in an arbitrary order, and returns the values over several calls in 
increasing order of their ids. Implement the OrderedStream class:
* OrderedStream(int n) Constructs the stream to take n values and sets a current 
  ptr to 1.
* String[] insert(int id, String value) Stores the new (id, value) pair in the 
  stream. After storing the pair:
  + If the stream has stored a pair with id = ptr, then find the longest 
    contiguous incrementing sequence of ids starting with id = ptr and return a 
    list of the values associated with those ids in order. Then, update ptr to 
    the last id + 1.
  + Otherwise, return an empty list.

Example:
Input: ["OrderedStream", "insert", "insert", "insert", "insert", "insert"]
       [[5], [3, "ccccc"], [1, "aaaaa"], [2, "bbbbb"], [5, "eeeee"], [4, "ddddd"]]
Output: [null, [], ["aaaaa"], ["bbbbb", "ccccc"], [], ["ddddd", "eeeee"]]
Explanation: 
OrderedStream os= new OrderedStream(5);
os.insert(3, "ccccc"); // Inserts (3, "ccccc"), returns [].
os.insert(1, "aaaaa"); // Inserts (1, "aaaaa"), returns ["aaaaa"].
os.insert(2, "bbbbb"); // Inserts (2, "bbbbb"), returns ["bbbbb", "ccccc"].
os.insert(5, "eeeee"); // Inserts (5, "eeeee"), returns [].
os.insert(4, "ddddd"); // Inserts (4, "ddddd"), returns ["ddddd", "eeeee"].
 
Constraints:
* 1 <= n <= 1000
* 1 <= id <= n
* value.length == 5
* value consists only of lowercase letters.
* Each call to insert will have a unique id.
* Exactly n calls will be made to insert."""

class OrderedStream:

    def __init__(self, n: int):
        self.data = [None]*n
        self.ptr = 0

    def insert(self, id: int, value: str) -> List[str]:
        id -= 1
        self.data[id] = value 
        if id == self.ptr: 
            while self.ptr < len(self.data) and self.data[self.ptr]: self.ptr += 1 # update self.ptr 
        return self.data[id:self.ptr]


"""1670. Design Front Middle Back Queue (Medium)
Design a queue that supports push and pop operations in the front, middle, and 
back. Implement the FrontMiddleBack class:
* FrontMiddleBack() Initializes the queue.
* void pushFront(int val) Adds val to the front of the queue.
* void pushMiddle(int val) Adds val to the middle of the queue.
* void pushBack(int val) Adds val to the back of the queue.
* int popFront() Removes the front element of the queue and returns it. If the 
  queue is empty, return -1.
* int popMiddle() Removes the middle element of the queue and returns it. If 
  the queue is empty, return -1.
* int popBack() Removes the back element of the queue and returns it. If the 
  queue is empty, return -1.
Notice that when there are two middle position choices, the operation is 
performed on the frontmost middle position choice. For example:
* Pushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5].
* Popping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].

Example 1:
Input: ["FrontMiddleBackQueue", "pushFront", "pushBack", "pushMiddle", "pushMiddle", "popFront", "popMiddle", "popMiddle", "popBack", "popFront"]
       [[], [1], [2], [3], [4], [], [], [], [], []]
Output: [null, null, null, null, null, 1, 3, 4, 2, -1]
Explanation:
FrontMiddleBackQueue q = new FrontMiddleBackQueue();
q.pushFront(1);   // [1]
q.pushBack(2);    // [1, 2]
q.pushMiddle(3);  // [1, 3, 2]
q.pushMiddle(4);  // [1, 4, 3, 2]
q.popFront();     // return 1 -> [4, 3, 2]
q.popMiddle();    // return 3 -> [4, 2]
q.popMiddle();    // return 4 -> [2]
q.popBack();      // return 2 -> []
q.popFront();     // return -1 -> [] (The queue is empty)
 
Constraints:
* 1 <= val <= 109
* At most 1000 calls will be made to pushFront, pushMiddle, pushBack, popFront, 
  popMiddle, and popBack."""

class FrontMiddleBackQueue:

    def __init__(self):
        self.d0 = deque()
        self.d1 = deque()
        
    def _balance(self):
        if len(self.d0) > len(self.d1): self.d1.appendleft(self.d0.pop())
        elif len(self.d0) + 1 < len(self.d1): self.d0.append(self.d1.popleft())

    def pushFront(self, val: int) -> None:
        self.d0.appendleft(val)
        self._balance()

    def pushMiddle(self, val: int) -> None:
        self.d0.append(val)
        self._balance()

    def pushBack(self, val: int) -> None:
        self.d1.append(val)
        self._balance()
        
    def popFront(self) -> int:
        if self.d0: 
            ans = self.d0.popleft()
            self._balance()
            return ans 
        elif self.d1: return self.d1.pop()
        else: return -1

    def popMiddle(self) -> int:
        if self.d0 and len(self.d0) == len(self.d1): return self.d0.pop()
        elif self.d1: return self.d1.popleft()
        return -1

    def popBack(self) -> int:
        ans = (self.d1 or [-1]).pop()
        self._balance()
        return ans 


"""1756. Design Most Recently Used Queue (Medium)
Design a queue-like data structure that moves the most recently used element to 
the end of the queue. Implement the MRUQueue class:
* MRUQueue(int n) constructs the MRUQueue with n elements: [1,2,3,...,n].
* fetch(int k) moves the kth element (1-indexed) to the end of the queue and returns it.

Example 1:
Input: ["MRUQueue", "fetch", "fetch", "fetch", "fetch"]
       [[8], [3], [5], [2], [8]]
Output: [null, 3, 6, 2, 2]
Explanation:
MRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to [1,2,3,4,5,6,7,8].
mRUQueue.fetch(3); // Moves the 3rd element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and returns it.
mRUQueue.fetch(5); // Moves the 5th element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and returns it.
mRUQueue.fetch(2); // Moves the 2nd element (2) to the end of the queue to become [1,4,5,7,8,3,6,2] and returns it.
mRUQueue.fetch(8); // The 8th element (2) is already at the end of the queue so just return it.

Constraints:
* 1 <= n <= 2000
* 1 <= k <= n
* At most 2000 calls will be made to fetch.

Follow up: Finding an O(n) algorithm per fetch is a bit easy. Can you find an 
           algorithm with a better complexity for each fetch call?"""

from sortedcontainers import SortedList # balanced BST

class MRUQueue:

    def __init__(self, n: int):
        self.data = SortedList((i, i) for i in range(1, n+1))

    def fetch(self, k: int) -> int:
        _, x = self.data.pop(k-1)
        i = self.data[-1][0] + 1 if self.data else 0
        self.data.add((i, x))
        return x


"""1797. Design Authentication Manager (Medium)
There is an authentication system that works with authentication tokens. For 
each session, the user will receive a new authentication token that will expire 
timeToLive seconds after the currentTime. If the token is renewed, the expiry 
time will be extended to expire timeToLive seconds after the (potentially 
different) currentTime. Implement the AuthenticationManager class:
* AuthenticationManager(int timeToLive) constructs the AuthenticationManager 
  and sets the timeToLive.
* generate(string tokenId, int currentTime) generates a new token with the 
  given tokenId at the given currentTime in seconds.
* renew(string tokenId, int currentTime) renews the unexpired token with the 
  given tokenId at the given currentTime in seconds. If there are no unexpired tokens with the given tokenId, the request is ignored, and nothing happens.
* countUnexpiredTokens(int currentTime) returns the number of unexpired tokens 
  at the given currentTime.
Note that if a token expires at time t, and another action happens on time t 
(renew or countUnexpiredTokens), the expiration takes place before the other 
actions.

Example 1:
Input: ["AuthenticationManager", "renew", "generate", "countUnexpiredTokens", "generate", "renew", "renew", "countUnexpiredTokens"]
       [[5], ["aaa", 1], ["aaa", 2], [6], ["bbb", 7], ["aaa", 8], ["bbb", 10], [15]]
Output: [null, null, null, 1, null, null, null, 0]
Explanation: 
AuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.
authenticationManager.renew("aaa", 1); // No token exists with tokenId "aaa" at time 1, so nothing happens.
authenticationManager.generate("aaa", 2); // Generates a new token with tokenId "aaa" at time 2.
authenticationManager.countUnexpiredTokens(6); // The token with tokenId "aaa" is the only unexpired one at time 6, so return 1.
authenticationManager.generate("bbb", 7); // Generates a new token with tokenId "bbb" at time 7.
authenticationManager.renew("aaa", 8); // The token with tokenId "aaa" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.
authenticationManager.renew("bbb", 10); // The token with tokenId "bbb" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.
authenticationManager.countUnexpiredTokens(15); // The token with tokenId "bbb" expires at time 15, and the token with tokenId "aaa" expired at time 7, so currently no token is unexpired, so return 0.

Constraints:
* 1 <= timeToLive <= 10^8
* 1 <= currentTime <= 10^8
* 1 <= tokenId.length <= 5
* tokenId consists only of lowercase letters.
* All calls to generate will contain unique values of tokenId.
* The values of currentTime across all the function calls will be strictly increasing.
* At most 2000 calls will be made to all functions combined."""

class AuthenticationManager:

    def __init__(self, timeToLive: int):
        self.timeToLive = timeToLive
        self.tokens = {}

    def generate(self, tokenId: str, currentTime: int) -> None:
        self.tokens[tokenId] = currentTime + self.timeToLive

    def renew(self, tokenId: str, currentTime: int) -> None:
        if tokenId in self.tokens and self.tokens[tokenId] > currentTime: 
            self.tokens[tokenId] = currentTime + self.timeToLive

    def countUnexpiredTokens(self, currentTime: int) -> int:
        for token in self.tokens.copy(): 
            if self.tokens[token] <= currentTime: # not expired yet 
                self.tokens.pop(token)
        return len(self.tokens)


"""1825. Finding MK Average (Hard)
You are given two integers, m and k, and a stream of integers. You are tasked 
to implement a data structure that calculates the MKAverage for the stream.
The MKAverage can be calculated using these steps:
* If the number of the elements in the stream is less than m you should 
  consider the MKAverage to be -1. Otherwise, copy the last m elements of the 
  stream to a separate container.
* Remove the smallest k elements and the largest k elements from the container.
* Calculate the average value for the rest of the elements rounded down to the 
  nearest integer.

Implement the MKAverage class:
* MKAverage(int m, int k) Initializes the MKAverage object with an empty stream 
  and the two integers m and k.
* void addElement(int num) Inserts a new element num into the stream.
* int calculateMKAverage() Calculates and returns the MKAverage for the current 
  stream rounded down to the nearest integer.

Example 1:
Input
["MKAverage", "addElement", "addElement", "calculateMKAverage", "addElement", "calculateMKAverage", "addElement", "addElement", "addElement", "calculateMKAverage"]
[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
Output
[null, null, null, -1, null, 3, null, null, null, 5]

Explanation
MKAverage obj = new MKAverage(3, 1); 
obj.addElement(3);        // current elements are [3]
obj.addElement(1);        // current elements are [3,1]
obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.
obj.addElement(10);       // current elements are [3,1,10]
obj.calculateMKAverage(); // The last 3 elements are [3,1,10].
                          // After removing smallest and largest 1 element the container will be [3].
                          // The average of [3] equals 3/1 = 3, return 3
obj.addElement(5);        // current elements are [3,1,10,5]
obj.addElement(5);        // current elements are [3,1,10,5,5]
obj.addElement(5);        // current elements are [3,1,10,5,5,5]
obj.calculateMKAverage(); // The last 3 elements are [5,5,5].
                          // After removing smallest and largest 1 element the container will be [5].
                          // The average of [5] equals 5/1 = 5, return 5

Constraints:
* 3 <= m <= 10^5
* 1 <= k*2 < m
* 1 <= num <= 10^5
* At most 10^5 calls will be made to addElement and calculateMKAverage."""

"""
class Fenwick: 

    def __init__(self, n: int):
        self.nums = [0]*(n+1)

    def sum(self, k: int) -> int: 
        k += 1
        ans = 0
        while k:
            ans += self.nums[k]
            k &= k-1 # unset last set bit 
        return ans

    def add(self, k: int, x: int) -> None: 
        k += 1
        while k < len(self.nums): 
            self.nums[k] += x
            k += k & -k 
"""

class MKAverage:

    def __init__(self, m: int, k: int):
        self.m = m
        self.k = k 
        self.data = deque()
        self.value = Fenwick(10**5+1)
        self.index = Fenwick(10**5+1)

    def addElement(self, num: int) -> None:
        self.data.append(num)
        self.value.add(num, num)
        self.index.add(num, 1)
        if len(self.data) > self.m: 
            num = self.data.popleft()
            self.value.add(num, -num)
            self.index.add(num, -1)

    def _getindex(self, k): 
        lo, hi = 0, 10**5 + 1
        while lo < hi: 
            mid = lo + hi >> 1
            if self.index.sum(mid) < k: lo = mid + 1
            else: hi = mid
        return lo 
            
    def calculateMKAverage(self) -> int:
        if len(self.data) < self.m: return -1 
        lo = self._getindex(self.k)
        hi = self._getindex(self.m-self.k)
        ans = self.value.sum(hi) - self.value.sum(lo)
        ans += (self.index.sum(lo) - self.k) * lo
        ans -= (self.index.sum(hi) - (self.m-self.k)) * hi
        return ans // (self.m - 2*self.k)


"""1845. Seat Reservation Manager (Medium)
Design a system that manages the reservation state of n seats that are numbered 
from 1 to n. Implement the SeatManager class:
* SeatManager(int n) Initializes a SeatManager object that will manage n seats 
  numbered from 1 to n. All seats are initially available.
* int reserve() Fetches the smallest-numbered unreserved seat, reserves it, and 
  returns its number.
* void unreserve(int seatNumber) Unreserves the seat with the given seatNumber.

Example 1:
Input: ["SeatManager", "reserve", "reserve", "unreserve", "reserve", "reserve", "reserve", "reserve", "unreserve"]
       [[5], [], [], [2], [], [], [], [], [5]]
Output: [null, 1, 2, null, 2, 3, 4, 5, null]
Explanation: 
SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.
seatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.
seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.
seatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].
seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.
seatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.
seatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.
seatManager.reserve();    // The only available seat is seat 5, so return 5.
seatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].
 
Constraints:
* 1 <= n <= 10^5
* 1 <= seatNumber <= n
* For each call to reserve, it is guaranteed that there will be at least one unreserved seat.
* For each call to unreserve, it is guaranteed that seatNumber will be reserved.
* At most 10^5 calls in total will be made to reserve and unreserve."""

class SeatManager:

    def __init__(self, n: int):
        self.pq = list(range(1, n+1))

    def reserve(self) -> int:
        return heappop(self.pq)

    def unreserve(self, seatNumber: int) -> None:
        heappush(self.pq, seatNumber)


"""1865. Finding Pairs With a Certain Sum (Medium)
You are given two integer arrays nums1 and nums2. You are tasked to implement a 
data structure that supports queries of two types:
* Add a positive integer to an element of a given index in the array nums2.
* Count the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given 
  value (0 <= i < nums1.length and 0 <= j < nums2.length).

Implement the FindSumPairs class:
* FindSumPairs(int[] nums1, int[] nums2) Initializes the FindSumPairs object 
  with two integer arrays nums1 and nums2.
* void add(int index, int val) Adds val to nums2[index], i.e., apply 
  nums2[index] += val.
* int count(int tot) Returns the number of pairs (i, j) such that 
  nums1[i] + nums2[j] == tot.

Example 1:
Input: ["FindSumPairs", "count", "add", "count", "count", "add", "add", "count"]
       [[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]
Output: [null, 8, null, 2, 1, null, null, 11]
Explanation:
FindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);
findSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4
findSumPairs.add(3, 2); // now nums2 = [1,4,5,4,5,4]
findSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5
findSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1
findSumPairs.add(0, 1); // now nums2 = [2,4,5,4,5,4]
findSumPairs.add(1, 1); // now nums2 = [2,5,5,4,5,4]
findSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4

Constraints:
* 1 <= nums1.length <= 1000
* 1 <= nums2.length <= 10^5
* 1 <= nums1[i] <= 10^9
* 1 <= nums2[i] <= 10^5
* 0 <= index < nums2.length
* 1 <= val <= 10^5
* 1 <= tot <= 10^9
* At most 1000 calls are made to add and count each."""

class FindSumPairs:

    def __init__(self, nums1: List[int], nums2: List[int]):
        self.nums1 = nums1
        self.nums2 = nums2
        
        self.freq = defaultdict(int)
        for x in nums2: self.freq[x] += 1

    def add(self, index: int, val: int) -> None:
        self.freq[self.nums2[index]] -= 1
        self.nums2[index] += val
        self.freq[self.nums2[index]] += 1

    def count(self, tot: int) -> int:
        ans = 0 
        for x in self.nums1: 
            ans += self.freq[tot - x]
        return ans 


"""1912. Design Movie Rental System (Hard)
You have a movie renting company consisting of n shops. You want to implement a 
renting system that supports searching for, booking, and returning movies. The 
system should also support generating a report of the currently rented movies.
Each movie is given as a 2D integer array entries where 
entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie 
moviei at shop shopi with a rental price of pricei. Each shop carries at most 
one copy of a movie moviei. The system should support the following functions:
* Search: Finds the cheapest 5 shops that have an unrented copy of a given movie. 
  The shops should be sorted by price in ascending order, and in case of a tie, 
  the one with the smaller shopi should appear first. If there are less than 5 
  matching shops, then all of them should be returned. If no shop has an 
  unrented copy, then an empty list should be returned.
* Rent: Rents an unrented copy of a given movie from a given shop.
* Drop: Drops off a previously rented copy of a given movie at a given shop.
* Report: Returns the cheapest 5 rented movies (possibly of the same movie ID) 
  as a 2D list res where res[j] = [shopj, moviej] describes that the jth 
  cheapest rented movie moviej was rented from the shop shopj. The movies in 
  res should be sorted by price in ascending order, and in case of a tie, the 
  one with the smaller shopj should appear first, and if there is still tie, 
  the one with the smaller moviej should appear first. If there are fewer than 
  5 rented movies, then all of them should be returned. If no movies are 
  currently being rented, then an empty list should be returned.

Implement the MovieRentingSystem class:
* MovieRentingSystem(int n, int[][] entries) Initializes the MovieRentingSystem 
  object with n shops and the movies in entries.
* List<Integer> search(int movie) Returns a list of shops that have an unrented 
  copy of the given movie as described above.
* void rent(int shop, int movie) Rents the given movie from the given shop.
* void drop(int shop, int movie) Drops off a previously rented movie at the 
  given shop.
* List<List<Integer>> report() Returns a list of cheapest rented movies as 
  described above.
Note: The test cases will be generated such that rent will only be called if 
the shop has an unrented copy of the movie, and drop will only be called if the 
shop had previously rented out the movie.

Example 1:
Input: ["MovieRentingSystem", "search", "rent", "rent", "report", "drop", "search"]
       [[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]
Output: [null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]
Explanation: 
MovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);
movieRentingSystem.search(1);  // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.
movieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].
movieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].
movieRentingSystem.report();   // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.
movieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].
movieRentingSystem.search(2);  // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1.

Constraints:
* 1 <= n <= 3 * 10^5
* 1 <= entries.length <= 10^5
* 0 <= shopi < n
* 1 <= moviei, pricei <= 10^4
* Each shop carries at most one copy of a movie moviei.
* At most 105 calls in total will be made to search, rent, drop and report."""

class MovieRentingSystem:

    def __init__(self, n: int, entries: List[List[int]]):
        self.avail = {}
        self.price = {}
        for shop, movie, price in entries: 
            self.price[shop, movie] = price 
            self.avail.setdefault(movie, SortedList()).add((price, shop))
        self.rented = SortedList()

        
    def search(self, movie: int) -> List[int]:
        return [x for _, x in self.avail.get(movie, [])[:5]]
        

    def rent(self, shop: int, movie: int) -> None:
        price = self.price[shop, movie]
        self.avail[movie].remove((price, shop))
        self.rented.add((price, shop, movie))

    def drop(self, shop: int, movie: int) -> None:
        price = self.price[shop, movie]
        self.avail[movie].add((price, shop))
        self.rented.remove((price, shop, movie))

    def report(self) -> List[List[int]]:
        return [[x, y] for _, x, y in self.rented[:5]]


"""1993. Operations on Tree (Medium)
You are given a tree with n nodes numbered from 0 to n - 1 in the form of a 
parent array parent where parent[i] is the parent of the ith node. The root of 
the tree is node 0, so parent[0] = -1 since it has no parent. You want to 
design a data structure that allows users to lock, unlock, and upgrade nodes in 
the tree. The data structure should support the following functions:
* Lock: Locks the given node for the given user and prevents other users from 
  locking the same node. You may only lock a node if the node is unlocked.
* Unlock: Unlocks the given node for the given user. You may only unlock a node 
  if it is currently locked by the same user.
* Upgrade: Locks the given node for the given user and unlocks all of its 
  descendants. You may only upgrade a node if all 3 conditions are true:
  + The node is unlocked,
  + It has at least one locked descendant (by any user), and
  + It does not have any locked ancestors.

Implement the LockingTree class:
* LockingTree(int[] parent) initializes the data structure with the parent 
  array.
* lock(int num, int user) returns true if it is possible for the user with id 
  user to lock the node num, or false otherwise. If it is possible, the node 
  num will become locked by the user with id user.
* unlock(int num, int user) returns true if it is possible for the user with id 
  user to unlock the node num, or false otherwise. If it is possible, the node 
  num will become unlocked.
* upgrade(int num, int user) returns true if it is possible for the user with 
  id user to upgrade the node num, or false otherwise. If it is possible, the 
  node num will be upgraded.

Example 1:
Input: ["LockingTree", "lock", "unlock", "unlock", "lock", "upgrade", "lock"]
       [[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]]
Output: [null, true, false, true, true, true, false]
Explanation: 
LockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]);
lockingTree.lock(2, 2);    // return true because node 2 is unlocked.
                           // Node 2 will now be locked by user 2.
lockingTree.unlock(2, 3);  // return false because user 3 cannot unlock a node locked by user 2.
lockingTree.unlock(2, 2);  // return true because node 2 was previously locked by user 2.
                           // Node 2 will now be unlocked.
lockingTree.lock(4, 5);    // return true because node 4 is unlocked.
                           // Node 4 will now be locked by user 5.
lockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).
                           // Node 0 will now be locked by user 1 and node 4 will now be unlocked.
lockingTree.lock(0, 1);    // return false because node 0 is already locked.

Constraints:
* n == parent.length
* 2 <= n <= 2000
* 0 <= parent[i] <= n - 1 for i != 0
* parent[0] == -1
* 0 <= num <= n - 1
* 1 <= user <= 104
* parent represents a valid tree.
* At most 2000 calls in total will be made to lock, unlock, and upgrade."""

class LockingTree:

    def __init__(self, parent: List[int]):
        self.parent = parent
        self.tree = [[] for _ in parent]
        for i, x in enumerate(parent): 
            if x != -1: self.tree[x].append(i)
        self.locked = {}

    def lock(self, num: int, user: int) -> bool:
        if num in self.locked: return False 
        self.locked[num] = user
        return True 

    def unlock(self, num: int, user: int) -> bool:
        if self.locked.get(num) != user: return False 
        self.locked.pop(num)
        return True 

    def upgrade(self, num: int, user: int) -> bool:
        if num in self.locked: return False # check for unlocked
        
        node = num
        while node != -1: 
            if node in self.locked: break # locked ancestor
            node = self.parent[node]
        else: 
            stack = [num]
            descendant = []
            while stack: 
                node = stack.pop()
                if node in self.locked: descendant.append(node)
                for child in self.tree[node]: stack.append(child)
            if descendant: 
                self.locked[num] = user # lock given node 
                for node in descendant: self.locked.pop(node) # unlock all descendants
                return True 
        return False # locked ancestor 


"""2013. Detect Squares (Medium)
You are given a stream of points on the X-Y plane. Design an algorithm that:
* Adds new points from the stream into a data structure. Duplicate points are 
  allowed and should be treated as different points.
* Given a query point, counts the number of ways to choose three points from 
  the data structure such that the three points and the query point form an 
  axis-aligned square with positive area.
An axis-aligned square is a square whose edges are all the same length and are 
either parallel or perpendicular to the x-axis and y-axis.

Implement the DetectSquares class:
* DetectSquares() Initializes the object with an empty data structure.
* void add(int[] point) Adds a new point point = [x, y] to the data structure.
* int count(int[] point) Counts the number of ways to form axis-aligned squares 
  with point point = [x, y] as described above.

Example 1:
Input: ["DetectSquares", "add", "add", "add", "count", "count", "add", "count"]
       [[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]
Output: [null, null, null, null, 1, 0, null, 2]
Explanation: 
DetectSquares detectSquares = new DetectSquares();
detectSquares.add([3, 10]);
detectSquares.add([11, 2]);
detectSquares.add([3, 2]);
detectSquares.count([11, 10]); // return 1. You can choose:
                               //   - The first, second, and third points
detectSquares.count([14, 8]);  // return 0. The query point cannot form a 
                               // square with any points in the data structure.
detectSquares.add([11, 2]);    // Adding duplicate points is allowed.
detectSquares.count([11, 10]); // return 2. You can choose:
                               //   - The first, second, and third points
                               //   - The first, third, and fourth points

Constraints:
* point.length == 2
* 0 <= x, y <= 1000
* At most 5000 calls in total will be made to add and count."""

class DetectSquares:

    def __init__(self):
        self.freq = {}

    def add(self, point: List[int]) -> None:
        point = tuple(point)
        self.freq[point] = 1 + self.freq.get(point, 0)

    def count(self, point: List[int]) -> int:
        ans = 0 
        x, y = point
        for xx, yy in self.freq: 
            if xx != x and abs(x-xx) == abs(y-yy): 
                ans += self.freq[xx, yy] * self.freq.get((xx, y), 0) * self.freq.get((x, yy), 0)
        return ans 


"""2034. Stock Price Fluctuation (Medium)
You are given a stream of records about a particular stock. Each record 
contains a timestamp and the corresponding price of the stock at that timestamp.
Unfortunately due to the volatile nature of the stock market, the records do 
not come in order. Even worse, some records may be incorrect. Another record 
with the same timestamp may appear later in the stream correcting the price of 
the previous wrong record. Design an algorithm that:
* Updates the price of the stock at a particular timestamp, correcting the 
  price from any previous records at the timestamp.
* Finds the latest price of the stock based on the current records. The latest 
  price is the price at the latest timestamp recorded.
* Finds the maximum price the stock has been based on the current records.
* Finds the minimum price the stock has been based on the current records.

Implement the StockPrice class:
* StockPrice() Initializes the object with no price records.
* void update(int timestamp, int price) Updates the price of the stock at the 
  given timestamp.
* int current() Returns the latest price of the stock.
* int maximum() Returns the maximum price of the stock.
* int minimum() Returns the minimum price of the stock.

Example 1:
Input: ["StockPrice", "update", "update", "current", "maximum", "update", "maximum", "update", "minimum"]
       [[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]
Output: [null, null, null, 5, 10, null, 5, null, 2]
Explanation: 
StockPrice stockPrice = new StockPrice();
stockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10].
stockPrice.update(2, 5);  // Timestamps are [1,2] with corresponding prices [10,5].
stockPrice.current();     // return 5, the latest timestamp is 2 with the price being 5.
stockPrice.maximum();     // return 10, the maximum price is 10 at timestamp 1.
stockPrice.update(1, 3);  // The previous timestamp 1 had the wrong price, so it is updated to 3.
                          // Timestamps are [1,2] with corresponding prices [3,5].
stockPrice.maximum();     // return 5, the maximum price is 5 after the correction.
stockPrice.update(4, 2);  // Timestamps are [1,2,4] with corresponding prices [3,5,2].
stockPrice.minimum();     // return 2, the minimum price is 2 at timestamp 4.

Constraints:
* 1 <= timestamp, price <= 10^9
* At most 10^5 calls will be made in total to update, current, maximum, and 
  minimum.
* current, maximum, and minimum will be called only after update has been 
  called at least once."""

class StockPrice:

    def __init__(self):
        self.mp = {}
        self.maxp = [] # max-heap 
        self.minp = [] # min-heap 
        self.latest = 0 # latest timestamp

    def update(self, timestamp: int, price: int) -> None:
        self.mp[timestamp] = price 
        if self.latest <= timestamp: self.latest = timestamp
        heappush(self.maxp, (-price, timestamp))
        heappush(self.minp, (price, timestamp))

    def current(self) -> int:
        return self.mp[self.latest]

    def maximum(self) -> int:
        while self.mp[self.maxp[0][1]] != -self.maxp[0][0]: heappop(self.maxp)
        return -self.maxp[0][0]

    def minimum(self) -> int:
        while self.mp[self.minp[0][1]] != self.minp[0][0]: heappop(self.minp)
        return self.minp[0][0]


"""2043. Simple Bank System (Medium)
You have been tasked with writing a program for a popular bank that will 
automate all its incoming transactions (transfer, deposit, and withdraw). The 
bank has n accounts numbered from 1 to n. The initial balance of each account 
is stored in a 0-indexed integer array balance, with the (i + 1)th account 
having an initial balance of balance[i]. Execute all the valid transactions. A 
transaction is valid if:
* The given account number(s) are between 1 and n, and
* The amount of money withdrawn or transferred from is less than or equal to 
  the balance of the account.

Implement the Bank class:
* Bank(long[] balance) Initializes the object with the 0-indexed integer array 
  balance.
* boolean transfer(int account1, int account2, long money) Transfers money 
  dollars from the account numbered account1 to the account numbered account2. 
  Return true if the transaction was successful, false otherwise.
* boolean deposit(int account, long money) Deposit money dollars into the 
  account numbered account. Return true if the transaction was successful, 
  false otherwise.
* boolean withdraw(int account, long money) Withdraw money dollars from the 
  account numbered account. Return true if the transaction was successful, 
  false otherwise.

Example 1:
Input: ["Bank", "withdraw", "transfer", "deposit", "transfer", "withdraw"]
       [[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]
Output: [null, true, true, true, false, false]
Explanation
Bank bank = new Bank([10, 100, 20, 50, 30]);
bank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.
                         // Account 3 has $20 - $10 = $10.
bank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.
                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.
bank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.
                         // Account 5 has $10 + $20 = $30.
bank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,
                         // so it is invalid to transfer $15 from it.
bank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist.
 
Constraints:
* n == balance.length
* 1 <= n, account, account1, account2 <= 10^5
* 0 <= balance[i], money <= 10^12
* At most 10^4 calls will be made to each function transfer, deposit, withdraw."""

class Bank:

    def __init__(self, balance: List[int]):
        self.balance = balance

    def transfer(self, account1: int, account2: int, money: int) -> bool:
        if self.withdraw(account1, money): 
            if self.deposit(account2, money): return True 
            self.deposit(account1, money)

    def deposit(self, account: int, money: int) -> bool:
        if 1 <= account <= len(self.balance): 
            self.balance[account-1] += money
            return True 
        
    def withdraw(self, account: int, money: int) -> bool:
        if 1 <= account <= len(self.balance) and self.balance[account-1] >= money: 
            self.balance[account-1] -= money
            return True 